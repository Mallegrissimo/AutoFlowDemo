!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/index.ts")}({"./node_modules/d3-array/src/array.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/array.js ***!
  \********************************************/
/*! exports provided: slice, map */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return o})),n.d(t,"map",(function(){return u}));var r=Array.prototype,o=r.slice,u=r.map},"./node_modules/d3-array/src/ascending.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/ascending.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}},"./node_modules/d3-array/src/bisect.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/bisect.js ***!
  \*********************************************/
/*! exports provided: bisectRight, bisectLeft, default */function(e,t,n){"use strict";n.r(t),n.d(t,"bisectRight",(function(){return i})),n.d(t,"bisectLeft",(function(){return s}));var r=n(/*! ./ascending */"./node_modules/d3-array/src/ascending.js"),o=n(/*! ./bisector */"./node_modules/d3-array/src/bisector.js"),u=Object(o.default)(r.default),i=u.right,s=u.left;t.default=i},"./node_modules/d3-array/src/bisector.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/bisector.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./ascending */"./node_modules/d3-array/src/ascending.js");t.default=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return Object(r.default)(t(e),n)}),{left:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var u=r+o>>>1;e(t[u],n)<0?r=u+1:o=u}return r},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var u=r+o>>>1;e(t[u],n)>0?o=u:r=u+1}return r}}}},"./node_modules/d3-array/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-array/src/cross.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/cross.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./pairs */"./node_modules/d3-array/src/pairs.js");t.default=function(e,t,n){var o,u,i,s,a=e.length,c=t.length,d=new Array(a*c);for(null==n&&(n=r.pair),o=i=0;o<a;++o)for(s=e[o],u=0;u<c;++u,++i)d[i]=n(s,t[u]);return d}},"./node_modules/d3-array/src/descending.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-array/src/descending.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},"./node_modules/d3-array/src/deviation.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/deviation.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./variance */"./node_modules/d3-array/src/variance.js");t.default=function(e,t){var n=Object(r.default)(e,t);return n?Math.sqrt(n):n}},"./node_modules/d3-array/src/extent.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/extent.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o,u=e.length,i=-1;if(null==t){for(;++i<u;)if(null!=(n=e[i])&&n>=n)for(r=o=n;++i<u;)null!=(n=e[i])&&(r>n&&(r=n),o<n&&(o=n))}else for(;++i<u;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=o=n;++i<u;)null!=(n=t(e[i],i,e))&&(r>n&&(r=n),o<n&&(o=n));return[r,o]}},"./node_modules/d3-array/src/histogram.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/histogram.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./array */"./node_modules/d3-array/src/array.js"),o=n(/*! ./bisect */"./node_modules/d3-array/src/bisect.js"),u=n(/*! ./constant */"./node_modules/d3-array/src/constant.js"),i=n(/*! ./extent */"./node_modules/d3-array/src/extent.js"),s=n(/*! ./identity */"./node_modules/d3-array/src/identity.js"),a=n(/*! ./range */"./node_modules/d3-array/src/range.js"),c=n(/*! ./ticks */"./node_modules/d3-array/src/ticks.js"),d=n(/*! ./threshold/sturges */"./node_modules/d3-array/src/threshold/sturges.js");t.default=function(){var e=s.default,t=i.default,n=d.default;function l(r){var u,i,s=r.length,d=new Array(s);for(u=0;u<s;++u)d[u]=e(r[u],u,r);var l=t(d),f=l[0],h=l[1],m=n(d,f,h);Array.isArray(m)||(m=Object(c.tickStep)(f,h,m),m=Object(a.default)(Math.ceil(f/m)*m,h,m));for(var p=m.length;m[0]<=f;)m.shift(),--p;for(;m[p-1]>h;)m.pop(),--p;var _,g=new Array(p+1);for(u=0;u<=p;++u)(_=g[u]=[]).x0=u>0?m[u-1]:f,_.x1=u<p?m[u]:h;for(u=0;u<s;++u)f<=(i=d[u])&&i<=h&&g[Object(o.default)(m,i,0,p)].push(r[u]);return g}return l.value=function(t){return arguments.length?(e="function"==typeof t?t:Object(u.default)(t),l):e},l.domain=function(e){return arguments.length?(t="function"==typeof e?e:Object(u.default)([e[0],e[1]]),l):t},l.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?Object(u.default)(r.slice.call(e)):Object(u.default)(e),l):n},l}},"./node_modules/d3-array/src/identity.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/identity.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-array/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/index.js ***!
  \********************************************/
/*! exports provided: bisect, bisectRight, bisectLeft, ascending, bisector, cross, descending, deviation, extent, histogram, thresholdFreedmanDiaconis, thresholdScott, thresholdSturges, max, mean, median, merge, min, pairs, permute, quantile, range, scan, shuffle, sum, ticks, tickIncrement, tickStep, transpose, variance, zip */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./bisect */"./node_modules/d3-array/src/bisect.js");n.d(t,"bisect",(function(){return r.default})),n.d(t,"bisectRight",(function(){return r.bisectRight})),n.d(t,"bisectLeft",(function(){return r.bisectLeft}));var o=n(/*! ./ascending */"./node_modules/d3-array/src/ascending.js");n.d(t,"ascending",(function(){return o.default}));var u=n(/*! ./bisector */"./node_modules/d3-array/src/bisector.js");n.d(t,"bisector",(function(){return u.default}));var i=n(/*! ./cross */"./node_modules/d3-array/src/cross.js");n.d(t,"cross",(function(){return i.default}));var s=n(/*! ./descending */"./node_modules/d3-array/src/descending.js");n.d(t,"descending",(function(){return s.default}));var a=n(/*! ./deviation */"./node_modules/d3-array/src/deviation.js");n.d(t,"deviation",(function(){return a.default}));var c=n(/*! ./extent */"./node_modules/d3-array/src/extent.js");n.d(t,"extent",(function(){return c.default}));var d=n(/*! ./histogram */"./node_modules/d3-array/src/histogram.js");n.d(t,"histogram",(function(){return d.default}));var l=n(/*! ./threshold/freedmanDiaconis */"./node_modules/d3-array/src/threshold/freedmanDiaconis.js");n.d(t,"thresholdFreedmanDiaconis",(function(){return l.default}));var f=n(/*! ./threshold/scott */"./node_modules/d3-array/src/threshold/scott.js");n.d(t,"thresholdScott",(function(){return f.default}));var h=n(/*! ./threshold/sturges */"./node_modules/d3-array/src/threshold/sturges.js");n.d(t,"thresholdSturges",(function(){return h.default}));var m=n(/*! ./max */"./node_modules/d3-array/src/max.js");n.d(t,"max",(function(){return m.default}));var p=n(/*! ./mean */"./node_modules/d3-array/src/mean.js");n.d(t,"mean",(function(){return p.default}));var _=n(/*! ./median */"./node_modules/d3-array/src/median.js");n.d(t,"median",(function(){return _.default}));var g=n(/*! ./merge */"./node_modules/d3-array/src/merge.js");n.d(t,"merge",(function(){return g.default}));var v=n(/*! ./min */"./node_modules/d3-array/src/min.js");n.d(t,"min",(function(){return v.default}));var j=n(/*! ./pairs */"./node_modules/d3-array/src/pairs.js");n.d(t,"pairs",(function(){return j.default}));var b=n(/*! ./permute */"./node_modules/d3-array/src/permute.js");n.d(t,"permute",(function(){return b.default}));var y=n(/*! ./quantile */"./node_modules/d3-array/src/quantile.js");n.d(t,"quantile",(function(){return y.default}));var x=n(/*! ./range */"./node_modules/d3-array/src/range.js");n.d(t,"range",(function(){return x.default}));var w=n(/*! ./scan */"./node_modules/d3-array/src/scan.js");n.d(t,"scan",(function(){return w.default}));var O=n(/*! ./shuffle */"./node_modules/d3-array/src/shuffle.js");n.d(t,"shuffle",(function(){return O.default}));var M=n(/*! ./sum */"./node_modules/d3-array/src/sum.js");n.d(t,"sum",(function(){return M.default}));var S=n(/*! ./ticks */"./node_modules/d3-array/src/ticks.js");n.d(t,"ticks",(function(){return S.default})),n.d(t,"tickIncrement",(function(){return S.tickIncrement})),n.d(t,"tickStep",(function(){return S.tickStep}));var E=n(/*! ./transpose */"./node_modules/d3-array/src/transpose.js");n.d(t,"transpose",(function(){return E.default}));var k=n(/*! ./variance */"./node_modules/d3-array/src/variance.js");n.d(t,"variance",(function(){return k.default}));var C=n(/*! ./zip */"./node_modules/d3-array/src/zip.js");n.d(t,"zip",(function(){return C.default}))},"./node_modules/d3-array/src/max.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/max.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o=e.length,u=-1;if(null==t){for(;++u<o;)if(null!=(n=e[u])&&n>=n)for(r=n;++u<o;)null!=(n=e[u])&&n>r&&(r=n)}else for(;++u<o;)if(null!=(n=t(e[u],u,e))&&n>=n)for(r=n;++u<o;)null!=(n=t(e[u],u,e))&&n>r&&(r=n);return r}},"./node_modules/d3-array/src/mean.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-array/src/mean.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./number */"./node_modules/d3-array/src/number.js");t.default=function(e,t){var n,o=e.length,u=o,i=-1,s=0;if(null==t)for(;++i<o;)isNaN(n=Object(r.default)(e[i]))?--u:s+=n;else for(;++i<o;)isNaN(n=Object(r.default)(t(e[i],i,e)))?--u:s+=n;if(u)return s/u}},"./node_modules/d3-array/src/median.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/median.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./ascending */"./node_modules/d3-array/src/ascending.js"),o=n(/*! ./number */"./node_modules/d3-array/src/number.js"),u=n(/*! ./quantile */"./node_modules/d3-array/src/quantile.js");t.default=function(e,t){var n,i=e.length,s=-1,a=[];if(null==t)for(;++s<i;)isNaN(n=Object(o.default)(e[s]))||a.push(n);else for(;++s<i;)isNaN(n=Object(o.default)(t(e[s],s,e)))||a.push(n);return Object(u.default)(a.sort(r.default),.5)}},"./node_modules/d3-array/src/merge.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/merge.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r,o=e.length,u=-1,i=0;++u<o;)i+=e[u].length;for(n=new Array(i);--o>=0;)for(t=(r=e[o]).length;--t>=0;)n[--i]=r[t];return n}},"./node_modules/d3-array/src/min.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/min.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o=e.length,u=-1;if(null==t){for(;++u<o;)if(null!=(n=e[u])&&n>=n)for(r=n;++u<o;)null!=(n=e[u])&&r>n&&(r=n)}else for(;++u<o;)if(null!=(n=t(e[u],u,e))&&n>=n)for(r=n;++u<o;)null!=(n=t(e[u],u,e))&&r>n&&(r=n);return r}},"./node_modules/d3-array/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/number.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return null===e?NaN:+e}},"./node_modules/d3-array/src/pairs.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/pairs.js ***!
  \********************************************/
/*! exports provided: default, pair */function(e,t,n){"use strict";function r(e,t){return[e,t]}n.r(t),n.d(t,"pair",(function(){return r})),t.default=function(e,t){null==t&&(t=r);for(var n=0,o=e.length-1,u=e[0],i=new Array(o<0?0:o);n<o;)i[n]=t(u,u=e[++n]);return i}},"./node_modules/d3-array/src/permute.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-array/src/permute.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r}},"./node_modules/d3-array/src/quantile.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/quantile.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./number */"./node_modules/d3-array/src/number.js");t.default=function(e,t,n){if(null==n&&(n=r.default),o=e.length){if((t=+t)<=0||o<2)return+n(e[0],0,e);if(t>=1)return+n(e[o-1],o-1,e);var o,u=(o-1)*t,i=Math.floor(u),s=+n(e[i],i,e);return s+(+n(e[i+1],i+1,e)-s)*(u-i)}}},"./node_modules/d3-array/src/range.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/range.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){e=+e,t=+t,n=(o=arguments.length)<2?(t=e,e=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((t-e)/n)),u=new Array(o);++r<o;)u[r]=e+r*n;return u}},"./node_modules/d3-array/src/scan.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-array/src/scan.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./ascending */"./node_modules/d3-array/src/ascending.js");t.default=function(e,t){if(n=e.length){var n,o,u=0,i=0,s=e[i];for(null==t&&(t=r.default);++u<n;)(t(o=e[u],s)<0||0!==t(s,s))&&(s=o,i=u);return 0===t(s,s)?i:void 0}}},"./node_modules/d3-array/src/shuffle.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-array/src/shuffle.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){for(var r,o,u=(null==n?e.length:n)-(t=null==t?0:+t);u;)o=Math.random()*u--|0,r=e[u+t],e[u+t]=e[o+t],e[o+t]=r;return e}},"./node_modules/d3-array/src/sum.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/sum.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r=e.length,o=-1,u=0;if(null==t)for(;++o<r;)(n=+e[o])&&(u+=n);else for(;++o<r;)(n=+t(e[o],o,e))&&(u+=n);return u}},"./node_modules/d3-array/src/threshold/freedmanDiaconis.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-array/src/threshold/freedmanDiaconis.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../array */"./node_modules/d3-array/src/array.js"),o=n(/*! ../ascending */"./node_modules/d3-array/src/ascending.js"),u=n(/*! ../number */"./node_modules/d3-array/src/number.js"),i=n(/*! ../quantile */"./node_modules/d3-array/src/quantile.js");t.default=function(e,t,n){return e=r.map.call(e,u.default).sort(o.default),Math.ceil((n-t)/(2*(Object(i.default)(e,.75)-Object(i.default)(e,.25))*Math.pow(e.length,-1/3)))}},"./node_modules/d3-array/src/threshold/scott.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-array/src/threshold/scott.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../deviation */"./node_modules/d3-array/src/deviation.js");t.default=function(e,t,n){return Math.ceil((n-t)/(3.5*Object(r.default)(e)*Math.pow(e.length,-1/3)))}},"./node_modules/d3-array/src/threshold/sturges.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-array/src/threshold/sturges.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1}},"./node_modules/d3-array/src/ticks.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/ticks.js ***!
  \********************************************/
/*! exports provided: default, tickIncrement, tickStep */function(e,t,n){"use strict";n.r(t),n.d(t,"tickIncrement",(function(){return i})),n.d(t,"tickStep",(function(){return s}));var r=Math.sqrt(50),o=Math.sqrt(10),u=Math.sqrt(2);function i(e,t,n){var i=(t-e)/Math.max(0,n),s=Math.floor(Math.log(i)/Math.LN10),a=i/Math.pow(10,s);return s>=0?(a>=r?10:a>=o?5:a>=u?2:1)*Math.pow(10,s):-Math.pow(10,-s)/(a>=r?10:a>=o?5:a>=u?2:1)}function s(e,t,n){var i=Math.abs(t-e)/Math.max(0,n),s=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),a=i/s;return a>=r?s*=10:a>=o?s*=5:a>=u&&(s*=2),t<e?-s:s}t.default=function(e,t,n){var r,o,u,s,a=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(o=e,e=t,t=o),0===(s=i(e,t,n))||!isFinite(s))return[];if(s>0)for(e=Math.ceil(e/s),t=Math.floor(t/s),u=new Array(o=Math.ceil(t-e+1));++a<o;)u[a]=(e+a)*s;else for(e=Math.floor(e*s),t=Math.ceil(t*s),u=new Array(o=Math.ceil(e-t+1));++a<o;)u[a]=(e-a)/s;return r&&u.reverse(),u}},"./node_modules/d3-array/src/transpose.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/transpose.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./min */"./node_modules/d3-array/src/min.js");function o(e){return e.length}t.default=function(e){if(!(i=e.length))return[];for(var t=-1,n=Object(r.default)(e,o),u=new Array(n);++t<n;)for(var i,s=-1,a=u[t]=new Array(i);++s<i;)a[s]=e[s][t];return u}},"./node_modules/d3-array/src/variance.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/variance.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./number */"./node_modules/d3-array/src/number.js");t.default=function(e,t){var n,o,u=e.length,i=0,s=-1,a=0,c=0;if(null==t)for(;++s<u;)isNaN(n=Object(r.default)(e[s]))||(c+=(o=n-a)*(n-(a+=o/++i)));else for(;++s<u;)isNaN(n=Object(r.default)(t(e[s],s,e)))||(c+=(o=n-a)*(n-(a+=o/++i)));if(i>1)return c/(i-1)}},"./node_modules/d3-array/src/zip.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/zip.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./transpose */"./node_modules/d3-array/src/transpose.js");t.default=function(){return Object(r.default)(arguments)}},"./node_modules/d3-axis/src/array.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-axis/src/array.js ***!
  \*******************************************/
/*! exports provided: slice */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-axis/src/axis.js":
/*!******************************************!*\
  !*** ./node_modules/d3-axis/src/axis.js ***!
  \******************************************/
/*! exports provided: axisTop, axisRight, axisBottom, axisLeft */function(e,t,n){"use strict";n.r(t),n.d(t,"axisTop",(function(){return l})),n.d(t,"axisRight",(function(){return f})),n.d(t,"axisBottom",(function(){return h})),n.d(t,"axisLeft",(function(){return m}));var r=n(/*! ./array */"./node_modules/d3-axis/src/array.js"),o=n(/*! ./identity */"./node_modules/d3-axis/src/identity.js");function u(e){return"translate("+(e+.5)+",0)"}function i(e){return"translate(0,"+(e+.5)+")"}function s(e){return function(t){return+e(t)}}function a(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function c(){return!this.__axis}function d(e,t){var n=[],d=null,l=null,f=6,h=6,m=3,p=1===e||4===e?-1:1,_=4===e||2===e?"x":"y",g=1===e||3===e?u:i;function v(r){var u=null==d?t.ticks?t.ticks.apply(t,n):t.domain():d,i=null==l?t.tickFormat?t.tickFormat.apply(t,n):o.default:l,v=Math.max(f,0)+m,j=t.range(),b=+j[0]+.5,y=+j[j.length-1]+.5,x=(t.bandwidth?a:s)(t.copy()),w=r.selection?r.selection():r,O=w.selectAll(".domain").data([null]),M=w.selectAll(".tick").data(u,t).order(),S=M.exit(),E=M.enter().append("g").attr("class","tick"),k=M.select("line"),C=M.select("text");O=O.merge(O.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),M=M.merge(E),k=k.merge(E.append("line").attr("stroke","currentColor").attr(_+"2",p*f)),C=C.merge(E.append("text").attr("fill","currentColor").attr(_,p*v).attr("dy",1===e?"0em":3===e?"0.71em":"0.32em")),r!==w&&(O=O.transition(r),M=M.transition(r),k=k.transition(r),C=C.transition(r),S=S.transition(r).attr("opacity",1e-6).attr("transform",(function(e){return isFinite(e=x(e))?g(e):this.getAttribute("transform")})),E.attr("opacity",1e-6).attr("transform",(function(e){var t=this.parentNode.__axis;return g(t&&isFinite(t=t(e))?t:x(e))}))),S.remove(),O.attr("d",4===e||2==e?h?"M"+p*h+","+b+"H0.5V"+y+"H"+p*h:"M0.5,"+b+"V"+y:h?"M"+b+","+p*h+"V0.5H"+y+"V"+p*h:"M"+b+",0.5H"+y),M.attr("opacity",1).attr("transform",(function(e){return g(x(e))})),k.attr(_+"2",p*f),C.attr(_,p*v).text(i),w.filter(c).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===e?"start":4===e?"end":"middle"),w.each((function(){this.__axis=x}))}return v.scale=function(e){return arguments.length?(t=e,v):t},v.ticks=function(){return n=r.slice.call(arguments),v},v.tickArguments=function(e){return arguments.length?(n=null==e?[]:r.slice.call(e),v):n.slice()},v.tickValues=function(e){return arguments.length?(d=null==e?null:r.slice.call(e),v):d&&d.slice()},v.tickFormat=function(e){return arguments.length?(l=e,v):l},v.tickSize=function(e){return arguments.length?(f=h=+e,v):f},v.tickSizeInner=function(e){return arguments.length?(f=+e,v):f},v.tickSizeOuter=function(e){return arguments.length?(h=+e,v):h},v.tickPadding=function(e){return arguments.length?(m=+e,v):m},v}function l(e){return d(1,e)}function f(e){return d(2,e)}function h(e){return d(3,e)}function m(e){return d(4,e)}},"./node_modules/d3-axis/src/identity.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-axis/src/identity.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-axis/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-axis/src/index.js ***!
  \*******************************************/
/*! exports provided: axisTop, axisRight, axisBottom, axisLeft */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./axis */"./node_modules/d3-axis/src/axis.js");n.d(t,"axisTop",(function(){return r.axisTop})),n.d(t,"axisRight",(function(){return r.axisRight})),n.d(t,"axisBottom",(function(){return r.axisBottom})),n.d(t,"axisLeft",(function(){return r.axisLeft}))},"./node_modules/d3-brush/src/brush.js":
/*!********************************************!*\
  !*** ./node_modules/d3-brush/src/brush.js ***!
  \********************************************/
/*! exports provided: brushSelection, brushX, brushY, default */function(e,t,n){"use strict";n.r(t),n.d(t,"brushSelection",(function(){return R})),n.d(t,"brushX",(function(){return N})),n.d(t,"brushY",(function(){return P}));var r=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js"),o=n(/*! d3-drag */"./node_modules/d3-drag/src/index.js"),u=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),i=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),s=n(/*! d3-transition */"./node_modules/d3-transition/src/index.js"),a=n(/*! ./constant.js */"./node_modules/d3-brush/src/constant.js"),c=n(/*! ./event.js */"./node_modules/d3-brush/src/event.js"),d=n(/*! ./noevent.js */"./node_modules/d3-brush/src/noevent.js"),l={name:"drag"},f={name:"space"},h={name:"handle"},m={name:"center"};function p(e){return[+e[0],+e[1]]}function _(e){return[p(e[0]),p(e[1])]}function g(e){return function(t){return Object(i.touch)(t,i.event.touches,e)}}var v={name:"x",handles:["w","e"].map(S),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},j={name:"y",handles:["n","s"].map(S),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},b={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(S),input:function(e){return null==e?null:_(e)},output:function(e){return e}},y={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},x={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},w={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},O={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},M={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function S(e){return{type:e}}function E(){return!i.event.ctrlKey&&!i.event.button}function k(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function C(){return navigator.maxTouchPoints||"ontouchstart"in this}function A(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function T(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function R(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function N(){return I(v)}function P(){return I(j)}function I(e){var t,n=k,p=E,b=C,R=!0,N=Object(r.dispatch)("start","brush","end"),P=6;function I(t){var n=t.property("__brush",G).selectAll(".overlay").data([S("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",y.overlay).merge(n).each((function(){var e=A(this).extent;Object(i.select)(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([S("selection")]).enter().append("rect").attr("class","selection").attr("cursor",y.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return y[e.type]})),t.each(q).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",L).filter(b).on("touchstart.brush",L).on("touchmove.brush",z).on("touchend.brush touchcancel.brush",D).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function q(){var e=Object(i.select)(this),t=A(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-P/2:t[0][0]-P/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-P/2:t[0][1]-P/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+P:P})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+P:P}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function B(e,t,n){return!n&&e.__brush.emitter||new F(e,t)}function F(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function L(){if((!t||i.event.touches)&&p.apply(this,arguments)){var n,r,u,a,c,_,b,S,E,k,C,N=this,P=i.event.target.__data__.type,I="selection"===(R&&i.event.metaKey?P="overlay":P)?l:R&&i.event.altKey?m:h,F=e===j?null:O[P],L=e===v?null:M[P],z=A(N),D=z.extent,G=z.selection,U=D[0][0],Y=D[0][1],H=D[1][0],W=D[1][1],V=0,$=0,X=F&&L&&R&&i.event.shiftKey,K=i.event.touches?g(i.event.changedTouches[0].identifier):i.mouse,Z=K(N),Q=Z,J=B(N,arguments,!0).beforestart();"overlay"===P?(G&&(E=!0),z.selection=G=[[n=e===j?U:Z[0],u=e===v?Y:Z[1]],[c=e===j?H:n,b=e===v?W:u]]):(n=G[0][0],u=G[0][1],c=G[1][0],b=G[1][1]),r=n,a=u,_=c,S=b;var ee=Object(i.select)(N).attr("pointer-events","none"),te=ee.selectAll(".overlay").attr("cursor",y[P]);if(i.event.touches)J.moved=re,J.ended=ue;else{var ne=Object(i.select)(i.event.view).on("mousemove.brush",re,!0).on("mouseup.brush",ue,!0);R&&ne.on("keydown.brush",ie,!0).on("keyup.brush",se,!0),Object(o.dragDisable)(i.event.view)}Object(d.nopropagation)(),Object(s.interrupt)(N),q.call(N),J.start()}function re(){var e=K(N);!X||k||C||(Math.abs(e[0]-Q[0])>Math.abs(e[1]-Q[1])?C=!0:k=!0),Q=e,E=!0,Object(d.default)(),oe()}function oe(){var e;switch(V=Q[0]-Z[0],$=Q[1]-Z[1],I){case f:case l:F&&(V=Math.max(U-n,Math.min(H-c,V)),r=n+V,_=c+V),L&&($=Math.max(Y-u,Math.min(W-b,$)),a=u+$,S=b+$);break;case h:F<0?(V=Math.max(U-n,Math.min(H-n,V)),r=n+V,_=c):F>0&&(V=Math.max(U-c,Math.min(H-c,V)),r=n,_=c+V),L<0?($=Math.max(Y-u,Math.min(W-u,$)),a=u+$,S=b):L>0&&($=Math.max(Y-b,Math.min(W-b,$)),a=u,S=b+$);break;case m:F&&(r=Math.max(U,Math.min(H,n-V*F)),_=Math.max(U,Math.min(H,c+V*F))),L&&(a=Math.max(Y,Math.min(W,u-$*L)),S=Math.max(Y,Math.min(W,b+$*L)))}_<r&&(F*=-1,e=n,n=c,c=e,e=r,r=_,_=e,P in x&&te.attr("cursor",y[P=x[P]])),S<a&&(L*=-1,e=u,u=b,b=e,e=a,a=S,S=e,P in w&&te.attr("cursor",y[P=w[P]])),z.selection&&(G=z.selection),k&&(r=G[0][0],_=G[1][0]),C&&(a=G[0][1],S=G[1][1]),G[0][0]===r&&G[0][1]===a&&G[1][0]===_&&G[1][1]===S||(z.selection=[[r,a],[_,S]],q.call(N),J.brush())}function ue(){if(Object(d.nopropagation)(),i.event.touches){if(i.event.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Object(o.dragEnable)(i.event.view,E),ne.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);ee.attr("pointer-events","all"),te.attr("cursor",y.overlay),z.selection&&(G=z.selection),T(G)&&(z.selection=null,q.call(N)),J.end()}function ie(){switch(i.event.keyCode){case 16:X=F&&L;break;case 18:I===h&&(F&&(c=_-V*F,n=r+V*F),L&&(b=S-$*L,u=a+$*L),I=m,oe());break;case 32:I!==h&&I!==m||(F<0?c=_-V:F>0&&(n=r-V),L<0?b=S-$:L>0&&(u=a-$),I=f,te.attr("cursor",y.selection),oe());break;default:return}Object(d.default)()}function se(){switch(i.event.keyCode){case 16:X&&(k=C=X=!1,oe());break;case 18:I===m&&(F<0?c=_:F>0&&(n=r),L<0?b=S:L>0&&(u=a),I=h,oe());break;case 32:I===f&&(i.event.altKey?(F&&(c=_-V*F,n=r+V*F),L&&(b=S-$*L,u=a+$*L),I=m):(F<0?c=_:F>0&&(n=r),L<0?b=S:L>0&&(u=a),I=h),te.attr("cursor",y[P]),oe());break;default:return}Object(d.default)()}}function z(){B(this,arguments).moved()}function D(){B(this,arguments).ended()}function G(){var t=this.__brush||{selection:null};return t.extent=_(n.apply(this,arguments)),t.dim=e,t}return I.move=function(t,n){t.selection?t.on("start.brush",(function(){B(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){B(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,o=B(t,arguments),i=r.selection,s=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),a=Object(u.interpolate)(i,s);function c(e){r.selection=1===e&&null===s?null:a(e),q.call(t),o.brush()}return null!==i&&null!==s?c:c(1)})):t.each((function(){var t=this,r=arguments,o=t.__brush,u=e.input("function"==typeof n?n.apply(t,r):n,o.extent),i=B(t,r).beforestart();Object(s.interrupt)(t),o.selection=null===u?null:u,q.call(t),i.start().brush().end()}))},I.clear=function(e){I.move(e,null)},F.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){Object(i.customEvent)(new c.default(I,t,e.output(this.state.selection)),N.apply,N,[t,this.that,this.args])}},I.extent=function(e){return arguments.length?(n="function"==typeof e?e:Object(a.default)(_(e)),I):n},I.filter=function(e){return arguments.length?(p="function"==typeof e?e:Object(a.default)(!!e),I):p},I.touchable=function(e){return arguments.length?(b="function"==typeof e?e:Object(a.default)(!!e),I):b},I.handleSize=function(e){return arguments.length?(P=+e,I):P},I.keyModifiers=function(e){return arguments.length?(R=!!e,I):R},I.on=function(){var e=N.on.apply(N,arguments);return e===N?I:e},I}t.default=function(){return I(b)}},"./node_modules/d3-brush/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-brush/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-brush/src/event.js":
/*!********************************************!*\
  !*** ./node_modules/d3-brush/src/event.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){this.target=e,this.type=t,this.selection=n}},"./node_modules/d3-brush/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-brush/src/index.js ***!
  \********************************************/
/*! exports provided: brush, brushX, brushY, brushSelection */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./brush.js */"./node_modules/d3-brush/src/brush.js");n.d(t,"brush",(function(){return r.default})),n.d(t,"brushX",(function(){return r.brushX})),n.d(t,"brushY",(function(){return r.brushY})),n.d(t,"brushSelection",(function(){return r.brushSelection}))},"./node_modules/d3-brush/src/noevent.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-brush/src/noevent.js ***!
  \**********************************************/
/*! exports provided: nopropagation, default */function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-chord/src/array.js":
/*!********************************************!*\
  !*** ./node_modules/d3-chord/src/array.js ***!
  \********************************************/
/*! exports provided: slice */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-chord/src/chord.js":
/*!********************************************!*\
  !*** ./node_modules/d3-chord/src/chord.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./math */"./node_modules/d3-chord/src/math.js");function u(e){return function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)}}t.default=function(){var e=0,t=null,n=null,i=null;function s(u){var s,a,c,d,l,f,h=u.length,m=[],p=Object(r.range)(h),_=[],g=[],v=g.groups=new Array(h),j=new Array(h*h);for(s=0,l=-1;++l<h;){for(a=0,f=-1;++f<h;)a+=u[l][f];m.push(a),_.push(Object(r.range)(h)),s+=a}for(t&&p.sort((function(e,n){return t(m[e],m[n])})),n&&_.forEach((function(e,t){e.sort((function(e,r){return n(u[t][e],u[t][r])}))})),d=(s=Object(o.max)(0,o.tau-e*h)/s)?e:o.tau/h,a=0,l=-1;++l<h;){for(c=a,f=-1;++f<h;){var b=p[l],y=_[b][f],x=u[b][y],w=a,O=a+=x*s;j[y*h+b]={index:b,subindex:y,startAngle:w,endAngle:O,value:x}}v[b]={index:b,startAngle:c,endAngle:a,value:m[b]},a+=d}for(l=-1;++l<h;)for(f=l-1;++f<h;){var M=j[f*h+l],S=j[l*h+f];(M.value||S.value)&&g.push(M.value<S.value?{source:S,target:M}:{source:M,target:S})}return i?g.sort(i):g}return s.padAngle=function(t){return arguments.length?(e=Object(o.max)(0,t),s):e},s.sortGroups=function(e){return arguments.length?(t=e,s):t},s.sortSubgroups=function(e){return arguments.length?(n=e,s):n},s.sortChords=function(e){return arguments.length?(null==e?i=null:(i=u(e))._=e,s):i&&i._},s}},"./node_modules/d3-chord/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-chord/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-chord/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-chord/src/index.js ***!
  \********************************************/
/*! exports provided: chord, ribbon */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./chord */"./node_modules/d3-chord/src/chord.js");n.d(t,"chord",(function(){return r.default}));var o=n(/*! ./ribbon */"./node_modules/d3-chord/src/ribbon.js");n.d(t,"ribbon",(function(){return o.default}))},"./node_modules/d3-chord/src/math.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-chord/src/math.js ***!
  \*******************************************/
/*! exports provided: cos, sin, pi, halfPi, tau, max */function(e,t,n){"use strict";n.r(t),n.d(t,"cos",(function(){return r})),n.d(t,"sin",(function(){return o})),n.d(t,"pi",(function(){return u})),n.d(t,"halfPi",(function(){return i})),n.d(t,"tau",(function(){return s})),n.d(t,"max",(function(){return a}));var r=Math.cos,o=Math.sin,u=Math.PI,i=u/2,s=2*u,a=Math.max},"./node_modules/d3-chord/src/ribbon.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-chord/src/ribbon.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./array */"./node_modules/d3-chord/src/array.js"),o=n(/*! ./constant */"./node_modules/d3-chord/src/constant.js"),u=n(/*! ./math */"./node_modules/d3-chord/src/math.js"),i=n(/*! d3-path */"./node_modules/d3-path/src/index.js");function s(e){return e.source}function a(e){return e.target}function c(e){return e.radius}function d(e){return e.startAngle}function l(e){return e.endAngle}t.default=function(){var e=s,t=a,n=c,f=d,h=l,m=null;function p(){var o,s=r.slice.call(arguments),a=e.apply(this,s),c=t.apply(this,s),d=+n.apply(this,(s[0]=a,s)),l=f.apply(this,s)-u.halfPi,p=h.apply(this,s)-u.halfPi,_=d*Object(u.cos)(l),g=d*Object(u.sin)(l),v=+n.apply(this,(s[0]=c,s)),j=f.apply(this,s)-u.halfPi,b=h.apply(this,s)-u.halfPi;if(m||(m=o=Object(i.path)()),m.moveTo(_,g),m.arc(0,0,d,l,p),l===j&&p===b||(m.quadraticCurveTo(0,0,v*Object(u.cos)(j),v*Object(u.sin)(j)),m.arc(0,0,v,j,b)),m.quadraticCurveTo(0,0,_,g),m.closePath(),o)return m=null,o+""||null}return p.radius=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),p):n},p.startAngle=function(e){return arguments.length?(f="function"==typeof e?e:Object(o.default)(+e),p):f},p.endAngle=function(e){return arguments.length?(h="function"==typeof e?e:Object(o.default)(+e),p):h},p.source=function(t){return arguments.length?(e=t,p):e},p.target=function(e){return arguments.length?(t=e,p):t},p.context=function(e){return arguments.length?(m=null==e?null:e,p):m},p}},"./node_modules/d3-collection/src/entries.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-collection/src/entries.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t}},"./node_modules/d3-collection/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-collection/src/index.js ***!
  \*************************************************/
/*! exports provided: nest, set, map, keys, values, entries */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./nest */"./node_modules/d3-collection/src/nest.js");n.d(t,"nest",(function(){return r.default}));var o=n(/*! ./set */"./node_modules/d3-collection/src/set.js");n.d(t,"set",(function(){return o.default}));var u=n(/*! ./map */"./node_modules/d3-collection/src/map.js");n.d(t,"map",(function(){return u.default}));var i=n(/*! ./keys */"./node_modules/d3-collection/src/keys.js");n.d(t,"keys",(function(){return i.default}));var s=n(/*! ./values */"./node_modules/d3-collection/src/values.js");n.d(t,"values",(function(){return s.default}));var a=n(/*! ./entries */"./node_modules/d3-collection/src/entries.js");n.d(t,"entries",(function(){return a.default}))},"./node_modules/d3-collection/src/keys.js":
/*!************************************************!*\
  !*** ./node_modules/d3-collection/src/keys.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push(n);return t}},"./node_modules/d3-collection/src/map.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-collection/src/map.js ***!
  \***********************************************/
/*! exports provided: prefix, default */function(e,t,n){"use strict";n.r(t),n.d(t,"prefix",(function(){return r}));var r="$";function o(){}function u(e,t){var n=new o;if(e instanceof o)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,u=-1,i=e.length;if(null==t)for(;++u<i;)n.set(u,e[u]);else for(;++u<i;)n.set(t(r=e[u],u,e),r)}else if(e)for(var s in e)n.set(s,e[s]);return n}o.prototype=u.prototype={constructor:o,has:function(e){return r+e in this},get:function(e){return this[r+e]},set:function(e,t){return this[r+e]=t,this},remove:function(e){var t=r+e;return t in this&&delete this[t]},clear:function(){for(var e in this)e[0]===r&&delete this[e]},keys:function(){var e=[];for(var t in this)t[0]===r&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)t[0]===r&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)t[0]===r&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)t[0]===r&&++e;return e},empty:function(){for(var e in this)if(e[0]===r)return!1;return!0},each:function(e){for(var t in this)t[0]===r&&e(this[t],t.slice(1),this)}},t.default=u},"./node_modules/d3-collection/src/nest.js":
/*!************************************************!*\
  !*** ./node_modules/d3-collection/src/nest.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./map */"./node_modules/d3-collection/src/map.js");function o(){return{}}function u(e,t,n){e[t]=n}function i(){return Object(r.default)()}function s(e,t,n){e.set(t,n)}t.default=function(){var e,t,n,a=[],c=[];function d(n,o,u,i){if(o>=a.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var s,c,l,f=-1,h=n.length,m=a[o++],p=Object(r.default)(),_=u();++f<h;)(l=p.get(s=m(c=n[f])+""))?l.push(c):p.set(s,[c]);return p.each((function(e,t){i(_,t,d(e,o,u,i))})),_}return n={object:function(e){return d(e,0,o,u)},map:function(e){return d(e,0,i,s)},entries:function(e){return function e(n,r){if(++r>a.length)return n;var o,u=c[r-1];return null!=t&&r>=a.length?o=n.entries():(o=[],n.each((function(t,n){o.push({key:n,values:e(t,r)})}))),null!=u?o.sort((function(e,t){return u(e.key,t.key)})):o}(d(e,0,i,s),0)},key:function(e){return a.push(e),n},sortKeys:function(e){return c[a.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}}},"./node_modules/d3-collection/src/set.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-collection/src/set.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./map */"./node_modules/d3-collection/src/map.js");function o(){}var u=r.default.prototype;function i(e,t){var n=new o;if(e instanceof o)e.each((function(e){n.add(e)}));else if(e){var r=-1,u=e.length;if(null==t)for(;++r<u;)n.add(e[r]);else for(;++r<u;)n.add(t(e[r],r,e))}return n}o.prototype=i.prototype={constructor:o,has:u.has,add:function(e){return e+="",this[r.prefix+e]=e,this},remove:u.remove,clear:u.clear,values:u.keys,size:u.size,empty:u.empty,each:u.each},t.default=i},"./node_modules/d3-collection/src/values.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-collection/src/values.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push(e[n]);return t}},"./node_modules/d3-color/src/color.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/color.js ***!
  \********************************************/
/*! exports provided: Color, darker, brighter, default, rgbConvert, rgb, Rgb, hslConvert, hsl */function(e,t,n){"use strict";n.r(t),n.d(t,"Color",(function(){return o})),n.d(t,"darker",(function(){return u})),n.d(t,"brighter",(function(){return i})),n.d(t,"default",(function(){return b})),n.d(t,"rgbConvert",(function(){return w})),n.d(t,"rgb",(function(){return O})),n.d(t,"Rgb",(function(){return M})),n.d(t,"hslConvert",(function(){return A})),n.d(t,"hsl",(function(){return T}));var r=n(/*! ./define.js */"./node_modules/d3-color/src/define.js");function o(){}var u=.7,i=1/u,s="\\s*([+-]?\\d+)\\s*",a="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",c="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",d=/^#([0-9a-f]{3,8})$/,l=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),f=new RegExp("^rgb\\("+[c,c,c]+"\\)$"),h=new RegExp("^rgba\\("+[s,s,s,a]+"\\)$"),m=new RegExp("^rgba\\("+[c,c,c,a]+"\\)$"),p=new RegExp("^hsl\\("+[a,c,c]+"\\)$"),_=new RegExp("^hsla\\("+[a,c,c,a]+"\\)$"),g={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function v(){return this.rgb().formatHex()}function j(){return this.rgb().formatRgb()}function b(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=d.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?y(t):3===n?new M(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?x(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?x(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=l.exec(e))?new M(t[1],t[2],t[3],1):(t=f.exec(e))?new M(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=h.exec(e))?x(t[1],t[2],t[3],t[4]):(t=m.exec(e))?x(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=p.exec(e))?C(t[1],t[2]/100,t[3]/100,1):(t=_.exec(e))?C(t[1],t[2]/100,t[3]/100,t[4]):g.hasOwnProperty(e)?y(g[e]):"transparent"===e?new M(NaN,NaN,NaN,0):null}function y(e){return new M(e>>16&255,e>>8&255,255&e,1)}function x(e,t,n,r){return r<=0&&(e=t=n=NaN),new M(e,t,n,r)}function w(e){return e instanceof o||(e=b(e)),e?new M((e=e.rgb()).r,e.g,e.b,e.opacity):new M}function O(e,t,n,r){return 1===arguments.length?w(e):new M(e,t,n,null==r?1:r)}function M(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function S(){return"#"+k(this.r)+k(this.g)+k(this.b)}function E(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function k(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function C(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new R(e,t,n,r)}function A(e){if(e instanceof R)return new R(e.h,e.s,e.l,e.opacity);if(e instanceof o||(e=b(e)),!e)return new R;if(e instanceof R)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,u=Math.min(t,n,r),i=Math.max(t,n,r),s=NaN,a=i-u,c=(i+u)/2;return a?(s=t===i?(n-r)/a+6*(n<r):n===i?(r-t)/a+2:(t-n)/a+4,a/=c<.5?i+u:2-i-u,s*=60):a=c>0&&c<1?0:s,new R(s,a,c,e.opacity)}function T(e,t,n,r){return 1===arguments.length?A(e):new R(e,t,n,null==r?1:r)}function R(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function N(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Object(r.default)(o,b,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:v,formatHex:v,formatHsl:function(){return A(this).formatHsl()},formatRgb:j,toString:j}),Object(r.default)(M,O,Object(r.extend)(o,{brighter:function(e){return e=null==e?i:Math.pow(i,e),new M(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?u:Math.pow(u,e),new M(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:S,formatHex:S,formatRgb:E,toString:E})),Object(r.default)(R,T,Object(r.extend)(o,{brighter:function(e){return e=null==e?i:Math.pow(i,e),new R(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?u:Math.pow(u,e),new R(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new M(N(e>=240?e-240:e+120,o,r),N(e,o,r),N(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}))},"./node_modules/d3-color/src/cubehelix.js":
/*!************************************************!*\
  !*** ./node_modules/d3-color/src/cubehelix.js ***!
  \************************************************/
/*! exports provided: default, Cubehelix */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p})),n.d(t,"Cubehelix",(function(){return _}));var r=n(/*! ./define.js */"./node_modules/d3-color/src/define.js"),o=n(/*! ./color.js */"./node_modules/d3-color/src/color.js"),u=n(/*! ./math.js */"./node_modules/d3-color/src/math.js"),i=-.14861,s=1.78277,a=-.29227,c=-.90649,d=1.97294,l=d*c,f=d*s,h=s*a-c*i;function m(e){if(e instanceof _)return new _(e.h,e.s,e.l,e.opacity);e instanceof o.Rgb||(e=Object(o.rgbConvert)(e));var t=e.r/255,n=e.g/255,r=e.b/255,i=(h*r+l*t-f*n)/(h+l-f),s=r-i,m=(d*(n-i)-a*s)/c,p=Math.sqrt(m*m+s*s)/(d*i*(1-i)),g=p?Math.atan2(m,s)*u.rad2deg-120:NaN;return new _(g<0?g+360:g,p,i,e.opacity)}function p(e,t,n,r){return 1===arguments.length?m(e):new _(e,t,n,null==r?1:r)}function _(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Object(r.default)(_,p,Object(r.extend)(o.Color,{brighter:function(e){return e=null==e?o.brighter:Math.pow(o.brighter,e),new _(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?o.darker:Math.pow(o.darker,e),new _(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*u.deg2rad,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),l=Math.sin(e);return new o.Rgb(255*(t+n*(i*r+s*l)),255*(t+n*(a*r+c*l)),255*(t+n*(d*r)),this.opacity)}}))},"./node_modules/d3-color/src/define.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-color/src/define.js ***!
  \*********************************************/
/*! exports provided: default, extend */function(e,t,n){"use strict";function r(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}n.r(t),n.d(t,"extend",(function(){return r})),t.default=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e}},"./node_modules/d3-color/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/index.js ***!
  \********************************************/
/*! exports provided: color, rgb, hsl, lab, hcl, lch, gray, cubehelix */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./color.js */"./node_modules/d3-color/src/color.js");n.d(t,"color",(function(){return r.default})),n.d(t,"rgb",(function(){return r.rgb})),n.d(t,"hsl",(function(){return r.hsl}));var o=n(/*! ./lab.js */"./node_modules/d3-color/src/lab.js");n.d(t,"lab",(function(){return o.default})),n.d(t,"hcl",(function(){return o.hcl})),n.d(t,"lch",(function(){return o.lch})),n.d(t,"gray",(function(){return o.gray}));var u=n(/*! ./cubehelix.js */"./node_modules/d3-color/src/cubehelix.js");n.d(t,"cubehelix",(function(){return u.default}))},"./node_modules/d3-color/src/lab.js":
/*!******************************************!*\
  !*** ./node_modules/d3-color/src/lab.js ***!
  \******************************************/
/*! exports provided: gray, default, Lab, lch, hcl, Hcl */function(e,t,n){"use strict";n.r(t),n.d(t,"gray",(function(){return c})),n.d(t,"default",(function(){return d})),n.d(t,"Lab",(function(){return l})),n.d(t,"lch",(function(){return g})),n.d(t,"hcl",(function(){return v})),n.d(t,"Hcl",(function(){return j}));var r=n(/*! ./define.js */"./node_modules/d3-color/src/define.js"),o=n(/*! ./color.js */"./node_modules/d3-color/src/color.js"),u=n(/*! ./math.js */"./node_modules/d3-color/src/math.js"),i=6/29,s=3*i*i;function a(e){if(e instanceof l)return new l(e.l,e.a,e.b,e.opacity);if(e instanceof j)return b(e);e instanceof o.Rgb||(e=Object(o.rgbConvert)(e));var t,n,r=p(e.r),u=p(e.g),i=p(e.b),s=f((.2225045*r+.7168786*u+.0606169*i)/1);return r===u&&u===i?t=n=s:(t=f((.4360747*r+.3850649*u+.1430804*i)/.96422),n=f((.0139322*r+.0971045*u+.7141733*i)/.82521)),new l(116*s-16,500*(t-s),200*(s-n),e.opacity)}function c(e,t){return new l(e,0,0,null==t?1:t)}function d(e,t,n,r){return 1===arguments.length?a(e):new l(e,t,n,null==r?1:r)}function l(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function f(e){return e>.008856451679035631?Math.pow(e,1/3):e/s+4/29}function h(e){return e>i?e*e*e:s*(e-4/29)}function m(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function p(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function _(e){if(e instanceof j)return new j(e.h,e.c,e.l,e.opacity);if(e instanceof l||(e=a(e)),0===e.a&&0===e.b)return new j(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*u.rad2deg;return new j(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function g(e,t,n,r){return 1===arguments.length?_(e):new j(n,t,e,null==r?1:r)}function v(e,t,n,r){return 1===arguments.length?_(e):new j(e,t,n,null==r?1:r)}function j(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function b(e){if(isNaN(e.h))return new l(e.l,0,0,e.opacity);var t=e.h*u.deg2rad;return new l(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Object(r.default)(l,d,Object(r.extend)(o.Color,{brighter:function(e){return new l(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new l(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return t=.96422*h(t),e=1*h(e),n=.82521*h(n),new o.Rgb(m(3.1338561*t-1.6168667*e-.4906146*n),m(-.9787684*t+1.9161415*e+.033454*n),m(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Object(r.default)(j,v,Object(r.extend)(o.Color,{brighter:function(e){return new j(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new j(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return b(this).rgb()}}))},"./node_modules/d3-color/src/math.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-color/src/math.js ***!
  \*******************************************/
/*! exports provided: deg2rad, rad2deg */function(e,t,n){"use strict";n.r(t),n.d(t,"deg2rad",(function(){return r})),n.d(t,"rad2deg",(function(){return o}));var r=Math.PI/180,o=180/Math.PI},"./node_modules/d3-contour/src/area.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-contour/src/area.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r}},"./node_modules/d3-contour/src/array.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-contour/src/array.js ***!
  \**********************************************/
/*! exports provided: slice */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-contour/src/ascending.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-contour/src/ascending.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e-t}},"./node_modules/d3-contour/src/blur.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-contour/src/blur.js ***!
  \*********************************************/
/*! exports provided: blurX, blurY */function(e,t,n){"use strict";function r(e,t,n){for(var r=e.width,o=e.height,u=1+(n<<1),i=0;i<o;++i)for(var s=0,a=0;s<r+n;++s)s<r&&(a+=e.data[s+i*r]),s>=n&&(s>=u&&(a-=e.data[s-u+i*r]),t.data[s-n+i*r]=a/Math.min(s+1,r-1+u-s,u))}function o(e,t,n){for(var r=e.width,o=e.height,u=1+(n<<1),i=0;i<r;++i)for(var s=0,a=0;s<o+n;++s)s<o&&(a+=e.data[i+s*r]),s>=n&&(s>=u&&(a-=e.data[i+(s-u)*r]),t.data[i+(s-n)*r]=a/Math.min(s+1,o-1+u-s,u))}n.r(t),n.d(t,"blurX",(function(){return r})),n.d(t,"blurY",(function(){return o}))},"./node_modules/d3-contour/src/constant.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-contour/src/constant.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-contour/src/contains.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-contour/src/contains.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t){for(var n=t[0],r=t[1],u=-1,i=0,s=e.length,a=s-1;i<s;a=i++){var c=e[i],d=c[0],l=c[1],f=e[a],h=f[0],m=f[1];if(o(c,f,t))return 0;l>r!=m>r&&n<(h-d)*(r-l)/(m-l)+d&&(u=-u)}return u}function o(e,t,n){var r,o,u,i;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(o=e[r=+(e[0]===t[0])],u=n[r],i=t[r],o<=u&&u<=i||i<=u&&u<=o)}n.r(t),t.default=function(e,t){for(var n,o=-1,u=t.length;++o<u;)if(n=r(e,t[o]))return n;return 0}},"./node_modules/d3-contour/src/contours.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-contour/src/contours.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./array */"./node_modules/d3-contour/src/array.js"),u=n(/*! ./ascending */"./node_modules/d3-contour/src/ascending.js"),i=n(/*! ./area */"./node_modules/d3-contour/src/area.js"),s=n(/*! ./constant */"./node_modules/d3-contour/src/constant.js"),a=n(/*! ./contains */"./node_modules/d3-contour/src/contains.js"),c=n(/*! ./noop */"./node_modules/d3-contour/src/noop.js"),d=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];t.default=function(){var e=1,t=1,n=r.thresholdSturges,l=p;function f(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(u.default);else{var o=Object(r.extent)(e),i=o[0],s=o[1];t=Object(r.tickStep)(i,s,t),t=Object(r.range)(Math.floor(i/t)*t,Math.floor(s/t)*t,t)}return t.map((function(t){return h(e,t)}))}function h(n,r){var o=[],u=[];return function(n,r,o){var u,i,s,a,c,l,f=new Array,h=new Array;u=i=-1,a=n[0]>=r,d[a<<1].forEach(p);for(;++u<e-1;)s=a,a=n[u+1]>=r,d[s|a<<1].forEach(p);d[a<<0].forEach(p);for(;++i<t-1;){for(u=-1,a=n[i*e+e]>=r,c=n[i*e]>=r,d[a<<1|c<<2].forEach(p);++u<e-1;)s=a,a=n[i*e+e+u+1]>=r,l=c,c=n[i*e+u+1]>=r,d[s|a<<1|c<<2|l<<3].forEach(p);d[a|c<<3].forEach(p)}u=-1,c=n[i*e]>=r,d[c<<2].forEach(p);for(;++u<e-1;)l=c,c=n[i*e+u+1]>=r,d[c<<2|l<<3].forEach(p);function p(e){var t,n,r=[e[0][0]+u,e[0][1]+i],s=[e[1][0]+u,e[1][1]+i],a=m(r),c=m(s);(t=h[a])?(n=f[c])?(delete h[t.end],delete f[n.start],t===n?(t.ring.push(s),o(t.ring)):f[t.start]=h[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete h[t.end],t.ring.push(s),h[t.end=c]=t):(t=f[c])?(n=h[a])?(delete f[t.start],delete h[n.end],t===n?(t.ring.push(s),o(t.ring)):f[n.start]=h[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete f[t.start],t.ring.unshift(r),f[t.start=a]=t):f[a]=h[c]={start:a,end:c,ring:[r,s]}}d[c<<3].forEach(p)}(n,r,(function(e){l(e,n,r),Object(i.default)(e)>0?o.push([e]):u.push(e)})),u.forEach((function(e){for(var t,n=0,r=o.length;n<r;++n)if(-1!==Object(a.default)((t=o[n])[0],e))return void t.push(e)})),{type:"MultiPolygon",value:r,coordinates:o}}function m(t){return 2*t[0]+t[1]*(e+1)*4}function p(n,r,o){n.forEach((function(n){var u,i=n[0],s=n[1],a=0|i,c=0|s,d=r[c*e+a];i>0&&i<e&&a===i&&(u=r[c*e+a-1],n[0]=i+(o-u)/(d-u)-.5),s>0&&s<t&&c===s&&(u=r[(c-1)*e+a],n[1]=s+(o-u)/(d-u)-.5)}))}return f.contour=h,f.size=function(n){if(!arguments.length)return[e,t];var r=Math.ceil(n[0]),o=Math.ceil(n[1]);if(!(r>0&&o>0))throw new Error("invalid size");return e=r,t=o,f},f.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?Object(s.default)(o.slice.call(e)):Object(s.default)(e),f):n},f.smooth=function(e){return arguments.length?(l=e?p:c.default,f):l===p},f}},"./node_modules/d3-contour/src/density.js":
/*!************************************************!*\
  !*** ./node_modules/d3-contour/src/density.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./array */"./node_modules/d3-contour/src/array.js"),u=n(/*! ./blur */"./node_modules/d3-contour/src/blur.js"),i=n(/*! ./constant */"./node_modules/d3-contour/src/constant.js"),s=n(/*! ./contours */"./node_modules/d3-contour/src/contours.js");function a(e){return e[0]}function c(e){return e[1]}function d(){return 1}t.default=function(){var e=a,t=c,n=d,l=960,f=500,h=20,m=2,p=3*h,_=l+2*p>>m,g=f+2*p>>m,v=Object(i.default)(20);function j(o){var i=new Float32Array(_*g),a=new Float32Array(_*g);o.forEach((function(r,o,u){var s=+e(r,o,u)+p>>m,a=+t(r,o,u)+p>>m,c=+n(r,o,u);s>=0&&s<_&&a>=0&&a<g&&(i[s+a*_]+=c)})),Object(u.blurX)({width:_,height:g,data:i},{width:_,height:g,data:a},h>>m),Object(u.blurY)({width:_,height:g,data:a},{width:_,height:g,data:i},h>>m),Object(u.blurX)({width:_,height:g,data:i},{width:_,height:g,data:a},h>>m),Object(u.blurY)({width:_,height:g,data:a},{width:_,height:g,data:i},h>>m),Object(u.blurX)({width:_,height:g,data:i},{width:_,height:g,data:a},h>>m),Object(u.blurY)({width:_,height:g,data:a},{width:_,height:g,data:i},h>>m);var c=v(i);if(!Array.isArray(c)){var d=Object(r.max)(i);c=Object(r.tickStep)(0,d,c),(c=Object(r.range)(0,Math.floor(d/c)*c,c)).shift()}return Object(s.default)().thresholds(c).size([_,g])(i).map(b)}function b(e){return e.value*=Math.pow(2,-2*m),e.coordinates.forEach(y),e}function y(e){e.forEach(x)}function x(e){e.forEach(w)}function w(e){e[0]=e[0]*Math.pow(2,m)-p,e[1]=e[1]*Math.pow(2,m)-p}function O(){return _=l+2*(p=3*h)>>m,g=f+2*p>>m,j}return j.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.default)(+t),j):e},j.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(i.default)(+e),j):t},j.weight=function(e){return arguments.length?(n="function"==typeof e?e:Object(i.default)(+e),j):n},j.size=function(e){if(!arguments.length)return[l,f];var t=Math.ceil(e[0]),n=Math.ceil(e[1]);if(!(t>=0||t>=0))throw new Error("invalid size");return l=t,f=n,O()},j.cellSize=function(e){if(!arguments.length)return 1<<m;if(!((e=+e)>=1))throw new Error("invalid cell size");return m=Math.floor(Math.log(e)/Math.LN2),O()},j.thresholds=function(e){return arguments.length?(v="function"==typeof e?e:Array.isArray(e)?Object(i.default)(o.slice.call(e)):Object(i.default)(e),j):v},j.bandwidth=function(e){if(!arguments.length)return Math.sqrt(h*(h+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return h=Math.round((Math.sqrt(4*e*e+1)-1)/2),O()},j}},"./node_modules/d3-contour/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-contour/src/index.js ***!
  \**********************************************/
/*! exports provided: contours, contourDensity */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./contours */"./node_modules/d3-contour/src/contours.js");n.d(t,"contours",(function(){return r.default}));var o=n(/*! ./density */"./node_modules/d3-contour/src/density.js");n.d(t,"contourDensity",(function(){return o.default}))},"./node_modules/d3-contour/src/noop.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-contour/src/noop.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){}},"./node_modules/d3-dispatch/src/dispatch.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-dispatch/src/dispatch.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r={value:function(){}};function o(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new u(r)}function u(e){this._=e}function i(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function s(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function a(e,t,n){for(var o=0,u=e.length;o<u;++o)if(e[o].name===t){e[o]=r,e=e.slice(0,o).concat(e.slice(o+1));break}return null!=n&&e.push({name:t,value:n}),e}u.prototype=o.prototype={constructor:u,on:function(e,t){var n,r=this._,o=i(e+"",r),u=-1,c=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++u<c;)if(n=(e=o[u]).type)r[n]=a(r[n],e.name,t);else if(null==t)for(n in r)r[n]=a(r[n],e.name,null);return this}for(;++u<c;)if((n=(e=o[u]).type)&&(n=s(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new u(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),u=0;u<n;++u)o[u]=arguments[u+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(u=0,n=(r=this._[e]).length;u<n;++u)r[u].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,u=r.length;o<u;++o)r[o].value.apply(t,n)}},t.default=o},"./node_modules/d3-dispatch/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-dispatch/src/index.js ***!
  \***********************************************/
/*! exports provided: dispatch */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dispatch.js */"./node_modules/d3-dispatch/src/dispatch.js");n.d(t,"dispatch",(function(){return r.default}))},"./node_modules/d3-drag/src/constant.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-drag/src/constant.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-drag/src/drag.js":
/*!******************************************!*\
  !*** ./node_modules/d3-drag/src/drag.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js"),o=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),u=n(/*! ./nodrag.js */"./node_modules/d3-drag/src/nodrag.js"),i=n(/*! ./noevent.js */"./node_modules/d3-drag/src/noevent.js"),s=n(/*! ./constant.js */"./node_modules/d3-drag/src/constant.js"),a=n(/*! ./event.js */"./node_modules/d3-drag/src/event.js");function c(){return!o.event.ctrlKey&&!o.event.button}function d(){return this.parentNode}function l(e){return null==e?{x:o.event.x,y:o.event.y}:e}function f(){return navigator.maxTouchPoints||"ontouchstart"in this}t.default=function(){var e,t,n,h,m=c,p=d,_=l,g=f,v={},j=Object(r.dispatch)("start","drag","end"),b=0,y=0;function x(e){e.on("mousedown.drag",w).filter(g).on("touchstart.drag",S).on("touchmove.drag",E).on("touchend.drag touchcancel.drag",k).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function w(){if(!h&&m.apply(this,arguments)){var r=C("mouse",p.apply(this,arguments),o.mouse,this,arguments);r&&(Object(o.select)(o.event.view).on("mousemove.drag",O,!0).on("mouseup.drag",M,!0),Object(u.default)(o.event.view),Object(i.nopropagation)(),n=!1,e=o.event.clientX,t=o.event.clientY,r("start"))}}function O(){if(Object(i.default)(),!n){var r=o.event.clientX-e,u=o.event.clientY-t;n=r*r+u*u>y}v.mouse("drag")}function M(){Object(o.select)(o.event.view).on("mousemove.drag mouseup.drag",null),Object(u.yesdrag)(o.event.view,n),Object(i.default)(),v.mouse("end")}function S(){if(m.apply(this,arguments)){var e,t,n=o.event.changedTouches,r=p.apply(this,arguments),u=n.length;for(e=0;e<u;++e)(t=C(n[e].identifier,r,o.touch,this,arguments))&&(Object(i.nopropagation)(),t("start"))}}function E(){var e,t,n=o.event.changedTouches,r=n.length;for(e=0;e<r;++e)(t=v[n[e].identifier])&&(Object(i.default)(),t("drag"))}function k(){var e,t,n=o.event.changedTouches,r=n.length;for(h&&clearTimeout(h),h=setTimeout((function(){h=null}),500),e=0;e<r;++e)(t=v[n[e].identifier])&&(Object(i.nopropagation)(),t("end"))}function C(e,t,n,r,u){var i,s,c,d=n(t,e),l=j.copy();if(Object(o.customEvent)(new a.default(x,"beforestart",i,e,b,d[0],d[1],0,0,l),(function(){return null!=(o.event.subject=i=_.apply(r,u))&&(s=i.x-d[0]||0,c=i.y-d[1]||0,!0)})))return function f(h){var m,p=d;switch(h){case"start":v[e]=f,m=b++;break;case"end":delete v[e],--b;case"drag":d=n(t,e),m=b}Object(o.customEvent)(new a.default(x,h,i,e,m,d[0]+s,d[1]+c,d[0]-p[0],d[1]-p[1],l),l.apply,l,[h,r,u])}}return x.filter=function(e){return arguments.length?(m="function"==typeof e?e:Object(s.default)(!!e),x):m},x.container=function(e){return arguments.length?(p="function"==typeof e?e:Object(s.default)(e),x):p},x.subject=function(e){return arguments.length?(_="function"==typeof e?e:Object(s.default)(e),x):_},x.touchable=function(e){return arguments.length?(g="function"==typeof e?e:Object(s.default)(!!e),x):g},x.on=function(){var e=j.on.apply(j,arguments);return e===j?x:e},x.clickDistance=function(e){return arguments.length?(y=(e=+e)*e,x):Math.sqrt(y)},x}},"./node_modules/d3-drag/src/event.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-drag/src/event.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t,n,r,o,u,i,s,a,c){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=o,this.x=u,this.y=i,this.dx=s,this.dy=a,this._=c}n.r(t),n.d(t,"default",(function(){return r})),r.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e}},"./node_modules/d3-drag/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-drag/src/index.js ***!
  \*******************************************/
/*! exports provided: drag, dragDisable, dragEnable */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./drag.js */"./node_modules/d3-drag/src/drag.js");n.d(t,"drag",(function(){return r.default}));var o=n(/*! ./nodrag.js */"./node_modules/d3-drag/src/nodrag.js");n.d(t,"dragDisable",(function(){return o.default})),n.d(t,"dragEnable",(function(){return o.yesdrag}))},"./node_modules/d3-drag/src/nodrag.js":
/*!********************************************!*\
  !*** ./node_modules/d3-drag/src/nodrag.js ***!
  \********************************************/
/*! exports provided: default, yesdrag */function(e,t,n){"use strict";n.r(t),n.d(t,"yesdrag",(function(){return u}));var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./noevent.js */"./node_modules/d3-drag/src/noevent.js");function u(e,t){var n=e.document.documentElement,u=Object(r.select)(e).on("dragstart.drag",null);t&&(u.on("click.drag",o.default,!0),setTimeout((function(){u.on("click.drag",null)}),0)),"onselectstart"in n?u.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}t.default=function(e){var t=e.document.documentElement,n=Object(r.select)(e).on("dragstart.drag",o.default,!0);"onselectstart"in t?n.on("selectstart.drag",o.default,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}},"./node_modules/d3-drag/src/noevent.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-drag/src/noevent.js ***!
  \*********************************************/
/*! exports provided: nopropagation, default */function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-dsv/src/autoType.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-dsv/src/autoType.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){for(var t in e){var n,r,u=e[t].trim();if(u)if("true"===u)u=!0;else if("false"===u)u=!1;else if("NaN"===u)u=NaN;else if(isNaN(n=+u)){if(!(r=u.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;o&&r[4]&&!r[7]&&(u=u.replace(/-/g,"/").replace(/T/," ")),u=new Date(u)}else u=n;else u=null;e[t]=u}return e}n.r(t),n.d(t,"default",(function(){return r}));var o=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours()},"./node_modules/d3-dsv/src/csv.js":
/*!****************************************!*\
  !*** ./node_modules/d3-dsv/src/csv.js ***!
  \****************************************/
/*! exports provided: csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue */function(e,t,n){"use strict";n.r(t),n.d(t,"csvParse",(function(){return u})),n.d(t,"csvParseRows",(function(){return i})),n.d(t,"csvFormat",(function(){return s})),n.d(t,"csvFormatBody",(function(){return a})),n.d(t,"csvFormatRows",(function(){return c})),n.d(t,"csvFormatRow",(function(){return d})),n.d(t,"csvFormatValue",(function(){return l}));var r=n(/*! ./dsv.js */"./node_modules/d3-dsv/src/dsv.js"),o=Object(r.default)(","),u=o.parse,i=o.parseRows,s=o.format,a=o.formatBody,c=o.formatRows,d=o.formatRow,l=o.formatValue},"./node_modules/d3-dsv/src/dsv.js":
/*!****************************************!*\
  !*** ./node_modules/d3-dsv/src/dsv.js ***!
  \****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r={},o={};function u(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function i(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function s(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function a(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),o=e.getUTCSeconds(),u=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+s(-t,6):t>9999?"+"+s(t,6):s(t,4))+"-"+s(e.getUTCMonth()+1,2)+"-"+s(e.getUTCDate(),2)+(u?"T"+s(n,2)+":"+s(r,2)+":"+s(o,2)+"."+s(u,3)+"Z":o?"T"+s(n,2)+":"+s(r,2)+":"+s(o,2)+"Z":r||n?"T"+s(n,2)+":"+s(r,2)+"Z":"")}t.default=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function s(e,t){var u,i=[],s=e.length,a=0,c=0,d=s<=0,l=!1;function f(){if(d)return o;if(l)return l=!1,r;var t,u,i=a;if(34===e.charCodeAt(i)){for(;a++<s&&34!==e.charCodeAt(a)||34===e.charCodeAt(++a););return(t=a)>=s?d=!0:10===(u=e.charCodeAt(a++))?l=!0:13===u&&(l=!0,10===e.charCodeAt(a)&&++a),e.slice(i+1,t-1).replace(/""/g,'"')}for(;a<s;){if(10===(u=e.charCodeAt(t=a++)))l=!0;else if(13===u)l=!0,10===e.charCodeAt(a)&&++a;else if(u!==n)continue;return e.slice(i,t)}return d=!0,e.slice(i,s)}for(10===e.charCodeAt(s-1)&&--s,13===e.charCodeAt(s-1)&&--s;(u=f())!==o;){for(var h=[];u!==r&&u!==o;)h.push(u),u=f();t&&null==(h=t(h,c++))||i.push(h)}return i}function c(t,n){return t.map((function(t){return n.map((function(e){return l(t[e])})).join(e)}))}function d(t){return t.map(l).join(e)}function l(e){return null==e?"":e instanceof Date?a(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,o=s(e,(function(e,o){if(n)return n(e,o-1);r=e,n=t?function(e,t){var n=u(e);return function(r,o){return t(n(r),o,e)}}(e,t):u(e)}));return o.columns=r||[],o},parseRows:s,format:function(t,n){return null==n&&(n=i(t)),[n.map(l).join(e)].concat(c(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=i(e)),c(e,t).join("\n")},formatRows:function(e){return e.map(d).join("\n")},formatRow:d,formatValue:l}}},"./node_modules/d3-dsv/src/index.js":
/*!******************************************!*\
  !*** ./node_modules/d3-dsv/src/index.js ***!
  \******************************************/
/*! exports provided: dsvFormat, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue, autoType */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dsv.js */"./node_modules/d3-dsv/src/dsv.js");n.d(t,"dsvFormat",(function(){return r.default}));var o=n(/*! ./csv.js */"./node_modules/d3-dsv/src/csv.js");n.d(t,"csvParse",(function(){return o.csvParse})),n.d(t,"csvParseRows",(function(){return o.csvParseRows})),n.d(t,"csvFormat",(function(){return o.csvFormat})),n.d(t,"csvFormatBody",(function(){return o.csvFormatBody})),n.d(t,"csvFormatRows",(function(){return o.csvFormatRows})),n.d(t,"csvFormatRow",(function(){return o.csvFormatRow})),n.d(t,"csvFormatValue",(function(){return o.csvFormatValue}));var u=n(/*! ./tsv.js */"./node_modules/d3-dsv/src/tsv.js");n.d(t,"tsvParse",(function(){return u.tsvParse})),n.d(t,"tsvParseRows",(function(){return u.tsvParseRows})),n.d(t,"tsvFormat",(function(){return u.tsvFormat})),n.d(t,"tsvFormatBody",(function(){return u.tsvFormatBody})),n.d(t,"tsvFormatRows",(function(){return u.tsvFormatRows})),n.d(t,"tsvFormatRow",(function(){return u.tsvFormatRow})),n.d(t,"tsvFormatValue",(function(){return u.tsvFormatValue}));var i=n(/*! ./autoType.js */"./node_modules/d3-dsv/src/autoType.js");n.d(t,"autoType",(function(){return i.default}))},"./node_modules/d3-dsv/src/tsv.js":
/*!****************************************!*\
  !*** ./node_modules/d3-dsv/src/tsv.js ***!
  \****************************************/
/*! exports provided: tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue */function(e,t,n){"use strict";n.r(t),n.d(t,"tsvParse",(function(){return u})),n.d(t,"tsvParseRows",(function(){return i})),n.d(t,"tsvFormat",(function(){return s})),n.d(t,"tsvFormatBody",(function(){return a})),n.d(t,"tsvFormatRows",(function(){return c})),n.d(t,"tsvFormatRow",(function(){return d})),n.d(t,"tsvFormatValue",(function(){return l}));var r=n(/*! ./dsv.js */"./node_modules/d3-dsv/src/dsv.js"),o=Object(r.default)("\t"),u=o.parse,i=o.parseRows,s=o.format,a=o.formatBody,c=o.formatRows,d=o.formatRow,l=o.formatValue},"./node_modules/d3-ease/src/back.js":
/*!******************************************!*\
  !*** ./node_modules/d3-ease/src/back.js ***!
  \******************************************/
/*! exports provided: backIn, backOut, backInOut */function(e,t,n){"use strict";n.r(t),n.d(t,"backIn",(function(){return r})),n.d(t,"backOut",(function(){return o})),n.d(t,"backInOut",(function(){return u}));var r=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),o=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),u=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158)},"./node_modules/d3-ease/src/bounce.js":
/*!********************************************!*\
  !*** ./node_modules/d3-ease/src/bounce.js ***!
  \********************************************/
/*! exports provided: bounceIn, bounceOut, bounceInOut */function(e,t,n){"use strict";n.r(t),n.d(t,"bounceIn",(function(){return o})),n.d(t,"bounceOut",(function(){return u})),n.d(t,"bounceInOut",(function(){return i}));var r=7.5625;function o(e){return 1-u(1-e)}function u(e){return(e=+e)<4/11?r*e*e:e<8/11?r*(e-=6/11)*e+3/4:e<10/11?r*(e-=9/11)*e+15/16:r*(e-=21/22)*e+63/64}function i(e){return((e*=2)<=1?1-u(1-e):u(e-1)+1)/2}},"./node_modules/d3-ease/src/circle.js":
/*!********************************************!*\
  !*** ./node_modules/d3-ease/src/circle.js ***!
  \********************************************/
/*! exports provided: circleIn, circleOut, circleInOut */function(e,t,n){"use strict";function r(e){return 1-Math.sqrt(1-e*e)}function o(e){return Math.sqrt(1- --e*e)}function u(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}n.r(t),n.d(t,"circleIn",(function(){return r})),n.d(t,"circleOut",(function(){return o})),n.d(t,"circleInOut",(function(){return u}))},"./node_modules/d3-ease/src/cubic.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-ease/src/cubic.js ***!
  \*******************************************/
/*! exports provided: cubicIn, cubicOut, cubicInOut */function(e,t,n){"use strict";function r(e){return e*e*e}function o(e){return--e*e*e+1}function u(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}n.r(t),n.d(t,"cubicIn",(function(){return r})),n.d(t,"cubicOut",(function(){return o})),n.d(t,"cubicInOut",(function(){return u}))},"./node_modules/d3-ease/src/elastic.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-ease/src/elastic.js ***!
  \*********************************************/
/*! exports provided: elasticIn, elasticOut, elasticInOut */function(e,t,n){"use strict";n.r(t),n.d(t,"elasticIn",(function(){return o})),n.d(t,"elasticOut",(function(){return u})),n.d(t,"elasticInOut",(function(){return i}));var r=2*Math.PI,o=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function u(e){return t*Math.pow(2,10*--e)*Math.sin((o-e)/n)}return u.amplitude=function(t){return e(t,n*r)},u.period=function(n){return e(t,n)},u}(1,.3),u=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function u(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+o)/n)}return u.amplitude=function(t){return e(t,n*r)},u.period=function(n){return e(t,n)},u}(1,.3),i=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function u(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((o-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((o+e)/n))/2}return u.amplitude=function(t){return e(t,n*r)},u.period=function(n){return e(t,n)},u}(1,.3)},"./node_modules/d3-ease/src/exp.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-ease/src/exp.js ***!
  \*****************************************/
/*! exports provided: expIn, expOut, expInOut */function(e,t,n){"use strict";function r(e){return Math.pow(2,10*e-10)}function o(e){return 1-Math.pow(2,-10*e)}function u(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}n.r(t),n.d(t,"expIn",(function(){return r})),n.d(t,"expOut",(function(){return o})),n.d(t,"expInOut",(function(){return u}))},"./node_modules/d3-ease/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-ease/src/index.js ***!
  \*******************************************/
/*! exports provided: easeLinear, easeQuad, easeQuadIn, easeQuadOut, easeQuadInOut, easeCubic, easeCubicIn, easeCubicOut, easeCubicInOut, easePoly, easePolyIn, easePolyOut, easePolyInOut, easeSin, easeSinIn, easeSinOut, easeSinInOut, easeExp, easeExpIn, easeExpOut, easeExpInOut, easeCircle, easeCircleIn, easeCircleOut, easeCircleInOut, easeBounce, easeBounceIn, easeBounceOut, easeBounceInOut, easeBack, easeBackIn, easeBackOut, easeBackInOut, easeElastic, easeElasticIn, easeElasticOut, easeElasticInOut */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./linear.js */"./node_modules/d3-ease/src/linear.js");n.d(t,"easeLinear",(function(){return r.linear}));var o=n(/*! ./quad.js */"./node_modules/d3-ease/src/quad.js");n.d(t,"easeQuad",(function(){return o.quadInOut})),n.d(t,"easeQuadIn",(function(){return o.quadIn})),n.d(t,"easeQuadOut",(function(){return o.quadOut})),n.d(t,"easeQuadInOut",(function(){return o.quadInOut}));var u=n(/*! ./cubic.js */"./node_modules/d3-ease/src/cubic.js");n.d(t,"easeCubic",(function(){return u.cubicInOut})),n.d(t,"easeCubicIn",(function(){return u.cubicIn})),n.d(t,"easeCubicOut",(function(){return u.cubicOut})),n.d(t,"easeCubicInOut",(function(){return u.cubicInOut}));var i=n(/*! ./poly.js */"./node_modules/d3-ease/src/poly.js");n.d(t,"easePoly",(function(){return i.polyInOut})),n.d(t,"easePolyIn",(function(){return i.polyIn})),n.d(t,"easePolyOut",(function(){return i.polyOut})),n.d(t,"easePolyInOut",(function(){return i.polyInOut}));var s=n(/*! ./sin.js */"./node_modules/d3-ease/src/sin.js");n.d(t,"easeSin",(function(){return s.sinInOut})),n.d(t,"easeSinIn",(function(){return s.sinIn})),n.d(t,"easeSinOut",(function(){return s.sinOut})),n.d(t,"easeSinInOut",(function(){return s.sinInOut}));var a=n(/*! ./exp.js */"./node_modules/d3-ease/src/exp.js");n.d(t,"easeExp",(function(){return a.expInOut})),n.d(t,"easeExpIn",(function(){return a.expIn})),n.d(t,"easeExpOut",(function(){return a.expOut})),n.d(t,"easeExpInOut",(function(){return a.expInOut}));var c=n(/*! ./circle.js */"./node_modules/d3-ease/src/circle.js");n.d(t,"easeCircle",(function(){return c.circleInOut})),n.d(t,"easeCircleIn",(function(){return c.circleIn})),n.d(t,"easeCircleOut",(function(){return c.circleOut})),n.d(t,"easeCircleInOut",(function(){return c.circleInOut}));var d=n(/*! ./bounce.js */"./node_modules/d3-ease/src/bounce.js");n.d(t,"easeBounce",(function(){return d.bounceOut})),n.d(t,"easeBounceIn",(function(){return d.bounceIn})),n.d(t,"easeBounceOut",(function(){return d.bounceOut})),n.d(t,"easeBounceInOut",(function(){return d.bounceInOut}));var l=n(/*! ./back.js */"./node_modules/d3-ease/src/back.js");n.d(t,"easeBack",(function(){return l.backInOut})),n.d(t,"easeBackIn",(function(){return l.backIn})),n.d(t,"easeBackOut",(function(){return l.backOut})),n.d(t,"easeBackInOut",(function(){return l.backInOut}));var f=n(/*! ./elastic.js */"./node_modules/d3-ease/src/elastic.js");n.d(t,"easeElastic",(function(){return f.elasticOut})),n.d(t,"easeElasticIn",(function(){return f.elasticIn})),n.d(t,"easeElasticOut",(function(){return f.elasticOut})),n.d(t,"easeElasticInOut",(function(){return f.elasticInOut}))},"./node_modules/d3-ease/src/linear.js":
/*!********************************************!*\
  !*** ./node_modules/d3-ease/src/linear.js ***!
  \********************************************/
/*! exports provided: linear */function(e,t,n){"use strict";function r(e){return+e}n.r(t),n.d(t,"linear",(function(){return r}))},"./node_modules/d3-ease/src/poly.js":
/*!******************************************!*\
  !*** ./node_modules/d3-ease/src/poly.js ***!
  \******************************************/
/*! exports provided: polyIn, polyOut, polyInOut */function(e,t,n){"use strict";n.r(t),n.d(t,"polyIn",(function(){return r})),n.d(t,"polyOut",(function(){return o})),n.d(t,"polyInOut",(function(){return u}));var r=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),o=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),u=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3)},"./node_modules/d3-ease/src/quad.js":
/*!******************************************!*\
  !*** ./node_modules/d3-ease/src/quad.js ***!
  \******************************************/
/*! exports provided: quadIn, quadOut, quadInOut */function(e,t,n){"use strict";function r(e){return e*e}function o(e){return e*(2-e)}function u(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}n.r(t),n.d(t,"quadIn",(function(){return r})),n.d(t,"quadOut",(function(){return o})),n.d(t,"quadInOut",(function(){return u}))},"./node_modules/d3-ease/src/sin.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-ease/src/sin.js ***!
  \*****************************************/
/*! exports provided: sinIn, sinOut, sinInOut */function(e,t,n){"use strict";n.r(t),n.d(t,"sinIn",(function(){return u})),n.d(t,"sinOut",(function(){return i})),n.d(t,"sinInOut",(function(){return s}));var r=Math.PI,o=r/2;function u(e){return 1-Math.cos(e*o)}function i(e){return Math.sin(e*o)}function s(e){return(1-Math.cos(r*e))/2}},"./node_modules/d3-fetch/src/blob.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-fetch/src/blob.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/buffer.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-fetch/src/buffer.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/dsv.js":
/*!******************************************!*\
  !*** ./node_modules/d3-fetch/src/dsv.js ***!
  \******************************************/
/*! exports provided: default, csv, tsv */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i})),n.d(t,"csv",(function(){return s})),n.d(t,"tsv",(function(){return a}));var r=n(/*! d3-dsv */"./node_modules/d3-dsv/src/index.js"),o=n(/*! ./text.js */"./node_modules/d3-fetch/src/text.js");function u(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Object(o.default)(t,n).then((function(t){return e(t,r)}))}}function i(e,t,n,u){3===arguments.length&&"function"==typeof n&&(u=n,n=void 0);var i=Object(r.dsvFormat)(e);return Object(o.default)(t,n).then((function(e){return i.parse(e,u)}))}var s=u(r.csvParse),a=u(r.tsvParse)},"./node_modules/d3-fetch/src/image.js":
/*!********************************************!*\
  !*** ./node_modules/d3-fetch/src/image.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return new Promise((function(n,r){var o=new Image;for(var u in t)o[u]=t[u];o.onerror=r,o.onload=function(){n(o)},o.src=e}))}},"./node_modules/d3-fetch/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-fetch/src/index.js ***!
  \********************************************/
/*! exports provided: blob, buffer, dsv, csv, tsv, image, json, text, xml, html, svg */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./blob.js */"./node_modules/d3-fetch/src/blob.js");n.d(t,"blob",(function(){return r.default}));var o=n(/*! ./buffer.js */"./node_modules/d3-fetch/src/buffer.js");n.d(t,"buffer",(function(){return o.default}));var u=n(/*! ./dsv.js */"./node_modules/d3-fetch/src/dsv.js");n.d(t,"dsv",(function(){return u.default})),n.d(t,"csv",(function(){return u.csv})),n.d(t,"tsv",(function(){return u.tsv}));var i=n(/*! ./image.js */"./node_modules/d3-fetch/src/image.js");n.d(t,"image",(function(){return i.default}));var s=n(/*! ./json.js */"./node_modules/d3-fetch/src/json.js");n.d(t,"json",(function(){return s.default}));var a=n(/*! ./text.js */"./node_modules/d3-fetch/src/text.js");n.d(t,"text",(function(){return a.default}));var c=n(/*! ./xml.js */"./node_modules/d3-fetch/src/xml.js");n.d(t,"xml",(function(){return c.default})),n.d(t,"html",(function(){return c.html})),n.d(t,"svg",(function(){return c.svg}))},"./node_modules/d3-fetch/src/json.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-fetch/src/json.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);if(204!==e.status&&205!==e.status)return e.json()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/text.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-fetch/src/text.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/xml.js":
/*!******************************************!*\
  !*** ./node_modules/d3-fetch/src/xml.js ***!
  \******************************************/
/*! exports provided: default, html, svg */function(e,t,n){"use strict";n.r(t),n.d(t,"html",(function(){return u})),n.d(t,"svg",(function(){return i}));var r=n(/*! ./text.js */"./node_modules/d3-fetch/src/text.js");function o(e){return function(t,n){return Object(r.default)(t,n).then((function(t){return(new DOMParser).parseFromString(t,e)}))}}t.default=o("application/xml");var u=o("text/html"),i=o("image/svg+xml")},"./node_modules/d3-force/src/center.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-force/src/center.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n;function r(){var r,o,u=n.length,i=0,s=0;for(r=0;r<u;++r)i+=(o=n[r]).x,s+=o.y;for(i=i/u-e,s=s/u-t,r=0;r<u;++r)(o=n[r]).x-=i,o.y-=s}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r}},"./node_modules/d3-force/src/collide.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-force/src/collide.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js"),o=n(/*! ./jiggle */"./node_modules/d3-force/src/jiggle.js"),u=n(/*! d3-quadtree */"./node_modules/d3-quadtree/src/index.js");function i(e){return e.x+e.vx}function s(e){return e.y+e.vy}t.default=function(e){var t,n,a=1,c=1;function d(){for(var e,r,d,f,h,m,p,_=t.length,g=0;g<c;++g)for(r=Object(u.quadtree)(t,i,s).visitAfter(l),e=0;e<_;++e)d=t[e],m=n[d.index],p=m*m,f=d.x+d.vx,h=d.y+d.vy,r.visit(v);function v(e,t,n,r,u){var i=e.data,s=e.r,c=m+s;if(!i)return t>f+c||r<f-c||n>h+c||u<h-c;if(i.index>d.index){var l=f-i.x-i.vx,_=h-i.y-i.vy,g=l*l+_*_;g<c*c&&(0===l&&(g+=(l=Object(o.default)())*l),0===_&&(g+=(_=Object(o.default)())*_),g=(c-(g=Math.sqrt(g)))/g*a,d.vx+=(l*=g)*(c=(s*=s)/(p+s)),d.vy+=(_*=g)*c,i.vx-=l*(c=1-c),i.vy-=_*c)}}}function l(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function f(){if(t){var r,o,u=t.length;for(n=new Array(u),r=0;r<u;++r)o=t[r],n[o.index]=+e(o,r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?1:+e)),d.initialize=function(e){t=e,f()},d.iterations=function(e){return arguments.length?(c=+e,d):c},d.strength=function(e){return arguments.length?(a=+e,d):a},d.radius=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),f(),d):e},d}},"./node_modules/d3-force/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-force/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-force/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-force/src/index.js ***!
  \********************************************/
/*! exports provided: forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./center */"./node_modules/d3-force/src/center.js");n.d(t,"forceCenter",(function(){return r.default}));var o=n(/*! ./collide */"./node_modules/d3-force/src/collide.js");n.d(t,"forceCollide",(function(){return o.default}));var u=n(/*! ./link */"./node_modules/d3-force/src/link.js");n.d(t,"forceLink",(function(){return u.default}));var i=n(/*! ./manyBody */"./node_modules/d3-force/src/manyBody.js");n.d(t,"forceManyBody",(function(){return i.default}));var s=n(/*! ./radial */"./node_modules/d3-force/src/radial.js");n.d(t,"forceRadial",(function(){return s.default}));var a=n(/*! ./simulation */"./node_modules/d3-force/src/simulation.js");n.d(t,"forceSimulation",(function(){return a.default}));var c=n(/*! ./x */"./node_modules/d3-force/src/x.js");n.d(t,"forceX",(function(){return c.default}));var d=n(/*! ./y */"./node_modules/d3-force/src/y.js");n.d(t,"forceY",(function(){return d.default}))},"./node_modules/d3-force/src/jiggle.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-force/src/jiggle.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){return 1e-6*(Math.random()-.5)}},"./node_modules/d3-force/src/link.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-force/src/link.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js"),o=n(/*! ./jiggle */"./node_modules/d3-force/src/jiggle.js"),u=n(/*! d3-collection */"./node_modules/d3-collection/src/index.js");function i(e){return e.index}function s(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}t.default=function(e){var t,n,a,c,d,l=i,f=function(e){return 1/Math.min(c[e.source.index],c[e.target.index])},h=Object(r.default)(30),m=1;function p(r){for(var u=0,i=e.length;u<m;++u)for(var s,a,c,l,f,h,p,_=0;_<i;++_)a=(s=e[_]).source,l=(c=s.target).x+c.vx-a.x-a.vx||Object(o.default)(),f=c.y+c.vy-a.y-a.vy||Object(o.default)(),l*=h=((h=Math.sqrt(l*l+f*f))-n[_])/h*r*t[_],f*=h,c.vx-=l*(p=d[_]),c.vy-=f*p,a.vx+=l*(p=1-p),a.vy+=f*p}function _(){if(a){var r,o,i=a.length,f=e.length,h=Object(u.map)(a,l);for(r=0,c=new Array(i);r<f;++r)(o=e[r]).index=r,"object"!=typeof o.source&&(o.source=s(h,o.source)),"object"!=typeof o.target&&(o.target=s(h,o.target)),c[o.source.index]=(c[o.source.index]||0)+1,c[o.target.index]=(c[o.target.index]||0)+1;for(r=0,d=new Array(f);r<f;++r)o=e[r],d[r]=c[o.source.index]/(c[o.source.index]+c[o.target.index]);t=new Array(f),g(),n=new Array(f),v()}}function g(){if(a)for(var n=0,r=e.length;n<r;++n)t[n]=+f(e[n],n,e)}function v(){if(a)for(var t=0,r=e.length;t<r;++t)n[t]=+h(e[t],t,e)}return null==e&&(e=[]),p.initialize=function(e){a=e,_()},p.links=function(t){return arguments.length?(e=t,_(),p):e},p.id=function(e){return arguments.length?(l=e,p):l},p.iterations=function(e){return arguments.length?(m=+e,p):m},p.strength=function(e){return arguments.length?(f="function"==typeof e?e:Object(r.default)(+e),g(),p):f},p.distance=function(e){return arguments.length?(h="function"==typeof e?e:Object(r.default)(+e),v(),p):h},p}},"./node_modules/d3-force/src/manyBody.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-force/src/manyBody.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js"),o=n(/*! ./jiggle */"./node_modules/d3-force/src/jiggle.js"),u=n(/*! d3-quadtree */"./node_modules/d3-quadtree/src/index.js"),i=n(/*! ./simulation */"./node_modules/d3-force/src/simulation.js");t.default=function(){var e,t,n,s,a=Object(r.default)(-30),c=1,d=1/0,l=.81;function f(r){var o,s=e.length,a=Object(u.quadtree)(e,i.x,i.y).visitAfter(m);for(n=r,o=0;o<s;++o)t=e[o],a.visit(p)}function h(){if(e){var t,n,r=e.length;for(s=new Array(r),t=0;t<r;++t)n=e[t],s[n.index]=+a(n,t,e)}}function m(e){var t,n,r,o,u,i=0,a=0;if(e.length){for(r=o=u=0;u<4;++u)(t=e[u])&&(n=Math.abs(t.value))&&(i+=t.value,a+=n,r+=n*t.x,o+=n*t.y);e.x=r/a,e.y=o/a}else{(t=e).x=t.data.x,t.y=t.data.y;do{i+=s[t.data.index]}while(t=t.next)}e.value=i}function p(e,r,u,i){if(!e.value)return!0;var a=e.x-t.x,f=e.y-t.y,h=i-r,m=a*a+f*f;if(h*h/l<m)return m<d&&(0===a&&(m+=(a=Object(o.default)())*a),0===f&&(m+=(f=Object(o.default)())*f),m<c&&(m=Math.sqrt(c*m)),t.vx+=a*e.value*n/m,t.vy+=f*e.value*n/m),!0;if(!(e.length||m>=d)){(e.data!==t||e.next)&&(0===a&&(m+=(a=Object(o.default)())*a),0===f&&(m+=(f=Object(o.default)())*f),m<c&&(m=Math.sqrt(c*m)));do{e.data!==t&&(h=s[e.data.index]*n/m,t.vx+=a*h,t.vy+=f*h)}while(e=e.next)}}return f.initialize=function(t){e=t,h()},f.strength=function(e){return arguments.length?(a="function"==typeof e?e:Object(r.default)(+e),h(),f):a},f.distanceMin=function(e){return arguments.length?(c=e*e,f):Math.sqrt(c)},f.distanceMax=function(e){return arguments.length?(d=e*e,f):Math.sqrt(d)},f.theta=function(e){return arguments.length?(l=e*e,f):Math.sqrt(l)},f}},"./node_modules/d3-force/src/radial.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-force/src/radial.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js");t.default=function(e,t,n){var o,u,i,s=Object(r.default)(.1);function a(e){for(var r=0,s=o.length;r<s;++r){var a=o[r],c=a.x-t||1e-6,d=a.y-n||1e-6,l=Math.sqrt(c*c+d*d),f=(i[r]-l)*u[r]*e/l;a.vx+=c*f,a.vy+=d*f}}function c(){if(o){var t,n=o.length;for(u=new Array(n),i=new Array(n),t=0;t<n;++t)i[t]=+e(o[t],t,o),u[t]=isNaN(i[t])?0:+s(o[t],t,o)}}return"function"!=typeof e&&(e=Object(r.default)(+e)),null==t&&(t=0),null==n&&(n=0),a.initialize=function(e){o=e,c()},a.strength=function(e){return arguments.length?(s="function"==typeof e?e:Object(r.default)(+e),c(),a):s},a.radius=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),c(),a):e},a.x=function(e){return arguments.length?(t=+e,a):t},a.y=function(e){return arguments.length?(n=+e,a):n},a}},"./node_modules/d3-force/src/simulation.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-force/src/simulation.js ***!
  \*************************************************/
/*! exports provided: x, y, default */function(e,t,n){"use strict";n.r(t),n.d(t,"x",(function(){return i})),n.d(t,"y",(function(){return s}));var r=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js"),o=n(/*! d3-collection */"./node_modules/d3-collection/src/index.js"),u=n(/*! d3-timer */"./node_modules/d3-timer/src/index.js");function i(e){return e.x}function s(e){return e.y}var a=Math.PI*(3-Math.sqrt(5));t.default=function(e){var t,n=1,i=.001,s=1-Math.pow(i,1/300),c=0,d=.6,l=Object(o.map)(),f=Object(u.timer)(m),h=Object(r.dispatch)("tick","end");function m(){p(),h.call("tick",t),n<i&&(f.stop(),h.call("end",t))}function p(r){var o,u,i=e.length;void 0===r&&(r=1);for(var a=0;a<r;++a)for(n+=(c-n)*s,l.each((function(e){e(n)})),o=0;o<i;++o)null==(u=e[o]).fx?u.x+=u.vx*=d:(u.x=u.fx,u.vx=0),null==u.fy?u.y+=u.vy*=d:(u.y=u.fy,u.vy=0);return t}function _(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,null!=t.fx&&(t.x=t.fx),null!=t.fy&&(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var o=10*Math.sqrt(n),u=n*a;t.x=o*Math.cos(u),t.y=o*Math.sin(u)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function g(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),_(),t={tick:p,restart:function(){return f.restart(m),t},stop:function(){return f.stop(),t},nodes:function(n){return arguments.length?(e=n,_(),l.each(g),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(i=+e,t):i},alphaDecay:function(e){return arguments.length?(s=+e,t):+s},alphaTarget:function(e){return arguments.length?(c=+e,t):c},velocityDecay:function(e){return arguments.length?(d=1-e,t):1-d},force:function(e,n){return arguments.length>1?(null==n?l.remove(e):l.set(e,g(n)),t):l.get(e)},find:function(t,n,r){var o,u,i,s,a,c=0,d=e.length;for(null==r?r=1/0:r*=r,c=0;c<d;++c)(i=(o=t-(s=e[c]).x)*o+(u=n-s.y)*u)<r&&(a=s,r=i);return a},on:function(e,n){return arguments.length>1?(h.on(e,n),t):h.on(e)}}}},"./node_modules/d3-force/src/x.js":
/*!****************************************!*\
  !*** ./node_modules/d3-force/src/x.js ***!
  \****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js");t.default=function(e){var t,n,o,u=Object(r.default)(.1);function i(e){for(var r,u=0,i=t.length;u<i;++u)(r=t[u]).vx+=(o[u]-r.x)*n[u]*e}function s(){if(t){var r,i=t.length;for(n=new Array(i),o=new Array(i),r=0;r<i;++r)n[r]=isNaN(o[r]=+e(t[r],r,t))?0:+u(t[r],r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?0:+e)),i.initialize=function(e){t=e,s()},i.strength=function(e){return arguments.length?(u="function"==typeof e?e:Object(r.default)(+e),s(),i):u},i.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),s(),i):e},i}},"./node_modules/d3-force/src/y.js":
/*!****************************************!*\
  !*** ./node_modules/d3-force/src/y.js ***!
  \****************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-force/src/constant.js");t.default=function(e){var t,n,o,u=Object(r.default)(.1);function i(e){for(var r,u=0,i=t.length;u<i;++u)(r=t[u]).vy+=(o[u]-r.y)*n[u]*e}function s(){if(t){var r,i=t.length;for(n=new Array(i),o=new Array(i),r=0;r<i;++r)n[r]=isNaN(o[r]=+e(t[r],r,t))?0:+u(t[r],r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?0:+e)),i.initialize=function(e){t=e,s()},i.strength=function(e){return arguments.length?(u="function"==typeof e?e:Object(r.default)(+e),s(),i):u},i.y=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),s(),i):e},i}},"./node_modules/d3-format/src/defaultLocale.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/defaultLocale.js ***!
  \*****************************************************/
/*! exports provided: format, formatPrefix, default */function(e,t,n){"use strict";n.r(t),n.d(t,"format",(function(){return o})),n.d(t,"formatPrefix",(function(){return u})),n.d(t,"default",(function(){return s}));var r,o,u,i=n(/*! ./locale.js */"./node_modules/d3-format/src/locale.js");function s(e){return r=Object(i.default)(e),o=r.format,u=r.formatPrefix,r}s({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"})},"./node_modules/d3-format/src/exponent.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/exponent.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./formatDecimal.js */"./node_modules/d3-format/src/formatDecimal.js");t.default=function(e){return(e=Object(r.default)(Math.abs(e)))?e[1]:NaN}},"./node_modules/d3-format/src/formatDecimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatDecimal.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}},"./node_modules/d3-format/src/formatGroup.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatGroup.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return function(n,r){for(var o=n.length,u=[],i=0,s=e[0],a=0;o>0&&s>0&&(a+s+1>r&&(s=Math.max(1,r-a)),u.push(n.substring(o-=s,o+s)),!((a+=s+1)>r));)s=e[i=(i+1)%e.length];return u.reverse().join(t)}}},"./node_modules/d3-format/src/formatNumerals.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/formatNumerals.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}},"./node_modules/d3-format/src/formatPrefixAuto.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-format/src/formatPrefixAuto.js ***!
  \********************************************************/
/*! exports provided: prefixExponent, default */function(e,t,n){"use strict";n.r(t),n.d(t,"prefixExponent",(function(){return r}));var r,o=n(/*! ./formatDecimal.js */"./node_modules/d3-format/src/formatDecimal.js");t.default=function(e,t){var n=Object(o.default)(e,t);if(!n)return e+"";var u=n[0],i=n[1],s=i-(r=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=u.length;return s===a?u:s>a?u+new Array(s-a+1).join("0"):s>0?u.slice(0,s)+"."+u.slice(s):"0."+new Array(1-s).join("0")+Object(o.default)(e,Math.max(0,t+s-1))[0]}},"./node_modules/d3-format/src/formatRounded.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatRounded.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./formatDecimal.js */"./node_modules/d3-format/src/formatDecimal.js");t.default=function(e,t){var n=Object(r.default)(e,t);if(!n)return e+"";var o=n[0],u=n[1];return u<0?"0."+new Array(-u).join("0")+o:o.length>u+1?o.slice(0,u+1)+"."+o.slice(u+1):o+new Array(u-o.length+2).join("0")}},"./node_modules/d3-format/src/formatSpecifier.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/formatSpecifier.js ***!
  \*******************************************************/
/*! exports provided: default, FormatSpecifier */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o})),n.d(t,"FormatSpecifier",(function(){return u}));var r=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(e){if(!(t=r.exec(e)))throw new Error("invalid format: "+e);var t;return new u({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function u(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}o.prototype=u.prototype,u.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type}},"./node_modules/d3-format/src/formatTrim.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-format/src/formatTrim.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){e:for(var t,n=e.length,r=1,o=-1;r<n;++r)switch(e[r]){case".":o=t=r;break;case"0":0===o&&(o=r),t=r;break;default:if(!+e[r])break e;o>0&&(o=0)}return o>0?e.slice(0,o)+e.slice(t+1):e}},"./node_modules/d3-format/src/formatTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatTypes.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./formatPrefixAuto.js */"./node_modules/d3-format/src/formatPrefixAuto.js"),o=n(/*! ./formatRounded.js */"./node_modules/d3-format/src/formatRounded.js");t.default={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Object(o.default)(100*e,t)},r:o.default,s:r.default,X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}}},"./node_modules/d3-format/src/identity.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/identity.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-format/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-format/src/index.js ***!
  \*********************************************/
/*! exports provided: formatDefaultLocale, format, formatPrefix, formatLocale, formatSpecifier, FormatSpecifier, precisionFixed, precisionPrefix, precisionRound */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultLocale.js */"./node_modules/d3-format/src/defaultLocale.js");n.d(t,"formatDefaultLocale",(function(){return r.default})),n.d(t,"format",(function(){return r.format})),n.d(t,"formatPrefix",(function(){return r.formatPrefix}));var o=n(/*! ./locale.js */"./node_modules/d3-format/src/locale.js");n.d(t,"formatLocale",(function(){return o.default}));var u=n(/*! ./formatSpecifier.js */"./node_modules/d3-format/src/formatSpecifier.js");n.d(t,"formatSpecifier",(function(){return u.default})),n.d(t,"FormatSpecifier",(function(){return u.FormatSpecifier}));var i=n(/*! ./precisionFixed.js */"./node_modules/d3-format/src/precisionFixed.js");n.d(t,"precisionFixed",(function(){return i.default}));var s=n(/*! ./precisionPrefix.js */"./node_modules/d3-format/src/precisionPrefix.js");n.d(t,"precisionPrefix",(function(){return s.default}));var a=n(/*! ./precisionRound.js */"./node_modules/d3-format/src/precisionRound.js");n.d(t,"precisionRound",(function(){return a.default}))},"./node_modules/d3-format/src/locale.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-format/src/locale.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./exponent.js */"./node_modules/d3-format/src/exponent.js"),o=n(/*! ./formatGroup.js */"./node_modules/d3-format/src/formatGroup.js"),u=n(/*! ./formatNumerals.js */"./node_modules/d3-format/src/formatNumerals.js"),i=n(/*! ./formatSpecifier.js */"./node_modules/d3-format/src/formatSpecifier.js"),s=n(/*! ./formatTrim.js */"./node_modules/d3-format/src/formatTrim.js"),a=n(/*! ./formatTypes.js */"./node_modules/d3-format/src/formatTypes.js"),c=n(/*! ./formatPrefixAuto.js */"./node_modules/d3-format/src/formatPrefixAuto.js"),d=n(/*! ./identity.js */"./node_modules/d3-format/src/identity.js"),l=Array.prototype.map,f=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];t.default=function(e){var t=void 0===e.grouping||void 0===e.thousands?d.default:Object(o.default)(l.call(e.grouping,Number),e.thousands+""),n=void 0===e.currency?"":e.currency[0]+"",h=void 0===e.currency?"":e.currency[1]+"",m=void 0===e.decimal?".":e.decimal+"",p=void 0===e.numerals?d.default:Object(u.default)(l.call(e.numerals,String)),_=void 0===e.percent?"%":e.percent+"",g=void 0===e.minus?"-":e.minus+"",v=void 0===e.nan?"NaN":e.nan+"";function j(e){var r=(e=Object(i.default)(e)).fill,o=e.align,u=e.sign,d=e.symbol,l=e.zero,j=e.width,b=e.comma,y=e.precision,x=e.trim,w=e.type;"n"===w?(b=!0,w="g"):a.default[w]||(void 0===y&&(y=12),x=!0,w="g"),(l||"0"===r&&"="===o)&&(l=!0,r="0",o="=");var O="$"===d?n:"#"===d&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",M="$"===d?h:/[%p]/.test(w)?_:"",S=a.default[w],E=/[defgprs%]/.test(w);function k(e){var n,i,a,d=O,h=M;if("c"===w)h=S(e)+h,e="";else{var _=(e=+e)<0||1/e<0;if(e=isNaN(e)?v:S(Math.abs(e),y),x&&(e=Object(s.default)(e)),_&&0==+e&&"+"!==u&&(_=!1),d=(_?"("===u?u:g:"-"===u||"("===u?"":u)+d,h=("s"===w?f[8+c.prefixExponent/3]:"")+h+(_&&"("===u?")":""),E)for(n=-1,i=e.length;++n<i;)if(48>(a=e.charCodeAt(n))||a>57){h=(46===a?m+e.slice(n+1):e.slice(n))+h,e=e.slice(0,n);break}}b&&!l&&(e=t(e,1/0));var k=d.length+e.length+h.length,C=k<j?new Array(j-k+1).join(r):"";switch(b&&l&&(e=t(C+e,C.length?j-h.length:1/0),C=""),o){case"<":e=d+e+h+C;break;case"=":e=d+C+e+h;break;case"^":e=C.slice(0,k=C.length>>1)+d+e+h+C.slice(k);break;default:e=C+d+e+h}return p(e)}return y=void 0===y?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),k.toString=function(){return e+""},k}return{format:j,formatPrefix:function(e,t){var n=j(((e=Object(i.default)(e)).type="f",e)),o=3*Math.max(-8,Math.min(8,Math.floor(Object(r.default)(t)/3))),u=Math.pow(10,-o),s=f[8+o/3];return function(e){return n(u*e)+s}}}}},"./node_modules/d3-format/src/precisionFixed.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionFixed.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./exponent.js */"./node_modules/d3-format/src/exponent.js");t.default=function(e){return Math.max(0,-Object(r.default)(Math.abs(e)))}},"./node_modules/d3-format/src/precisionPrefix.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionPrefix.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./exponent.js */"./node_modules/d3-format/src/exponent.js");t.default=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Object(r.default)(t)/3)))-Object(r.default)(Math.abs(e)))}},"./node_modules/d3-format/src/precisionRound.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionRound.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./exponent.js */"./node_modules/d3-format/src/exponent.js");t.default=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Object(r.default)(t)-Object(r.default)(e))+1}},"./node_modules/d3-geo/src/adder.js":
/*!******************************************!*\
  !*** ./node_modules/d3-geo/src/adder.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this.reset()}n.r(t),t.default=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(e){u(o,e,this.t),u(this,o.s,this.s),this.s?this.t+=o.t:this.s=o.t},valueOf:function(){return this.s}};var o=new r;function u(e,t,n){var r=e.s=t+n,o=r-t,u=r-o;e.t=t-u+(n-o)}},"./node_modules/d3-geo/src/area.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-geo/src/area.js ***!
  \*****************************************/
/*! exports provided: areaRingSum, areaStream, default */function(e,t,n){"use strict";n.r(t),n.d(t,"areaRingSum",(function(){return f})),n.d(t,"areaStream",(function(){return m}));var r,o,u,i,s,a=n(/*! ./adder.js */"./node_modules/d3-geo/src/adder.js"),c=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),d=n(/*! ./noop.js */"./node_modules/d3-geo/src/noop.js"),l=n(/*! ./stream.js */"./node_modules/d3-geo/src/stream.js"),f=Object(a.default)(),h=Object(a.default)(),m={point:d.default,lineStart:d.default,lineEnd:d.default,polygonStart:function(){f.reset(),m.lineStart=p,m.lineEnd=_},polygonEnd:function(){var e=+f;h.add(e<0?c.tau+e:e),this.lineStart=this.lineEnd=this.point=d.default},sphere:function(){h.add(c.tau)}};function p(){m.point=g}function _(){v(r,o)}function g(e,t){m.point=v,r=e,o=t,e*=c.radians,t*=c.radians,u=e,i=Object(c.cos)(t=t/2+c.quarterPi),s=Object(c.sin)(t)}function v(e,t){e*=c.radians,t=(t*=c.radians)/2+c.quarterPi;var n=e-u,r=n>=0?1:-1,o=r*n,a=Object(c.cos)(t),d=Object(c.sin)(t),l=s*d,h=i*a+l*Object(c.cos)(o),m=l*r*Object(c.sin)(o);f.add(Object(c.atan2)(m,h)),u=e,i=a,s=d}t.default=function(e){return h.reset(),Object(l.default)(e,m),2*h}},"./node_modules/d3-geo/src/bounds.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-geo/src/bounds.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i,s,a,c,d,l,f,h=n(/*! ./adder.js */"./node_modules/d3-geo/src/adder.js"),m=n(/*! ./area.js */"./node_modules/d3-geo/src/area.js"),p=n(/*! ./cartesian.js */"./node_modules/d3-geo/src/cartesian.js"),_=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),g=n(/*! ./stream.js */"./node_modules/d3-geo/src/stream.js"),v=Object(h.default)(),j={point:b,lineStart:x,lineEnd:w,polygonStart:function(){j.point=O,j.lineStart=M,j.lineEnd=S,v.reset(),m.areaStream.polygonStart()},polygonEnd:function(){m.areaStream.polygonEnd(),j.point=b,j.lineStart=x,j.lineEnd=w,m.areaRingSum<0?(r=-(u=180),o=-(i=90)):v>_.epsilon?i=90:v<-_.epsilon&&(o=-90),f[0]=r,f[1]=u},sphere:function(){r=-(u=180),o=-(i=90)}};function b(e,t){l.push(f=[r=e,u=e]),t<o&&(o=t),t>i&&(i=t)}function y(e,t){var n=Object(p.cartesian)([e*_.radians,t*_.radians]);if(d){var a=Object(p.cartesianCross)(d,n),c=[a[1],-a[0],0],h=Object(p.cartesianCross)(c,a);Object(p.cartesianNormalizeInPlace)(h),h=Object(p.spherical)(h);var m,g=e-s,v=g>0?1:-1,j=h[0]*_.degrees*v,b=Object(_.abs)(g)>180;b^(v*s<j&&j<v*e)?(m=h[1]*_.degrees)>i&&(i=m):b^(v*s<(j=(j+360)%360-180)&&j<v*e)?(m=-h[1]*_.degrees)<o&&(o=m):(t<o&&(o=t),t>i&&(i=t)),b?e<s?E(r,e)>E(r,u)&&(u=e):E(e,u)>E(r,u)&&(r=e):u>=r?(e<r&&(r=e),e>u&&(u=e)):e>s?E(r,e)>E(r,u)&&(u=e):E(e,u)>E(r,u)&&(r=e)}else l.push(f=[r=e,u=e]);t<o&&(o=t),t>i&&(i=t),d=n,s=e}function x(){j.point=y}function w(){f[0]=r,f[1]=u,j.point=b,d=null}function O(e,t){if(d){var n=e-s;v.add(Object(_.abs)(n)>180?n+(n>0?360:-360):n)}else a=e,c=t;m.areaStream.point(e,t),y(e,t)}function M(){m.areaStream.lineStart()}function S(){O(a,c),m.areaStream.lineEnd(),Object(_.abs)(v)>_.epsilon&&(r=-(u=180)),f[0]=r,f[1]=u,d=null}function E(e,t){return(t-=e)<0?t+360:t}function k(e,t){return e[0]-t[0]}function C(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}t.default=function(e){var t,n,s,a,c,d,h;if(i=u=-(r=o=1/0),l=[],Object(g.default)(e,j),n=l.length){for(l.sort(k),t=1,c=[s=l[0]];t<n;++t)C(s,(a=l[t])[0])||C(s,a[1])?(E(s[0],a[1])>E(s[0],s[1])&&(s[1]=a[1]),E(a[0],s[1])>E(s[0],s[1])&&(s[0]=a[0])):c.push(s=a);for(d=-1/0,t=0,s=c[n=c.length-1];t<=n;s=a,++t)a=c[t],(h=E(s[1],a[0]))>d&&(d=h,r=a[0],u=s[1])}return l=f=null,r===1/0||o===1/0?[[NaN,NaN],[NaN,NaN]]:[[r,o],[u,i]]}},"./node_modules/d3-geo/src/cartesian.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-geo/src/cartesian.js ***!
  \**********************************************/
/*! exports provided: spherical, cartesian, cartesianDot, cartesianCross, cartesianAddInPlace, cartesianScale, cartesianNormalizeInPlace */function(e,t,n){"use strict";n.r(t),n.d(t,"spherical",(function(){return o})),n.d(t,"cartesian",(function(){return u})),n.d(t,"cartesianDot",(function(){return i})),n.d(t,"cartesianCross",(function(){return s})),n.d(t,"cartesianAddInPlace",(function(){return a})),n.d(t,"cartesianScale",(function(){return c})),n.d(t,"cartesianNormalizeInPlace",(function(){return d}));var r=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js");function o(e){return[Object(r.atan2)(e[1],e[0]),Object(r.asin)(e[2])]}function u(e){var t=e[0],n=e[1],o=Object(r.cos)(n);return[o*Object(r.cos)(t),o*Object(r.sin)(t),Object(r.sin)(n)]}function i(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function s(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function a(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function c(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function d(e){var t=Object(r.sqrt)(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}},"./node_modules/d3-geo/src/centroid.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/centroid.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i,s,a,c,d,l,f,h,m,p,_,g,v,j=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),b=n(/*! ./noop.js */"./node_modules/d3-geo/src/noop.js"),y=n(/*! ./stream.js */"./node_modules/d3-geo/src/stream.js"),x={sphere:b.default,point:w,lineStart:M,lineEnd:k,polygonStart:function(){x.lineStart=C,x.lineEnd=A},polygonEnd:function(){x.lineStart=M,x.lineEnd=k}};function w(e,t){e*=j.radians,t*=j.radians;var n=Object(j.cos)(t);O(n*Object(j.cos)(e),n*Object(j.sin)(e),Object(j.sin)(t))}function O(e,t,n){++r,u+=(e-u)/r,i+=(t-i)/r,s+=(n-s)/r}function M(){x.point=S}function S(e,t){e*=j.radians,t*=j.radians;var n=Object(j.cos)(t);_=n*Object(j.cos)(e),g=n*Object(j.sin)(e),v=Object(j.sin)(t),x.point=E,O(_,g,v)}function E(e,t){e*=j.radians,t*=j.radians;var n=Object(j.cos)(t),r=n*Object(j.cos)(e),u=n*Object(j.sin)(e),i=Object(j.sin)(t),s=Object(j.atan2)(Object(j.sqrt)((s=g*i-v*u)*s+(s=v*r-_*i)*s+(s=_*u-g*r)*s),_*r+g*u+v*i);o+=s,a+=s*(_+(_=r)),c+=s*(g+(g=u)),d+=s*(v+(v=i)),O(_,g,v)}function k(){x.point=w}function C(){x.point=T}function A(){R(m,p),x.point=w}function T(e,t){m=e,p=t,e*=j.radians,t*=j.radians,x.point=R;var n=Object(j.cos)(t);_=n*Object(j.cos)(e),g=n*Object(j.sin)(e),v=Object(j.sin)(t),O(_,g,v)}function R(e,t){e*=j.radians,t*=j.radians;var n=Object(j.cos)(t),r=n*Object(j.cos)(e),u=n*Object(j.sin)(e),i=Object(j.sin)(t),s=g*i-v*u,m=v*r-_*i,p=_*u-g*r,b=Object(j.sqrt)(s*s+m*m+p*p),y=Object(j.asin)(b),x=b&&-y/b;l+=x*s,f+=x*m,h+=x*p,o+=y,a+=y*(_+(_=r)),c+=y*(g+(g=u)),d+=y*(v+(v=i)),O(_,g,v)}t.default=function(e){r=o=u=i=s=a=c=d=l=f=h=0,Object(y.default)(e,x);var t=l,n=f,m=h,p=t*t+n*n+m*m;return p<j.epsilon2&&(t=a,n=c,m=d,o<j.epsilon&&(t=u,n=i,m=s),(p=t*t+n*n+m*m)<j.epsilon2)?[NaN,NaN]:[Object(j.atan2)(n,t)*j.degrees,Object(j.asin)(m/Object(j.sqrt)(p))*j.degrees]}},"./node_modules/d3-geo/src/circle.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-geo/src/circle.js ***!
  \*******************************************/
/*! exports provided: circleStream, default */function(e,t,n){"use strict";n.r(t),n.d(t,"circleStream",(function(){return s}));var r=n(/*! ./cartesian.js */"./node_modules/d3-geo/src/cartesian.js"),o=n(/*! ./constant.js */"./node_modules/d3-geo/src/constant.js"),u=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),i=n(/*! ./rotation.js */"./node_modules/d3-geo/src/rotation.js");function s(e,t,n,o,i,s){if(n){var c=Object(u.cos)(t),d=Object(u.sin)(t),l=o*n;null==i?(i=t+o*u.tau,s=t-l/2):(i=a(c,i),s=a(c,s),(o>0?i<s:i>s)&&(i+=o*u.tau));for(var f,h=i;o>0?h>s:h<s;h-=l)f=Object(r.spherical)([c,-d*Object(u.cos)(h),-d*Object(u.sin)(h)]),e.point(f[0],f[1])}}function a(e,t){(t=Object(r.cartesian)(t))[0]-=e,Object(r.cartesianNormalizeInPlace)(t);var n=Object(u.acos)(-t[1]);return((-t[2]<0?-n:n)+u.tau-u.epsilon)%u.tau}t.default=function(){var e,t,n=Object(o.default)([0,0]),r=Object(o.default)(90),a=Object(o.default)(6),c={point:function(n,r){e.push(n=t(n,r)),n[0]*=u.degrees,n[1]*=u.degrees}};function d(){var o=n.apply(this,arguments),d=r.apply(this,arguments)*u.radians,l=a.apply(this,arguments)*u.radians;return e=[],t=Object(i.rotateRadians)(-o[0]*u.radians,-o[1]*u.radians,0).invert,s(c,d,l,1),o={type:"Polygon",coordinates:[e]},e=t=null,o}return d.center=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)([+e[0],+e[1]]),d):n},d.radius=function(e){return arguments.length?(r="function"==typeof e?e:Object(o.default)(+e),d):r},d.precision=function(e){return arguments.length?(a="function"==typeof e?e:Object(o.default)(+e),d):a},d}},"./node_modules/d3-geo/src/clip/antimeridian.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/antimeridian.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index.js */"./node_modules/d3-geo/src/clip/index.js"),o=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");t.default=Object(r.default)((function(){return!0}),(function(e){var t,n=NaN,r=NaN,u=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(i,s){var a=i>0?o.pi:-o.pi,c=Object(o.abs)(i-n);Object(o.abs)(c-o.pi)<o.epsilon?(e.point(n,r=(r+s)/2>0?o.halfPi:-o.halfPi),e.point(u,r),e.lineEnd(),e.lineStart(),e.point(a,r),e.point(i,r),t=0):u!==a&&c>=o.pi&&(Object(o.abs)(n-u)<o.epsilon&&(n-=u*o.epsilon),Object(o.abs)(i-a)<o.epsilon&&(i-=a*o.epsilon),r=function(e,t,n,r){var u,i,s=Object(o.sin)(e-n);return Object(o.abs)(s)>o.epsilon?Object(o.atan)((Object(o.sin)(t)*(i=Object(o.cos)(r))*Object(o.sin)(n)-Object(o.sin)(r)*(u=Object(o.cos)(t))*Object(o.sin)(e))/(u*i*s)):(t+r)/2}(n,r,i,s),e.point(u,r),e.lineEnd(),e.lineStart(),e.point(a,r),t=0),e.point(n=i,r=s),u=a},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function(e,t,n,r){var u;if(null==e)u=n*o.halfPi,r.point(-o.pi,u),r.point(0,u),r.point(o.pi,u),r.point(o.pi,0),r.point(o.pi,-u),r.point(0,-u),r.point(-o.pi,-u),r.point(-o.pi,0),r.point(-o.pi,u);else if(Object(o.abs)(e[0]-t[0])>o.epsilon){var i=e[0]<t[0]?o.pi:-o.pi;u=n*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}),[-o.pi,-o.halfPi])},"./node_modules/d3-geo/src/clip/buffer.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/buffer.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../noop.js */"./node_modules/d3-geo/src/noop.js");t.default=function(){var e,t=[];return{point:function(t,n,r){e.push([t,n,r])},lineStart:function(){t.push(e=[])},lineEnd:r.default,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}}},"./node_modules/d3-geo/src/clip/circle.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/circle.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../cartesian.js */"./node_modules/d3-geo/src/cartesian.js"),o=n(/*! ../circle.js */"./node_modules/d3-geo/src/circle.js"),u=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),i=n(/*! ../pointEqual.js */"./node_modules/d3-geo/src/pointEqual.js"),s=n(/*! ./index.js */"./node_modules/d3-geo/src/clip/index.js");t.default=function(e){var t=Object(u.cos)(e),n=6*u.radians,a=t>0,c=Object(u.abs)(t)>u.epsilon;function d(e,n){return Object(u.cos)(e)*Object(u.cos)(n)>t}function l(e,n,o){var i=Object(r.cartesian)(e),s=Object(r.cartesian)(n),a=[1,0,0],c=Object(r.cartesianCross)(i,s),d=Object(r.cartesianDot)(c,c),l=c[0],f=d-l*l;if(!f)return!o&&e;var h=t*d/f,m=-t*l/f,p=Object(r.cartesianCross)(a,c),_=Object(r.cartesianScale)(a,h),g=Object(r.cartesianScale)(c,m);Object(r.cartesianAddInPlace)(_,g);var v=p,j=Object(r.cartesianDot)(_,v),b=Object(r.cartesianDot)(v,v),y=j*j-b*(Object(r.cartesianDot)(_,_)-1);if(!(y<0)){var x=Object(u.sqrt)(y),w=Object(r.cartesianScale)(v,(-j-x)/b);if(Object(r.cartesianAddInPlace)(w,_),w=Object(r.spherical)(w),!o)return w;var O,M=e[0],S=n[0],E=e[1],k=n[1];S<M&&(O=M,M=S,S=O);var C=S-M,A=Object(u.abs)(C-u.pi)<u.epsilon;if(!A&&k<E&&(O=E,E=k,k=O),A||C<u.epsilon?A?E+k>0^w[1]<(Object(u.abs)(w[0]-M)<u.epsilon?E:k):E<=w[1]&&w[1]<=k:C>u.pi^(M<=w[0]&&w[0]<=S)){var T=Object(r.cartesianScale)(v,(-j+x)/b);return Object(r.cartesianAddInPlace)(T,_),[w,Object(r.spherical)(T)]}}}function f(t,n){var r=a?e:u.pi-e,o=0;return t<-r?o|=1:t>r&&(o|=2),n<-r?o|=4:n>r&&(o|=8),o}return Object(s.default)(d,(function(e){var t,n,r,o,s;return{lineStart:function(){o=r=!1,s=1},point:function(h,m){var p,_=[h,m],g=d(h,m),v=a?g?0:f(h,m):g?f(h+(h<0?u.pi:-u.pi),m):0;if(!t&&(o=r=g)&&e.lineStart(),g!==r&&(!(p=l(t,_))||Object(i.default)(t,p)||Object(i.default)(_,p))&&(_[2]=1),g!==r)s=0,g?(e.lineStart(),p=l(_,t),e.point(p[0],p[1])):(p=l(t,_),e.point(p[0],p[1],2),e.lineEnd()),t=p;else if(c&&t&&a^g){var j;v&n||!(j=l(_,t,!0))||(s=0,a?(e.lineStart(),e.point(j[0][0],j[0][1]),e.point(j[1][0],j[1][1]),e.lineEnd()):(e.point(j[1][0],j[1][1]),e.lineEnd(),e.lineStart(),e.point(j[0][0],j[0][1],3)))}!g||t&&Object(i.default)(t,_)||e.point(_[0],_[1]),t=_,r=g,n=v},lineEnd:function(){r&&e.lineEnd(),t=null},clean:function(){return s|(o&&r)<<1}}}),(function(t,r,u,i){Object(o.circleStream)(i,e,n,u,t,r)}),a?[0,-e]:[-u.pi,e-u.pi])}},"./node_modules/d3-geo/src/clip/extent.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/extent.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./rectangle.js */"./node_modules/d3-geo/src/clip/rectangle.js");t.default=function(){var e,t,n,o=0,u=0,i=960,s=500;return n={stream:function(n){return e&&t===n?e:e=Object(r.default)(o,u,i,s)(t=n)},extent:function(r){return arguments.length?(o=+r[0][0],u=+r[0][1],i=+r[1][0],s=+r[1][1],e=t=null,n):[[o,u],[i,s]]}}}},"./node_modules/d3-geo/src/clip/index.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-geo/src/clip/index.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./buffer.js */"./node_modules/d3-geo/src/clip/buffer.js"),o=n(/*! ./rejoin.js */"./node_modules/d3-geo/src/clip/rejoin.js"),u=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),i=n(/*! ../polygonContains.js */"./node_modules/d3-geo/src/polygonContains.js"),s=n(/*! d3-array */"./node_modules/d3-array/src/index.js");function a(e){return e.length>1}function c(e,t){return((e=e.x)[0]<0?e[1]-u.halfPi-u.epsilon:u.halfPi-e[1])-((t=t.x)[0]<0?t[1]-u.halfPi-u.epsilon:u.halfPi-t[1])}t.default=function(e,t,n,u){return function(d){var l,f,h,m=t(d),p=Object(r.default)(),_=t(p),g=!1,v={point:j,lineStart:y,lineEnd:x,polygonStart:function(){v.point=w,v.lineStart=O,v.lineEnd=M,f=[],l=[]},polygonEnd:function(){v.point=j,v.lineStart=y,v.lineEnd=x,f=Object(s.merge)(f);var e=Object(i.default)(l,u);f.length?(g||(d.polygonStart(),g=!0),Object(o.default)(f,c,e,n,d)):e&&(g||(d.polygonStart(),g=!0),d.lineStart(),n(null,null,1,d),d.lineEnd()),g&&(d.polygonEnd(),g=!1),f=l=null},sphere:function(){d.polygonStart(),d.lineStart(),n(null,null,1,d),d.lineEnd(),d.polygonEnd()}};function j(t,n){e(t,n)&&d.point(t,n)}function b(e,t){m.point(e,t)}function y(){v.point=b,m.lineStart()}function x(){v.point=j,m.lineEnd()}function w(e,t){h.push([e,t]),_.point(e,t)}function O(){_.lineStart(),h=[]}function M(){w(h[0][0],h[0][1]),_.lineEnd();var e,t,n,r,o=_.clean(),u=p.result(),i=u.length;if(h.pop(),l.push(h),h=null,i)if(1&o){if((t=(n=u[0]).length-1)>0){for(g||(d.polygonStart(),g=!0),d.lineStart(),e=0;e<t;++e)d.point((r=n[e])[0],r[1]);d.lineEnd()}}else i>1&&2&o&&u.push(u.pop().concat(u.shift())),f.push(u.filter(a))}return v}}},"./node_modules/d3-geo/src/clip/line.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-geo/src/clip/line.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o,u){var i,s=e[0],a=e[1],c=0,d=1,l=t[0]-s,f=t[1]-a;if(i=n-s,l||!(i>0)){if(i/=l,l<0){if(i<c)return;i<d&&(d=i)}else if(l>0){if(i>d)return;i>c&&(c=i)}if(i=o-s,l||!(i<0)){if(i/=l,l<0){if(i>d)return;i>c&&(c=i)}else if(l>0){if(i<c)return;i<d&&(d=i)}if(i=r-a,f||!(i>0)){if(i/=f,f<0){if(i<c)return;i<d&&(d=i)}else if(f>0){if(i>d)return;i>c&&(c=i)}if(i=u-a,f||!(i<0)){if(i/=f,f<0){if(i>d)return;i>c&&(c=i)}else if(f>0){if(i<c)return;i<d&&(d=i)}return c>0&&(e[0]=s+c*l,e[1]=a+c*f),d<1&&(t[0]=s+d*l,t[1]=a+d*f),!0}}}}}},"./node_modules/d3-geo/src/clip/rectangle.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/rectangle.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./buffer.js */"./node_modules/d3-geo/src/clip/buffer.js"),u=n(/*! ./line.js */"./node_modules/d3-geo/src/clip/line.js"),i=n(/*! ./rejoin.js */"./node_modules/d3-geo/src/clip/rejoin.js"),s=n(/*! d3-array */"./node_modules/d3-array/src/index.js");function a(e,t,n,a){function c(r,o){return e<=r&&r<=n&&t<=o&&o<=a}function d(r,o,u,i){var s=0,c=0;if(null==r||(s=l(r,u))!==(c=l(o,u))||h(r,o)<0^u>0)do{i.point(0===s||3===s?e:n,s>1?a:t)}while((s=(s+u+4)%4)!==c);else i.point(o[0],o[1])}function l(o,u){return Object(r.abs)(o[0]-e)<r.epsilon?u>0?0:3:Object(r.abs)(o[0]-n)<r.epsilon?u>0?2:1:Object(r.abs)(o[1]-t)<r.epsilon?u>0?1:0:u>0?3:2}function f(e,t){return h(e.x,t.x)}function h(e,t){var n=l(e,1),r=l(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(r){var l,h,m,p,_,g,v,j,b,y,x,w=r,O=Object(o.default)(),M={point:S,lineStart:function(){M.point=E,h&&h.push(m=[]);y=!0,b=!1,v=j=NaN},lineEnd:function(){l&&(E(p,_),g&&b&&O.rejoin(),l.push(O.result()));M.point=S,b&&w.lineEnd()},polygonStart:function(){w=O,l=[],h=[],x=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,r=h.length;n<r;++n)for(var o,u,i=h[n],s=1,c=i.length,d=i[0],l=d[0],f=d[1];s<c;++s)o=l,u=f,d=i[s],l=d[0],f=d[1],u<=a?f>a&&(l-o)*(a-u)>(f-u)*(e-o)&&++t:f<=a&&(l-o)*(a-u)<(f-u)*(e-o)&&--t;return t}(),n=x&&t,o=(l=Object(s.merge)(l)).length;(n||o)&&(r.polygonStart(),n&&(r.lineStart(),d(null,null,1,r),r.lineEnd()),o&&Object(i.default)(l,f,t,d,r),r.polygonEnd());w=r,l=h=m=null}};function S(e,t){c(e,t)&&w.point(e,t)}function E(r,o){var i=c(r,o);if(h&&m.push([r,o]),y)p=r,_=o,g=i,y=!1,i&&(w.lineStart(),w.point(r,o));else if(i&&b)w.point(r,o);else{var s=[v=Math.max(-1e9,Math.min(1e9,v)),j=Math.max(-1e9,Math.min(1e9,j))],d=[r=Math.max(-1e9,Math.min(1e9,r)),o=Math.max(-1e9,Math.min(1e9,o))];Object(u.default)(s,d,e,t,n,a)?(b||(w.lineStart(),w.point(s[0],s[1])),w.point(d[0],d[1]),i||w.lineEnd(),x=!1):i&&(w.lineStart(),w.point(r,o),x=!1)}v=r,j=o,b=i}return M}}},"./node_modules/d3-geo/src/clip/rejoin.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/clip/rejoin.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../pointEqual.js */"./node_modules/d3-geo/src/pointEqual.js"),o=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");function u(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function i(e){if(t=e.length){for(var t,n,r=0,o=e[0];++r<t;)o.n=n=e[r],n.p=o,o=n;o.n=n=e[0],n.p=o}}t.default=function(e,t,n,s,a){var c,d,l=[],f=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,i=e[0],s=e[t];if(Object(r.default)(i,s)){if(!i[2]&&!s[2]){for(a.lineStart(),c=0;c<t;++c)a.point((i=e[c])[0],i[1]);return void a.lineEnd()}s[0]+=2*o.epsilon}l.push(n=new u(i,e,null,!0)),f.push(n.o=new u(i,null,n,!1)),l.push(n=new u(s,e,null,!1)),f.push(n.o=new u(s,null,n,!0))}})),l.length){for(f.sort(t),i(l),i(f),c=0,d=f.length;c<d;++c)f[c].e=n=!n;for(var h,m,p=l[0];;){for(var _=p,g=!0;_.v;)if((_=_.n)===p)return;h=_.z,a.lineStart();do{if(_.v=_.o.v=!0,_.e){if(g)for(c=0,d=h.length;c<d;++c)a.point((m=h[c])[0],m[1]);else s(_.x,_.n.x,1,a);_=_.n}else{if(g)for(h=_.p.z,c=h.length-1;c>=0;--c)a.point((m=h[c])[0],m[1]);else s(_.x,_.p.x,-1,a);_=_.p}h=(_=_.o).z,g=!g}while(!_.v);a.lineEnd()}}}},"./node_modules/d3-geo/src/compose.js":
/*!********************************************!*\
  !*** ./node_modules/d3-geo/src/compose.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n}},"./node_modules/d3-geo/src/constant.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/constant.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-geo/src/contains.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/contains.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./polygonContains.js */"./node_modules/d3-geo/src/polygonContains.js"),o=n(/*! ./distance.js */"./node_modules/d3-geo/src/distance.js"),u=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),i={Feature:function(e,t){return a(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,o=n.length;++r<o;)if(a(n[r].geometry,t))return!0;return!1}},s={Sphere:function(){return!0},Point:function(e,t){return c(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(c(n[r],t))return!0;return!1},LineString:function(e,t){return d(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(d(n[r],t))return!0;return!1},Polygon:function(e,t){return l(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(l(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,o=n.length;++r<o;)if(a(n[r],t))return!0;return!1}};function a(e,t){return!(!e||!s.hasOwnProperty(e.type))&&s[e.type](e,t)}function c(e,t){return 0===Object(o.default)(e,t)}function d(e,t){for(var n,r,i,s=0,a=e.length;s<a;s++){if(0===(r=Object(o.default)(e[s],t)))return!0;if(s>0&&(i=Object(o.default)(e[s],e[s-1]))>0&&n<=i&&r<=i&&(n+r-i)*(1-Math.pow((n-r)/i,2))<u.epsilon2*i)return!0;n=r}return!1}function l(e,t){return!!Object(r.default)(e.map(f),h(t))}function f(e){return(e=e.map(h)).pop(),e}function h(e){return[e[0]*u.radians,e[1]*u.radians]}t.default=function(e,t){return(e&&i.hasOwnProperty(e.type)?i[e.type]:a)(e,t)}},"./node_modules/d3-geo/src/distance.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/distance.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./length.js */"./node_modules/d3-geo/src/length.js"),o=[null,null],u={type:"LineString",coordinates:o};t.default=function(e,t){return o[0]=e,o[1]=t,Object(r.default)(u)}},"./node_modules/d3-geo/src/graticule.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-geo/src/graticule.js ***!
  \**********************************************/
/*! exports provided: default, graticule10 */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s})),n.d(t,"graticule10",(function(){return a}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js");function u(e,t,n){var u=Object(r.range)(e,t-o.epsilon,n).concat(t);return function(e){return u.map((function(t){return[e,t]}))}}function i(e,t,n){var u=Object(r.range)(e,t-o.epsilon,n).concat(t);return function(e){return u.map((function(t){return[t,e]}))}}function s(){var e,t,n,s,a,c,d,l,f,h,m,p,_=10,g=_,v=90,j=360,b=2.5;function y(){return{type:"MultiLineString",coordinates:x()}}function x(){return Object(r.range)(Object(o.ceil)(s/v)*v,n,v).map(m).concat(Object(r.range)(Object(o.ceil)(l/j)*j,d,j).map(p)).concat(Object(r.range)(Object(o.ceil)(t/_)*_,e,_).filter((function(e){return Object(o.abs)(e%v)>o.epsilon})).map(f)).concat(Object(r.range)(Object(o.ceil)(c/g)*g,a,g).filter((function(e){return Object(o.abs)(e%j)>o.epsilon})).map(h))}return y.lines=function(){return x().map((function(e){return{type:"LineString",coordinates:e}}))},y.outline=function(){return{type:"Polygon",coordinates:[m(s).concat(p(d).slice(1),m(n).reverse().slice(1),p(l).reverse().slice(1))]}},y.extent=function(e){return arguments.length?y.extentMajor(e).extentMinor(e):y.extentMinor()},y.extentMajor=function(e){return arguments.length?(s=+e[0][0],n=+e[1][0],l=+e[0][1],d=+e[1][1],s>n&&(e=s,s=n,n=e),l>d&&(e=l,l=d,d=e),y.precision(b)):[[s,l],[n,d]]},y.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],c=+n[0][1],a=+n[1][1],t>e&&(n=t,t=e,e=n),c>a&&(n=c,c=a,a=n),y.precision(b)):[[t,c],[e,a]]},y.step=function(e){return arguments.length?y.stepMajor(e).stepMinor(e):y.stepMinor()},y.stepMajor=function(e){return arguments.length?(v=+e[0],j=+e[1],y):[v,j]},y.stepMinor=function(e){return arguments.length?(_=+e[0],g=+e[1],y):[_,g]},y.precision=function(r){return arguments.length?(b=+r,f=u(c,a,90),h=i(t,e,b),m=u(l,d,90),p=i(s,n,b),y):b},y.extentMajor([[-180,-90+o.epsilon],[180,90-o.epsilon]]).extentMinor([[-180,-80-o.epsilon],[180,80+o.epsilon]])}function a(){return s()()}},"./node_modules/d3-geo/src/identity.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/identity.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-geo/src/index.js":
/*!******************************************!*\
  !*** ./node_modules/d3-geo/src/index.js ***!
  \******************************************/
/*! exports provided: geoArea, geoBounds, geoCentroid, geoCircle, geoClipAntimeridian, geoClipCircle, geoClipExtent, geoClipRectangle, geoContains, geoDistance, geoGraticule, geoGraticule10, geoInterpolate, geoLength, geoPath, geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEqualAreaRaw, geoAzimuthalEquidistant, geoAzimuthalEquidistantRaw, geoConicConformal, geoConicConformalRaw, geoConicEqualArea, geoConicEqualAreaRaw, geoConicEquidistant, geoConicEquidistantRaw, geoEqualEarth, geoEqualEarthRaw, geoEquirectangular, geoEquirectangularRaw, geoGnomonic, geoGnomonicRaw, geoIdentity, geoProjection, geoProjectionMutator, geoMercator, geoMercatorRaw, geoNaturalEarth1, geoNaturalEarth1Raw, geoOrthographic, geoOrthographicRaw, geoStereographic, geoStereographicRaw, geoTransverseMercator, geoTransverseMercatorRaw, geoRotation, geoStream, geoTransform */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./area.js */"./node_modules/d3-geo/src/area.js");n.d(t,"geoArea",(function(){return r.default}));var o=n(/*! ./bounds.js */"./node_modules/d3-geo/src/bounds.js");n.d(t,"geoBounds",(function(){return o.default}));var u=n(/*! ./centroid.js */"./node_modules/d3-geo/src/centroid.js");n.d(t,"geoCentroid",(function(){return u.default}));var i=n(/*! ./circle.js */"./node_modules/d3-geo/src/circle.js");n.d(t,"geoCircle",(function(){return i.default}));var s=n(/*! ./clip/antimeridian.js */"./node_modules/d3-geo/src/clip/antimeridian.js");n.d(t,"geoClipAntimeridian",(function(){return s.default}));var a=n(/*! ./clip/circle.js */"./node_modules/d3-geo/src/clip/circle.js");n.d(t,"geoClipCircle",(function(){return a.default}));var c=n(/*! ./clip/extent.js */"./node_modules/d3-geo/src/clip/extent.js");n.d(t,"geoClipExtent",(function(){return c.default}));var d=n(/*! ./clip/rectangle.js */"./node_modules/d3-geo/src/clip/rectangle.js");n.d(t,"geoClipRectangle",(function(){return d.default}));var l=n(/*! ./contains.js */"./node_modules/d3-geo/src/contains.js");n.d(t,"geoContains",(function(){return l.default}));var f=n(/*! ./distance.js */"./node_modules/d3-geo/src/distance.js");n.d(t,"geoDistance",(function(){return f.default}));var h=n(/*! ./graticule.js */"./node_modules/d3-geo/src/graticule.js");n.d(t,"geoGraticule",(function(){return h.default})),n.d(t,"geoGraticule10",(function(){return h.graticule10}));var m=n(/*! ./interpolate.js */"./node_modules/d3-geo/src/interpolate.js");n.d(t,"geoInterpolate",(function(){return m.default}));var p=n(/*! ./length.js */"./node_modules/d3-geo/src/length.js");n.d(t,"geoLength",(function(){return p.default}));var _=n(/*! ./path/index.js */"./node_modules/d3-geo/src/path/index.js");n.d(t,"geoPath",(function(){return _.default}));var g=n(/*! ./projection/albers.js */"./node_modules/d3-geo/src/projection/albers.js");n.d(t,"geoAlbers",(function(){return g.default}));var v=n(/*! ./projection/albersUsa.js */"./node_modules/d3-geo/src/projection/albersUsa.js");n.d(t,"geoAlbersUsa",(function(){return v.default}));var j=n(/*! ./projection/azimuthalEqualArea.js */"./node_modules/d3-geo/src/projection/azimuthalEqualArea.js");n.d(t,"geoAzimuthalEqualArea",(function(){return j.default})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return j.azimuthalEqualAreaRaw}));var b=n(/*! ./projection/azimuthalEquidistant.js */"./node_modules/d3-geo/src/projection/azimuthalEquidistant.js");n.d(t,"geoAzimuthalEquidistant",(function(){return b.default})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return b.azimuthalEquidistantRaw}));var y=n(/*! ./projection/conicConformal.js */"./node_modules/d3-geo/src/projection/conicConformal.js");n.d(t,"geoConicConformal",(function(){return y.default})),n.d(t,"geoConicConformalRaw",(function(){return y.conicConformalRaw}));var x=n(/*! ./projection/conicEqualArea.js */"./node_modules/d3-geo/src/projection/conicEqualArea.js");n.d(t,"geoConicEqualArea",(function(){return x.default})),n.d(t,"geoConicEqualAreaRaw",(function(){return x.conicEqualAreaRaw}));var w=n(/*! ./projection/conicEquidistant.js */"./node_modules/d3-geo/src/projection/conicEquidistant.js");n.d(t,"geoConicEquidistant",(function(){return w.default})),n.d(t,"geoConicEquidistantRaw",(function(){return w.conicEquidistantRaw}));var O=n(/*! ./projection/equalEarth.js */"./node_modules/d3-geo/src/projection/equalEarth.js");n.d(t,"geoEqualEarth",(function(){return O.default})),n.d(t,"geoEqualEarthRaw",(function(){return O.equalEarthRaw}));var M=n(/*! ./projection/equirectangular.js */"./node_modules/d3-geo/src/projection/equirectangular.js");n.d(t,"geoEquirectangular",(function(){return M.default})),n.d(t,"geoEquirectangularRaw",(function(){return M.equirectangularRaw}));var S=n(/*! ./projection/gnomonic.js */"./node_modules/d3-geo/src/projection/gnomonic.js");n.d(t,"geoGnomonic",(function(){return S.default})),n.d(t,"geoGnomonicRaw",(function(){return S.gnomonicRaw}));var E=n(/*! ./projection/identity.js */"./node_modules/d3-geo/src/projection/identity.js");n.d(t,"geoIdentity",(function(){return E.default}));var k=n(/*! ./projection/index.js */"./node_modules/d3-geo/src/projection/index.js");n.d(t,"geoProjection",(function(){return k.default})),n.d(t,"geoProjectionMutator",(function(){return k.projectionMutator}));var C=n(/*! ./projection/mercator.js */"./node_modules/d3-geo/src/projection/mercator.js");n.d(t,"geoMercator",(function(){return C.default})),n.d(t,"geoMercatorRaw",(function(){return C.mercatorRaw}));var A=n(/*! ./projection/naturalEarth1.js */"./node_modules/d3-geo/src/projection/naturalEarth1.js");n.d(t,"geoNaturalEarth1",(function(){return A.default})),n.d(t,"geoNaturalEarth1Raw",(function(){return A.naturalEarth1Raw}));var T=n(/*! ./projection/orthographic.js */"./node_modules/d3-geo/src/projection/orthographic.js");n.d(t,"geoOrthographic",(function(){return T.default})),n.d(t,"geoOrthographicRaw",(function(){return T.orthographicRaw}));var R=n(/*! ./projection/stereographic.js */"./node_modules/d3-geo/src/projection/stereographic.js");n.d(t,"geoStereographic",(function(){return R.default})),n.d(t,"geoStereographicRaw",(function(){return R.stereographicRaw}));var N=n(/*! ./projection/transverseMercator.js */"./node_modules/d3-geo/src/projection/transverseMercator.js");n.d(t,"geoTransverseMercator",(function(){return N.default})),n.d(t,"geoTransverseMercatorRaw",(function(){return N.transverseMercatorRaw}));var P=n(/*! ./rotation.js */"./node_modules/d3-geo/src/rotation.js");n.d(t,"geoRotation",(function(){return P.default}));var I=n(/*! ./stream.js */"./node_modules/d3-geo/src/stream.js");n.d(t,"geoStream",(function(){return I.default}));var q=n(/*! ./transform.js */"./node_modules/d3-geo/src/transform.js");n.d(t,"geoTransform",(function(){return q.default}))},"./node_modules/d3-geo/src/interpolate.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/interpolate.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js");t.default=function(e,t){var n=e[0]*r.radians,o=e[1]*r.radians,u=t[0]*r.radians,i=t[1]*r.radians,s=Object(r.cos)(o),a=Object(r.sin)(o),c=Object(r.cos)(i),d=Object(r.sin)(i),l=s*Object(r.cos)(n),f=s*Object(r.sin)(n),h=c*Object(r.cos)(u),m=c*Object(r.sin)(u),p=2*Object(r.asin)(Object(r.sqrt)(Object(r.haversin)(i-o)+s*c*Object(r.haversin)(u-n))),_=Object(r.sin)(p),g=p?function(e){var t=Object(r.sin)(e*=p)/_,n=Object(r.sin)(p-e)/_,o=n*l+t*h,u=n*f+t*m,i=n*a+t*d;return[Object(r.atan2)(u,o)*r.degrees,Object(r.atan2)(i,Object(r.sqrt)(o*o+u*u))*r.degrees]}:function(){return[n*r.degrees,o*r.degrees]};return g.distance=p,g}},"./node_modules/d3-geo/src/length.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-geo/src/length.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i=n(/*! ./adder.js */"./node_modules/d3-geo/src/adder.js"),s=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),a=n(/*! ./noop.js */"./node_modules/d3-geo/src/noop.js"),c=n(/*! ./stream.js */"./node_modules/d3-geo/src/stream.js"),d=Object(i.default)(),l={sphere:a.default,point:a.default,lineStart:function(){l.point=h,l.lineEnd=f},lineEnd:a.default,polygonStart:a.default,polygonEnd:a.default};function f(){l.point=l.lineEnd=a.default}function h(e,t){e*=s.radians,t*=s.radians,r=e,o=Object(s.sin)(t),u=Object(s.cos)(t),l.point=m}function m(e,t){e*=s.radians,t*=s.radians;var n=Object(s.sin)(t),i=Object(s.cos)(t),a=Object(s.abs)(e-r),c=Object(s.cos)(a),l=i*Object(s.sin)(a),f=u*n-o*i*c,h=o*n+u*i*c;d.add(Object(s.atan2)(Object(s.sqrt)(l*l+f*f),h)),r=e,o=n,u=i}t.default=function(e){return d.reset(),Object(c.default)(e,l),+d}},"./node_modules/d3-geo/src/math.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-geo/src/math.js ***!
  \*****************************************/
/*! exports provided: epsilon, epsilon2, pi, halfPi, quarterPi, tau, degrees, radians, abs, atan, atan2, cos, ceil, exp, floor, log, pow, sin, sign, sqrt, tan, acos, asin, haversin */function(e,t,n){"use strict";n.r(t),n.d(t,"epsilon",(function(){return r})),n.d(t,"epsilon2",(function(){return o})),n.d(t,"pi",(function(){return u})),n.d(t,"halfPi",(function(){return i})),n.d(t,"quarterPi",(function(){return s})),n.d(t,"tau",(function(){return a})),n.d(t,"degrees",(function(){return c})),n.d(t,"radians",(function(){return d})),n.d(t,"abs",(function(){return l})),n.d(t,"atan",(function(){return f})),n.d(t,"atan2",(function(){return h})),n.d(t,"cos",(function(){return m})),n.d(t,"ceil",(function(){return p})),n.d(t,"exp",(function(){return _})),n.d(t,"floor",(function(){return g})),n.d(t,"log",(function(){return v})),n.d(t,"pow",(function(){return j})),n.d(t,"sin",(function(){return b})),n.d(t,"sign",(function(){return y})),n.d(t,"sqrt",(function(){return x})),n.d(t,"tan",(function(){return w})),n.d(t,"acos",(function(){return O})),n.d(t,"asin",(function(){return M})),n.d(t,"haversin",(function(){return S}));var r=1e-6,o=1e-12,u=Math.PI,i=u/2,s=u/4,a=2*u,c=180/u,d=u/180,l=Math.abs,f=Math.atan,h=Math.atan2,m=Math.cos,p=Math.ceil,_=Math.exp,g=Math.floor,v=Math.log,j=Math.pow,b=Math.sin,y=Math.sign||function(e){return e>0?1:e<0?-1:0},x=Math.sqrt,w=Math.tan;function O(e){return e>1?0:e<-1?u:Math.acos(e)}function M(e){return e>1?i:e<-1?-i:Math.asin(e)}function S(e){return(e=b(e/2))*e}},"./node_modules/d3-geo/src/noop.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-geo/src/noop.js ***!
  \*****************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-geo/src/path/area.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-geo/src/path/area.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i,s=n(/*! ../adder.js */"./node_modules/d3-geo/src/adder.js"),a=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),c=n(/*! ../noop.js */"./node_modules/d3-geo/src/noop.js"),d=Object(s.default)(),l=Object(s.default)(),f={point:c.default,lineStart:c.default,lineEnd:c.default,polygonStart:function(){f.lineStart=h,f.lineEnd=_},polygonEnd:function(){f.lineStart=f.lineEnd=f.point=c.default,d.add(Object(a.abs)(l)),l.reset()},result:function(){var e=d/2;return d.reset(),e}};function h(){f.point=m}function m(e,t){f.point=p,r=u=e,o=i=t}function p(e,t){l.add(i*e-u*t),u=e,i=t}function _(){p(r,o)}t.default=f},"./node_modules/d3-geo/src/path/bounds.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/path/bounds.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../noop.js */"./node_modules/d3-geo/src/noop.js"),o=1/0,u=o,i=-o,s=i,a={point:function(e,t){e<o&&(o=e);e>i&&(i=e);t<u&&(u=t);t>s&&(s=t)},lineStart:r.default,lineEnd:r.default,polygonStart:r.default,polygonEnd:r.default,result:function(){var e=[[o,u],[i,s]];return i=s=-(u=o=1/0),e}};t.default=a},"./node_modules/d3-geo/src/path/centroid.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-geo/src/path/centroid.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i,s=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),a=0,c=0,d=0,l=0,f=0,h=0,m=0,p=0,_=0,g={point:v,lineStart:j,lineEnd:x,polygonStart:function(){g.lineStart=w,g.lineEnd=O},polygonEnd:function(){g.point=v,g.lineStart=j,g.lineEnd=x},result:function(){var e=_?[m/_,p/_]:h?[l/h,f/h]:d?[a/d,c/d]:[NaN,NaN];return a=c=d=l=f=h=m=p=_=0,e}};function v(e,t){a+=e,c+=t,++d}function j(){g.point=b}function b(e,t){g.point=y,v(u=e,i=t)}function y(e,t){var n=e-u,r=t-i,o=Object(s.sqrt)(n*n+r*r);l+=o*(u+e)/2,f+=o*(i+t)/2,h+=o,v(u=e,i=t)}function x(){g.point=v}function w(){g.point=M}function O(){S(r,o)}function M(e,t){g.point=S,v(r=u=e,o=i=t)}function S(e,t){var n=e-u,r=t-i,o=Object(s.sqrt)(n*n+r*r);l+=o*(u+e)/2,f+=o*(i+t)/2,h+=o,m+=(o=i*e-u*t)*(u+e),p+=o*(i+t),_+=3*o,v(u=e,i=t)}t.default=g},"./node_modules/d3-geo/src/path/context.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-geo/src/path/context.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ../noop.js */"./node_modules/d3-geo/src/noop.js");function u(e){this._context=e}u.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,r.tau)}},result:o.default}},"./node_modules/d3-geo/src/path/index.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-geo/src/path/index.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../identity.js */"./node_modules/d3-geo/src/identity.js"),o=n(/*! ../stream.js */"./node_modules/d3-geo/src/stream.js"),u=n(/*! ./area.js */"./node_modules/d3-geo/src/path/area.js"),i=n(/*! ./bounds.js */"./node_modules/d3-geo/src/path/bounds.js"),s=n(/*! ./centroid.js */"./node_modules/d3-geo/src/path/centroid.js"),a=n(/*! ./context.js */"./node_modules/d3-geo/src/path/context.js"),c=n(/*! ./measure.js */"./node_modules/d3-geo/src/path/measure.js"),d=n(/*! ./string.js */"./node_modules/d3-geo/src/path/string.js");t.default=function(e,t){var n,l,f=4.5;function h(e){return e&&("function"==typeof f&&l.pointRadius(+f.apply(this,arguments)),Object(o.default)(e,n(l))),l.result()}return h.area=function(e){return Object(o.default)(e,n(u.default)),u.default.result()},h.measure=function(e){return Object(o.default)(e,n(c.default)),c.default.result()},h.bounds=function(e){return Object(o.default)(e,n(i.default)),i.default.result()},h.centroid=function(e){return Object(o.default)(e,n(s.default)),s.default.result()},h.projection=function(t){return arguments.length?(n=null==t?(e=null,r.default):(e=t).stream,h):e},h.context=function(e){return arguments.length?(l=null==e?(t=null,new d.default):new a.default(t=e),"function"!=typeof f&&l.pointRadius(f),h):t},h.pointRadius=function(e){return arguments.length?(f="function"==typeof e?e:(l.pointRadius(+e),+e),h):f},h.projection(e).context(t)}},"./node_modules/d3-geo/src/path/measure.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-geo/src/path/measure.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r,o,u,i,s,a=n(/*! ../adder.js */"./node_modules/d3-geo/src/adder.js"),c=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),d=n(/*! ../noop.js */"./node_modules/d3-geo/src/noop.js"),l=Object(a.default)(),f={point:d.default,lineStart:function(){f.point=h},lineEnd:function(){r&&m(o,u),f.point=d.default},polygonStart:function(){r=!0},polygonEnd:function(){r=null},result:function(){var e=+l;return l.reset(),e}};function h(e,t){f.point=m,o=i=e,u=s=t}function m(e,t){i-=e,s-=t,l.add(Object(c.sqrt)(i*i+s*s)),i=e,s=t}t.default=f},"./node_modules/d3-geo/src/path/string.js":
/*!************************************************!*\
  !*** ./node_modules/d3-geo/src/path/string.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this._string=[]}function o(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}n.r(t),n.d(t,"default",(function(){return r})),r.prototype={_radius:4.5,_circle:o(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=o(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}}},"./node_modules/d3-geo/src/pointEqual.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-geo/src/pointEqual.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js");t.default=function(e,t){return Object(r.abs)(e[0]-t[0])<r.epsilon&&Object(r.abs)(e[1]-t[1])<r.epsilon}},"./node_modules/d3-geo/src/polygonContains.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-geo/src/polygonContains.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./adder.js */"./node_modules/d3-geo/src/adder.js"),o=n(/*! ./cartesian.js */"./node_modules/d3-geo/src/cartesian.js"),u=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js"),i=Object(r.default)();function s(e){return Object(u.abs)(e[0])<=u.pi?e[0]:Object(u.sign)(e[0])*((Object(u.abs)(e[0])+u.pi)%u.tau-u.pi)}t.default=function(e,t){var n=s(t),r=t[1],a=Object(u.sin)(r),c=[Object(u.sin)(n),-Object(u.cos)(n),0],d=0,l=0;i.reset(),1===a?r=u.halfPi+u.epsilon:-1===a&&(r=-u.halfPi-u.epsilon);for(var f=0,h=e.length;f<h;++f)if(p=(m=e[f]).length)for(var m,p,_=m[p-1],g=s(_),v=_[1]/2+u.quarterPi,j=Object(u.sin)(v),b=Object(u.cos)(v),y=0;y<p;++y,g=w,j=M,b=S,_=x){var x=m[y],w=s(x),O=x[1]/2+u.quarterPi,M=Object(u.sin)(O),S=Object(u.cos)(O),E=w-g,k=E>=0?1:-1,C=k*E,A=C>u.pi,T=j*M;if(i.add(Object(u.atan2)(T*k*Object(u.sin)(C),b*S+T*Object(u.cos)(C))),d+=A?E+k*u.tau:E,A^g>=n^w>=n){var R=Object(o.cartesianCross)(Object(o.cartesian)(_),Object(o.cartesian)(x));Object(o.cartesianNormalizeInPlace)(R);var N=Object(o.cartesianCross)(c,R);Object(o.cartesianNormalizeInPlace)(N);var P=(A^E>=0?-1:1)*Object(u.asin)(N[2]);(r>P||r===P&&(R[0]||R[1]))&&(l+=A^E>=0?1:-1)}}return(d<-u.epsilon||d<u.epsilon&&i<-u.epsilon)^1&l}},"./node_modules/d3-geo/src/projection/albers.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/albers.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./conicEqualArea.js */"./node_modules/d3-geo/src/projection/conicEqualArea.js");t.default=function(){return Object(r.default)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},"./node_modules/d3-geo/src/projection/albersUsa.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/albersUsa.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./albers.js */"./node_modules/d3-geo/src/projection/albers.js"),u=n(/*! ./conicEqualArea.js */"./node_modules/d3-geo/src/projection/conicEqualArea.js"),i=n(/*! ./fit.js */"./node_modules/d3-geo/src/projection/fit.js");t.default=function(){var e,t,n,s,a,c,d=Object(o.default)(),l=Object(u.default)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=Object(u.default)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),h={point:function(e,t){c=[e,t]}};function m(e){var t=e[0],r=e[1];return c=null,n.point(t,r),c||(s.point(t,r),c)||(a.point(t,r),c)}function p(){return e=t=null,m}return m.invert=function(e){var t=d.scale(),n=d.translate(),r=(e[0]-n[0])/t,o=(e[1]-n[1])/t;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?l:o>=.166&&o<.234&&r>=-.214&&r<-.115?f:d).invert(e)},m.stream=function(n){return e&&t===n?e:(r=[d.stream(t=n),l.stream(n),f.stream(n)],o=r.length,e={point:function(e,t){for(var n=-1;++n<o;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<o;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<o;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<o;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<o;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<o;)r[e].polygonEnd()}});var r,o},m.precision=function(e){return arguments.length?(d.precision(e),l.precision(e),f.precision(e),p()):d.precision()},m.scale=function(e){return arguments.length?(d.scale(e),l.scale(.35*e),f.scale(e),m.translate(d.translate())):d.scale()},m.translate=function(e){if(!arguments.length)return d.translate();var t=d.scale(),o=+e[0],u=+e[1];return n=d.translate(e).clipExtent([[o-.455*t,u-.238*t],[o+.455*t,u+.238*t]]).stream(h),s=l.translate([o-.307*t,u+.201*t]).clipExtent([[o-.425*t+r.epsilon,u+.12*t+r.epsilon],[o-.214*t-r.epsilon,u+.234*t-r.epsilon]]).stream(h),a=f.translate([o-.205*t,u+.212*t]).clipExtent([[o-.214*t+r.epsilon,u+.166*t+r.epsilon],[o-.115*t-r.epsilon,u+.234*t-r.epsilon]]).stream(h),p()},m.fitExtent=function(e,t){return Object(i.fitExtent)(m,e,t)},m.fitSize=function(e,t){return Object(i.fitSize)(m,e,t)},m.fitWidth=function(e,t){return Object(i.fitWidth)(m,e,t)},m.fitHeight=function(e,t){return Object(i.fitHeight)(m,e,t)},m.scale(1070)}},"./node_modules/d3-geo/src/projection/azimuthal.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/azimuthal.js ***!
  \*********************************************************/
/*! exports provided: azimuthalRaw, azimuthalInvert */function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalRaw",(function(){return o})),n.d(t,"azimuthalInvert",(function(){return u}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");function o(e){return function(t,n){var o=Object(r.cos)(t),u=Object(r.cos)(n),i=e(o*u);return[i*u*Object(r.sin)(t),i*Object(r.sin)(n)]}}function u(e){return function(t,n){var o=Object(r.sqrt)(t*t+n*n),u=e(o),i=Object(r.sin)(u),s=Object(r.cos)(u);return[Object(r.atan2)(t*i,o*s),Object(r.asin)(o&&n*i/o)]}}},"./node_modules/d3-geo/src/projection/azimuthalEqualArea.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/azimuthalEqualArea.js ***!
  \******************************************************************/
/*! exports provided: azimuthalEqualAreaRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalEqualAreaRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./azimuthal.js */"./node_modules/d3-geo/src/projection/azimuthal.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js"),i=Object(o.azimuthalRaw)((function(e){return Object(r.sqrt)(2/(1+e))}));i.invert=Object(o.azimuthalInvert)((function(e){return 2*Object(r.asin)(e/2)})),t.default=function(){return Object(u.default)(i).scale(124.75).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/azimuthalEquidistant.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/azimuthalEquidistant.js ***!
  \********************************************************************/
/*! exports provided: azimuthalEquidistantRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalEquidistantRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./azimuthal.js */"./node_modules/d3-geo/src/projection/azimuthal.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js"),i=Object(o.azimuthalRaw)((function(e){return(e=Object(r.acos)(e))&&e/Object(r.sin)(e)}));i.invert=Object(o.azimuthalInvert)((function(e){return e})),t.default=function(){return Object(u.default)(i).scale(79.4188).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/conic.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conic.js ***!
  \*****************************************************/
/*! exports provided: conicProjection */function(e,t,n){"use strict";n.r(t),n.d(t,"conicProjection",(function(){return u}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function u(e){var t=0,n=r.pi/3,u=Object(o.projectionMutator)(e),i=u(t,n);return i.parallels=function(e){return arguments.length?u(t=e[0]*r.radians,n=e[1]*r.radians):[t*r.degrees,n*r.degrees]},i}},"./node_modules/d3-geo/src/projection/conicConformal.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conicConformal.js ***!
  \**************************************************************/
/*! exports provided: conicConformalRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"conicConformalRaw",(function(){return s}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./conic.js */"./node_modules/d3-geo/src/projection/conic.js"),u=n(/*! ./mercator.js */"./node_modules/d3-geo/src/projection/mercator.js");function i(e){return Object(r.tan)((r.halfPi+e)/2)}function s(e,t){var n=Object(r.cos)(e),o=e===t?Object(r.sin)(e):Object(r.log)(n/Object(r.cos)(t))/Object(r.log)(i(t)/i(e)),s=n*Object(r.pow)(i(e),o)/o;if(!o)return u.mercatorRaw;function a(e,t){s>0?t<-r.halfPi+r.epsilon&&(t=-r.halfPi+r.epsilon):t>r.halfPi-r.epsilon&&(t=r.halfPi-r.epsilon);var n=s/Object(r.pow)(i(t),o);return[n*Object(r.sin)(o*e),s-n*Object(r.cos)(o*e)]}return a.invert=function(e,t){var n=s-t,u=Object(r.sign)(o)*Object(r.sqrt)(e*e+n*n),i=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(i-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[i/o,2*Object(r.atan)(Object(r.pow)(s/u,1/o))-r.halfPi]},a}t.default=function(){return Object(o.conicProjection)(s).scale(109.5).parallels([30,30])}},"./node_modules/d3-geo/src/projection/conicEqualArea.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conicEqualArea.js ***!
  \**************************************************************/
/*! exports provided: conicEqualAreaRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"conicEqualAreaRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./conic.js */"./node_modules/d3-geo/src/projection/conic.js"),u=n(/*! ./cylindricalEqualArea.js */"./node_modules/d3-geo/src/projection/cylindricalEqualArea.js");function i(e,t){var n=Object(r.sin)(e),o=(n+Object(r.sin)(t))/2;if(Object(r.abs)(o)<r.epsilon)return Object(u.cylindricalEqualAreaRaw)(e);var i=1+n*(2*o-n),s=Object(r.sqrt)(i)/o;function a(e,t){var n=Object(r.sqrt)(i-2*o*Object(r.sin)(t))/o;return[n*Object(r.sin)(e*=o),s-n*Object(r.cos)(e)]}return a.invert=function(e,t){var n=s-t,u=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(u-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[u/o,Object(r.asin)((i-(e*e+n*n)*o*o)/(2*o))]},a}t.default=function(){return Object(o.conicProjection)(i).scale(155.424).center([0,33.6442])}},"./node_modules/d3-geo/src/projection/conicEquidistant.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conicEquidistant.js ***!
  \****************************************************************/
/*! exports provided: conicEquidistantRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"conicEquidistantRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./conic.js */"./node_modules/d3-geo/src/projection/conic.js"),u=n(/*! ./equirectangular.js */"./node_modules/d3-geo/src/projection/equirectangular.js");function i(e,t){var n=Object(r.cos)(e),o=e===t?Object(r.sin)(e):(n-Object(r.cos)(t))/(t-e),i=n/o+e;if(Object(r.abs)(o)<r.epsilon)return u.equirectangularRaw;function s(e,t){var n=i-t,u=o*e;return[n*Object(r.sin)(u),i-n*Object(r.cos)(u)]}return s.invert=function(e,t){var n=i-t,u=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(u-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[u/o,i-Object(r.sign)(o)*Object(r.sqrt)(e*e+n*n)]},s}t.default=function(){return Object(o.conicProjection)(i).scale(131.154).center([0,13.9389])}},"./node_modules/d3-geo/src/projection/cylindricalEqualArea.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/cylindricalEqualArea.js ***!
  \********************************************************************/
/*! exports provided: cylindricalEqualAreaRaw */function(e,t,n){"use strict";n.r(t),n.d(t,"cylindricalEqualAreaRaw",(function(){return o}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");function o(e){var t=Object(r.cos)(e);function n(e,n){return[e*t,Object(r.sin)(n)/t]}return n.invert=function(e,n){return[e/t,Object(r.asin)(n*t)]},n}},"./node_modules/d3-geo/src/projection/equalEarth.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/equalEarth.js ***!
  \**********************************************************/
/*! exports provided: equalEarthRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"equalEarthRaw",(function(){return d}));var r=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js"),o=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),u=1.340264,i=-.081106,s=893e-6,a=.003796,c=Object(o.sqrt)(3)/2;function d(e,t){var n=Object(o.asin)(c*Object(o.sin)(t)),r=n*n,d=r*r*r;return[e*Object(o.cos)(n)/(c*(u+3*i*r+d*(7*s+9*a*r))),n*(u+i*r+d*(s+a*r))]}d.invert=function(e,t){for(var n,r=t,d=r*r,l=d*d*d,f=0;f<12&&(l=(d=(r-=n=(r*(u+i*d+l*(s+a*d))-t)/(u+3*i*d+l*(7*s+9*a*d)))*r)*d*d,!(Object(o.abs)(n)<o.epsilon2));++f);return[c*e*(u+3*i*d+l*(7*s+9*a*d))/Object(o.cos)(r),Object(o.asin)(Object(o.sin)(r)/c)]},t.default=function(){return Object(r.default)(d).scale(177.158)}},"./node_modules/d3-geo/src/projection/equirectangular.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/equirectangular.js ***!
  \***************************************************************/
/*! exports provided: equirectangularRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"equirectangularRaw",(function(){return o}));var r=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function o(e,t){return[e,t]}o.invert=o,t.default=function(){return Object(r.default)(o).scale(152.63)}},"./node_modules/d3-geo/src/projection/fit.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/fit.js ***!
  \***************************************************/
/*! exports provided: fitExtent, fitSize, fitWidth, fitHeight */function(e,t,n){"use strict";n.r(t),n.d(t,"fitExtent",(function(){return i})),n.d(t,"fitSize",(function(){return s})),n.d(t,"fitWidth",(function(){return a})),n.d(t,"fitHeight",(function(){return c}));var r=n(/*! ../stream.js */"./node_modules/d3-geo/src/stream.js"),o=n(/*! ../path/bounds.js */"./node_modules/d3-geo/src/path/bounds.js");function u(e,t,n){var u=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=u&&e.clipExtent(null),Object(r.default)(n,e.stream(o.default)),t(o.default.result()),null!=u&&e.clipExtent(u),e}function i(e,t,n){return u(e,(function(n){var r=t[1][0]-t[0][0],o=t[1][1]-t[0][1],u=Math.min(r/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),i=+t[0][0]+(r-u*(n[1][0]+n[0][0]))/2,s=+t[0][1]+(o-u*(n[1][1]+n[0][1]))/2;e.scale(150*u).translate([i,s])}),n)}function s(e,t,n){return i(e,[[0,0],t],n)}function a(e,t,n){return u(e,(function(n){var r=+t,o=r/(n[1][0]-n[0][0]),u=(r-o*(n[1][0]+n[0][0]))/2,i=-o*n[0][1];e.scale(150*o).translate([u,i])}),n)}function c(e,t,n){return u(e,(function(n){var r=+t,o=r/(n[1][1]-n[0][1]),u=-o*n[0][0],i=(r-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([u,i])}),n)}},"./node_modules/d3-geo/src/projection/gnomonic.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/gnomonic.js ***!
  \********************************************************/
/*! exports provided: gnomonicRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"gnomonicRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./azimuthal.js */"./node_modules/d3-geo/src/projection/azimuthal.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function i(e,t){var n=Object(r.cos)(t),o=Object(r.cos)(e)*n;return[n*Object(r.sin)(e)/o,Object(r.sin)(t)/o]}i.invert=Object(o.azimuthalInvert)(r.atan),t.default=function(){return Object(u.default)(i).scale(144.049).clipAngle(60)}},"./node_modules/d3-geo/src/projection/identity.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/identity.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../clip/rectangle.js */"./node_modules/d3-geo/src/clip/rectangle.js"),o=n(/*! ../identity.js */"./node_modules/d3-geo/src/identity.js"),u=n(/*! ../transform.js */"./node_modules/d3-geo/src/transform.js"),i=n(/*! ./fit.js */"./node_modules/d3-geo/src/projection/fit.js"),s=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");t.default=function(){var e,t,n,a,c,d,l,f=1,h=0,m=0,p=1,_=1,g=0,v=null,j=1,b=1,y=Object(u.transformer)({point:function(e,t){var n=O([e,t]);this.stream.point(n[0],n[1])}}),x=o.default;function w(){return j=f*p,b=f*_,d=l=null,O}function O(n){var r=n[0]*j,o=n[1]*b;if(g){var u=o*e-r*t;r=r*e+o*t,o=u}return[r+h,o+m]}return O.invert=function(n){var r=n[0]-h,o=n[1]-m;if(g){var u=o*e+r*t;r=r*e-o*t,o=u}return[r/j,o/b]},O.stream=function(e){return d&&l===e?d:d=y(x(l=e))},O.postclip=function(e){return arguments.length?(x=e,v=n=a=c=null,w()):x},O.clipExtent=function(e){return arguments.length?(x=null==e?(v=n=a=c=null,o.default):Object(r.default)(v=+e[0][0],n=+e[0][1],a=+e[1][0],c=+e[1][1]),w()):null==v?null:[[v,n],[a,c]]},O.scale=function(e){return arguments.length?(f=+e,w()):f},O.translate=function(e){return arguments.length?(h=+e[0],m=+e[1],w()):[h,m]},O.angle=function(n){return arguments.length?(g=n%360*s.radians,t=Object(s.sin)(g),e=Object(s.cos)(g),w()):g*s.degrees},O.reflectX=function(e){return arguments.length?(p=e?-1:1,w()):p<0},O.reflectY=function(e){return arguments.length?(_=e?-1:1,w()):_<0},O.fitExtent=function(e,t){return Object(i.fitExtent)(O,e,t)},O.fitSize=function(e,t){return Object(i.fitSize)(O,e,t)},O.fitWidth=function(e,t){return Object(i.fitWidth)(O,e,t)},O.fitHeight=function(e,t){return Object(i.fitHeight)(O,e,t)},O}},"./node_modules/d3-geo/src/projection/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/index.js ***!
  \*****************************************************/
/*! exports provided: default, projectionMutator */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return _})),n.d(t,"projectionMutator",(function(){return g}));var r=n(/*! ../clip/antimeridian.js */"./node_modules/d3-geo/src/clip/antimeridian.js"),o=n(/*! ../clip/circle.js */"./node_modules/d3-geo/src/clip/circle.js"),u=n(/*! ../clip/rectangle.js */"./node_modules/d3-geo/src/clip/rectangle.js"),i=n(/*! ../compose.js */"./node_modules/d3-geo/src/compose.js"),s=n(/*! ../identity.js */"./node_modules/d3-geo/src/identity.js"),a=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),c=n(/*! ../rotation.js */"./node_modules/d3-geo/src/rotation.js"),d=n(/*! ../transform.js */"./node_modules/d3-geo/src/transform.js"),l=n(/*! ./fit.js */"./node_modules/d3-geo/src/projection/fit.js"),f=n(/*! ./resample.js */"./node_modules/d3-geo/src/projection/resample.js"),h=Object(d.transformer)({point:function(e,t){this.stream.point(e*a.radians,t*a.radians)}});function m(e,t,n,r,o){function u(u,i){return[t+e*(u*=r),n-e*(i*=o)]}return u.invert=function(u,i){return[(u-t)/e*r,(n-i)/e*o]},u}function p(e,t,n,r,o,u){var i=Object(a.cos)(u),s=Object(a.sin)(u),c=i*e,d=s*e,l=i/e,f=s/e,h=(s*n-i*t)/e,m=(s*t+i*n)/e;function p(e,u){return[c*(e*=r)-d*(u*=o)+t,n-d*e-c*u]}return p.invert=function(e,t){return[r*(l*e-f*t+h),o*(m-f*e-l*t)]},p}function _(e){return g((function(){return e}))()}function g(e){var t,n,_,g,v,j,b,y,x,w,O=150,M=480,S=250,E=0,k=0,C=0,A=0,T=0,R=0,N=1,P=1,I=null,q=r.default,B=null,F=s.default,L=.5;function z(e){return y(e[0]*a.radians,e[1]*a.radians)}function D(e){return(e=y.invert(e[0],e[1]))&&[e[0]*a.degrees,e[1]*a.degrees]}function G(){var e=p(O,0,0,N,P,R).apply(null,t(E,k)),r=(R?p:m)(O,M-e[0],S-e[1],N,P,R);return n=Object(c.rotateRadians)(C,A,T),b=Object(i.default)(t,r),y=Object(i.default)(n,b),j=Object(f.default)(b,L),U()}function U(){return x=w=null,z}return z.stream=function(e){return x&&w===e?x:x=h(function(e){return Object(d.transformer)({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(q(j(F(w=e)))))},z.preclip=function(e){return arguments.length?(q=e,I=void 0,U()):q},z.postclip=function(e){return arguments.length?(F=e,B=_=g=v=null,U()):F},z.clipAngle=function(e){return arguments.length?(q=+e?Object(o.default)(I=e*a.radians):(I=null,r.default),U()):I*a.degrees},z.clipExtent=function(e){return arguments.length?(F=null==e?(B=_=g=v=null,s.default):Object(u.default)(B=+e[0][0],_=+e[0][1],g=+e[1][0],v=+e[1][1]),U()):null==B?null:[[B,_],[g,v]]},z.scale=function(e){return arguments.length?(O=+e,G()):O},z.translate=function(e){return arguments.length?(M=+e[0],S=+e[1],G()):[M,S]},z.center=function(e){return arguments.length?(E=e[0]%360*a.radians,k=e[1]%360*a.radians,G()):[E*a.degrees,k*a.degrees]},z.rotate=function(e){return arguments.length?(C=e[0]%360*a.radians,A=e[1]%360*a.radians,T=e.length>2?e[2]%360*a.radians:0,G()):[C*a.degrees,A*a.degrees,T*a.degrees]},z.angle=function(e){return arguments.length?(R=e%360*a.radians,G()):R*a.degrees},z.reflectX=function(e){return arguments.length?(N=e?-1:1,G()):N<0},z.reflectY=function(e){return arguments.length?(P=e?-1:1,G()):P<0},z.precision=function(e){return arguments.length?(j=Object(f.default)(b,L=e*e),U()):Object(a.sqrt)(L)},z.fitExtent=function(e,t){return Object(l.fitExtent)(z,e,t)},z.fitSize=function(e,t){return Object(l.fitSize)(z,e,t)},z.fitWidth=function(e,t){return Object(l.fitWidth)(z,e,t)},z.fitHeight=function(e,t){return Object(l.fitHeight)(z,e,t)},function(){return t=e.apply(this,arguments),z.invert=t.invert&&D,G()}}},"./node_modules/d3-geo/src/projection/mercator.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/mercator.js ***!
  \********************************************************/
/*! exports provided: mercatorRaw, default, mercatorProjection */function(e,t,n){"use strict";n.r(t),n.d(t,"mercatorRaw",(function(){return i})),n.d(t,"mercatorProjection",(function(){return s}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ../rotation.js */"./node_modules/d3-geo/src/rotation.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function i(e,t){return[e,Object(r.log)(Object(r.tan)((r.halfPi+t)/2))]}function s(e){var t,n,s,a=Object(u.default)(e),c=a.center,d=a.scale,l=a.translate,f=a.clipExtent,h=null;function m(){var u=r.pi*d(),c=a(Object(o.default)(a.rotate()).invert([0,0]));return f(null==h?[[c[0]-u,c[1]-u],[c[0]+u,c[1]+u]]:e===i?[[Math.max(c[0]-u,h),t],[Math.min(c[0]+u,n),s]]:[[h,Math.max(c[1]-u,t)],[n,Math.min(c[1]+u,s)]])}return a.scale=function(e){return arguments.length?(d(e),m()):d()},a.translate=function(e){return arguments.length?(l(e),m()):l()},a.center=function(e){return arguments.length?(c(e),m()):c()},a.clipExtent=function(e){return arguments.length?(null==e?h=t=n=s=null:(h=+e[0][0],t=+e[0][1],n=+e[1][0],s=+e[1][1]),m()):null==h?null:[[h,t],[n,s]]},m()}i.invert=function(e,t){return[e,2*Object(r.atan)(Object(r.exp)(t))-r.halfPi]},t.default=function(){return s(i).scale(961/r.tau)}},"./node_modules/d3-geo/src/projection/naturalEarth1.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/naturalEarth1.js ***!
  \*************************************************************/
/*! exports provided: naturalEarth1Raw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"naturalEarth1Raw",(function(){return u}));var r=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js"),o=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js");function u(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}u.invert=function(e,t){var n,r=t,u=25;do{var i=r*r,s=i*i;r-=n=(r*(1.007226+i*(.015085+s*(.028874*i-.044475-.005916*s)))-t)/(1.007226+i*(.045255+s*(.259866*i-.311325-.005916*11*s)))}while(Object(o.abs)(n)>o.epsilon&&--u>0);return[e/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]},t.default=function(){return Object(r.default)(u).scale(175.295)}},"./node_modules/d3-geo/src/projection/orthographic.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/orthographic.js ***!
  \************************************************************/
/*! exports provided: orthographicRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"orthographicRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./azimuthal.js */"./node_modules/d3-geo/src/projection/azimuthal.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function i(e,t){return[Object(r.cos)(t)*Object(r.sin)(e),Object(r.sin)(t)]}i.invert=Object(o.azimuthalInvert)(r.asin),t.default=function(){return Object(u.default)(i).scale(249.5).clipAngle(90+r.epsilon)}},"./node_modules/d3-geo/src/projection/resample.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/resample.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../cartesian.js */"./node_modules/d3-geo/src/cartesian.js"),o=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),u=n(/*! ../transform.js */"./node_modules/d3-geo/src/transform.js"),i=Object(o.cos)(30*o.radians);t.default=function(e,t){return+t?function(e,t){function n(r,u,s,a,c,d,l,f,h,m,p,_,g,v){var j=l-r,b=f-u,y=j*j+b*b;if(y>4*t&&g--){var x=a+m,w=c+p,O=d+_,M=Object(o.sqrt)(x*x+w*w+O*O),S=Object(o.asin)(O/=M),E=Object(o.abs)(Object(o.abs)(O)-1)<o.epsilon||Object(o.abs)(s-h)<o.epsilon?(s+h)/2:Object(o.atan2)(w,x),k=e(E,S),C=k[0],A=k[1],T=C-r,R=A-u,N=b*T-j*R;(N*N/y>t||Object(o.abs)((j*T+b*R)/y-.5)>.3||a*m+c*p+d*_<i)&&(n(r,u,s,a,c,d,C,A,E,x/=M,w/=M,O,g,v),v.point(C,A),n(C,A,E,x,w,O,l,f,h,m,p,_,g,v))}}return function(t){var o,u,i,s,a,c,d,l,f,h,m,p,_={point:g,lineStart:v,lineEnd:b,polygonStart:function(){t.polygonStart(),_.lineStart=y},polygonEnd:function(){t.polygonEnd(),_.lineStart=v}};function g(n,r){n=e(n,r),t.point(n[0],n[1])}function v(){l=NaN,_.point=j,t.lineStart()}function j(o,u){var i=Object(r.cartesian)([o,u]),s=e(o,u);n(l,f,d,h,m,p,l=s[0],f=s[1],d=o,h=i[0],m=i[1],p=i[2],16,t),t.point(l,f)}function b(){_.point=g,t.lineEnd()}function y(){v(),_.point=x,_.lineEnd=w}function x(e,t){j(o=e,t),u=l,i=f,s=h,a=m,c=p,_.point=j}function w(){n(l,f,d,h,m,p,u,i,o,s,a,c,16,t),_.lineEnd=b,b()}return _}}(e,t):function(e){return Object(u.transformer)({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)}},"./node_modules/d3-geo/src/projection/stereographic.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/stereographic.js ***!
  \*************************************************************/
/*! exports provided: stereographicRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"stereographicRaw",(function(){return i}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./azimuthal.js */"./node_modules/d3-geo/src/projection/azimuthal.js"),u=n(/*! ./index.js */"./node_modules/d3-geo/src/projection/index.js");function i(e,t){var n=Object(r.cos)(t),o=1+Object(r.cos)(e)*n;return[n*Object(r.sin)(e)/o,Object(r.sin)(t)/o]}i.invert=Object(o.azimuthalInvert)((function(e){return 2*Object(r.atan)(e)})),t.default=function(){return Object(u.default)(i).scale(250).clipAngle(142)}},"./node_modules/d3-geo/src/projection/transverseMercator.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/transverseMercator.js ***!
  \******************************************************************/
/*! exports provided: transverseMercatorRaw, default */function(e,t,n){"use strict";n.r(t),n.d(t,"transverseMercatorRaw",(function(){return u}));var r=n(/*! ../math.js */"./node_modules/d3-geo/src/math.js"),o=n(/*! ./mercator.js */"./node_modules/d3-geo/src/projection/mercator.js");function u(e,t){return[Object(r.log)(Object(r.tan)((r.halfPi+t)/2)),-e]}u.invert=function(e,t){return[-t,2*Object(r.atan)(Object(r.exp)(e))-r.halfPi]},t.default=function(){var e=Object(o.mercatorProjection)(u),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)}},"./node_modules/d3-geo/src/rotation.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-geo/src/rotation.js ***!
  \*********************************************/
/*! exports provided: rotateRadians, default */function(e,t,n){"use strict";n.r(t),n.d(t,"rotateRadians",(function(){return i}));var r=n(/*! ./compose.js */"./node_modules/d3-geo/src/compose.js"),o=n(/*! ./math.js */"./node_modules/d3-geo/src/math.js");function u(e,t){return[Object(o.abs)(e)>o.pi?e+Math.round(-e/o.tau)*o.tau:e,t]}function i(e,t,n){return(e%=o.tau)?t||n?Object(r.default)(a(e),c(t,n)):a(e):t||n?c(t,n):u}function s(e){return function(t,n){return[(t+=e)>o.pi?t-o.tau:t<-o.pi?t+o.tau:t,n]}}function a(e){var t=s(e);return t.invert=s(-e),t}function c(e,t){var n=Object(o.cos)(e),r=Object(o.sin)(e),u=Object(o.cos)(t),i=Object(o.sin)(t);function s(e,t){var s=Object(o.cos)(t),a=Object(o.cos)(e)*s,c=Object(o.sin)(e)*s,d=Object(o.sin)(t),l=d*n+a*r;return[Object(o.atan2)(c*u-l*i,a*n-d*r),Object(o.asin)(l*u+c*i)]}return s.invert=function(e,t){var s=Object(o.cos)(t),a=Object(o.cos)(e)*s,c=Object(o.sin)(e)*s,d=Object(o.sin)(t),l=d*u-c*i;return[Object(o.atan2)(c*u+d*i,a*n+l*r),Object(o.asin)(l*n-a*r)]},s}u.invert=u,t.default=function(e){function t(t){return(t=e(t[0]*o.radians,t[1]*o.radians))[0]*=o.degrees,t[1]*=o.degrees,t}return e=i(e[0]*o.radians,e[1]*o.radians,e.length>2?e[2]*o.radians:0),t.invert=function(t){return(t=e.invert(t[0]*o.radians,t[1]*o.radians))[0]*=o.degrees,t[1]*=o.degrees,t},t}},"./node_modules/d3-geo/src/stream.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-geo/src/stream.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t){e&&u.hasOwnProperty(e.type)&&u[e.type](e,t)}n.r(t);var o={Feature:function(e,t){r(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,o=-1,u=n.length;++o<u;)r(n[o].geometry,t)}},u={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){i(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)i(n[r],t,0)},Polygon:function(e,t){s(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)s(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,o=-1,u=n.length;++o<u;)r(n[o],t)}};function i(e,t,n){var r,o=-1,u=e.length-n;for(t.lineStart();++o<u;)r=e[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function s(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)i(e[n],t,1);t.polygonEnd()}t.default=function(e,t){e&&o.hasOwnProperty(e.type)?o[e.type](e,t):r(e,t)}},"./node_modules/d3-geo/src/transform.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-geo/src/transform.js ***!
  \**********************************************/
/*! exports provided: default, transformer */function(e,t,n){"use strict";function r(e){return function(t){var n=new o;for(var r in e)n[r]=e[r];return n.stream=t,n}}function o(){}n.r(t),n.d(t,"transformer",(function(){return r})),t.default=function(e){return{stream:r(e)}},o.prototype={constructor:o,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},"./node_modules/d3-hierarchy/src/accessors.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/accessors.js ***!
  \****************************************************/
/*! exports provided: optional, required */function(e,t,n){"use strict";function r(e){return null==e?null:o(e)}function o(e){if("function"!=typeof e)throw new Error;return e}n.r(t),n.d(t,"optional",(function(){return r})),n.d(t,"required",(function(){return o}))},"./node_modules/d3-hierarchy/src/array.js":
/*!************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/array.js ***!
  \************************************************/
/*! exports provided: slice, shuffle */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r})),n.d(t,"shuffle",(function(){return o}));var r=Array.prototype.slice;function o(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}},"./node_modules/d3-hierarchy/src/cluster.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/cluster.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t){return e.parent===t.parent?1:2}function o(e,t){return e+t.x}function u(e,t){return Math.max(e,t.y)}n.r(t),t.default=function(){var e=r,t=1,n=1,i=!1;function s(r){var s,a=0;r.eachAfter((function(t){var n=t.children;n?(t.x=function(e){return e.reduce(o,0)/e.length}(n),t.y=function(e){return 1+e.reduce(u,0)}(n)):(t.x=s?a+=e(t,s):0,t.y=0,s=t)}));var c=function(e){for(var t;t=e.children;)e=t[0];return e}(r),d=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(r),l=c.x-e(c,d)/2,f=d.x+e(d,c)/2;return r.eachAfter(i?function(e){e.x=(e.x-r.x)*t,e.y=(r.y-e.y)*n}:function(e){e.x=(e.x-l)/(f-l)*t,e.y=(1-(r.y?e.y/r.y:1))*n})}return s.separation=function(t){return arguments.length?(e=t,s):e},s.size=function(e){return arguments.length?(i=!1,t=+e[0],n=+e[1],s):i?null:[t,n]},s.nodeSize=function(e){return arguments.length?(i=!0,t=+e[0],n=+e[1],s):i?[t,n]:null},s}},"./node_modules/d3-hierarchy/src/constant.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/constant.js ***!
  \***************************************************/
/*! exports provided: constantZero, default */function(e,t,n){"use strict";function r(){return 0}n.r(t),n.d(t,"constantZero",(function(){return r})),t.default=function(e){return function(){return e}}},"./node_modules/d3-hierarchy/src/hierarchy/ancestors.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/ancestors.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t}},"./node_modules/d3-hierarchy/src/hierarchy/count.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/count.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}n.r(t),t.default=function(){return this.eachAfter(r)}},"./node_modules/d3-hierarchy/src/hierarchy/descendants.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/descendants.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.each((function(t){e.push(t)})),e}},"./node_modules/d3-hierarchy/src/hierarchy/each.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/each.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){var t,n,r,o,u=this,i=[u];do{for(t=i.reverse(),i=[];u=t.pop();)if(e(u),n=u.children)for(r=0,o=n.length;r<o;++r)i.push(n[r])}while(i.length);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r,o=this,u=[o],i=[];o=u.pop();)if(i.push(o),t=o.children)for(n=0,r=t.length;n<r;++n)u.push(t[n]);for(;o=i.pop();)e(o);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js ***!
  \***************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=this,o=[r];r=o.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)o.push(t[n]);return this}},"./node_modules/d3-hierarchy/src/hierarchy/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/index.js ***!
  \**********************************************************/
/*! exports provided: default, computeHeight, Node */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m})),n.d(t,"computeHeight",(function(){return g})),n.d(t,"Node",(function(){return v}));var r=n(/*! ./count.js */"./node_modules/d3-hierarchy/src/hierarchy/count.js"),o=n(/*! ./each.js */"./node_modules/d3-hierarchy/src/hierarchy/each.js"),u=n(/*! ./eachBefore.js */"./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js"),i=n(/*! ./eachAfter.js */"./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js"),s=n(/*! ./sum.js */"./node_modules/d3-hierarchy/src/hierarchy/sum.js"),a=n(/*! ./sort.js */"./node_modules/d3-hierarchy/src/hierarchy/sort.js"),c=n(/*! ./path.js */"./node_modules/d3-hierarchy/src/hierarchy/path.js"),d=n(/*! ./ancestors.js */"./node_modules/d3-hierarchy/src/hierarchy/ancestors.js"),l=n(/*! ./descendants.js */"./node_modules/d3-hierarchy/src/hierarchy/descendants.js"),f=n(/*! ./leaves.js */"./node_modules/d3-hierarchy/src/hierarchy/leaves.js"),h=n(/*! ./links.js */"./node_modules/d3-hierarchy/src/hierarchy/links.js");function m(e,t){var n,r,o,u,i,s=new v(e),a=+e.value&&(s.value=e.value),c=[s];for(null==t&&(t=p);n=c.pop();)if(a&&(n.value=+n.data.value),(o=t(n.data))&&(i=o.length))for(n.children=new Array(i),u=i-1;u>=0;--u)c.push(r=n.children[u]=new v(o[u])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(g)}function p(e){return e.children}function _(e){e.data=e.data.data}function g(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function v(e){this.data=e,this.depth=this.height=0,this.parent=null}v.prototype=m.prototype={constructor:v,count:r.default,each:o.default,eachAfter:i.default,eachBefore:u.default,sum:s.default,sort:a.default,path:c.default,ancestors:d.default,descendants:l.default,leaves:f.default,links:h.default,copy:function(){return m(this).eachBefore(_)}}},"./node_modules/d3-hierarchy/src/hierarchy/leaves.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/leaves.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e}},"./node_modules/d3-hierarchy/src/hierarchy/links.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/links.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t}},"./node_modules/d3-hierarchy/src/hierarchy/path.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/path.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),o=null;e=n.pop(),t=r.pop();for(;e===t;)o=e,e=n.pop(),t=r.pop();return o}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var o=r.length;e!==n;)r.splice(o,0,e),e=e.parent;return r}},"./node_modules/d3-hierarchy/src/hierarchy/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/sort.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))}},"./node_modules/d3-hierarchy/src/hierarchy/sum.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/hierarchy/sum.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,o=r&&r.length;--o>=0;)n+=r[o].value;t.value=n}))}},"./node_modules/d3-hierarchy/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/index.js ***!
  \************************************************/
/*! exports provided: cluster, hierarchy, pack, packSiblings, packEnclose, partition, stratify, tree, treemap, treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./cluster.js */"./node_modules/d3-hierarchy/src/cluster.js");n.d(t,"cluster",(function(){return r.default}));var o=n(/*! ./hierarchy/index.js */"./node_modules/d3-hierarchy/src/hierarchy/index.js");n.d(t,"hierarchy",(function(){return o.default}));var u=n(/*! ./pack/index.js */"./node_modules/d3-hierarchy/src/pack/index.js");n.d(t,"pack",(function(){return u.default}));var i=n(/*! ./pack/siblings.js */"./node_modules/d3-hierarchy/src/pack/siblings.js");n.d(t,"packSiblings",(function(){return i.default}));var s=n(/*! ./pack/enclose.js */"./node_modules/d3-hierarchy/src/pack/enclose.js");n.d(t,"packEnclose",(function(){return s.default}));var a=n(/*! ./partition.js */"./node_modules/d3-hierarchy/src/partition.js");n.d(t,"partition",(function(){return a.default}));var c=n(/*! ./stratify.js */"./node_modules/d3-hierarchy/src/stratify.js");n.d(t,"stratify",(function(){return c.default}));var d=n(/*! ./tree.js */"./node_modules/d3-hierarchy/src/tree.js");n.d(t,"tree",(function(){return d.default}));var l=n(/*! ./treemap/index.js */"./node_modules/d3-hierarchy/src/treemap/index.js");n.d(t,"treemap",(function(){return l.default}));var f=n(/*! ./treemap/binary.js */"./node_modules/d3-hierarchy/src/treemap/binary.js");n.d(t,"treemapBinary",(function(){return f.default}));var h=n(/*! ./treemap/dice.js */"./node_modules/d3-hierarchy/src/treemap/dice.js");n.d(t,"treemapDice",(function(){return h.default}));var m=n(/*! ./treemap/slice.js */"./node_modules/d3-hierarchy/src/treemap/slice.js");n.d(t,"treemapSlice",(function(){return m.default}));var p=n(/*! ./treemap/sliceDice.js */"./node_modules/d3-hierarchy/src/treemap/sliceDice.js");n.d(t,"treemapSliceDice",(function(){return p.default}));var _=n(/*! ./treemap/squarify.js */"./node_modules/d3-hierarchy/src/treemap/squarify.js");n.d(t,"treemapSquarify",(function(){return _.default}));var g=n(/*! ./treemap/resquarify.js */"./node_modules/d3-hierarchy/src/treemap/resquarify.js");n.d(t,"treemapResquarify",(function(){return g.default}))},"./node_modules/d3-hierarchy/src/pack/enclose.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/pack/enclose.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../array.js */"./node_modules/d3-hierarchy/src/array.js");function o(e,t){var n,r;if(s(t,e))return[t];for(n=0;n<e.length;++n)if(u(t,e[n])&&s(c(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(u(c(e[n],e[r]),t)&&u(c(e[n],t),e[r])&&u(c(e[r],t),e[n])&&s(d(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function u(e,t){var n=e.r-t.r,r=t.x-e.x,o=t.y-e.y;return n<0||n*n<r*r+o*o}function i(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function s(e,t){for(var n=0;n<t.length;++n)if(!i(e,t[n]))return!1;return!0}function a(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return c(e[0],e[1]);case 3:return d(e[0],e[1],e[2])}var t}function c(e,t){var n=e.x,r=e.y,o=e.r,u=t.x,i=t.y,s=t.r,a=u-n,c=i-r,d=s-o,l=Math.sqrt(a*a+c*c);return{x:(n+u+a/l*d)/2,y:(r+i+c/l*d)/2,r:(l+o+s)/2}}function d(e,t,n){var r=e.x,o=e.y,u=e.r,i=t.x,s=t.y,a=t.r,c=n.x,d=n.y,l=n.r,f=r-i,h=r-c,m=o-s,p=o-d,_=a-u,g=l-u,v=r*r+o*o-u*u,j=v-i*i-s*s+a*a,b=v-c*c-d*d+l*l,y=h*m-f*p,x=(m*b-p*j)/(2*y)-r,w=(p*_-m*g)/y,O=(h*j-f*b)/(2*y)-o,M=(f*g-h*_)/y,S=w*w+M*M-1,E=2*(u+x*w+O*M),k=x*x+O*O-u*u,C=-(S?(E+Math.sqrt(E*E-4*S*k))/(2*S):k/E);return{x:r+x+w*C,y:o+O+M*C,r:C}}t.default=function(e){for(var t,n,u=0,s=(e=Object(r.shuffle)(r.slice.call(e))).length,c=[];u<s;)t=e[u],n&&i(n,t)?++u:(n=a(c=o(c,t)),u=0);return n}},"./node_modules/d3-hierarchy/src/pack/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/pack/index.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./siblings.js */"./node_modules/d3-hierarchy/src/pack/siblings.js"),o=n(/*! ../accessors.js */"./node_modules/d3-hierarchy/src/accessors.js"),u=n(/*! ../constant.js */"./node_modules/d3-hierarchy/src/constant.js");function i(e){return Math.sqrt(e.value)}function s(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function a(e,t){return function(n){if(o=n.children){var o,u,i,s=o.length,a=e(n)*t||0;if(a)for(u=0;u<s;++u)o[u].r+=a;if(i=Object(r.packEnclose)(o),a)for(u=0;u<s;++u)o[u].r-=a;n.r=i+a}}}function c(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}t.default=function(){var e=null,t=1,n=1,r=u.constantZero;function d(o){return o.x=t/2,o.y=n/2,e?o.eachBefore(s(e)).eachAfter(a(r,.5)).eachBefore(c(1)):o.eachBefore(s(i)).eachAfter(a(u.constantZero,1)).eachAfter(a(r,o.r/Math.min(t,n))).eachBefore(c(Math.min(t,n)/(2*o.r))),o}return d.radius=function(t){return arguments.length?(e=Object(o.optional)(t),d):e},d.size=function(e){return arguments.length?(t=+e[0],n=+e[1],d):[t,n]},d.padding=function(e){return arguments.length?(r="function"==typeof e?e:Object(u.default)(+e),d):r},d}},"./node_modules/d3-hierarchy/src/pack/siblings.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/pack/siblings.js ***!
  \********************************************************/
/*! exports provided: packEnclose, default */function(e,t,n){"use strict";n.r(t),n.d(t,"packEnclose",(function(){return a}));var r=n(/*! ./enclose.js */"./node_modules/d3-hierarchy/src/pack/enclose.js");function o(e,t,n){var r,o,u,i,s=e.x-t.x,a=e.y-t.y,c=s*s+a*a;c?(o=t.r+n.r,o*=o,i=e.r+n.r,o>(i*=i)?(r=(c+i-o)/(2*c),u=Math.sqrt(Math.max(0,i/c-r*r)),n.x=e.x-r*s-u*a,n.y=e.y-r*a+u*s):(r=(c+o-i)/(2*c),u=Math.sqrt(Math.max(0,o/c-r*r)),n.x=t.x+r*s-u*a,n.y=t.y+r*a+u*s)):(n.x=t.x+n.r,n.y=t.y)}function u(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function i(e){var t=e._,n=e.next._,r=t.r+n.r,o=(t.x*n.r+n.x*t.r)/r,u=(t.y*n.r+n.y*t.r)/r;return o*o+u*u}function s(e){this._=e,this.next=null,this.previous=null}function a(e){if(!(c=e.length))return 0;var t,n,a,c,d,l,f,h,m,p,_;if((t=e[0]).x=0,t.y=0,!(c>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(c>2))return t.r+n.r;o(n,t,a=e[2]),t=new s(t),n=new s(n),a=new s(a),t.next=a.previous=n,n.next=t.previous=a,a.next=n.previous=t;e:for(f=3;f<c;++f){o(t._,n._,a=e[f]),a=new s(a),h=n.next,m=t.previous,p=n._.r,_=t._.r;do{if(p<=_){if(u(h._,a._)){n=h,t.next=n,n.previous=t,--f;continue e}p+=h._.r,h=h.next}else{if(u(m._,a._)){(t=m).next=n,n.previous=t,--f;continue e}_+=m._.r,m=m.previous}}while(h!==m.next);for(a.previous=t,a.next=n,t.next=n.previous=n=a,d=i(t);(a=a.next)!==n;)(l=i(a))<d&&(t=a,d=l);n=t.next}for(t=[n._],a=n;(a=a.next)!==n;)t.push(a._);for(a=Object(r.default)(t),f=0;f<c;++f)(t=e[f]).x-=a.x,t.y-=a.y;return a.r}t.default=function(e){return a(e),e}},"./node_modules/d3-hierarchy/src/partition.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/partition.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./treemap/round.js */"./node_modules/d3-hierarchy/src/treemap/round.js"),o=n(/*! ./treemap/dice.js */"./node_modules/d3-hierarchy/src/treemap/dice.js");t.default=function(){var e=1,t=1,n=0,u=!1;function i(i){var s=i.height+1;return i.x0=i.y0=n,i.x1=e,i.y1=t/s,i.eachBefore(function(e,t){return function(r){r.children&&Object(o.default)(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var u=r.x0,i=r.y0,s=r.x1-n,a=r.y1-n;s<u&&(u=s=(u+s)/2),a<i&&(i=a=(i+a)/2),r.x0=u,r.y0=i,r.x1=s,r.y1=a}}(t,s)),u&&i.eachBefore(r.default),i}return i.round=function(e){return arguments.length?(u=!!e,i):u},i.size=function(n){return arguments.length?(e=+n[0],t=+n[1],i):[e,t]},i.padding=function(e){return arguments.length?(n=+e,i):n},i}},"./node_modules/d3-hierarchy/src/stratify.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/stratify.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./accessors.js */"./node_modules/d3-hierarchy/src/accessors.js"),o=n(/*! ./hierarchy/index.js */"./node_modules/d3-hierarchy/src/hierarchy/index.js"),u={depth:-1},i={};function s(e){return e.id}function a(e){return e.parentId}t.default=function(){var e=s,t=a;function n(n){var r,s,a,c,d,l,f,h=n.length,m=new Array(h),p={};for(s=0;s<h;++s)r=n[s],d=m[s]=new o.Node(r),null!=(l=e(r,s,n))&&(l+="")&&(p[f="$"+(d.id=l)]=f in p?i:d);for(s=0;s<h;++s)if(d=m[s],null!=(l=t(n[s],s,n))&&(l+="")){if(!(c=p["$"+l]))throw new Error("missing: "+l);if(c===i)throw new Error("ambiguous: "+l);c.children?c.children.push(d):c.children=[d],d.parent=c}else{if(a)throw new Error("multiple roots");a=d}if(!a)throw new Error("no root");if(a.parent=u,a.eachBefore((function(e){e.depth=e.parent.depth+1,--h})).eachBefore(o.computeHeight),a.parent=null,h>0)throw new Error("cycle");return a}return n.id=function(t){return arguments.length?(e=Object(r.required)(t),n):e},n.parentId=function(e){return arguments.length?(t=Object(r.required)(e),n):t},n}},"./node_modules/d3-hierarchy/src/tree.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-hierarchy/src/tree.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./hierarchy/index.js */"./node_modules/d3-hierarchy/src/hierarchy/index.js");function o(e,t){return e.parent===t.parent?1:2}function u(e){var t=e.children;return t?t[0]:e.t}function i(e){var t=e.children;return t?t[t.length-1]:e.t}function s(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function a(e,t,n){return e.a.parent===t.parent?e.a:n}function c(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}c.prototype=Object.create(r.Node.prototype),t.default=function(){var e=o,t=1,n=1,r=null;function d(o){var u=function(e){for(var t,n,r,o,u,i=new c(e,0),s=[i];t=s.pop();)if(r=t._.children)for(t.children=new Array(u=r.length),o=u-1;o>=0;--o)s.push(n=t.children[o]=new c(r[o],o)),n.parent=t;return(i.parent=new c(null,0)).children=[i],i}(o);if(u.eachAfter(l),u.parent.m=-u.z,u.eachBefore(f),r)o.eachBefore(h);else{var i=o,s=o,a=o;o.eachBefore((function(e){e.x<i.x&&(i=e),e.x>s.x&&(s=e),e.depth>a.depth&&(a=e)}));var d=i===s?1:e(i,s)/2,m=d-i.x,p=t/(s.x+d+m),_=n/(a.depth||1);o.eachBefore((function(e){e.x=(e.x+m)*p,e.y=e.depth*_}))}return o}function l(t){var n=t.children,r=t.parent.children,o=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,o=e.children,u=o.length;--u>=0;)(t=o[u]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var c=(n[0].z+n[n.length-1].z)/2;o?(t.z=o.z+e(t._,o._),t.m=t.z-c):t.z=c}else o&&(t.z=o.z+e(t._,o._));t.parent.A=function(t,n,r){if(n){for(var o,c=t,d=t,l=n,f=c.parent.children[0],h=c.m,m=d.m,p=l.m,_=f.m;l=i(l),c=u(c),l&&c;)f=u(f),(d=i(d)).a=t,(o=l.z+p-c.z-h+e(l._,c._))>0&&(s(a(l,t,r),t,o),h+=o,m+=o),p+=l.m,h+=c.m,_+=f.m,m+=d.m;l&&!i(d)&&(d.t=l,d.m+=p-m),c&&!u(f)&&(f.t=c,f.m+=h-_,r=t)}return r}(t,o,t.parent.A||r[0])}function f(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function h(e){e.x*=t,e.y=e.depth*n}return d.separation=function(t){return arguments.length?(e=t,d):e},d.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],d):r?null:[t,n]},d.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],d):r?[t,n]:null},d}},"./node_modules/d3-hierarchy/src/treemap/binary.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/binary.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){var u,i,s=e.children,a=s.length,c=new Array(a+1);for(c[0]=i=u=0;u<a;++u)c[u+1]=i+=s[u].value;!function e(t,n,r,o,u,i,a){if(t>=n-1){var d=s[t];return d.x0=o,d.y0=u,d.x1=i,void(d.y1=a)}var l=c[t],f=r/2+l,h=t+1,m=n-1;for(;h<m;){var p=h+m>>>1;c[p]<f?h=p+1:m=p}f-c[h-1]<c[h]-f&&t+1<h&&--h;var _=c[h]-l,g=r-_;if(i-o>a-u){var v=(o*g+i*_)/r;e(t,h,_,o,u,v,a),e(h,n,g,v,u,i,a)}else{var j=(u*g+a*_)/r;e(t,h,_,o,u,i,j),e(h,n,g,o,j,i,a)}}(0,a,e.value,t,n,r,o)}},"./node_modules/d3-hierarchy/src/treemap/dice.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/dice.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){for(var u,i=e.children,s=-1,a=i.length,c=e.value&&(r-t)/e.value;++s<a;)(u=i[s]).y0=n,u.y1=o,u.x0=t,u.x1=t+=u.value*c}},"./node_modules/d3-hierarchy/src/treemap/index.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/index.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./round.js */"./node_modules/d3-hierarchy/src/treemap/round.js"),o=n(/*! ./squarify.js */"./node_modules/d3-hierarchy/src/treemap/squarify.js"),u=n(/*! ../accessors.js */"./node_modules/d3-hierarchy/src/accessors.js"),i=n(/*! ../constant.js */"./node_modules/d3-hierarchy/src/constant.js");t.default=function(){var e=o.default,t=!1,n=1,s=1,a=[0],c=i.constantZero,d=i.constantZero,l=i.constantZero,f=i.constantZero,h=i.constantZero;function m(e){return e.x0=e.y0=0,e.x1=n,e.y1=s,e.eachBefore(p),a=[0],t&&e.eachBefore(r.default),e}function p(t){var n=a[t.depth],r=t.x0+n,o=t.y0+n,u=t.x1-n,i=t.y1-n;u<r&&(r=u=(r+u)/2),i<o&&(o=i=(o+i)/2),t.x0=r,t.y0=o,t.x1=u,t.y1=i,t.children&&(n=a[t.depth+1]=c(t)/2,r+=h(t)-n,o+=d(t)-n,(u-=l(t)-n)<r&&(r=u=(r+u)/2),(i-=f(t)-n)<o&&(o=i=(o+i)/2),e(t,r,o,u,i))}return m.round=function(e){return arguments.length?(t=!!e,m):t},m.size=function(e){return arguments.length?(n=+e[0],s=+e[1],m):[n,s]},m.tile=function(t){return arguments.length?(e=Object(u.required)(t),m):e},m.padding=function(e){return arguments.length?m.paddingInner(e).paddingOuter(e):m.paddingInner()},m.paddingInner=function(e){return arguments.length?(c="function"==typeof e?e:Object(i.default)(+e),m):c},m.paddingOuter=function(e){return arguments.length?m.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):m.paddingTop()},m.paddingTop=function(e){return arguments.length?(d="function"==typeof e?e:Object(i.default)(+e),m):d},m.paddingRight=function(e){return arguments.length?(l="function"==typeof e?e:Object(i.default)(+e),m):l},m.paddingBottom=function(e){return arguments.length?(f="function"==typeof e?e:Object(i.default)(+e),m):f},m.paddingLeft=function(e){return arguments.length?(h="function"==typeof e?e:Object(i.default)(+e),m):h},m}},"./node_modules/d3-hierarchy/src/treemap/resquarify.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/resquarify.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dice.js */"./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n(/*! ./slice.js */"./node_modules/d3-hierarchy/src/treemap/slice.js"),u=n(/*! ./squarify.js */"./node_modules/d3-hierarchy/src/treemap/squarify.js");t.default=function e(t){function n(e,n,i,s,a){if((c=e._squarify)&&c.ratio===t)for(var c,d,l,f,h,m=-1,p=c.length,_=e.value;++m<p;){for(l=(d=c[m]).children,f=d.value=0,h=l.length;f<h;++f)d.value+=l[f].value;d.dice?Object(r.default)(d,n,i,s,i+=(a-i)*d.value/_):Object(o.default)(d,n,i,n+=(s-n)*d.value/_,a),_-=d.value}else e._squarify=c=Object(u.squarifyRatio)(t,e,n,i,s,a),c.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(u.phi)},"./node_modules/d3-hierarchy/src/treemap/round.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/round.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)}},"./node_modules/d3-hierarchy/src/treemap/slice.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/slice.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){for(var u,i=e.children,s=-1,a=i.length,c=e.value&&(o-n)/e.value;++s<a;)(u=i[s]).x0=t,u.x1=r,u.y0=n,u.y1=n+=u.value*c}},"./node_modules/d3-hierarchy/src/treemap/sliceDice.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/sliceDice.js ***!
  \************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dice.js */"./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n(/*! ./slice.js */"./node_modules/d3-hierarchy/src/treemap/slice.js");t.default=function(e,t,n,u,i){(1&e.depth?o.default:r.default)(e,t,n,u,i)}},"./node_modules/d3-hierarchy/src/treemap/squarify.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-hierarchy/src/treemap/squarify.js ***!
  \***********************************************************/
/*! exports provided: phi, squarifyRatio, default */function(e,t,n){"use strict";n.r(t),n.d(t,"phi",(function(){return u})),n.d(t,"squarifyRatio",(function(){return i}));var r=n(/*! ./dice.js */"./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n(/*! ./slice.js */"./node_modules/d3-hierarchy/src/treemap/slice.js"),u=(1+Math.sqrt(5))/2;function i(e,t,n,u,i,s){for(var a,c,d,l,f,h,m,p,_,g,v,j=[],b=t.children,y=0,x=0,w=b.length,O=t.value;y<w;){d=i-n,l=s-u;do{f=b[x++].value}while(!f&&x<w);for(h=m=f,v=f*f*(g=Math.max(l/d,d/l)/(O*e)),_=Math.max(m/v,v/h);x<w;++x){if(f+=c=b[x].value,c<h&&(h=c),c>m&&(m=c),v=f*f*g,(p=Math.max(m/v,v/h))>_){f-=c;break}_=p}j.push(a={value:f,dice:d<l,children:b.slice(y,x)}),a.dice?Object(r.default)(a,n,u,i,O?u+=l*f/O:s):Object(o.default)(a,n,u,O?n+=d*f/O:i,s),O-=f,y=x}return j}t.default=function e(t){function n(e,n,r,o,u){i(t,e,n,r,o,u)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(u)},"./node_modules/d3-interpolate/src/array.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/array.js ***!
  \**************************************************/
/*! exports provided: default, genericArray */function(e,t,n){"use strict";n.r(t),n.d(t,"genericArray",(function(){return u}));var r=n(/*! ./value.js */"./node_modules/d3-interpolate/src/value.js"),o=n(/*! ./numberArray.js */"./node_modules/d3-interpolate/src/numberArray.js");function u(e,t){var n,o=t?t.length:0,u=e?Math.min(o,e.length):0,i=new Array(u),s=new Array(o);for(n=0;n<u;++n)i[n]=Object(r.default)(e[n],t[n]);for(;n<o;++n)s[n]=t[n];return function(e){for(n=0;n<u;++n)s[n]=i[n](e);return s}}t.default=function(e,t){return(Object(o.isNumberArray)(t)?o.default:u)(e,t)}},"./node_modules/d3-interpolate/src/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basis.js ***!
  \**************************************************/
/*! exports provided: basis, default */function(e,t,n){"use strict";function r(e,t,n,r,o){var u=e*e,i=u*e;return((1-3*e+3*u-i)*t+(4-6*u+3*i)*n+(1+3*e+3*u-3*i)*r+i*o)/6}n.r(t),n.d(t,"basis",(function(){return r})),t.default=function(e){var t=e.length-1;return function(n){var o=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),u=e[o],i=e[o+1],s=o>0?e[o-1]:2*u-i,a=o<t-1?e[o+2]:2*i-u;return r((n-o/t)*t,s,u,i,a)}}},"./node_modules/d3-interpolate/src/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basisClosed.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./basis.js */"./node_modules/d3-interpolate/src/basis.js");t.default=function(e){var t=e.length;return function(n){var o=Math.floor(((n%=1)<0?++n:n)*t),u=e[(o+t-1)%t],i=e[o%t],s=e[(o+1)%t],a=e[(o+2)%t];return Object(r.basis)((n-o/t)*t,u,i,s,a)}}},"./node_modules/d3-interpolate/src/color.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/color.js ***!
  \**************************************************/
/*! exports provided: hue, gamma, default */function(e,t,n){"use strict";n.r(t),n.d(t,"hue",(function(){return u})),n.d(t,"gamma",(function(){return i})),n.d(t,"default",(function(){return s}));var r=n(/*! ./constant.js */"./node_modules/d3-interpolate/src/constant.js");function o(e,t){return function(n){return e+n*t}}function u(e,t){var n=t-e;return n?o(e,n>180||n<-180?n-360*Math.round(n/360):n):Object(r.default)(isNaN(e)?t:e)}function i(e){return 1==(e=+e)?s:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Object(r.default)(isNaN(t)?n:t)}}function s(e,t){var n=t-e;return n?o(e,n):Object(r.default)(isNaN(e)?t:e)}},"./node_modules/d3-interpolate/src/constant.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/constant.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-interpolate/src/cubehelix.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-interpolate/src/cubehelix.js ***!
  \******************************************************/
/*! exports provided: default, cubehelixLong */function(e,t,n){"use strict";n.r(t),n.d(t,"cubehelixLong",(function(){return i}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");function u(e){return function t(n){function u(t,u){var i=e((t=Object(r.cubehelix)(t)).h,(u=Object(r.cubehelix)(u)).h),s=Object(o.default)(t.s,u.s),a=Object(o.default)(t.l,u.l),c=Object(o.default)(t.opacity,u.opacity);return function(e){return t.h=i(e),t.s=s(e),t.l=a(Math.pow(e,n)),t.opacity=c(e),t+""}}return n=+n,u.gamma=t,u}(1)}t.default=u(o.hue);var i=u(o.default)},"./node_modules/d3-interpolate/src/date.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/date.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}},"./node_modules/d3-interpolate/src/discrete.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/discrete.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}},"./node_modules/d3-interpolate/src/hcl.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hcl.js ***!
  \************************************************/
/*! exports provided: default, hclLong */function(e,t,n){"use strict";n.r(t),n.d(t,"hclLong",(function(){return i}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");function u(e){return function(t,n){var u=e((t=Object(r.hcl)(t)).h,(n=Object(r.hcl)(n)).h),i=Object(o.default)(t.c,n.c),s=Object(o.default)(t.l,n.l),a=Object(o.default)(t.opacity,n.opacity);return function(e){return t.h=u(e),t.c=i(e),t.l=s(e),t.opacity=a(e),t+""}}}t.default=u(o.hue);var i=u(o.default)},"./node_modules/d3-interpolate/src/hsl.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hsl.js ***!
  \************************************************/
/*! exports provided: default, hslLong */function(e,t,n){"use strict";n.r(t),n.d(t,"hslLong",(function(){return i}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");function u(e){return function(t,n){var u=e((t=Object(r.hsl)(t)).h,(n=Object(r.hsl)(n)).h),i=Object(o.default)(t.s,n.s),s=Object(o.default)(t.l,n.l),a=Object(o.default)(t.opacity,n.opacity);return function(e){return t.h=u(e),t.s=i(e),t.l=s(e),t.opacity=a(e),t+""}}}t.default=u(o.hue);var i=u(o.default)},"./node_modules/d3-interpolate/src/hue.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hue.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");t.default=function(e,t){var n=Object(r.hue)(+e,+t);return function(e){var t=n(e);return t-360*Math.floor(t/360)}}},"./node_modules/d3-interpolate/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/index.js ***!
  \**************************************************/
/*! exports provided: interpolate, interpolateArray, interpolateBasis, interpolateBasisClosed, interpolateDate, interpolateDiscrete, interpolateHue, interpolateNumber, interpolateNumberArray, interpolateObject, interpolateRound, interpolateString, interpolateTransformCss, interpolateTransformSvg, interpolateZoom, interpolateRgb, interpolateRgbBasis, interpolateRgbBasisClosed, interpolateHsl, interpolateHslLong, interpolateLab, interpolateHcl, interpolateHclLong, interpolateCubehelix, interpolateCubehelixLong, piecewise, quantize */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./value.js */"./node_modules/d3-interpolate/src/value.js");n.d(t,"interpolate",(function(){return r.default}));var o=n(/*! ./array.js */"./node_modules/d3-interpolate/src/array.js");n.d(t,"interpolateArray",(function(){return o.default}));var u=n(/*! ./basis.js */"./node_modules/d3-interpolate/src/basis.js");n.d(t,"interpolateBasis",(function(){return u.default}));var i=n(/*! ./basisClosed.js */"./node_modules/d3-interpolate/src/basisClosed.js");n.d(t,"interpolateBasisClosed",(function(){return i.default}));var s=n(/*! ./date.js */"./node_modules/d3-interpolate/src/date.js");n.d(t,"interpolateDate",(function(){return s.default}));var a=n(/*! ./discrete.js */"./node_modules/d3-interpolate/src/discrete.js");n.d(t,"interpolateDiscrete",(function(){return a.default}));var c=n(/*! ./hue.js */"./node_modules/d3-interpolate/src/hue.js");n.d(t,"interpolateHue",(function(){return c.default}));var d=n(/*! ./number.js */"./node_modules/d3-interpolate/src/number.js");n.d(t,"interpolateNumber",(function(){return d.default}));var l=n(/*! ./numberArray.js */"./node_modules/d3-interpolate/src/numberArray.js");n.d(t,"interpolateNumberArray",(function(){return l.default}));var f=n(/*! ./object.js */"./node_modules/d3-interpolate/src/object.js");n.d(t,"interpolateObject",(function(){return f.default}));var h=n(/*! ./round.js */"./node_modules/d3-interpolate/src/round.js");n.d(t,"interpolateRound",(function(){return h.default}));var m=n(/*! ./string.js */"./node_modules/d3-interpolate/src/string.js");n.d(t,"interpolateString",(function(){return m.default}));var p=n(/*! ./transform/index.js */"./node_modules/d3-interpolate/src/transform/index.js");n.d(t,"interpolateTransformCss",(function(){return p.interpolateTransformCss})),n.d(t,"interpolateTransformSvg",(function(){return p.interpolateTransformSvg}));var _=n(/*! ./zoom.js */"./node_modules/d3-interpolate/src/zoom.js");n.d(t,"interpolateZoom",(function(){return _.default}));var g=n(/*! ./rgb.js */"./node_modules/d3-interpolate/src/rgb.js");n.d(t,"interpolateRgb",(function(){return g.default})),n.d(t,"interpolateRgbBasis",(function(){return g.rgbBasis})),n.d(t,"interpolateRgbBasisClosed",(function(){return g.rgbBasisClosed}));var v=n(/*! ./hsl.js */"./node_modules/d3-interpolate/src/hsl.js");n.d(t,"interpolateHsl",(function(){return v.default})),n.d(t,"interpolateHslLong",(function(){return v.hslLong}));var j=n(/*! ./lab.js */"./node_modules/d3-interpolate/src/lab.js");n.d(t,"interpolateLab",(function(){return j.default}));var b=n(/*! ./hcl.js */"./node_modules/d3-interpolate/src/hcl.js");n.d(t,"interpolateHcl",(function(){return b.default})),n.d(t,"interpolateHclLong",(function(){return b.hclLong}));var y=n(/*! ./cubehelix.js */"./node_modules/d3-interpolate/src/cubehelix.js");n.d(t,"interpolateCubehelix",(function(){return y.default})),n.d(t,"interpolateCubehelixLong",(function(){return y.cubehelixLong}));var x=n(/*! ./piecewise.js */"./node_modules/d3-interpolate/src/piecewise.js");n.d(t,"piecewise",(function(){return x.default}));var w=n(/*! ./quantize.js */"./node_modules/d3-interpolate/src/quantize.js");n.d(t,"quantize",(function(){return w.default}))},"./node_modules/d3-interpolate/src/lab.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/lab.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");function u(e,t){var n=Object(o.default)((e=Object(r.lab)(e)).l,(t=Object(r.lab)(t)).l),u=Object(o.default)(e.a,t.a),i=Object(o.default)(e.b,t.b),s=Object(o.default)(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=u(t),e.b=i(t),e.opacity=s(t),e+""}}},"./node_modules/d3-interpolate/src/number.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/number.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}},"./node_modules/d3-interpolate/src/numberArray.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/numberArray.js ***!
  \********************************************************/
/*! exports provided: default, isNumberArray */function(e,t,n){"use strict";function r(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}n.r(t),n.d(t,"isNumberArray",(function(){return r})),t.default=function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,o=t.slice();return function(u){for(n=0;n<r;++n)o[n]=e[n]*(1-u)+t[n]*u;return o}}},"./node_modules/d3-interpolate/src/object.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/object.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./value.js */"./node_modules/d3-interpolate/src/value.js");t.default=function(e,t){var n,o={},u={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?o[n]=Object(r.default)(e[n],t[n]):u[n]=t[n];return function(e){for(n in o)u[n]=o[n](e);return u}}},"./node_modules/d3-interpolate/src/piecewise.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-interpolate/src/piecewise.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t){for(var n=0,r=t.length-1,o=t[0],u=new Array(r<0?0:r);n<r;)u[n]=e(o,o=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return u[t](e-t)}}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-interpolate/src/quantize.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/quantize.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}},"./node_modules/d3-interpolate/src/rgb.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/rgb.js ***!
  \************************************************/
/*! exports provided: default, rgbBasis, rgbBasisClosed */function(e,t,n){"use strict";n.r(t),n.d(t,"rgbBasis",(function(){return a})),n.d(t,"rgbBasisClosed",(function(){return c}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./basis.js */"./node_modules/d3-interpolate/src/basis.js"),u=n(/*! ./basisClosed.js */"./node_modules/d3-interpolate/src/basisClosed.js"),i=n(/*! ./color.js */"./node_modules/d3-interpolate/src/color.js");function s(e){return function(t){var n,o,u=t.length,i=new Array(u),s=new Array(u),a=new Array(u);for(n=0;n<u;++n)o=Object(r.rgb)(t[n]),i[n]=o.r||0,s[n]=o.g||0,a[n]=o.b||0;return i=e(i),s=e(s),a=e(a),o.opacity=1,function(e){return o.r=i(e),o.g=s(e),o.b=a(e),o+""}}}t.default=function e(t){var n=Object(i.gamma)(t);function o(e,t){var o=n((e=Object(r.rgb)(e)).r,(t=Object(r.rgb)(t)).r),u=n(e.g,t.g),s=n(e.b,t.b),a=Object(i.default)(e.opacity,t.opacity);return function(t){return e.r=o(t),e.g=u(t),e.b=s(t),e.opacity=a(t),e+""}}return o.gamma=e,o}(1);var a=s(o.default),c=s(u.default)},"./node_modules/d3-interpolate/src/round.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/round.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}},"./node_modules/d3-interpolate/src/string.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/string.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./number.js */"./node_modules/d3-interpolate/src/number.js"),o=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,u=new RegExp(o.source,"g");t.default=function(e,t){var n,i,s,a=o.lastIndex=u.lastIndex=0,c=-1,d=[],l=[];for(e+="",t+="";(n=o.exec(e))&&(i=u.exec(t));)(s=i.index)>a&&(s=t.slice(a,s),d[c]?d[c]+=s:d[++c]=s),(n=n[0])===(i=i[0])?d[c]?d[c]+=i:d[++c]=i:(d[++c]=null,l.push({i:c,x:Object(r.default)(n,i)})),a=u.lastIndex;return a<t.length&&(s=t.slice(a),d[c]?d[c]+=s:d[++c]=s),d.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)d[(n=l[r]).i]=n.x(e);return d.join("")})}},"./node_modules/d3-interpolate/src/transform/decompose.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/decompose.js ***!
  \****************************************************************/
/*! exports provided: identity, default */function(e,t,n){"use strict";n.r(t),n.d(t,"identity",(function(){return o}));var r=180/Math.PI,o={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};t.default=function(e,t,n,o,u,i){var s,a,c;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(c=e*n+t*o)&&(n-=e*c,o-=t*c),(a=Math.sqrt(n*n+o*o))&&(n/=a,o/=a,c/=a),e*o<t*n&&(e=-e,t=-t,c=-c,s=-s),{translateX:u,translateY:i,rotate:Math.atan2(t,e)*r,skewX:Math.atan(c)*r,scaleX:s,scaleY:a}}},"./node_modules/d3-interpolate/src/transform/index.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/index.js ***!
  \************************************************************/
/*! exports provided: interpolateTransformCss, interpolateTransformSvg */function(e,t,n){"use strict";n.r(t),n.d(t,"interpolateTransformCss",(function(){return i})),n.d(t,"interpolateTransformSvg",(function(){return s}));var r=n(/*! ../number.js */"./node_modules/d3-interpolate/src/number.js"),o=n(/*! ./parse.js */"./node_modules/d3-interpolate/src/transform/parse.js");function u(e,t,n,o){function u(e){return e.length?e.pop()+" ":""}return function(i,s){var a=[],c=[];return i=e(i),s=e(s),function(e,o,u,i,s,a){if(e!==u||o!==i){var c=s.push("translate(",null,t,null,n);a.push({i:c-4,x:Object(r.default)(e,u)},{i:c-2,x:Object(r.default)(o,i)})}else(u||i)&&s.push("translate("+u+t+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,a,c),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(u(n)+"rotate(",null,o)-2,x:Object(r.default)(e,t)})):t&&n.push(u(n)+"rotate("+t+o)}(i.rotate,s.rotate,a,c),function(e,t,n,i){e!==t?i.push({i:n.push(u(n)+"skewX(",null,o)-2,x:Object(r.default)(e,t)}):t&&n.push(u(n)+"skewX("+t+o)}(i.skewX,s.skewX,a,c),function(e,t,n,o,i,s){if(e!==n||t!==o){var a=i.push(u(i)+"scale(",null,",",null,")");s.push({i:a-4,x:Object(r.default)(e,n)},{i:a-2,x:Object(r.default)(t,o)})}else 1===n&&1===o||i.push(u(i)+"scale("+n+","+o+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,a,c),i=s=null,function(e){for(var t,n=-1,r=c.length;++n<r;)a[(t=c[n]).i]=t.x(e);return a.join("")}}}var i=u(o.parseCss,"px, ","px)","deg)"),s=u(o.parseSvg,", ",")",")")},"./node_modules/d3-interpolate/src/transform/parse.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/parse.js ***!
  \************************************************************/
/*! exports provided: parseCss, parseSvg */function(e,t,n){"use strict";n.r(t),n.d(t,"parseCss",(function(){return a})),n.d(t,"parseSvg",(function(){return c}));var r,o,u,i,s=n(/*! ./decompose.js */"./node_modules/d3-interpolate/src/transform/decompose.js");function a(e){return"none"===e?s.identity:(r||(r=document.createElement("DIV"),o=document.documentElement,u=document.defaultView),r.style.transform=e,e=u.getComputedStyle(o.appendChild(r),null).getPropertyValue("transform"),o.removeChild(r),e=e.slice(7,-1).split(","),Object(s.default)(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}function c(e){return null==e?s.identity:(i||(i=document.createElementNS("http://www.w3.org/2000/svg","g")),i.setAttribute("transform",e),(e=i.transform.baseVal.consolidate())?(e=e.matrix,Object(s.default)(e.a,e.b,e.c,e.d,e.e,e.f)):s.identity)}},"./node_modules/d3-interpolate/src/value.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/value.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! ./rgb.js */"./node_modules/d3-interpolate/src/rgb.js"),u=n(/*! ./array.js */"./node_modules/d3-interpolate/src/array.js"),i=n(/*! ./date.js */"./node_modules/d3-interpolate/src/date.js"),s=n(/*! ./number.js */"./node_modules/d3-interpolate/src/number.js"),a=n(/*! ./object.js */"./node_modules/d3-interpolate/src/object.js"),c=n(/*! ./string.js */"./node_modules/d3-interpolate/src/string.js"),d=n(/*! ./constant.js */"./node_modules/d3-interpolate/src/constant.js"),l=n(/*! ./numberArray.js */"./node_modules/d3-interpolate/src/numberArray.js");t.default=function(e,t){var n,f=typeof t;return null==t||"boolean"===f?Object(d.default)(t):("number"===f?s.default:"string"===f?(n=Object(r.color)(t))?(t=n,o.default):c.default:t instanceof r.color?o.default:t instanceof Date?i.default:Object(l.isNumberArray)(t)?l.default:Array.isArray(t)?u.genericArray:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?a.default:s.default)(e,t)}},"./node_modules/d3-interpolate/src/zoom.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/zoom.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=Math.SQRT2;function o(e){return((e=Math.exp(e))+1/e)/2}t.default=function(e,t){var n,u,i=e[0],s=e[1],a=e[2],c=t[0],d=t[1],l=t[2],f=c-i,h=d-s,m=f*f+h*h;if(m<1e-12)u=Math.log(l/a)/r,n=function(e){return[i+e*f,s+e*h,a*Math.exp(r*e*u)]};else{var p=Math.sqrt(m),_=(l*l-a*a+4*m)/(2*a*2*p),g=(l*l-a*a-4*m)/(2*l*2*p),v=Math.log(Math.sqrt(_*_+1)-_),j=Math.log(Math.sqrt(g*g+1)-g);u=(j-v)/r,n=function(e){var t,n=e*u,c=o(v),d=a/(2*p)*(c*(t=r*n+v,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(v));return[i+d*f,s+d*h,a*c/o(r*n+v)]}}return n.duration=1e3*u,n}},"./node_modules/d3-path/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-path/src/index.js ***!
  \*******************************************/
/*! exports provided: path */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./path.js */"./node_modules/d3-path/src/path.js");n.d(t,"path",(function(){return r.default}))},"./node_modules/d3-path/src/path.js":
/*!******************************************!*\
  !*** ./node_modules/d3-path/src/path.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=Math.PI,o=2*r,u=o-1e-6;function i(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function s(){return new i}i.prototype=s.prototype={constructor:i,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,o,u){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+u)},arcTo:function(e,t,n,o,u){e=+e,t=+t,n=+n,o=+o,u=+u;var i=this._x1,s=this._y1,a=n-e,c=o-t,d=i-e,l=s-t,f=d*d+l*l;if(u<0)throw new Error("negative radius: "+u);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(l*a-c*d)>1e-6&&u){var h=n-i,m=o-s,p=a*a+c*c,_=h*h+m*m,g=Math.sqrt(p),v=Math.sqrt(f),j=u*Math.tan((r-Math.acos((p+f-_)/(2*g*v)))/2),b=j/v,y=j/g;Math.abs(b-1)>1e-6&&(this._+="L"+(e+b*d)+","+(t+b*l)),this._+="A"+u+","+u+",0,0,"+ +(l*h>d*m)+","+(this._x1=e+y*a)+","+(this._y1=t+y*c)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,i,s,a){e=+e,t=+t,a=!!a;var c=(n=+n)*Math.cos(i),d=n*Math.sin(i),l=e+c,f=t+d,h=1^a,m=a?i-s:s-i;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+f:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+l+","+f),n&&(m<0&&(m=m%o+o),m>u?this._+="A"+n+","+n+",0,1,"+h+","+(e-c)+","+(t-d)+"A"+n+","+n+",0,1,"+h+","+(this._x1=l)+","+(this._y1=f):m>1e-6&&(this._+="A"+n+","+n+",0,"+ +(m>=r)+","+h+","+(this._x1=e+n*Math.cos(s))+","+(this._y1=t+n*Math.sin(s))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},t.default=s},"./node_modules/d3-polygon/src/area.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-polygon/src/area.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n=-1,r=e.length,o=e[r-1],u=0;++n<r;)t=o,o=e[n],u+=t[1]*o[0]-t[0]*o[1];return u/2}},"./node_modules/d3-polygon/src/centroid.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-polygon/src/centroid.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=-1,o=e.length,u=0,i=0,s=e[o-1],a=0;++r<o;)t=s,s=e[r],a+=n=t[0]*s[1]-s[0]*t[1],u+=(t[0]+s[0])*n,i+=(t[1]+s[1])*n;return[u/(a*=3),i/a]}},"./node_modules/d3-polygon/src/contains.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-polygon/src/contains.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n,r,o=e.length,u=e[o-1],i=t[0],s=t[1],a=u[0],c=u[1],d=!1,l=0;l<o;++l)n=(u=e[l])[0],(r=u[1])>s!=c>s&&i<(a-n)*(s-r)/(c-r)+n&&(d=!d),a=n,c=r;return d}},"./node_modules/d3-polygon/src/cross.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-polygon/src/cross.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])}},"./node_modules/d3-polygon/src/hull.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-polygon/src/hull.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./cross.js */"./node_modules/d3-polygon/src/cross.js");function o(e,t){return e[0]-t[0]||e[1]-t[1]}function u(e){for(var t=e.length,n=[0,1],o=2,u=2;u<t;++u){for(;o>1&&Object(r.default)(e[n[o-2]],e[n[o-1]],e[u])<=0;)--o;n[o++]=u}return n.slice(0,o)}t.default=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),i=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(o),t=0;t<n;++t)i[t]=[r[t][0],-r[t][1]];var s=u(r),a=u(i),c=a[0]===s[0],d=a[a.length-1]===s[s.length-1],l=[];for(t=s.length-1;t>=0;--t)l.push(e[r[s[t]][2]]);for(t=+c;t<a.length-d;++t)l.push(e[r[a[t]][2]]);return l}},"./node_modules/d3-polygon/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-polygon/src/index.js ***!
  \**********************************************/
/*! exports provided: polygonArea, polygonCentroid, polygonHull, polygonContains, polygonLength */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./area.js */"./node_modules/d3-polygon/src/area.js");n.d(t,"polygonArea",(function(){return r.default}));var o=n(/*! ./centroid.js */"./node_modules/d3-polygon/src/centroid.js");n.d(t,"polygonCentroid",(function(){return o.default}));var u=n(/*! ./hull.js */"./node_modules/d3-polygon/src/hull.js");n.d(t,"polygonHull",(function(){return u.default}));var i=n(/*! ./contains.js */"./node_modules/d3-polygon/src/contains.js");n.d(t,"polygonContains",(function(){return i.default}));var s=n(/*! ./length.js */"./node_modules/d3-polygon/src/length.js");n.d(t,"polygonLength",(function(){return s.default}))},"./node_modules/d3-polygon/src/length.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-polygon/src/length.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=-1,o=e.length,u=e[o-1],i=u[0],s=u[1],a=0;++r<o;)t=i,n=s,t-=i=(u=e[r])[0],n-=s=u[1],a+=Math.sqrt(t*t+n*n);return a}},"./node_modules/d3-quadtree/src/add.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-quadtree/src/add.js ***!
  \*********************************************/
/*! exports provided: default, addAll */function(e,t,n){"use strict";function r(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var o,u,i,s,a,c,d,l,f,h=e._root,m={data:r},p=e._x0,_=e._y0,g=e._x1,v=e._y1;if(!h)return e._root=m,e;for(;h.length;)if((c=t>=(u=(p+g)/2))?p=u:g=u,(d=n>=(i=(_+v)/2))?_=i:v=i,o=h,!(h=h[l=d<<1|c]))return o[l]=m,e;if(s=+e._x.call(null,h.data),a=+e._y.call(null,h.data),t===s&&n===a)return m.next=h,o?o[l]=m:e._root=m,e;do{o=o?o[l]=new Array(4):e._root=new Array(4),(c=t>=(u=(p+g)/2))?p=u:g=u,(d=n>=(i=(_+v)/2))?_=i:v=i}while((l=d<<1|c)==(f=(a>=i)<<1|s>=u));return o[f]=h,o[l]=m,e}function o(e){var t,n,o,u,i=e.length,s=new Array(i),a=new Array(i),c=1/0,d=1/0,l=-1/0,f=-1/0;for(n=0;n<i;++n)isNaN(o=+this._x.call(null,t=e[n]))||isNaN(u=+this._y.call(null,t))||(s[n]=o,a[n]=u,o<c&&(c=o),o>l&&(l=o),u<d&&(d=u),u>f&&(f=u));if(c>l||d>f)return this;for(this.cover(c,d).cover(l,f),n=0;n<i;++n)r(this,s[n],a[n],e[n]);return this}n.r(t),n.d(t,"addAll",(function(){return o})),t.default=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return r(this.cover(t,n),t,n,e)}},"./node_modules/d3-quadtree/src/cover.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-quadtree/src/cover.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,o=this._x1,u=this._y1;if(isNaN(n))o=(n=Math.floor(e))+1,u=(r=Math.floor(t))+1;else{for(var i,s,a=o-n,c=this._root;n>e||e>=o||r>t||t>=u;)switch(s=(t<r)<<1|e<n,(i=new Array(4))[s]=c,c=i,a*=2,s){case 0:o=n+a,u=r+a;break;case 1:n=o-a,u=r+a;break;case 2:o=n+a,r=u-a;break;case 3:n=o-a,r=u-a}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=o,this._y1=u,this}},"./node_modules/d3-quadtree/src/data.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-quadtree/src/data.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e}},"./node_modules/d3-quadtree/src/extent.js":
/*!************************************************!*\
  !*** ./node_modules/d3-quadtree/src/extent.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}},"./node_modules/d3-quadtree/src/find.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-quadtree/src/find.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./quad.js */"./node_modules/d3-quadtree/src/quad.js");t.default=function(e,t,n){var o,u,i,s,a,c,d,l=this._x0,f=this._y0,h=this._x1,m=this._y1,p=[],_=this._root;for(_&&p.push(new r.default(_,l,f,h,m)),null==n?n=1/0:(l=e-n,f=t-n,h=e+n,m=t+n,n*=n);c=p.pop();)if(!(!(_=c.node)||(u=c.x0)>h||(i=c.y0)>m||(s=c.x1)<l||(a=c.y1)<f))if(_.length){var g=(u+s)/2,v=(i+a)/2;p.push(new r.default(_[3],g,v,s,a),new r.default(_[2],u,v,g,a),new r.default(_[1],g,i,s,v),new r.default(_[0],u,i,g,v)),(d=(t>=v)<<1|e>=g)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-d],p[p.length-1-d]=c)}else{var j=e-+this._x.call(null,_.data),b=t-+this._y.call(null,_.data),y=j*j+b*b;if(y<n){var x=Math.sqrt(n=y);l=e-x,f=t-x,h=e+x,m=t+x,o=_.data}}return o}},"./node_modules/d3-quadtree/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-quadtree/src/index.js ***!
  \***********************************************/
/*! exports provided: quadtree */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./quadtree.js */"./node_modules/d3-quadtree/src/quadtree.js");n.d(t,"quadtree",(function(){return r.default}))},"./node_modules/d3-quadtree/src/quad.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-quadtree/src/quad.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=o}},"./node_modules/d3-quadtree/src/quadtree.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-quadtree/src/quadtree.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p}));var r=n(/*! ./add.js */"./node_modules/d3-quadtree/src/add.js"),o=n(/*! ./cover.js */"./node_modules/d3-quadtree/src/cover.js"),u=n(/*! ./data.js */"./node_modules/d3-quadtree/src/data.js"),i=n(/*! ./extent.js */"./node_modules/d3-quadtree/src/extent.js"),s=n(/*! ./find.js */"./node_modules/d3-quadtree/src/find.js"),a=n(/*! ./remove.js */"./node_modules/d3-quadtree/src/remove.js"),c=n(/*! ./root.js */"./node_modules/d3-quadtree/src/root.js"),d=n(/*! ./size.js */"./node_modules/d3-quadtree/src/size.js"),l=n(/*! ./visit.js */"./node_modules/d3-quadtree/src/visit.js"),f=n(/*! ./visitAfter.js */"./node_modules/d3-quadtree/src/visitAfter.js"),h=n(/*! ./x.js */"./node_modules/d3-quadtree/src/x.js"),m=n(/*! ./y.js */"./node_modules/d3-quadtree/src/y.js");function p(e,t,n){var r=new _(null==t?h.defaultX:t,null==n?m.defaultY:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function _(e,t,n,r,o,u){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=o,this._y1=u,this._root=void 0}function g(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var v=p.prototype=_.prototype;v.copy=function(){var e,t,n=new _(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=g(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var o=0;o<4;++o)(t=r.source[o])&&(t.length?e.push({source:t,target:r.target[o]=new Array(4)}):r.target[o]=g(t));return n},v.add=r.default,v.addAll=r.addAll,v.cover=o.default,v.data=u.default,v.extent=i.default,v.find=s.default,v.remove=a.default,v.removeAll=a.removeAll,v.root=c.default,v.size=d.default,v.visit=l.default,v.visitAfter=f.default,v.x=h.default,v.y=m.default},"./node_modules/d3-quadtree/src/remove.js":
/*!************************************************!*\
  !*** ./node_modules/d3-quadtree/src/remove.js ***!
  \************************************************/
/*! exports provided: default, removeAll */function(e,t,n){"use strict";function r(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this}n.r(t),n.d(t,"removeAll",(function(){return r})),t.default=function(e){if(isNaN(u=+this._x.call(null,e))||isNaN(i=+this._y.call(null,e)))return this;var t,n,r,o,u,i,s,a,c,d,l,f,h=this._root,m=this._x0,p=this._y0,_=this._x1,g=this._y1;if(!h)return this;if(h.length)for(;;){if((c=u>=(s=(m+_)/2))?m=s:_=s,(d=i>=(a=(p+g)/2))?p=a:g=a,t=h,!(h=h[l=d<<1|c]))return this;if(!h.length)break;(t[l+1&3]||t[l+2&3]||t[l+3&3])&&(n=t,f=l)}for(;h.data!==e;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):t?(o?t[l]=o:delete t[l],(h=t[0]||t[1]||t[2]||t[3])&&h===(t[3]||t[2]||t[1]||t[0])&&!h.length&&(n?n[f]=h:this._root=h),this):(this._root=o,this)}},"./node_modules/d3-quadtree/src/root.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-quadtree/src/root.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){return this._root}},"./node_modules/d3-quadtree/src/size.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-quadtree/src/size.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e}},"./node_modules/d3-quadtree/src/visit.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-quadtree/src/visit.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./quad.js */"./node_modules/d3-quadtree/src/quad.js");t.default=function(e){var t,n,o,u,i,s,a=[],c=this._root;for(c&&a.push(new r.default(c,this._x0,this._y0,this._x1,this._y1));t=a.pop();)if(!e(c=t.node,o=t.x0,u=t.y0,i=t.x1,s=t.y1)&&c.length){var d=(o+i)/2,l=(u+s)/2;(n=c[3])&&a.push(new r.default(n,d,l,i,s)),(n=c[2])&&a.push(new r.default(n,o,l,d,s)),(n=c[1])&&a.push(new r.default(n,d,u,i,l)),(n=c[0])&&a.push(new r.default(n,o,u,d,l))}return this}},"./node_modules/d3-quadtree/src/visitAfter.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-quadtree/src/visitAfter.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./quad.js */"./node_modules/d3-quadtree/src/quad.js");t.default=function(e){var t,n=[],o=[];for(this._root&&n.push(new r.default(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var u=t.node;if(u.length){var i,s=t.x0,a=t.y0,c=t.x1,d=t.y1,l=(s+c)/2,f=(a+d)/2;(i=u[0])&&n.push(new r.default(i,s,a,l,f)),(i=u[1])&&n.push(new r.default(i,l,a,c,f)),(i=u[2])&&n.push(new r.default(i,s,f,l,d)),(i=u[3])&&n.push(new r.default(i,l,f,c,d))}o.push(t)}for(;t=o.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this}},"./node_modules/d3-quadtree/src/x.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-quadtree/src/x.js ***!
  \*******************************************/
/*! exports provided: defaultX, default */function(e,t,n){"use strict";function r(e){return e[0]}n.r(t),n.d(t,"defaultX",(function(){return r})),t.default=function(e){return arguments.length?(this._x=e,this):this._x}},"./node_modules/d3-quadtree/src/y.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-quadtree/src/y.js ***!
  \*******************************************/
/*! exports provided: defaultY, default */function(e,t,n){"use strict";function r(e){return e[1]}n.r(t),n.d(t,"defaultY",(function(){return r})),t.default=function(e){return arguments.length?(this._y=e,this):this._y}},"./node_modules/d3-random/src/bates.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-random/src/bates.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js"),o=n(/*! ./irwinHall */"./node_modules/d3-random/src/irwinHall.js");t.default=function e(t){function n(e){var n=o.default.source(t)(e);return function(){return n()/e}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/defaultSource.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-random/src/defaultSource.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){return Math.random()}},"./node_modules/d3-random/src/exponential.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-random/src/exponential.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-random/src/index.js ***!
  \*********************************************/
/*! exports provided: randomUniform, randomNormal, randomLogNormal, randomBates, randomIrwinHall, randomExponential */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./uniform */"./node_modules/d3-random/src/uniform.js");n.d(t,"randomUniform",(function(){return r.default}));var o=n(/*! ./normal */"./node_modules/d3-random/src/normal.js");n.d(t,"randomNormal",(function(){return o.default}));var u=n(/*! ./logNormal */"./node_modules/d3-random/src/logNormal.js");n.d(t,"randomLogNormal",(function(){return u.default}));var i=n(/*! ./bates */"./node_modules/d3-random/src/bates.js");n.d(t,"randomBates",(function(){return i.default}));var s=n(/*! ./irwinHall */"./node_modules/d3-random/src/irwinHall.js");n.d(t,"randomIrwinHall",(function(){return s.default}));var a=n(/*! ./exponential */"./node_modules/d3-random/src/exponential.js");n.d(t,"randomExponential",(function(){return a.default}))},"./node_modules/d3-random/src/irwinHall.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-random/src/irwinHall.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/logNormal.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-random/src/logNormal.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js"),o=n(/*! ./normal */"./node_modules/d3-random/src/normal.js");t.default=function e(t){function n(){var e=o.default.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/normal.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-random/src/normal.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e,n){var r,o;return e=null==e?0:+e,n=null==n?1:+n,function(){var u;if(null!=r)u=r,r=null;else do{r=2*t()-1,u=2*t()-1,o=r*r+u*u}while(!o||o>1);return e+n*u*Math.sqrt(-2*Math.log(o)/o)}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/uniform.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-random/src/uniform.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultSource */"./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(r.default)},"./node_modules/d3-scale-chromatic/src/categorical/Accent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Accent.js ***!
  \*******************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666")},"./node_modules/d3-scale-chromatic/src/categorical/Dark2.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Dark2.js ***!
  \******************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666")},"./node_modules/d3-scale-chromatic/src/categorical/Paired.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Paired.js ***!
  \*******************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928")},"./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js ***!
  \********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2")},"./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js ***!
  \********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc")},"./node_modules/d3-scale-chromatic/src/categorical/Set1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set1.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999")},"./node_modules/d3-scale-chromatic/src/categorical/Set2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set2.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3")},"./node_modules/d3-scale-chromatic/src/categorical/Set3.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set3.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f")},"./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js ***!
  \**********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab")},"./node_modules/d3-scale-chromatic/src/categorical/category10.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/category10.js ***!
  \***********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf")},"./node_modules/d3-scale-chromatic/src/colors.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/colors.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}},"./node_modules/d3-scale-chromatic/src/diverging/BrBG.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/BrBG.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/PRGn.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PRGn.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/PiYG.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PiYG.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/PuOr.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PuOr.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/RdBu.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdBu.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/RdGy.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdGy.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js ***!
  \*****************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js ***!
  \*****************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/diverging/Spectral.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/Spectral.js ***!
  \*******************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/index.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/index.js ***!
  \******************************************************/
/*! exports provided: schemeCategory10, schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3, schemeTableau10, interpolateBrBG, schemeBrBG, interpolatePRGn, schemePRGn, interpolatePiYG, schemePiYG, interpolatePuOr, schemePuOr, interpolateRdBu, schemeRdBu, interpolateRdGy, schemeRdGy, interpolateRdYlBu, schemeRdYlBu, interpolateRdYlGn, schemeRdYlGn, interpolateSpectral, schemeSpectral, interpolateBuGn, schemeBuGn, interpolateBuPu, schemeBuPu, interpolateGnBu, schemeGnBu, interpolateOrRd, schemeOrRd, interpolatePuBuGn, schemePuBuGn, interpolatePuBu, schemePuBu, interpolatePuRd, schemePuRd, interpolateRdPu, schemeRdPu, interpolateYlGnBu, schemeYlGnBu, interpolateYlGn, schemeYlGn, interpolateYlOrBr, schemeYlOrBr, interpolateYlOrRd, schemeYlOrRd, interpolateBlues, schemeBlues, interpolateGreens, schemeGreens, interpolateGreys, schemeGreys, interpolatePurples, schemePurples, interpolateReds, schemeReds, interpolateOranges, schemeOranges, interpolateCividis, interpolateCubehelixDefault, interpolateRainbow, interpolateWarm, interpolateCool, interpolateSinebow, interpolateTurbo, interpolateViridis, interpolateMagma, interpolateInferno, interpolatePlasma */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./categorical/category10.js */"./node_modules/d3-scale-chromatic/src/categorical/category10.js");n.d(t,"schemeCategory10",(function(){return r.default}));var o=n(/*! ./categorical/Accent.js */"./node_modules/d3-scale-chromatic/src/categorical/Accent.js");n.d(t,"schemeAccent",(function(){return o.default}));var u=n(/*! ./categorical/Dark2.js */"./node_modules/d3-scale-chromatic/src/categorical/Dark2.js");n.d(t,"schemeDark2",(function(){return u.default}));var i=n(/*! ./categorical/Paired.js */"./node_modules/d3-scale-chromatic/src/categorical/Paired.js");n.d(t,"schemePaired",(function(){return i.default}));var s=n(/*! ./categorical/Pastel1.js */"./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js");n.d(t,"schemePastel1",(function(){return s.default}));var a=n(/*! ./categorical/Pastel2.js */"./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js");n.d(t,"schemePastel2",(function(){return a.default}));var c=n(/*! ./categorical/Set1.js */"./node_modules/d3-scale-chromatic/src/categorical/Set1.js");n.d(t,"schemeSet1",(function(){return c.default}));var d=n(/*! ./categorical/Set2.js */"./node_modules/d3-scale-chromatic/src/categorical/Set2.js");n.d(t,"schemeSet2",(function(){return d.default}));var l=n(/*! ./categorical/Set3.js */"./node_modules/d3-scale-chromatic/src/categorical/Set3.js");n.d(t,"schemeSet3",(function(){return l.default}));var f=n(/*! ./categorical/Tableau10.js */"./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js");n.d(t,"schemeTableau10",(function(){return f.default}));var h=n(/*! ./diverging/BrBG.js */"./node_modules/d3-scale-chromatic/src/diverging/BrBG.js");n.d(t,"interpolateBrBG",(function(){return h.default})),n.d(t,"schemeBrBG",(function(){return h.scheme}));var m=n(/*! ./diverging/PRGn.js */"./node_modules/d3-scale-chromatic/src/diverging/PRGn.js");n.d(t,"interpolatePRGn",(function(){return m.default})),n.d(t,"schemePRGn",(function(){return m.scheme}));var p=n(/*! ./diverging/PiYG.js */"./node_modules/d3-scale-chromatic/src/diverging/PiYG.js");n.d(t,"interpolatePiYG",(function(){return p.default})),n.d(t,"schemePiYG",(function(){return p.scheme}));var _=n(/*! ./diverging/PuOr.js */"./node_modules/d3-scale-chromatic/src/diverging/PuOr.js");n.d(t,"interpolatePuOr",(function(){return _.default})),n.d(t,"schemePuOr",(function(){return _.scheme}));var g=n(/*! ./diverging/RdBu.js */"./node_modules/d3-scale-chromatic/src/diverging/RdBu.js");n.d(t,"interpolateRdBu",(function(){return g.default})),n.d(t,"schemeRdBu",(function(){return g.scheme}));var v=n(/*! ./diverging/RdGy.js */"./node_modules/d3-scale-chromatic/src/diverging/RdGy.js");n.d(t,"interpolateRdGy",(function(){return v.default})),n.d(t,"schemeRdGy",(function(){return v.scheme}));var j=n(/*! ./diverging/RdYlBu.js */"./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js");n.d(t,"interpolateRdYlBu",(function(){return j.default})),n.d(t,"schemeRdYlBu",(function(){return j.scheme}));var b=n(/*! ./diverging/RdYlGn.js */"./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js");n.d(t,"interpolateRdYlGn",(function(){return b.default})),n.d(t,"schemeRdYlGn",(function(){return b.scheme}));var y=n(/*! ./diverging/Spectral.js */"./node_modules/d3-scale-chromatic/src/diverging/Spectral.js");n.d(t,"interpolateSpectral",(function(){return y.default})),n.d(t,"schemeSpectral",(function(){return y.scheme}));var x=n(/*! ./sequential-multi/BuGn.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js");n.d(t,"interpolateBuGn",(function(){return x.default})),n.d(t,"schemeBuGn",(function(){return x.scheme}));var w=n(/*! ./sequential-multi/BuPu.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js");n.d(t,"interpolateBuPu",(function(){return w.default})),n.d(t,"schemeBuPu",(function(){return w.scheme}));var O=n(/*! ./sequential-multi/GnBu.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js");n.d(t,"interpolateGnBu",(function(){return O.default})),n.d(t,"schemeGnBu",(function(){return O.scheme}));var M=n(/*! ./sequential-multi/OrRd.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js");n.d(t,"interpolateOrRd",(function(){return M.default})),n.d(t,"schemeOrRd",(function(){return M.scheme}));var S=n(/*! ./sequential-multi/PuBuGn.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js");n.d(t,"interpolatePuBuGn",(function(){return S.default})),n.d(t,"schemePuBuGn",(function(){return S.scheme}));var E=n(/*! ./sequential-multi/PuBu.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js");n.d(t,"interpolatePuBu",(function(){return E.default})),n.d(t,"schemePuBu",(function(){return E.scheme}));var k=n(/*! ./sequential-multi/PuRd.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js");n.d(t,"interpolatePuRd",(function(){return k.default})),n.d(t,"schemePuRd",(function(){return k.scheme}));var C=n(/*! ./sequential-multi/RdPu.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js");n.d(t,"interpolateRdPu",(function(){return C.default})),n.d(t,"schemeRdPu",(function(){return C.scheme}));var A=n(/*! ./sequential-multi/YlGnBu.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js");n.d(t,"interpolateYlGnBu",(function(){return A.default})),n.d(t,"schemeYlGnBu",(function(){return A.scheme}));var T=n(/*! ./sequential-multi/YlGn.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js");n.d(t,"interpolateYlGn",(function(){return T.default})),n.d(t,"schemeYlGn",(function(){return T.scheme}));var R=n(/*! ./sequential-multi/YlOrBr.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js");n.d(t,"interpolateYlOrBr",(function(){return R.default})),n.d(t,"schemeYlOrBr",(function(){return R.scheme}));var N=n(/*! ./sequential-multi/YlOrRd.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js");n.d(t,"interpolateYlOrRd",(function(){return N.default})),n.d(t,"schemeYlOrRd",(function(){return N.scheme}));var P=n(/*! ./sequential-single/Blues.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js");n.d(t,"interpolateBlues",(function(){return P.default})),n.d(t,"schemeBlues",(function(){return P.scheme}));var I=n(/*! ./sequential-single/Greens.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js");n.d(t,"interpolateGreens",(function(){return I.default})),n.d(t,"schemeGreens",(function(){return I.scheme}));var q=n(/*! ./sequential-single/Greys.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js");n.d(t,"interpolateGreys",(function(){return q.default})),n.d(t,"schemeGreys",(function(){return q.scheme}));var B=n(/*! ./sequential-single/Purples.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js");n.d(t,"interpolatePurples",(function(){return B.default})),n.d(t,"schemePurples",(function(){return B.scheme}));var F=n(/*! ./sequential-single/Reds.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js");n.d(t,"interpolateReds",(function(){return F.default})),n.d(t,"schemeReds",(function(){return F.scheme}));var L=n(/*! ./sequential-single/Oranges.js */"./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js");n.d(t,"interpolateOranges",(function(){return L.default})),n.d(t,"schemeOranges",(function(){return L.scheme}));var z=n(/*! ./sequential-multi/cividis.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js");n.d(t,"interpolateCividis",(function(){return z.default}));var D=n(/*! ./sequential-multi/cubehelix.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js");n.d(t,"interpolateCubehelixDefault",(function(){return D.default}));var G=n(/*! ./sequential-multi/rainbow.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js");n.d(t,"interpolateRainbow",(function(){return G.default})),n.d(t,"interpolateWarm",(function(){return G.warm})),n.d(t,"interpolateCool",(function(){return G.cool}));var U=n(/*! ./sequential-multi/sinebow.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js");n.d(t,"interpolateSinebow",(function(){return U.default}));var Y=n(/*! ./sequential-multi/turbo.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js");n.d(t,"interpolateTurbo",(function(){return Y.default}));var H=n(/*! ./sequential-multi/viridis.js */"./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js");n.d(t,"interpolateViridis",(function(){return H.default})),n.d(t,"interpolateMagma",(function(){return H.magma})),n.d(t,"interpolateInferno",(function(){return H.inferno})),n.d(t,"interpolatePlasma",(function(){return H.plasma}))},"./node_modules/d3-scale-chromatic/src/ramp.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/ramp.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js");t.default=function(e){return Object(r.interpolateRgbBasis)(e[e.length-1])}},"./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js ***!
  \*************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"}},"./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js ***!
  \***************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js");t.default=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(300,.5,0),Object(r.cubehelix)(-240,.5,1))},"./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js ***!
  \*************************************************************************/
/*! exports provided: warm, cool, default */function(e,t,n){"use strict";n.r(t),n.d(t,"warm",(function(){return u})),n.d(t,"cool",(function(){return i}));var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),u=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(-100,.75,.35),Object(r.cubehelix)(80,1.5,.8)),i=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(260,.75,.35),Object(r.cubehelix)(80,1.5,.8)),s=Object(r.cubehelix)();t.default=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return s.h=360*e-100,s.s=1.5-1.5*t,s.l=.8-.9*t,s+""}},"./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js ***!
  \*************************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=Object(r.rgb)(),u=Math.PI/3,i=2*Math.PI/3;t.default=function(e){var t;return e=(.5-e)*Math.PI,o.r=255*(t=Math.sin(e))*t,o.g=255*(t=Math.sin(e+u))*t,o.b=255*(t=Math.sin(e+i))*t,o+""}},"./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js ***!
  \***********************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"}},"./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js ***!
  \*************************************************************************/
/*! exports provided: default, magma, inferno, plasma */function(e,t,n){"use strict";n.r(t),n.d(t,"magma",(function(){return u})),n.d(t,"inferno",(function(){return i})),n.d(t,"plasma",(function(){return s}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js");function o(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}t.default=o(Object(r.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var u=o(Object(r.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),i=o(Object(r.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),s=o(Object(r.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"))},"./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js ***!
  \*************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":
/*!**************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js ***!
  \**************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":
/*!**************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js ***!
  \**************************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js ***!
  \***********************************************************************/
/*! exports provided: scheme, default */function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return u}));var r=n(/*! ../colors.js */"./node_modules/d3-scale-chromatic/src/colors.js"),o=n(/*! ../ramp.js */"./node_modules/d3-scale-chromatic/src/ramp.js"),u=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(r.default);t.default=Object(o.default)(u)},"./node_modules/d3-scale/src/array.js":
/*!********************************************!*\
  !*** ./node_modules/d3-scale/src/array.js ***!
  \********************************************/
/*! exports provided: map, slice */function(e,t,n){"use strict";n.r(t),n.d(t,"map",(function(){return o})),n.d(t,"slice",(function(){return u}));var r=Array.prototype,o=r.map,u=r.slice},"./node_modules/d3-scale/src/band.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/band.js ***!
  \*******************************************/
/*! exports provided: default, point */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i})),n.d(t,"point",(function(){return a}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),u=n(/*! ./ordinal */"./node_modules/d3-scale/src/ordinal.js");function i(){var e,t,n=Object(u.default)().unknown(void 0),s=n.domain,a=n.range,c=[0,1],d=!1,l=0,f=0,h=.5;function m(){var n=s().length,o=c[1]<c[0],u=c[o-0],i=c[1-o];e=(i-u)/Math.max(1,n-l+2*f),d&&(e=Math.floor(e)),u+=(i-u-e*(n-l))*h,t=e*(1-l),d&&(u=Math.round(u),t=Math.round(t));var m=Object(r.range)(n).map((function(t){return u+e*t}));return a(o?m.reverse():m)}return delete n.unknown,n.domain=function(e){return arguments.length?(s(e),m()):s()},n.range=function(e){return arguments.length?(c=[+e[0],+e[1]],m()):c.slice()},n.rangeRound=function(e){return c=[+e[0],+e[1]],d=!0,m()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(d=!!e,m()):d},n.padding=function(e){return arguments.length?(l=Math.min(1,f=+e),m()):l},n.paddingInner=function(e){return arguments.length?(l=Math.min(1,e),m()):l},n.paddingOuter=function(e){return arguments.length?(f=+e,m()):f},n.align=function(e){return arguments.length?(h=Math.max(0,Math.min(1,e)),m()):h},n.copy=function(){return i(s(),c).round(d).paddingInner(l).paddingOuter(f).align(h)},o.initRange.apply(m(),arguments)}function s(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return s(t())},e}function a(){return s(i.apply(null,arguments).paddingInner(1))}},"./node_modules/d3-scale/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-scale/src/continuous.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/continuous.js ***!
  \*************************************************/
/*! exports provided: identity, copy, transformer, default */function(e,t,n){"use strict";n.r(t),n.d(t,"identity",(function(){return c})),n.d(t,"copy",(function(){return m})),n.d(t,"transformer",(function(){return p})),n.d(t,"default",(function(){return _}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),u=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),i=n(/*! ./constant */"./node_modules/d3-scale/src/constant.js"),s=n(/*! ./number */"./node_modules/d3-scale/src/number.js"),a=[0,1];function c(e){return e}function d(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:Object(i.default)(isNaN(t)?NaN:.5)}function l(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function f(e,t,n){var r=e[0],o=e[1],u=t[0],i=t[1];return o<r?(r=d(o,r),u=n(i,u)):(r=d(r,o),u=n(u,i)),function(e){return u(r(e))}}function h(e,t,n){var o=Math.min(e.length,t.length)-1,u=new Array(o),i=new Array(o),s=-1;for(e[o]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<o;)u[s]=d(e[s],e[s+1]),i[s]=n(t[s],t[s+1]);return function(t){var n=Object(r.bisect)(e,t,1,o)-1;return i[n](u[n](t))}}function m(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function p(){var e,t,n,r,i,d,m=a,p=a,_=o.interpolate,g=c;function v(){return r=Math.min(m.length,p.length)>2?h:f,i=d=null,j}function j(t){return isNaN(t=+t)?n:(i||(i=r(m.map(e),p,_)))(e(g(t)))}return j.invert=function(n){return g(t((d||(d=r(p,m.map(e),o.interpolateNumber)))(n)))},j.domain=function(e){return arguments.length?(m=u.map.call(e,s.default),g===c||(g=l(m)),v()):m.slice()},j.range=function(e){return arguments.length?(p=u.slice.call(e),v()):p.slice()},j.rangeRound=function(e){return p=u.slice.call(e),_=o.interpolateRound,v()},j.clamp=function(e){return arguments.length?(g=e?l(m):c,j):g!==c},j.interpolate=function(e){return arguments.length?(_=e,v()):_},j.unknown=function(e){return arguments.length?(n=e,j):n},function(n,r){return e=n,t=r,v()}}function _(e,t){return p()(e,t)}},"./node_modules/d3-scale/src/diverging.js":
/*!************************************************!*\
  !*** ./node_modules/d3-scale/src/diverging.js ***!
  \************************************************/
/*! exports provided: default, divergingLog, divergingSymlog, divergingPow, divergingSqrt */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return l})),n.d(t,"divergingLog",(function(){return f})),n.d(t,"divergingSymlog",(function(){return h})),n.d(t,"divergingPow",(function(){return m})),n.d(t,"divergingSqrt",(function(){return p}));var r=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),o=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),u=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),i=n(/*! ./log */"./node_modules/d3-scale/src/log.js"),s=n(/*! ./sequential */"./node_modules/d3-scale/src/sequential.js"),a=n(/*! ./symlog */"./node_modules/d3-scale/src/symlog.js"),c=n(/*! ./pow */"./node_modules/d3-scale/src/pow.js");function d(){var e,t,n,o,u,i,s,a=0,c=.5,d=1,l=r.identity,f=!1;function h(e){return isNaN(e=+e)?s:(e=.5+((e=+i(e))-t)*(e<t?o:u),l(f?Math.max(0,Math.min(1,e)):e))}return h.domain=function(r){return arguments.length?(e=i(a=+r[0]),t=i(c=+r[1]),n=i(d=+r[2]),o=e===t?0:.5/(t-e),u=t===n?0:.5/(n-t),h):[a,c,d]},h.clamp=function(e){return arguments.length?(f=!!e,h):f},h.interpolator=function(e){return arguments.length?(l=e,h):l},h.unknown=function(e){return arguments.length?(s=e,h):s},function(r){return i=r,e=r(a),t=r(c),n=r(d),o=e===t?0:.5/(t-e),u=t===n?0:.5/(n-t),h}}function l(){var e=Object(u.linearish)(d()(r.identity));return e.copy=function(){return Object(s.copy)(e,l())},o.initInterpolator.apply(e,arguments)}function f(){var e=Object(i.loggish)(d()).domain([.1,1,10]);return e.copy=function(){return Object(s.copy)(e,f()).base(e.base())},o.initInterpolator.apply(e,arguments)}function h(){var e=Object(a.symlogish)(d());return e.copy=function(){return Object(s.copy)(e,h()).constant(e.constant())},o.initInterpolator.apply(e,arguments)}function m(){var e=Object(c.powish)(d());return e.copy=function(){return Object(s.copy)(e,m()).exponent(e.exponent())},o.initInterpolator.apply(e,arguments)}function p(){return m.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/identity.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/identity.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),o=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),u=n(/*! ./number */"./node_modules/d3-scale/src/number.js");function i(e){var t;function n(e){return isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=r.map.call(t,u.default),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return i(e).unknown(t)},e=arguments.length?r.map.call(e,u.default):[0,1],Object(o.linearish)(n)}},"./node_modules/d3-scale/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-scale/src/index.js ***!
  \********************************************/
/*! exports provided: scaleBand, scalePoint, scaleIdentity, scaleLinear, scaleLog, scaleSymlog, scaleOrdinal, scaleImplicit, scalePow, scaleSqrt, scaleQuantile, scaleQuantize, scaleThreshold, scaleTime, scaleUtc, scaleSequential, scaleSequentialLog, scaleSequentialPow, scaleSequentialSqrt, scaleSequentialSymlog, scaleSequentialQuantile, scaleDiverging, scaleDivergingLog, scaleDivergingPow, scaleDivergingSqrt, scaleDivergingSymlog, tickFormat */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./band */"./node_modules/d3-scale/src/band.js");n.d(t,"scaleBand",(function(){return r.default})),n.d(t,"scalePoint",(function(){return r.point}));var o=n(/*! ./identity */"./node_modules/d3-scale/src/identity.js");n.d(t,"scaleIdentity",(function(){return o.default}));var u=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js");n.d(t,"scaleLinear",(function(){return u.default}));var i=n(/*! ./log */"./node_modules/d3-scale/src/log.js");n.d(t,"scaleLog",(function(){return i.default}));var s=n(/*! ./symlog */"./node_modules/d3-scale/src/symlog.js");n.d(t,"scaleSymlog",(function(){return s.default}));var a=n(/*! ./ordinal */"./node_modules/d3-scale/src/ordinal.js");n.d(t,"scaleOrdinal",(function(){return a.default})),n.d(t,"scaleImplicit",(function(){return a.implicit}));var c=n(/*! ./pow */"./node_modules/d3-scale/src/pow.js");n.d(t,"scalePow",(function(){return c.default})),n.d(t,"scaleSqrt",(function(){return c.sqrt}));var d=n(/*! ./quantile */"./node_modules/d3-scale/src/quantile.js");n.d(t,"scaleQuantile",(function(){return d.default}));var l=n(/*! ./quantize */"./node_modules/d3-scale/src/quantize.js");n.d(t,"scaleQuantize",(function(){return l.default}));var f=n(/*! ./threshold */"./node_modules/d3-scale/src/threshold.js");n.d(t,"scaleThreshold",(function(){return f.default}));var h=n(/*! ./time */"./node_modules/d3-scale/src/time.js");n.d(t,"scaleTime",(function(){return h.default}));var m=n(/*! ./utcTime */"./node_modules/d3-scale/src/utcTime.js");n.d(t,"scaleUtc",(function(){return m.default}));var p=n(/*! ./sequential */"./node_modules/d3-scale/src/sequential.js");n.d(t,"scaleSequential",(function(){return p.default})),n.d(t,"scaleSequentialLog",(function(){return p.sequentialLog})),n.d(t,"scaleSequentialPow",(function(){return p.sequentialPow})),n.d(t,"scaleSequentialSqrt",(function(){return p.sequentialSqrt})),n.d(t,"scaleSequentialSymlog",(function(){return p.sequentialSymlog}));var _=n(/*! ./sequentialQuantile */"./node_modules/d3-scale/src/sequentialQuantile.js");n.d(t,"scaleSequentialQuantile",(function(){return _.default}));var g=n(/*! ./diverging */"./node_modules/d3-scale/src/diverging.js");n.d(t,"scaleDiverging",(function(){return g.default})),n.d(t,"scaleDivergingLog",(function(){return g.divergingLog})),n.d(t,"scaleDivergingPow",(function(){return g.divergingPow})),n.d(t,"scaleDivergingSqrt",(function(){return g.divergingSqrt})),n.d(t,"scaleDivergingSymlog",(function(){return g.divergingSymlog}));var v=n(/*! ./tickFormat */"./node_modules/d3-scale/src/tickFormat.js");n.d(t,"tickFormat",(function(){return v.default}))},"./node_modules/d3-scale/src/init.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/init.js ***!
  \*******************************************/
/*! exports provided: initRange, initInterpolator */function(e,t,n){"use strict";function r(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function o(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}n.r(t),n.d(t,"initRange",(function(){return r})),n.d(t,"initInterpolator",(function(){return o}))},"./node_modules/d3-scale/src/linear.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/linear.js ***!
  \*********************************************/
/*! exports provided: linearish, default */function(e,t,n){"use strict";n.r(t),n.d(t,"linearish",(function(){return s})),n.d(t,"default",(function(){return a}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),i=n(/*! ./tickFormat */"./node_modules/d3-scale/src/tickFormat.js");function s(e){var t=e.domain;return e.ticks=function(e){var n=t();return Object(r.ticks)(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Object(i.default)(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var o,u=t(),i=0,s=u.length-1,a=u[i],c=u[s];return c<a&&(o=a,a=c,c=o,o=i,i=s,s=o),(o=Object(r.tickIncrement)(a,c,n))>0?(a=Math.floor(a/o)*o,c=Math.ceil(c/o)*o,o=Object(r.tickIncrement)(a,c,n)):o<0&&(a=Math.ceil(a*o)/o,c=Math.floor(c*o)/o,o=Object(r.tickIncrement)(a,c,n)),o>0?(u[i]=Math.floor(a/o)*o,u[s]=Math.ceil(c/o)*o,t(u)):o<0&&(u[i]=Math.ceil(a*o)/o,u[s]=Math.floor(c*o)/o,t(u)),e},e}function a(){var e=Object(o.default)(o.identity,o.identity);return e.copy=function(){return Object(o.copy)(e,a())},u.initRange.apply(e,arguments),s(e)}},"./node_modules/d3-scale/src/log.js":
/*!******************************************!*\
  !*** ./node_modules/d3-scale/src/log.js ***!
  \******************************************/
/*! exports provided: loggish, default */function(e,t,n){"use strict";n.r(t),n.d(t,"loggish",(function(){return m})),n.d(t,"default",(function(){return p}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! d3-format */"./node_modules/d3-format/src/index.js"),u=n(/*! ./nice */"./node_modules/d3-scale/src/nice.js"),i=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),s=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function a(e){return Math.log(e)}function c(e){return Math.exp(e)}function d(e){return-Math.log(-e)}function l(e){return-Math.exp(-e)}function f(e){return isFinite(e)?+("1e"+e):e<0?0:e}function h(e){return function(t){return-e(-t)}}function m(e){var t,n,i=e(a,c),s=i.domain,m=10;function p(){return t=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}(m),n=function(e){return 10===e?f:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}(m),s()[0]<0?(t=h(t),n=h(n),e(d,l)):e(a,c),i}return i.base=function(e){return arguments.length?(m=+e,p()):m},i.domain=function(e){return arguments.length?(s(e),p()):s()},i.ticks=function(e){var o,u=s(),i=u[0],a=u[u.length-1];(o=a<i)&&(f=i,i=a,a=f);var c,d,l,f=t(i),h=t(a),p=null==e?10:+e,_=[];if(!(m%1)&&h-f<p){if(f=Math.round(f)-1,h=Math.round(h)+1,i>0){for(;f<h;++f)for(d=1,c=n(f);d<m;++d)if(!((l=c*d)<i)){if(l>a)break;_.push(l)}}else for(;f<h;++f)for(d=m-1,c=n(f);d>=1;--d)if(!((l=c*d)<i)){if(l>a)break;_.push(l)}}else _=Object(r.ticks)(f,h,Math.min(h-f,p)).map(n);return o?_.reverse():_},i.tickFormat=function(e,r){if(null==r&&(r=10===m?".0e":","),"function"!=typeof r&&(r=Object(o.format)(r)),e===1/0)return r;null==e&&(e=10);var u=Math.max(1,m*e/i.ticks().length);return function(e){var o=e/n(Math.round(t(e)));return o*m<m-.5&&(o*=m),o<=u?r(e):""}},i.nice=function(){return s(Object(u.default)(s(),{floor:function(e){return n(Math.floor(t(e)))},ceil:function(e){return n(Math.ceil(t(e)))}}))},i}function p(){var e=m(Object(i.transformer)()).domain([1,10]);return e.copy=function(){return Object(i.copy)(e,p()).base(e.base())},s.initRange.apply(e,arguments),e}},"./node_modules/d3-scale/src/nice.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/nice.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r=0,o=(e=e.slice()).length-1,u=e[r],i=e[o];return i<u&&(n=r,r=o,o=n,n=u,u=i,i=n),e[r]=t.floor(u),e[o]=t.ceil(i),e}},"./node_modules/d3-scale/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/number.js ***!
  \*********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return+e}},"./node_modules/d3-scale/src/ordinal.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-scale/src/ordinal.js ***!
  \**********************************************/
/*! exports provided: implicit, default */function(e,t,n){"use strict";n.r(t),n.d(t,"implicit",(function(){return i})),n.d(t,"default",(function(){return s}));var r=n(/*! d3-collection */"./node_modules/d3-collection/src/index.js"),o=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),i={name:"implicit"};function s(){var e=Object(r.map)(),t=[],n=[],a=i;function c(r){var o=r+"",u=e.get(o);if(!u){if(a!==i)return a;e.set(o,u=t.push(r))}return n[(u-1)%n.length]}return c.domain=function(n){if(!arguments.length)return t.slice();t=[],e=Object(r.map)();for(var o,u,i=-1,s=n.length;++i<s;)e.has(u=(o=n[i])+"")||e.set(u,t.push(o));return c},c.range=function(e){return arguments.length?(n=o.slice.call(e),c):n.slice()},c.unknown=function(e){return arguments.length?(a=e,c):a},c.copy=function(){return s(t,n).unknown(a)},u.initRange.apply(c,arguments),c}},"./node_modules/d3-scale/src/pow.js":
/*!******************************************!*\
  !*** ./node_modules/d3-scale/src/pow.js ***!
  \******************************************/
/*! exports provided: powish, default, sqrt */function(e,t,n){"use strict";n.r(t),n.d(t,"powish",(function(){return c})),n.d(t,"default",(function(){return d})),n.d(t,"sqrt",(function(){return l}));var r=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),o=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function i(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function s(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function a(e){return e<0?-e*e:e*e}function c(e){var t=e(o.identity,o.identity),n=1;function u(){return 1===n?e(o.identity,o.identity):.5===n?e(s,a):e(i(n),i(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,u()):n},Object(r.linearish)(t)}function d(){var e=c(Object(o.transformer)());return e.copy=function(){return Object(o.copy)(e,d()).exponent(e.exponent())},u.initRange.apply(e,arguments),e}function l(){return d.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/quantile.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/quantile.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function i(){var e,t=[],n=[],s=[];function a(){var e=0,o=Math.max(1,n.length);for(s=new Array(o-1);++e<o;)s[e-1]=Object(r.quantile)(t,e/o);return c}function c(t){return isNaN(t=+t)?e:n[Object(r.bisect)(s,t)]}return c.invertExtent=function(e){var r=n.indexOf(e);return r<0?[NaN,NaN]:[r>0?s[r-1]:t[0],r<s.length?s[r]:t[t.length-1]]},c.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,o=0,u=e.length;o<u;++o)null==(n=e[o])||isNaN(n=+n)||t.push(n);return t.sort(r.ascending),a()},c.range=function(e){return arguments.length?(n=o.slice.call(e),a()):n.slice()},c.unknown=function(t){return arguments.length?(e=t,c):e},c.quantiles=function(){return s.slice()},c.copy=function(){return i().domain(t).range(n).unknown(e)},u.initRange.apply(c,arguments)}},"./node_modules/d3-scale/src/quantize.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/quantize.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),u=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),i=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function s(){var e,t=0,n=1,a=1,c=[.5],d=[0,1];function l(t){return t<=t?d[Object(r.bisect)(c,t,0,a)]:e}function f(){var e=-1;for(c=new Array(a);++e<a;)c[e]=((e+1)*n-(e-a)*t)/(a+1);return l}return l.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],f()):[t,n]},l.range=function(e){return arguments.length?(a=(d=o.slice.call(e)).length-1,f()):d.slice()},l.invertExtent=function(e){var r=d.indexOf(e);return r<0?[NaN,NaN]:r<1?[t,c[0]]:r>=a?[c[a-1],n]:[c[r-1],c[r]]},l.unknown=function(t){return arguments.length?(e=t,l):l},l.thresholds=function(){return c.slice()},l.copy=function(){return s().domain([t,n]).range(d).unknown(e)},i.initRange.apply(Object(u.linearish)(l),arguments)}},"./node_modules/d3-scale/src/sequential.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/sequential.js ***!
  \*************************************************/
/*! exports provided: copy, default, sequentialLog, sequentialSymlog, sequentialPow, sequentialSqrt */function(e,t,n){"use strict";n.r(t),n.d(t,"copy",(function(){return d})),n.d(t,"default",(function(){return l})),n.d(t,"sequentialLog",(function(){return f})),n.d(t,"sequentialSymlog",(function(){return h})),n.d(t,"sequentialPow",(function(){return m})),n.d(t,"sequentialSqrt",(function(){return p}));var r=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),o=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),u=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),i=n(/*! ./log */"./node_modules/d3-scale/src/log.js"),s=n(/*! ./symlog */"./node_modules/d3-scale/src/symlog.js"),a=n(/*! ./pow */"./node_modules/d3-scale/src/pow.js");function c(){var e,t,n,o,u,i=0,s=1,a=r.identity,c=!1;function d(t){return isNaN(t=+t)?u:a(0===n?.5:(t=(o(t)-e)*n,c?Math.max(0,Math.min(1,t)):t))}return d.domain=function(r){return arguments.length?(e=o(i=+r[0]),t=o(s=+r[1]),n=e===t?0:1/(t-e),d):[i,s]},d.clamp=function(e){return arguments.length?(c=!!e,d):c},d.interpolator=function(e){return arguments.length?(a=e,d):a},d.unknown=function(e){return arguments.length?(u=e,d):u},function(r){return o=r,e=r(i),t=r(s),n=e===t?0:1/(t-e),d}}function d(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function l(){var e=Object(u.linearish)(c()(r.identity));return e.copy=function(){return d(e,l())},o.initInterpolator.apply(e,arguments)}function f(){var e=Object(i.loggish)(c()).domain([1,10]);return e.copy=function(){return d(e,f()).base(e.base())},o.initInterpolator.apply(e,arguments)}function h(){var e=Object(s.symlogish)(c());return e.copy=function(){return d(e,h()).constant(e.constant())},o.initInterpolator.apply(e,arguments)}function m(){var e=Object(a.powish)(c());return e.copy=function(){return d(e,m()).exponent(e.exponent())},o.initInterpolator.apply(e,arguments)}function p(){return m.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/sequentialQuantile.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-scale/src/sequentialQuantile.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function i(){var e=[],t=o.identity;function n(n){if(!isNaN(n=+n))return t((Object(r.bisect)(e,n)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var o,u=0,i=t.length;u<i;++u)null==(o=t[u])||isNaN(o=+o)||e.push(o);return e.sort(r.ascending),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return i(t).domain(e)},u.initInterpolator.apply(n,arguments)}},"./node_modules/d3-scale/src/symlog.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/symlog.js ***!
  \*********************************************/
/*! exports provided: symlogish, default */function(e,t,n){"use strict";n.r(t),n.d(t,"symlogish",(function(){return a})),n.d(t,"default",(function(){return c}));var r=n(/*! ./linear */"./node_modules/d3-scale/src/linear.js"),o=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function i(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function s(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function a(e){var t=1,n=e(i(t),s(t));return n.constant=function(n){return arguments.length?e(i(t=+n),s(t)):t},Object(r.linearish)(n)}function c(){var e=a(Object(o.transformer)());return e.copy=function(){return Object(o.copy)(e,c()).constant(e.constant())},u.initRange.apply(e,arguments)}},"./node_modules/d3-scale/src/threshold.js":
/*!************************************************!*\
  !*** ./node_modules/d3-scale/src/threshold.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),u=n(/*! ./init */"./node_modules/d3-scale/src/init.js");function i(){var e,t=[.5],n=[0,1],s=1;function a(o){return o<=o?n[Object(r.bisect)(t,o,0,s)]:e}return a.domain=function(e){return arguments.length?(t=o.slice.call(e),s=Math.min(t.length,n.length-1),a):t.slice()},a.range=function(e){return arguments.length?(n=o.slice.call(e),s=Math.min(t.length,n.length-1),a):n.slice()},a.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return i().domain(t).range(n).unknown(e)},u.initRange.apply(a,arguments)}},"./node_modules/d3-scale/src/tickFormat.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/tickFormat.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! d3-format */"./node_modules/d3-format/src/index.js");t.default=function(e,t,n,u){var i,s=Object(r.tickStep)(e,t,n);switch((u=Object(o.formatSpecifier)(null==u?",f":u)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=u.precision||isNaN(i=Object(o.precisionPrefix)(s,a))||(u.precision=i),Object(o.formatPrefix)(u,a);case"":case"e":case"g":case"p":case"r":null!=u.precision||isNaN(i=Object(o.precisionRound)(s,Math.max(Math.abs(e),Math.abs(t))))||(u.precision=i-("e"===u.type));break;case"f":case"%":null!=u.precision||isNaN(i=Object(o.precisionFixed)(s))||(u.precision=i-2*("%"===u.type))}return Object(o.format)(u)}},"./node_modules/d3-scale/src/time.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/time.js ***!
  \*******************************************/
/*! exports provided: calendar, default */function(e,t,n){"use strict";n.r(t),n.d(t,"calendar",(function(){return f}));var r=n(/*! d3-array */"./node_modules/d3-array/src/index.js"),o=n(/*! d3-time */"./node_modules/d3-time/src/index.js"),u=n(/*! d3-time-format */"./node_modules/d3-time-format/src/index.js"),i=n(/*! ./array */"./node_modules/d3-scale/src/array.js"),s=n(/*! ./continuous */"./node_modules/d3-scale/src/continuous.js"),a=n(/*! ./init */"./node_modules/d3-scale/src/init.js"),c=n(/*! ./nice */"./node_modules/d3-scale/src/nice.js");function d(e){return new Date(e)}function l(e){return e instanceof Date?+e:+new Date(+e)}function f(e,t,n,o,u,a,h,m,p){var _=Object(s.default)(s.identity,s.identity),g=_.invert,v=_.domain,j=p(".%L"),b=p(":%S"),y=p("%I:%M"),x=p("%I %p"),w=p("%a %d"),O=p("%b %d"),M=p("%B"),S=p("%Y"),E=[[h,1,1e3],[h,5,5e3],[h,15,15e3],[h,30,3e4],[a,1,6e4],[a,5,3e5],[a,15,9e5],[a,30,18e5],[u,1,36e5],[u,3,108e5],[u,6,216e5],[u,12,432e5],[o,1,864e5],[o,2,1728e5],[n,1,6048e5],[t,1,2592e6],[t,3,7776e6],[e,1,31536e6]];function k(r){return(h(r)<r?j:a(r)<r?b:u(r)<r?y:o(r)<r?x:t(r)<r?n(r)<r?w:O:e(r)<r?M:S)(r)}function C(t,n,o,u){if(null==t&&(t=10),"number"==typeof t){var i=Math.abs(o-n)/t,s=Object(r.bisector)((function(e){return e[2]})).right(E,i);s===E.length?(u=Object(r.tickStep)(n/31536e6,o/31536e6,t),t=e):s?(u=(s=E[i/E[s-1][2]<E[s][2]/i?s-1:s])[1],t=s[0]):(u=Math.max(Object(r.tickStep)(n,o,t),1),t=m)}return null==u?t:t.every(u)}return _.invert=function(e){return new Date(g(e))},_.domain=function(e){return arguments.length?v(i.map.call(e,l)):v().map(d)},_.ticks=function(e,t){var n,r=v(),o=r[0],u=r[r.length-1],i=u<o;return i&&(n=o,o=u,u=n),n=(n=C(e,o,u,t))?n.range(o,u+1):[],i?n.reverse():n},_.tickFormat=function(e,t){return null==t?k:p(t)},_.nice=function(e,t){var n=v();return(e=C(e,n[0],n[n.length-1],t))?v(Object(c.default)(n,e)):_},_.copy=function(){return Object(s.copy)(_,f(e,t,n,o,u,a,h,m,p))},_}t.default=function(){return a.initRange.apply(f(o.timeYear,o.timeMonth,o.timeWeek,o.timeDay,o.timeHour,o.timeMinute,o.timeSecond,o.timeMillisecond,u.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}},"./node_modules/d3-scale/src/utcTime.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-scale/src/utcTime.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./time */"./node_modules/d3-scale/src/time.js"),o=n(/*! d3-time-format */"./node_modules/d3-time-format/src/index.js"),u=n(/*! d3-time */"./node_modules/d3-time/src/index.js"),i=n(/*! ./init */"./node_modules/d3-scale/src/init.js");t.default=function(){return i.initRange.apply(Object(r.calendar)(u.utcYear,u.utcMonth,u.utcWeek,u.utcDay,u.utcHour,u.utcMinute,u.utcSecond,u.utcMillisecond,o.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}},"./node_modules/d3-selection/src/constant.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/constant.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-selection/src/create.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/create.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./creator */"./node_modules/d3-selection/src/creator.js"),o=n(/*! ./select */"./node_modules/d3-selection/src/select.js");t.default=function(e){return Object(o.default)(Object(r.default)(e).call(document.documentElement))}},"./node_modules/d3-selection/src/creator.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/creator.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./namespace */"./node_modules/d3-selection/src/namespace.js"),o=n(/*! ./namespaces */"./node_modules/d3-selection/src/namespaces.js");function u(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===o.xhtml&&t.documentElement.namespaceURI===o.xhtml?t.createElement(e):t.createElementNS(n,e)}}function i(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}t.default=function(e){var t=Object(r.default)(e);return(t.local?i:u)(t)}},"./node_modules/d3-selection/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/index.js ***!
  \************************************************/
/*! exports provided: create, creator, local, matcher, mouse, namespace, namespaces, clientPoint, select, selectAll, selection, selector, selectorAll, style, touch, touches, window, event, customEvent */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./create */"./node_modules/d3-selection/src/create.js");n.d(t,"create",(function(){return r.default}));var o=n(/*! ./creator */"./node_modules/d3-selection/src/creator.js");n.d(t,"creator",(function(){return o.default}));var u=n(/*! ./local */"./node_modules/d3-selection/src/local.js");n.d(t,"local",(function(){return u.default}));var i=n(/*! ./matcher */"./node_modules/d3-selection/src/matcher.js");n.d(t,"matcher",(function(){return i.default}));var s=n(/*! ./mouse */"./node_modules/d3-selection/src/mouse.js");n.d(t,"mouse",(function(){return s.default}));var a=n(/*! ./namespace */"./node_modules/d3-selection/src/namespace.js");n.d(t,"namespace",(function(){return a.default}));var c=n(/*! ./namespaces */"./node_modules/d3-selection/src/namespaces.js");n.d(t,"namespaces",(function(){return c.default}));var d=n(/*! ./point */"./node_modules/d3-selection/src/point.js");n.d(t,"clientPoint",(function(){return d.default}));var l=n(/*! ./select */"./node_modules/d3-selection/src/select.js");n.d(t,"select",(function(){return l.default}));var f=n(/*! ./selectAll */"./node_modules/d3-selection/src/selectAll.js");n.d(t,"selectAll",(function(){return f.default}));var h=n(/*! ./selection/index */"./node_modules/d3-selection/src/selection/index.js");n.d(t,"selection",(function(){return h.default}));var m=n(/*! ./selector */"./node_modules/d3-selection/src/selector.js");n.d(t,"selector",(function(){return m.default}));var p=n(/*! ./selectorAll */"./node_modules/d3-selection/src/selectorAll.js");n.d(t,"selectorAll",(function(){return p.default}));var _=n(/*! ./selection/style */"./node_modules/d3-selection/src/selection/style.js");n.d(t,"style",(function(){return _.styleValue}));var g=n(/*! ./touch */"./node_modules/d3-selection/src/touch.js");n.d(t,"touch",(function(){return g.default}));var v=n(/*! ./touches */"./node_modules/d3-selection/src/touches.js");n.d(t,"touches",(function(){return v.default}));var j=n(/*! ./window */"./node_modules/d3-selection/src/window.js");n.d(t,"window",(function(){return j.default}));var b=n(/*! ./selection/on */"./node_modules/d3-selection/src/selection/on.js");n.d(t,"event",(function(){return b.event})),n.d(t,"customEvent",(function(){return b.customEvent}))},"./node_modules/d3-selection/src/local.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/local.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=0;function o(){return new u}function u(){this._="@"+(++r).toString(36)}u.prototype=o.prototype={constructor:u,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}}},"./node_modules/d3-selection/src/matcher.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/matcher.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return this.matches(e)}}},"./node_modules/d3-selection/src/mouse.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/mouse.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./sourceEvent */"./node_modules/d3-selection/src/sourceEvent.js"),o=n(/*! ./point */"./node_modules/d3-selection/src/point.js");t.default=function(e){var t=Object(r.default)();return t.changedTouches&&(t=t.changedTouches[0]),Object(o.default)(e,t)}},"./node_modules/d3-selection/src/namespace.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespace.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./namespaces */"./node_modules/d3-selection/src/namespaces.js");t.default=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),r.default.hasOwnProperty(t)?{space:r.default[t],local:e}:e}},"./node_modules/d3-selection/src/namespaces.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespaces.js ***!
  \*****************************************************/
/*! exports provided: xhtml, default */function(e,t,n){"use strict";n.r(t),n.d(t,"xhtml",(function(){return r}));var r="http://www.w3.org/1999/xhtml";t.default={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}},"./node_modules/d3-selection/src/point.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/point.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}},"./node_modules/d3-selection/src/select.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/select.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./selection/index */"./node_modules/d3-selection/src/selection/index.js");t.default=function(e){return"string"==typeof e?new r.Selection([[document.querySelector(e)]],[document.documentElement]):new r.Selection([[e]],r.root)}},"./node_modules/d3-selection/src/selectAll.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/selectAll.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./selection/index */"./node_modules/d3-selection/src/selection/index.js");t.default=function(e){return"string"==typeof e?new r.Selection([document.querySelectorAll(e)],[document.documentElement]):new r.Selection([null==e?[]:e],r.root)}},"./node_modules/d3-selection/src/selection/append.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/append.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../creator */"./node_modules/d3-selection/src/creator.js");t.default=function(e){var t="function"==typeof e?e:Object(r.default)(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))}},"./node_modules/d3-selection/src/selection/attr.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/attr.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../namespace */"./node_modules/d3-selection/src/namespace.js");function o(e){return function(){this.removeAttribute(e)}}function u(e){return function(){this.removeAttributeNS(e.space,e.local)}}function i(e,t){return function(){this.setAttribute(e,t)}}function s(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function a(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function c(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}t.default=function(e,t){var n=Object(r.default)(e);if(arguments.length<2){var d=this.node();return n.local?d.getAttributeNS(n.space,n.local):d.getAttribute(n)}return this.each((null==t?n.local?u:o:"function"==typeof t?n.local?c:a:n.local?s:i)(n,t))}},"./node_modules/d3-selection/src/selection/call.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/call.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this}},"./node_modules/d3-selection/src/selection/classed.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/classed.js ***!
  \************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){return e.trim().split(/^|\s+/)}function o(e){return e.classList||new u(e)}function u(e){this._node=e,this._names=r(e.getAttribute("class")||"")}function i(e,t){for(var n=o(e),r=-1,u=t.length;++r<u;)n.add(t[r])}function s(e,t){for(var n=o(e),r=-1,u=t.length;++r<u;)n.remove(t[r])}function a(e){return function(){i(this,e)}}function c(e){return function(){s(this,e)}}function d(e,t){return function(){(t.apply(this,arguments)?i:s)(this,e)}}n.r(t),u.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}},t.default=function(e,t){var n=r(e+"");if(arguments.length<2){for(var u=o(this.node()),i=-1,s=n.length;++i<s;)if(!u.contains(n[i]))return!1;return!0}return this.each(("function"==typeof t?d:t?a:c)(n,t))}},"./node_modules/d3-selection/src/selection/clone.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/clone.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function o(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}n.r(t),t.default=function(e){return this.select(e?o:r)}},"./node_modules/d3-selection/src/selection/data.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/data.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js"),o=n(/*! ./enter */"./node_modules/d3-selection/src/selection/enter.js"),u=n(/*! ../constant */"./node_modules/d3-selection/src/constant.js");function i(e,t,n,r,u,i){for(var s,a=0,c=t.length,d=i.length;a<d;++a)(s=t[a])?(s.__data__=i[a],r[a]=s):n[a]=new o.EnterNode(e,i[a]);for(;a<c;++a)(s=t[a])&&(u[a]=s)}function s(e,t,n,r,u,i,s){var a,c,d,l={},f=t.length,h=i.length,m=new Array(f);for(a=0;a<f;++a)(c=t[a])&&(m[a]=d="$"+s.call(c,c.__data__,a,t),d in l?u[a]=c:l[d]=c);for(a=0;a<h;++a)(c=l[d="$"+s.call(e,i[a],a,i)])?(r[a]=c,c.__data__=i[a],l[d]=null):n[a]=new o.EnterNode(e,i[a]);for(a=0;a<f;++a)(c=t[a])&&l[m[a]]===c&&(u[a]=c)}t.default=function(e,t){if(!e)return g=new Array(this.size()),h=-1,this.each((function(e){g[++h]=e})),g;var n=t?s:i,o=this._parents,a=this._groups;"function"!=typeof e&&(e=Object(u.default)(e));for(var c=a.length,d=new Array(c),l=new Array(c),f=new Array(c),h=0;h<c;++h){var m=o[h],p=a[h],_=p.length,g=e.call(m,m&&m.__data__,h,o),v=g.length,j=l[h]=new Array(v),b=d[h]=new Array(v);n(m,p,j,b,f[h]=new Array(_),g,t);for(var y,x,w=0,O=0;w<v;++w)if(y=j[w]){for(w>=O&&(O=w+1);!(x=b[O])&&++O<v;);y._next=x||null}}return(d=new r.Selection(d,o))._enter=l,d._exit=f,d}},"./node_modules/d3-selection/src/selection/datum.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/datum.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return arguments.length?this.property("__data__",e):this.node().__data__}},"./node_modules/d3-selection/src/selection/dispatch.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/dispatch.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../window */"./node_modules/d3-selection/src/window.js");function o(e,t,n){var o=Object(r.default)(e),u=o.CustomEvent;"function"==typeof u?u=new u(t,n):(u=o.document.createEvent("Event"),n?(u.initEvent(t,n.bubbles,n.cancelable),u.detail=n.detail):u.initEvent(t,!1,!1)),e.dispatchEvent(u)}function u(e,t){return function(){return o(this,e,t)}}function i(e,t){return function(){return o(this,e,t.apply(this,arguments))}}t.default=function(e,t){return this.each(("function"==typeof t?i:u)(e,t))}},"./node_modules/d3-selection/src/selection/each.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/each.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,u=t[n],i=0,s=u.length;i<s;++i)(o=u[i])&&e.call(o,o.__data__,i,u);return this}},"./node_modules/d3-selection/src/selection/empty.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/empty.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){return!this.node()}},"./node_modules/d3-selection/src/selection/enter.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/enter.js ***!
  \**********************************************************/
/*! exports provided: default, EnterNode */function(e,t,n){"use strict";n.r(t),n.d(t,"EnterNode",(function(){return u}));var r=n(/*! ./sparse */"./node_modules/d3-selection/src/selection/sparse.js"),o=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js");function u(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}t.default=function(){return new o.Selection(this._enter||this._groups.map(r.default),this._parents)},u.prototype={constructor:u,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}}},"./node_modules/d3-selection/src/selection/exit.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/exit.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./sparse */"./node_modules/d3-selection/src/selection/sparse.js"),o=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js");t.default=function(){return new o.Selection(this._exit||this._groups.map(r.default),this._parents)}},"./node_modules/d3-selection/src/selection/filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/filter.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js"),o=n(/*! ../matcher */"./node_modules/d3-selection/src/matcher.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,u=new Array(n),i=0;i<n;++i)for(var s,a=t[i],c=a.length,d=u[i]=[],l=0;l<c;++l)(s=a[l])&&e.call(s,s.__data__,l,a)&&d.push(s);return new r.Selection(u,this._parents)}},"./node_modules/d3-selection/src/selection/html.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/html.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this.innerHTML=""}function o(e){return function(){this.innerHTML=e}}function u(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}n.r(t),t.default=function(e){return arguments.length?this.each(null==e?r:("function"==typeof e?u:o)(e)):this.node().innerHTML}},"./node_modules/d3-selection/src/selection/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/index.js ***!
  \**********************************************************/
/*! exports provided: root, Selection, default */function(e,t,n){"use strict";n.r(t),n.d(t,"root",(function(){return P})),n.d(t,"Selection",(function(){return I}));var r=n(/*! ./select */"./node_modules/d3-selection/src/selection/select.js"),o=n(/*! ./selectAll */"./node_modules/d3-selection/src/selection/selectAll.js"),u=n(/*! ./filter */"./node_modules/d3-selection/src/selection/filter.js"),i=n(/*! ./data */"./node_modules/d3-selection/src/selection/data.js"),s=n(/*! ./enter */"./node_modules/d3-selection/src/selection/enter.js"),a=n(/*! ./exit */"./node_modules/d3-selection/src/selection/exit.js"),c=n(/*! ./join */"./node_modules/d3-selection/src/selection/join.js"),d=n(/*! ./merge */"./node_modules/d3-selection/src/selection/merge.js"),l=n(/*! ./order */"./node_modules/d3-selection/src/selection/order.js"),f=n(/*! ./sort */"./node_modules/d3-selection/src/selection/sort.js"),h=n(/*! ./call */"./node_modules/d3-selection/src/selection/call.js"),m=n(/*! ./nodes */"./node_modules/d3-selection/src/selection/nodes.js"),p=n(/*! ./node */"./node_modules/d3-selection/src/selection/node.js"),_=n(/*! ./size */"./node_modules/d3-selection/src/selection/size.js"),g=n(/*! ./empty */"./node_modules/d3-selection/src/selection/empty.js"),v=n(/*! ./each */"./node_modules/d3-selection/src/selection/each.js"),j=n(/*! ./attr */"./node_modules/d3-selection/src/selection/attr.js"),b=n(/*! ./style */"./node_modules/d3-selection/src/selection/style.js"),y=n(/*! ./property */"./node_modules/d3-selection/src/selection/property.js"),x=n(/*! ./classed */"./node_modules/d3-selection/src/selection/classed.js"),w=n(/*! ./text */"./node_modules/d3-selection/src/selection/text.js"),O=n(/*! ./html */"./node_modules/d3-selection/src/selection/html.js"),M=n(/*! ./raise */"./node_modules/d3-selection/src/selection/raise.js"),S=n(/*! ./lower */"./node_modules/d3-selection/src/selection/lower.js"),E=n(/*! ./append */"./node_modules/d3-selection/src/selection/append.js"),k=n(/*! ./insert */"./node_modules/d3-selection/src/selection/insert.js"),C=n(/*! ./remove */"./node_modules/d3-selection/src/selection/remove.js"),A=n(/*! ./clone */"./node_modules/d3-selection/src/selection/clone.js"),T=n(/*! ./datum */"./node_modules/d3-selection/src/selection/datum.js"),R=n(/*! ./on */"./node_modules/d3-selection/src/selection/on.js"),N=n(/*! ./dispatch */"./node_modules/d3-selection/src/selection/dispatch.js"),P=[null];function I(e,t){this._groups=e,this._parents=t}function q(){return new I([[document.documentElement]],P)}I.prototype=q.prototype={constructor:I,select:r.default,selectAll:o.default,filter:u.default,data:i.default,enter:s.default,exit:a.default,join:c.default,merge:d.default,order:l.default,sort:f.default,call:h.default,nodes:m.default,node:p.default,size:_.default,empty:g.default,each:v.default,attr:j.default,style:b.default,property:y.default,classed:x.default,text:w.default,html:O.default,raise:M.default,lower:S.default,append:E.default,insert:k.default,remove:C.default,clone:A.default,datum:T.default,on:R.default,dispatch:N.default},t.default=q},"./node_modules/d3-selection/src/selection/insert.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/insert.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../creator */"./node_modules/d3-selection/src/creator.js"),o=n(/*! ../selector */"./node_modules/d3-selection/src/selector.js");function u(){return null}t.default=function(e,t){var n="function"==typeof e?e:Object(r.default)(e),i=null==t?u:"function"==typeof t?t:Object(o.default)(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)}))}},"./node_modules/d3-selection/src/selection/join.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/join.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){var r=this.enter(),o=this,u=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?u.remove():n(u),r&&o?r.merge(o).order():o}},"./node_modules/d3-selection/src/selection/lower.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/lower.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/merge.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/merge.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js");t.default=function(e){for(var t=this._groups,n=e._groups,o=t.length,u=n.length,i=Math.min(o,u),s=new Array(o),a=0;a<i;++a)for(var c,d=t[a],l=n[a],f=d.length,h=s[a]=new Array(f),m=0;m<f;++m)(c=d[m]||l[m])&&(h[m]=c);for(;a<o;++a)s[a]=t[a];return new r.Selection(s,this._parents)}},"./node_modules/d3-selection/src/selection/node.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/node.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,u=r.length;o<u;++o){var i=r[o];if(i)return i}return null}},"./node_modules/d3-selection/src/selection/nodes.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/nodes.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e}},"./node_modules/d3-selection/src/selection/on.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/on.js ***!
  \*******************************************************/
/*! exports provided: event, default, customEvent */function(e,t,n){"use strict";n.r(t),n.d(t,"event",(function(){return o})),n.d(t,"customEvent",(function(){return d}));var r={},o=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(r={mouseenter:"mouseover",mouseleave:"mouseout"}));function u(e,t,n){return e=i(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function i(e,t,n){return function(r){var u=o;o=r;try{e.call(this,this.__data__,t,n)}finally{o=u}}}function s(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function a(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,u=t.length;r<u;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?t.length=o:delete this.__on}}}function c(e,t,n){var o=r.hasOwnProperty(e.type)?u:i;return function(r,u,i){var s,a=this.__on,c=o(t,u,i);if(a)for(var d=0,l=a.length;d<l;++d)if((s=a[d]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=t);this.addEventListener(e.type,c,n),s={type:e.type,name:e.name,value:t,listener:c,capture:n},a?a.push(s):this.__on=[s]}}function d(e,t,n,r){var u=o;e.sourceEvent=o,o=e;try{return t.apply(n,r)}finally{o=u}}t.default=function(e,t,n){var r,o,u=s(e+""),i=u.length;if(!(arguments.length<2)){for(d=t?c:a,null==n&&(n=!1),r=0;r<i;++r)this.each(d(u[r],t,n));return this}var d=this.node().__on;if(d)for(var l,f=0,h=d.length;f<h;++f)for(r=0,l=d[f];r<i;++r)if((o=u[r]).type===l.type&&o.name===l.name)return l.value}},"./node_modules/d3-selection/src/selection/order.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/order.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],u=o.length-1,i=o[u];--u>=0;)(r=o[u])&&(i&&4^r.compareDocumentPosition(i)&&i.parentNode.insertBefore(r,i),i=r);return this}},"./node_modules/d3-selection/src/selection/property.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/property.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){return function(){delete this[e]}}function o(e,t){return function(){this[e]=t}}function u(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}n.r(t),t.default=function(e,t){return arguments.length>1?this.each((null==t?r:"function"==typeof t?u:o)(e,t)):this.node()[e]}},"./node_modules/d3-selection/src/selection/raise.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/raise.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this.nextSibling&&this.parentNode.appendChild(this)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/remove.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/remove.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){var e=this.parentNode;e&&e.removeChild(this)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/select.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/select.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js"),o=n(/*! ../selector */"./node_modules/d3-selection/src/selector.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,u=new Array(n),i=0;i<n;++i)for(var s,a,c=t[i],d=c.length,l=u[i]=new Array(d),f=0;f<d;++f)(s=c[f])&&(a=e.call(s,s.__data__,f,c))&&("__data__"in s&&(a.__data__=s.__data__),l[f]=a);return new r.Selection(u,this._parents)}},"./node_modules/d3-selection/src/selection/selectAll.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectAll.js ***!
  \**************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js"),o=n(/*! ../selectorAll */"./node_modules/d3-selection/src/selectorAll.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,u=[],i=[],s=0;s<n;++s)for(var a,c=t[s],d=c.length,l=0;l<d;++l)(a=c[l])&&(u.push(e.call(a,a.__data__,l,c)),i.push(a));return new r.Selection(u,i)}},"./node_modules/d3-selection/src/selection/size.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/size.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){var e=0;return this.each((function(){++e})),e}},"./node_modules/d3-selection/src/selection/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sort.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index */"./node_modules/d3-selection/src/selection/index.js");function o(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}t.default=function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=o);for(var n=this._groups,u=n.length,i=new Array(u),s=0;s<u;++s){for(var a,c=n[s],d=c.length,l=i[s]=new Array(d),f=0;f<d;++f)(a=c[f])&&(l[f]=a);l.sort(t)}return new r.Selection(i,this._parents).order()}},"./node_modules/d3-selection/src/selection/sparse.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sparse.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return new Array(e.length)}},"./node_modules/d3-selection/src/selection/style.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/style.js ***!
  \**********************************************************/
/*! exports provided: default, styleValue */function(e,t,n){"use strict";n.r(t),n.d(t,"styleValue",(function(){return s}));var r=n(/*! ../window */"./node_modules/d3-selection/src/window.js");function o(e){return function(){this.style.removeProperty(e)}}function u(e,t,n){return function(){this.style.setProperty(e,t,n)}}function i(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function s(e,t){return e.style.getPropertyValue(t)||Object(r.default)(e).getComputedStyle(e,null).getPropertyValue(t)}t.default=function(e,t,n){return arguments.length>1?this.each((null==t?o:"function"==typeof t?i:u)(e,t,null==n?"":n)):s(this.node(),e)}},"./node_modules/d3-selection/src/selection/text.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/text.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){this.textContent=""}function o(e){return function(){this.textContent=e}}function u(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}n.r(t),t.default=function(e){return arguments.length?this.each(null==e?r:("function"==typeof e?u:o)(e)):this.node().textContent}},"./node_modules/d3-selection/src/selector.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/selector.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){}n.r(t),t.default=function(e){return null==e?r:function(){return this.querySelector(e)}}},"./node_modules/d3-selection/src/selectorAll.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-selection/src/selectorAll.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(){return[]}n.r(t),t.default=function(e){return null==e?r:function(){return this.querySelectorAll(e)}}},"./node_modules/d3-selection/src/sourceEvent.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-selection/src/sourceEvent.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./selection/on */"./node_modules/d3-selection/src/selection/on.js");t.default=function(){for(var e,t=r.event;e=t.sourceEvent;)t=e;return t}},"./node_modules/d3-selection/src/touch.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/touch.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./sourceEvent */"./node_modules/d3-selection/src/sourceEvent.js"),o=n(/*! ./point */"./node_modules/d3-selection/src/point.js");t.default=function(e,t,n){arguments.length<3&&(n=t,t=Object(r.default)().changedTouches);for(var u,i=0,s=t?t.length:0;i<s;++i)if((u=t[i]).identifier===n)return Object(o.default)(e,u);return null}},"./node_modules/d3-selection/src/touches.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/touches.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./sourceEvent */"./node_modules/d3-selection/src/sourceEvent.js"),o=n(/*! ./point */"./node_modules/d3-selection/src/point.js");t.default=function(e,t){null==t&&(t=Object(r.default)().touches);for(var n=0,u=t?t.length:0,i=new Array(u);n<u;++n)i[n]=Object(o.default)(e,t[n]);return i}},"./node_modules/d3-selection/src/window.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/window.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}},"./node_modules/d3-shape/src/arc.js":
/*!******************************************!*\
  !*** ./node_modules/d3-shape/src/arc.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-path */"./node_modules/d3-path/src/index.js"),o=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),u=n(/*! ./math.js */"./node_modules/d3-shape/src/math.js");function i(e){return e.innerRadius}function s(e){return e.outerRadius}function a(e){return e.startAngle}function c(e){return e.endAngle}function d(e){return e&&e.padAngle}function l(e,t,n,r,o,i,s,a){var c=n-e,d=r-t,l=s-o,f=a-i,h=f*c-l*d;if(!(h*h<u.epsilon))return[e+(h=(l*(t-i)-f*(e-o))/h)*c,t+h*d]}function f(e,t,n,r,o,i,s){var a=e-n,c=t-r,d=(s?i:-i)/Object(u.sqrt)(a*a+c*c),l=d*c,f=-d*a,h=e+l,m=t+f,p=n+l,_=r+f,g=(h+p)/2,v=(m+_)/2,j=p-h,b=_-m,y=j*j+b*b,x=o-i,w=h*_-p*m,O=(b<0?-1:1)*Object(u.sqrt)(Object(u.max)(0,x*x*y-w*w)),M=(w*b-j*O)/y,S=(-w*j-b*O)/y,E=(w*b+j*O)/y,k=(-w*j+b*O)/y,C=M-g,A=S-v,T=E-g,R=k-v;return C*C+A*A>T*T+R*R&&(M=E,S=k),{cx:M,cy:S,x01:-l,y01:-f,x11:M*(o/x-1),y11:S*(o/x-1)}}t.default=function(){var e=i,t=s,n=Object(o.default)(0),h=null,m=a,p=c,_=d,g=null;function v(){var o,i,s=+e.apply(this,arguments),a=+t.apply(this,arguments),c=m.apply(this,arguments)-u.halfPi,d=p.apply(this,arguments)-u.halfPi,v=Object(u.abs)(d-c),j=d>c;if(g||(g=o=Object(r.path)()),a<s&&(i=a,a=s,s=i),a>u.epsilon)if(v>u.tau-u.epsilon)g.moveTo(a*Object(u.cos)(c),a*Object(u.sin)(c)),g.arc(0,0,a,c,d,!j),s>u.epsilon&&(g.moveTo(s*Object(u.cos)(d),s*Object(u.sin)(d)),g.arc(0,0,s,d,c,j));else{var b,y,x=c,w=d,O=c,M=d,S=v,E=v,k=_.apply(this,arguments)/2,C=k>u.epsilon&&(h?+h.apply(this,arguments):Object(u.sqrt)(s*s+a*a)),A=Object(u.min)(Object(u.abs)(a-s)/2,+n.apply(this,arguments)),T=A,R=A;if(C>u.epsilon){var N=Object(u.asin)(C/s*Object(u.sin)(k)),P=Object(u.asin)(C/a*Object(u.sin)(k));(S-=2*N)>u.epsilon?(O+=N*=j?1:-1,M-=N):(S=0,O=M=(c+d)/2),(E-=2*P)>u.epsilon?(x+=P*=j?1:-1,w-=P):(E=0,x=w=(c+d)/2)}var I=a*Object(u.cos)(x),q=a*Object(u.sin)(x),B=s*Object(u.cos)(M),F=s*Object(u.sin)(M);if(A>u.epsilon){var L,z=a*Object(u.cos)(w),D=a*Object(u.sin)(w),G=s*Object(u.cos)(O),U=s*Object(u.sin)(O);if(v<u.pi&&(L=l(I,q,G,U,z,D,B,F))){var Y=I-L[0],H=q-L[1],W=z-L[0],V=D-L[1],$=1/Object(u.sin)(Object(u.acos)((Y*W+H*V)/(Object(u.sqrt)(Y*Y+H*H)*Object(u.sqrt)(W*W+V*V)))/2),X=Object(u.sqrt)(L[0]*L[0]+L[1]*L[1]);T=Object(u.min)(A,(s-X)/($-1)),R=Object(u.min)(A,(a-X)/($+1))}}E>u.epsilon?R>u.epsilon?(b=f(G,U,I,q,a,R,j),y=f(z,D,B,F,a,R,j),g.moveTo(b.cx+b.x01,b.cy+b.y01),R<A?g.arc(b.cx,b.cy,R,Object(u.atan2)(b.y01,b.x01),Object(u.atan2)(y.y01,y.x01),!j):(g.arc(b.cx,b.cy,R,Object(u.atan2)(b.y01,b.x01),Object(u.atan2)(b.y11,b.x11),!j),g.arc(0,0,a,Object(u.atan2)(b.cy+b.y11,b.cx+b.x11),Object(u.atan2)(y.cy+y.y11,y.cx+y.x11),!j),g.arc(y.cx,y.cy,R,Object(u.atan2)(y.y11,y.x11),Object(u.atan2)(y.y01,y.x01),!j))):(g.moveTo(I,q),g.arc(0,0,a,x,w,!j)):g.moveTo(I,q),s>u.epsilon&&S>u.epsilon?T>u.epsilon?(b=f(B,F,z,D,s,-T,j),y=f(I,q,G,U,s,-T,j),g.lineTo(b.cx+b.x01,b.cy+b.y01),T<A?g.arc(b.cx,b.cy,T,Object(u.atan2)(b.y01,b.x01),Object(u.atan2)(y.y01,y.x01),!j):(g.arc(b.cx,b.cy,T,Object(u.atan2)(b.y01,b.x01),Object(u.atan2)(b.y11,b.x11),!j),g.arc(0,0,s,Object(u.atan2)(b.cy+b.y11,b.cx+b.x11),Object(u.atan2)(y.cy+y.y11,y.cx+y.x11),j),g.arc(y.cx,y.cy,T,Object(u.atan2)(y.y11,y.x11),Object(u.atan2)(y.y01,y.x01),!j))):g.arc(0,0,s,M,O,j):g.lineTo(B,F)}else g.moveTo(0,0);if(g.closePath(),o)return g=null,o+""||null}return v.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+m.apply(this,arguments)+ +p.apply(this,arguments))/2-u.pi/2;return[Object(u.cos)(r)*n,Object(u.sin)(r)*n]},v.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),v):e},v.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Object(o.default)(+e),v):t},v.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),v):n},v.padRadius=function(e){return arguments.length?(h=null==e?null:"function"==typeof e?e:Object(o.default)(+e),v):h},v.startAngle=function(e){return arguments.length?(m="function"==typeof e?e:Object(o.default)(+e),v):m},v.endAngle=function(e){return arguments.length?(p="function"==typeof e?e:Object(o.default)(+e),v):p},v.padAngle=function(e){return arguments.length?(_="function"==typeof e?e:Object(o.default)(+e),v):_},v.context=function(e){return arguments.length?(g=null==e?null:e,v):g},v}},"./node_modules/d3-shape/src/area.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/area.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-path */"./node_modules/d3-path/src/index.js"),o=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),u=n(/*! ./curve/linear.js */"./node_modules/d3-shape/src/curve/linear.js"),i=n(/*! ./line.js */"./node_modules/d3-shape/src/line.js"),s=n(/*! ./point.js */"./node_modules/d3-shape/src/point.js");t.default=function(){var e=s.x,t=null,n=Object(o.default)(0),a=s.y,c=Object(o.default)(!0),d=null,l=u.default,f=null;function h(o){var u,i,s,h,m,p=o.length,_=!1,g=new Array(p),v=new Array(p);for(null==d&&(f=l(m=Object(r.path)())),u=0;u<=p;++u){if(!(u<p&&c(h=o[u],u,o))===_)if(_=!_)i=u,f.areaStart(),f.lineStart();else{for(f.lineEnd(),f.lineStart(),s=u-1;s>=i;--s)f.point(g[s],v[s]);f.lineEnd(),f.areaEnd()}_&&(g[u]=+e(h,u,o),v[u]=+n(h,u,o),f.point(t?+t(h,u,o):g[u],a?+a(h,u,o):v[u]))}if(m)return f=null,m+""||null}function m(){return Object(i.default)().defined(c).curve(l).context(d)}return h.x=function(n){return arguments.length?(e="function"==typeof n?n:Object(o.default)(+n),t=null,h):e},h.x0=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),h):e},h.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:Object(o.default)(+e),h):t},h.y=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),a=null,h):n},h.y0=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),h):n},h.y1=function(e){return arguments.length?(a=null==e?null:"function"==typeof e?e:Object(o.default)(+e),h):a},h.lineX0=h.lineY0=function(){return m().x(e).y(n)},h.lineY1=function(){return m().x(e).y(a)},h.lineX1=function(){return m().x(t).y(n)},h.defined=function(e){return arguments.length?(c="function"==typeof e?e:Object(o.default)(!!e),h):c},h.curve=function(e){return arguments.length?(l=e,null!=d&&(f=l(d)),h):l},h.context=function(e){return arguments.length?(null==e?d=f=null:f=l(d=e),h):d},h}},"./node_modules/d3-shape/src/areaRadial.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/areaRadial.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./curve/radial.js */"./node_modules/d3-shape/src/curve/radial.js"),o=n(/*! ./area.js */"./node_modules/d3-shape/src/area.js"),u=n(/*! ./lineRadial.js */"./node_modules/d3-shape/src/lineRadial.js");t.default=function(){var e=Object(o.default)().curve(r.curveRadialLinear),t=e.curve,n=e.lineX0,i=e.lineX1,s=e.lineY0,a=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Object(u.lineRadial)(n())},delete e.lineX0,e.lineEndAngle=function(){return Object(u.lineRadial)(i())},delete e.lineX1,e.lineInnerRadius=function(){return Object(u.lineRadial)(s())},delete e.lineY0,e.lineOuterRadius=function(){return Object(u.lineRadial)(a())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Object(r.default)(e)):t()._curve},e}},"./node_modules/d3-shape/src/array.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/array.js ***!
  \********************************************/
/*! exports provided: slice */function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-shape/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-shape/src/constant.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-shape/src/curve/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/basis.js ***!
  \**************************************************/
/*! exports provided: point, Basis, default */function(e,t,n){"use strict";function r(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function o(e){this._context=e}n.r(t),n.d(t,"point",(function(){return r})),n.d(t,"Basis",(function(){return o})),o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:r(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:r(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/basisClosed.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../noop.js */"./node_modules/d3-shape/src/noop.js"),o=n(/*! ./basis.js */"./node_modules/d3-shape/src/curve/basis.js");function u(e){this._context=e}u.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:Object(o.point)(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new u(e)}},"./node_modules/d3-shape/src/curve/basisOpen.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/basisOpen.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./basis.js */"./node_modules/d3-shape/src/curve/basis.js");function o(e){this._context=e}o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,o=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,o):this._context.moveTo(n,o);break;case 3:this._point=4;default:Object(r.point)(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/bundle.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/bundle.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./basis.js */"./node_modules/d3-shape/src/curve/basis.js");function o(e,t){this._basis=new r.Basis(e),this._beta=t}o.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,o=e[0],u=t[0],i=e[n]-o,s=t[n]-u,a=-1;++a<=n;)r=a/n,this._basis.point(this._beta*e[a]+(1-this._beta)*(o+r*i),this._beta*t[a]+(1-this._beta)*(u+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.default=function e(t){function n(e){return 1===t?new r.Basis(e):new o(e,t)}return n.beta=function(t){return e(+t)},n}(.85)},"./node_modules/d3-shape/src/curve/cardinal.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/cardinal.js ***!
  \*****************************************************/
/*! exports provided: point, Cardinal, default */function(e,t,n){"use strict";function r(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function o(e,t){this._context=e,this._k=(1-t)/6}n.r(t),n.d(t,"point",(function(){return r})),n.d(t,"Cardinal",(function(){return o})),o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:r(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:r(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new o(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/cardinalClosed.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/cardinalClosed.js ***!
  \***********************************************************/
/*! exports provided: CardinalClosed, default */function(e,t,n){"use strict";n.r(t),n.d(t,"CardinalClosed",(function(){return u}));var r=n(/*! ../noop.js */"./node_modules/d3-shape/src/noop.js"),o=n(/*! ./cardinal.js */"./node_modules/d3-shape/src/curve/cardinal.js");function u(e,t){this._context=e,this._k=(1-t)/6}u.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(o.point)(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new u(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/cardinalOpen.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/cardinalOpen.js ***!
  \*********************************************************/
/*! exports provided: CardinalOpen, default */function(e,t,n){"use strict";n.r(t),n.d(t,"CardinalOpen",(function(){return o}));var r=n(/*! ./cardinal.js */"./node_modules/d3-shape/src/curve/cardinal.js");function o(e,t){this._context=e,this._k=(1-t)/6}o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(r.point)(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new o(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/catmullRom.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/catmullRom.js ***!
  \*******************************************************/
/*! exports provided: point, default */function(e,t,n){"use strict";n.r(t),n.d(t,"point",(function(){return u}));var r=n(/*! ../math.js */"./node_modules/d3-shape/src/math.js"),o=n(/*! ./cardinal.js */"./node_modules/d3-shape/src/curve/cardinal.js");function u(e,t,n){var o=e._x1,u=e._y1,i=e._x2,s=e._y2;if(e._l01_a>r.epsilon){var a=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,c=3*e._l01_a*(e._l01_a+e._l12_a);o=(o*a-e._x0*e._l12_2a+e._x2*e._l01_2a)/c,u=(u*a-e._y0*e._l12_2a+e._y2*e._l01_2a)/c}if(e._l23_a>r.epsilon){var d=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,l=3*e._l23_a*(e._l23_a+e._l12_a);i=(i*d+e._x1*e._l23_2a-t*e._l12_2a)/l,s=(s*d+e._y1*e._l23_2a-n*e._l12_2a)/l}e._context.bezierCurveTo(o,u,i,s,e._x2,e._y2)}function i(e,t){this._context=e,this._alpha=t}i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:u(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new i(e,t):new o.Cardinal(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/catmullRomClosed.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/catmullRomClosed.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./cardinalClosed.js */"./node_modules/d3-shape/src/curve/cardinalClosed.js"),o=n(/*! ../noop.js */"./node_modules/d3-shape/src/noop.js"),u=n(/*! ./catmullRom.js */"./node_modules/d3-shape/src/curve/catmullRom.js");function i(e,t){this._context=e,this._alpha=t}i.prototype={areaStart:o.default,areaEnd:o.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(u.point)(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new i(e,t):new r.CardinalClosed(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/catmullRomOpen.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/catmullRomOpen.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./cardinalOpen.js */"./node_modules/d3-shape/src/curve/cardinalOpen.js"),o=n(/*! ./catmullRom.js */"./node_modules/d3-shape/src/curve/catmullRom.js");function u(e,t){this._context=e,this._alpha=t}u.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(o.point)(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new u(e,t):new r.CardinalOpen(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/linear.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/linear.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){this._context=e}n.r(t),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},t.default=function(e){return new r(e)}},"./node_modules/d3-shape/src/curve/linearClosed.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/linearClosed.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../noop.js */"./node_modules/d3-shape/src/noop.js");function o(e){this._context=e}o.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/monotone.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/monotone.js ***!
  \*****************************************************/
/*! exports provided: monotoneX, monotoneY */function(e,t,n){"use strict";function r(e){return e<0?-1:1}function o(e,t,n){var o=e._x1-e._x0,u=t-e._x1,i=(e._y1-e._y0)/(o||u<0&&-0),s=(n-e._y1)/(u||o<0&&-0),a=(i*u+s*o)/(o+u);return(r(i)+r(s))*Math.min(Math.abs(i),Math.abs(s),.5*Math.abs(a))||0}function u(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function i(e,t,n){var r=e._x0,o=e._y0,u=e._x1,i=e._y1,s=(u-r)/3;e._context.bezierCurveTo(r+s,o+s*t,u-s,i-s*n,u,i)}function s(e){this._context=e}function a(e){this._context=new c(e)}function c(e){this._context=e}function d(e){return new s(e)}function l(e){return new a(e)}n.r(t),n.d(t,"monotoneX",(function(){return d})),n.d(t,"monotoneY",(function(){return l})),s.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:i(this,this._t0,u(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,i(this,u(this,n=o(this,e,t)),n);break;default:i(this,this._t0,n=o(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(a.prototype=Object.create(s.prototype)).point=function(e,t){s.prototype.point.call(this,t,e)},c.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,u){this._context.bezierCurveTo(t,e,r,n,u,o)}}},"./node_modules/d3-shape/src/curve/natural.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/natural.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){this._context=e}function o(e){var t,n,r=e.length-1,o=new Array(r),u=new Array(r),i=new Array(r);for(o[0]=0,u[0]=2,i[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,u[t]=4,i[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,u[r-1]=7,i[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/u[t-1],u[t]-=n,i[t]-=n*i[t-1];for(o[r-1]=i[r-1]/u[r-1],t=r-2;t>=0;--t)o[t]=(i[t]-o[t+1])/u[t];for(u[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)u[t]=2*e[t+1]-o[t+1];return[o,u]}n.r(t),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=o(e),u=o(t),i=0,s=1;s<n;++i,++s)this._context.bezierCurveTo(r[0][i],u[0][i],r[1][i],u[1][i],e[s],t[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.default=function(e){return new r(e)}},"./node_modules/d3-shape/src/curve/radial.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/radial.js ***!
  \***************************************************/
/*! exports provided: curveRadialLinear, default */function(e,t,n){"use strict";n.r(t),n.d(t,"curveRadialLinear",(function(){return r})),n.d(t,"default",(function(){return u}));var r=u(n(/*! ./linear.js */"./node_modules/d3-shape/src/curve/linear.js").default);function o(e){this._curve=e}function u(e){function t(t){return new o(e(t))}return t._curve=e,t}o.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}}},"./node_modules/d3-shape/src/curve/step.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/step.js ***!
  \*************************************************/
/*! exports provided: default, stepBefore, stepAfter */function(e,t,n){"use strict";function r(e,t){this._context=e,this._t=t}function o(e){return new r(e,0)}function u(e){return new r(e,1)}n.r(t),n.d(t,"stepBefore",(function(){return o})),n.d(t,"stepAfter",(function(){return u})),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}},t.default=function(e){return new r(e,.5)}},"./node_modules/d3-shape/src/descending.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/descending.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},"./node_modules/d3-shape/src/identity.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-shape/src/identity.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-shape/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/index.js ***!
  \********************************************/
/*! exports provided: arc, area, line, pie, areaRadial, radialArea, lineRadial, radialLine, pointRadial, linkHorizontal, linkVertical, linkRadial, symbol, symbols, symbolCircle, symbolCross, symbolDiamond, symbolSquare, symbolStar, symbolTriangle, symbolWye, curveBasisClosed, curveBasisOpen, curveBasis, curveBundle, curveCardinalClosed, curveCardinalOpen, curveCardinal, curveCatmullRomClosed, curveCatmullRomOpen, curveCatmullRom, curveLinearClosed, curveLinear, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore, stack, stackOffsetExpand, stackOffsetDiverging, stackOffsetNone, stackOffsetSilhouette, stackOffsetWiggle, stackOrderAppearance, stackOrderAscending, stackOrderDescending, stackOrderInsideOut, stackOrderNone, stackOrderReverse */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./arc.js */"./node_modules/d3-shape/src/arc.js");n.d(t,"arc",(function(){return r.default}));var o=n(/*! ./area.js */"./node_modules/d3-shape/src/area.js");n.d(t,"area",(function(){return o.default}));var u=n(/*! ./line.js */"./node_modules/d3-shape/src/line.js");n.d(t,"line",(function(){return u.default}));var i=n(/*! ./pie.js */"./node_modules/d3-shape/src/pie.js");n.d(t,"pie",(function(){return i.default}));var s=n(/*! ./areaRadial.js */"./node_modules/d3-shape/src/areaRadial.js");n.d(t,"areaRadial",(function(){return s.default})),n.d(t,"radialArea",(function(){return s.default}));var a=n(/*! ./lineRadial.js */"./node_modules/d3-shape/src/lineRadial.js");n.d(t,"lineRadial",(function(){return a.default})),n.d(t,"radialLine",(function(){return a.default}));var c=n(/*! ./pointRadial.js */"./node_modules/d3-shape/src/pointRadial.js");n.d(t,"pointRadial",(function(){return c.default}));var d=n(/*! ./link/index.js */"./node_modules/d3-shape/src/link/index.js");n.d(t,"linkHorizontal",(function(){return d.linkHorizontal})),n.d(t,"linkVertical",(function(){return d.linkVertical})),n.d(t,"linkRadial",(function(){return d.linkRadial}));var l=n(/*! ./symbol.js */"./node_modules/d3-shape/src/symbol.js");n.d(t,"symbol",(function(){return l.default})),n.d(t,"symbols",(function(){return l.symbols}));var f=n(/*! ./symbol/circle.js */"./node_modules/d3-shape/src/symbol/circle.js");n.d(t,"symbolCircle",(function(){return f.default}));var h=n(/*! ./symbol/cross.js */"./node_modules/d3-shape/src/symbol/cross.js");n.d(t,"symbolCross",(function(){return h.default}));var m=n(/*! ./symbol/diamond.js */"./node_modules/d3-shape/src/symbol/diamond.js");n.d(t,"symbolDiamond",(function(){return m.default}));var p=n(/*! ./symbol/square.js */"./node_modules/d3-shape/src/symbol/square.js");n.d(t,"symbolSquare",(function(){return p.default}));var _=n(/*! ./symbol/star.js */"./node_modules/d3-shape/src/symbol/star.js");n.d(t,"symbolStar",(function(){return _.default}));var g=n(/*! ./symbol/triangle.js */"./node_modules/d3-shape/src/symbol/triangle.js");n.d(t,"symbolTriangle",(function(){return g.default}));var v=n(/*! ./symbol/wye.js */"./node_modules/d3-shape/src/symbol/wye.js");n.d(t,"symbolWye",(function(){return v.default}));var j=n(/*! ./curve/basisClosed.js */"./node_modules/d3-shape/src/curve/basisClosed.js");n.d(t,"curveBasisClosed",(function(){return j.default}));var b=n(/*! ./curve/basisOpen.js */"./node_modules/d3-shape/src/curve/basisOpen.js");n.d(t,"curveBasisOpen",(function(){return b.default}));var y=n(/*! ./curve/basis.js */"./node_modules/d3-shape/src/curve/basis.js");n.d(t,"curveBasis",(function(){return y.default}));var x=n(/*! ./curve/bundle.js */"./node_modules/d3-shape/src/curve/bundle.js");n.d(t,"curveBundle",(function(){return x.default}));var w=n(/*! ./curve/cardinalClosed.js */"./node_modules/d3-shape/src/curve/cardinalClosed.js");n.d(t,"curveCardinalClosed",(function(){return w.default}));var O=n(/*! ./curve/cardinalOpen.js */"./node_modules/d3-shape/src/curve/cardinalOpen.js");n.d(t,"curveCardinalOpen",(function(){return O.default}));var M=n(/*! ./curve/cardinal.js */"./node_modules/d3-shape/src/curve/cardinal.js");n.d(t,"curveCardinal",(function(){return M.default}));var S=n(/*! ./curve/catmullRomClosed.js */"./node_modules/d3-shape/src/curve/catmullRomClosed.js");n.d(t,"curveCatmullRomClosed",(function(){return S.default}));var E=n(/*! ./curve/catmullRomOpen.js */"./node_modules/d3-shape/src/curve/catmullRomOpen.js");n.d(t,"curveCatmullRomOpen",(function(){return E.default}));var k=n(/*! ./curve/catmullRom.js */"./node_modules/d3-shape/src/curve/catmullRom.js");n.d(t,"curveCatmullRom",(function(){return k.default}));var C=n(/*! ./curve/linearClosed.js */"./node_modules/d3-shape/src/curve/linearClosed.js");n.d(t,"curveLinearClosed",(function(){return C.default}));var A=n(/*! ./curve/linear.js */"./node_modules/d3-shape/src/curve/linear.js");n.d(t,"curveLinear",(function(){return A.default}));var T=n(/*! ./curve/monotone.js */"./node_modules/d3-shape/src/curve/monotone.js");n.d(t,"curveMonotoneX",(function(){return T.monotoneX})),n.d(t,"curveMonotoneY",(function(){return T.monotoneY}));var R=n(/*! ./curve/natural.js */"./node_modules/d3-shape/src/curve/natural.js");n.d(t,"curveNatural",(function(){return R.default}));var N=n(/*! ./curve/step.js */"./node_modules/d3-shape/src/curve/step.js");n.d(t,"curveStep",(function(){return N.default})),n.d(t,"curveStepAfter",(function(){return N.stepAfter})),n.d(t,"curveStepBefore",(function(){return N.stepBefore}));var P=n(/*! ./stack.js */"./node_modules/d3-shape/src/stack.js");n.d(t,"stack",(function(){return P.default}));var I=n(/*! ./offset/expand.js */"./node_modules/d3-shape/src/offset/expand.js");n.d(t,"stackOffsetExpand",(function(){return I.default}));var q=n(/*! ./offset/diverging.js */"./node_modules/d3-shape/src/offset/diverging.js");n.d(t,"stackOffsetDiverging",(function(){return q.default}));var B=n(/*! ./offset/none.js */"./node_modules/d3-shape/src/offset/none.js");n.d(t,"stackOffsetNone",(function(){return B.default}));var F=n(/*! ./offset/silhouette.js */"./node_modules/d3-shape/src/offset/silhouette.js");n.d(t,"stackOffsetSilhouette",(function(){return F.default}));var L=n(/*! ./offset/wiggle.js */"./node_modules/d3-shape/src/offset/wiggle.js");n.d(t,"stackOffsetWiggle",(function(){return L.default}));var z=n(/*! ./order/appearance.js */"./node_modules/d3-shape/src/order/appearance.js");n.d(t,"stackOrderAppearance",(function(){return z.default}));var D=n(/*! ./order/ascending.js */"./node_modules/d3-shape/src/order/ascending.js");n.d(t,"stackOrderAscending",(function(){return D.default}));var G=n(/*! ./order/descending.js */"./node_modules/d3-shape/src/order/descending.js");n.d(t,"stackOrderDescending",(function(){return G.default}));var U=n(/*! ./order/insideOut.js */"./node_modules/d3-shape/src/order/insideOut.js");n.d(t,"stackOrderInsideOut",(function(){return U.default}));var Y=n(/*! ./order/none.js */"./node_modules/d3-shape/src/order/none.js");n.d(t,"stackOrderNone",(function(){return Y.default}));var H=n(/*! ./order/reverse.js */"./node_modules/d3-shape/src/order/reverse.js");n.d(t,"stackOrderReverse",(function(){return H.default}))},"./node_modules/d3-shape/src/line.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/line.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-path */"./node_modules/d3-path/src/index.js"),o=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),u=n(/*! ./curve/linear.js */"./node_modules/d3-shape/src/curve/linear.js"),i=n(/*! ./point.js */"./node_modules/d3-shape/src/point.js");t.default=function(){var e=i.x,t=i.y,n=Object(o.default)(!0),s=null,a=u.default,c=null;function d(o){var u,i,d,l=o.length,f=!1;for(null==s&&(c=a(d=Object(r.path)())),u=0;u<=l;++u)!(u<l&&n(i=o[u],u,o))===f&&((f=!f)?c.lineStart():c.lineEnd()),f&&c.point(+e(i,u,o),+t(i,u,o));if(d)return c=null,d+""||null}return d.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),d):e},d.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(o.default)(+e),d):t},d.defined=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(!!e),d):n},d.curve=function(e){return arguments.length?(a=e,null!=s&&(c=a(s)),d):a},d.context=function(e){return arguments.length?(null==e?s=c=null:c=a(s=e),d):s},d}},"./node_modules/d3-shape/src/lineRadial.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/lineRadial.js ***!
  \*************************************************/
/*! exports provided: lineRadial, default */function(e,t,n){"use strict";n.r(t),n.d(t,"lineRadial",(function(){return u}));var r=n(/*! ./curve/radial.js */"./node_modules/d3-shape/src/curve/radial.js"),o=n(/*! ./line.js */"./node_modules/d3-shape/src/line.js");function u(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Object(r.default)(e)):t()._curve},e}t.default=function(){return u(Object(o.default)().curve(r.curveRadialLinear))}},"./node_modules/d3-shape/src/link/index.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/link/index.js ***!
  \*************************************************/
/*! exports provided: linkHorizontal, linkVertical, linkRadial */function(e,t,n){"use strict";n.r(t),n.d(t,"linkHorizontal",(function(){return m})),n.d(t,"linkVertical",(function(){return p})),n.d(t,"linkRadial",(function(){return _}));var r=n(/*! d3-path */"./node_modules/d3-path/src/index.js"),o=n(/*! ../array.js */"./node_modules/d3-shape/src/array.js"),u=n(/*! ../constant.js */"./node_modules/d3-shape/src/constant.js"),i=n(/*! ../point.js */"./node_modules/d3-shape/src/point.js"),s=n(/*! ../pointRadial.js */"./node_modules/d3-shape/src/pointRadial.js");function a(e){return e.source}function c(e){return e.target}function d(e){var t=a,n=c,s=i.x,d=i.y,l=null;function f(){var u,i=o.slice.call(arguments),a=t.apply(this,i),c=n.apply(this,i);if(l||(l=u=Object(r.path)()),e(l,+s.apply(this,(i[0]=a,i)),+d.apply(this,i),+s.apply(this,(i[0]=c,i)),+d.apply(this,i)),u)return l=null,u+""||null}return f.source=function(e){return arguments.length?(t=e,f):t},f.target=function(e){return arguments.length?(n=e,f):n},f.x=function(e){return arguments.length?(s="function"==typeof e?e:Object(u.default)(+e),f):s},f.y=function(e){return arguments.length?(d="function"==typeof e?e:Object(u.default)(+e),f):d},f.context=function(e){return arguments.length?(l=null==e?null:e,f):l},f}function l(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,o,r,o)}function f(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+o)/2,r,n,r,o)}function h(e,t,n,r,o){var u=Object(s.default)(t,n),i=Object(s.default)(t,n=(n+o)/2),a=Object(s.default)(r,n),c=Object(s.default)(r,o);e.moveTo(u[0],u[1]),e.bezierCurveTo(i[0],i[1],a[0],a[1],c[0],c[1])}function m(){return d(l)}function p(){return d(f)}function _(){var e=d(h);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}},"./node_modules/d3-shape/src/math.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/math.js ***!
  \*******************************************/
/*! exports provided: abs, atan2, cos, max, min, sin, sqrt, epsilon, pi, halfPi, tau, acos, asin */function(e,t,n){"use strict";n.r(t),n.d(t,"abs",(function(){return r})),n.d(t,"atan2",(function(){return o})),n.d(t,"cos",(function(){return u})),n.d(t,"max",(function(){return i})),n.d(t,"min",(function(){return s})),n.d(t,"sin",(function(){return a})),n.d(t,"sqrt",(function(){return c})),n.d(t,"epsilon",(function(){return d})),n.d(t,"pi",(function(){return l})),n.d(t,"halfPi",(function(){return f})),n.d(t,"tau",(function(){return h})),n.d(t,"acos",(function(){return m})),n.d(t,"asin",(function(){return p}));var r=Math.abs,o=Math.atan2,u=Math.cos,i=Math.max,s=Math.min,a=Math.sin,c=Math.sqrt,d=1e-12,l=Math.PI,f=l/2,h=2*l;function m(e){return e>1?0:e<-1?l:Math.acos(e)}function p(e){return e>=1?f:e<=-1?-f:Math.asin(e)}},"./node_modules/d3-shape/src/noop.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-shape/src/noop.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){}},"./node_modules/d3-shape/src/offset/diverging.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-shape/src/offset/diverging.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((s=e.length)>0)for(var n,r,o,u,i,s,a=0,c=e[t[0]].length;a<c;++a)for(u=i=0,n=0;n<s;++n)(o=(r=e[t[n]][a])[1]-r[0])>0?(r[0]=u,r[1]=u+=o):o<0?(r[1]=i,r[0]=i+=o):(r[0]=0,r[1]=o)}},"./node_modules/d3-shape/src/offset/expand.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/offset/expand.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./none.js */"./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((o=e.length)>0){for(var n,o,u,i=0,s=e[0].length;i<s;++i){for(u=n=0;n<o;++n)u+=e[n][i][1]||0;if(u)for(n=0;n<o;++n)e[n][i][1]/=u}Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/offset/none.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-shape/src/offset/none.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((o=e.length)>1)for(var n,r,o,u=1,i=e[t[0]],s=i.length;u<o;++u)for(r=i,i=e[t[u]],n=0;n<s;++n)i[n][1]+=i[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]}},"./node_modules/d3-shape/src/offset/silhouette.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-shape/src/offset/silhouette.js ***!
  \********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./none.js */"./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((n=e.length)>0){for(var n,o=0,u=e[t[0]],i=u.length;o<i;++o){for(var s=0,a=0;s<n;++s)a+=e[s][o][1]||0;u[o][1]+=u[o][0]=-a/2}Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/offset/wiggle.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/offset/wiggle.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./none.js */"./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((u=e.length)>0&&(o=(n=e[t[0]]).length)>0){for(var n,o,u,i=0,s=1;s<o;++s){for(var a=0,c=0,d=0;a<u;++a){for(var l=e[t[a]],f=l[s][1]||0,h=(f-(l[s-1][1]||0))/2,m=0;m<a;++m){var p=e[t[m]];h+=(p[s][1]||0)-(p[s-1][1]||0)}c+=f,d+=h*f}n[s-1][1]+=n[s-1][0]=i,c&&(i-=d/c)}n[s-1][1]+=n[s-1][0]=i,Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/order/appearance.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-shape/src/order/appearance.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./none.js */"./node_modules/d3-shape/src/order/none.js");function o(e){for(var t,n=-1,r=0,o=e.length,u=-1/0;++n<o;)(t=+e[n][1])>u&&(u=t,r=n);return r}t.default=function(e){var t=e.map(o);return Object(r.default)(e).sort((function(e,n){return t[e]-t[n]}))}},"./node_modules/d3-shape/src/order/ascending.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-shape/src/order/ascending.js ***!
  \******************************************************/
/*! exports provided: default, sum */function(e,t,n){"use strict";n.r(t),n.d(t,"sum",(function(){return o}));var r=n(/*! ./none.js */"./node_modules/d3-shape/src/order/none.js");function o(e){for(var t,n=0,r=-1,o=e.length;++r<o;)(t=+e[r][1])&&(n+=t);return n}t.default=function(e){var t=e.map(o);return Object(r.default)(e).sort((function(e,n){return t[e]-t[n]}))}},"./node_modules/d3-shape/src/order/descending.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-shape/src/order/descending.js ***!
  \*******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./ascending.js */"./node_modules/d3-shape/src/order/ascending.js");t.default=function(e){return Object(r.default)(e).reverse()}},"./node_modules/d3-shape/src/order/insideOut.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-shape/src/order/insideOut.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./appearance.js */"./node_modules/d3-shape/src/order/appearance.js"),o=n(/*! ./ascending.js */"./node_modules/d3-shape/src/order/ascending.js");t.default=function(e){var t,n,u=e.length,i=e.map(o.sum),s=Object(r.default)(e),a=0,c=0,d=[],l=[];for(t=0;t<u;++t)n=s[t],a<c?(a+=i[n],d.push(n)):(c+=i[n],l.push(n));return l.reverse().concat(d)}},"./node_modules/d3-shape/src/order/none.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/order/none.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n}},"./node_modules/d3-shape/src/order/reverse.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/order/reverse.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./none.js */"./node_modules/d3-shape/src/order/none.js");t.default=function(e){return Object(r.default)(e).reverse()}},"./node_modules/d3-shape/src/pie.js":
/*!******************************************!*\
  !*** ./node_modules/d3-shape/src/pie.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),o=n(/*! ./descending.js */"./node_modules/d3-shape/src/descending.js"),u=n(/*! ./identity.js */"./node_modules/d3-shape/src/identity.js"),i=n(/*! ./math.js */"./node_modules/d3-shape/src/math.js");t.default=function(){var e=u.default,t=o.default,n=null,s=Object(r.default)(0),a=Object(r.default)(i.tau),c=Object(r.default)(0);function d(r){var o,u,d,l,f,h=r.length,m=0,p=new Array(h),_=new Array(h),g=+s.apply(this,arguments),v=Math.min(i.tau,Math.max(-i.tau,a.apply(this,arguments)-g)),j=Math.min(Math.abs(v)/h,c.apply(this,arguments)),b=j*(v<0?-1:1);for(o=0;o<h;++o)(f=_[p[o]=o]=+e(r[o],o,r))>0&&(m+=f);for(null!=t?p.sort((function(e,n){return t(_[e],_[n])})):null!=n&&p.sort((function(e,t){return n(r[e],r[t])})),o=0,d=m?(v-h*b)/m:0;o<h;++o,g=l)u=p[o],l=g+((f=_[u])>0?f*d:0)+b,_[u]={data:r[u],index:o,value:f,startAngle:g,endAngle:l,padAngle:j};return _}return d.value=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),d):e},d.sortValues=function(e){return arguments.length?(t=e,n=null,d):t},d.sort=function(e){return arguments.length?(n=e,t=null,d):n},d.startAngle=function(e){return arguments.length?(s="function"==typeof e?e:Object(r.default)(+e),d):s},d.endAngle=function(e){return arguments.length?(a="function"==typeof e?e:Object(r.default)(+e),d):a},d.padAngle=function(e){return arguments.length?(c="function"==typeof e?e:Object(r.default)(+e),d):c},d}},"./node_modules/d3-shape/src/point.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/point.js ***!
  \********************************************/
/*! exports provided: x, y */function(e,t,n){"use strict";function r(e){return e[0]}function o(e){return e[1]}n.r(t),n.d(t,"x",(function(){return r})),n.d(t,"y",(function(){return o}))},"./node_modules/d3-shape/src/pointRadial.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-shape/src/pointRadial.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]}},"./node_modules/d3-shape/src/stack.js":
/*!********************************************!*\
  !*** ./node_modules/d3-shape/src/stack.js ***!
  \********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./array.js */"./node_modules/d3-shape/src/array.js"),o=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),u=n(/*! ./offset/none.js */"./node_modules/d3-shape/src/offset/none.js"),i=n(/*! ./order/none.js */"./node_modules/d3-shape/src/order/none.js");function s(e,t){return e[t]}t.default=function(){var e=Object(o.default)([]),t=i.default,n=u.default,a=s;function c(r){var o,u,i=e.apply(this,arguments),s=r.length,c=i.length,d=new Array(c);for(o=0;o<c;++o){for(var l,f=i[o],h=d[o]=new Array(s),m=0;m<s;++m)h[m]=l=[0,+a(r[m],f,m,r)],l.data=r[m];h.key=f}for(o=0,u=t(d);o<c;++o)d[u[o]].index=o;return n(d,u),d}return c.keys=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(r.slice.call(t)),c):e},c.value=function(e){return arguments.length?(a="function"==typeof e?e:Object(o.default)(+e),c):a},c.order=function(e){return arguments.length?(t=null==e?i.default:"function"==typeof e?e:Object(o.default)(r.slice.call(e)),c):t},c.offset=function(e){return arguments.length?(n=null==e?u.default:e,c):n},c}},"./node_modules/d3-shape/src/symbol.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-shape/src/symbol.js ***!
  \*********************************************/
/*! exports provided: symbols, default */function(e,t,n){"use strict";n.r(t),n.d(t,"symbols",(function(){return f}));var r=n(/*! d3-path */"./node_modules/d3-path/src/index.js"),o=n(/*! ./symbol/circle.js */"./node_modules/d3-shape/src/symbol/circle.js"),u=n(/*! ./symbol/cross.js */"./node_modules/d3-shape/src/symbol/cross.js"),i=n(/*! ./symbol/diamond.js */"./node_modules/d3-shape/src/symbol/diamond.js"),s=n(/*! ./symbol/star.js */"./node_modules/d3-shape/src/symbol/star.js"),a=n(/*! ./symbol/square.js */"./node_modules/d3-shape/src/symbol/square.js"),c=n(/*! ./symbol/triangle.js */"./node_modules/d3-shape/src/symbol/triangle.js"),d=n(/*! ./symbol/wye.js */"./node_modules/d3-shape/src/symbol/wye.js"),l=n(/*! ./constant.js */"./node_modules/d3-shape/src/constant.js"),f=[o.default,u.default,i.default,a.default,s.default,c.default,d.default];t.default=function(){var e=Object(l.default)(o.default),t=Object(l.default)(64),n=null;function u(){var o;if(n||(n=o=Object(r.path)()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),o)return n=null,o+""||null}return u.type=function(t){return arguments.length?(e="function"==typeof t?t:Object(l.default)(t),u):e},u.size=function(e){return arguments.length?(t="function"==typeof e?e:Object(l.default)(+e),u):t},u.context=function(e){return arguments.length?(n=null==e?null:e,u):n},u}},"./node_modules/d3-shape/src/symbol/circle.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/circle.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../math.js */"./node_modules/d3-shape/src/math.js");t.default={draw:function(e,t){var n=Math.sqrt(t/r.pi);e.moveTo(n,0),e.arc(0,0,n,0,r.tau)}}},"./node_modules/d3-shape/src/symbol/cross.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/cross.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}}},"./node_modules/d3-shape/src/symbol/diamond.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/diamond.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=Math.sqrt(1/3),o=2*r;t.default={draw:function(e,t){var n=Math.sqrt(t/o),u=n*r;e.moveTo(0,-n),e.lineTo(u,0),e.lineTo(0,n),e.lineTo(-u,0),e.closePath()}}},"./node_modules/d3-shape/src/symbol/square.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/square.js ***!
  \****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}}},"./node_modules/d3-shape/src/symbol/star.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/star.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../math.js */"./node_modules/d3-shape/src/math.js"),o=Math.sin(r.pi/10)/Math.sin(7*r.pi/10),u=Math.sin(r.tau/10)*o,i=-Math.cos(r.tau/10)*o;t.default={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),o=u*n,s=i*n;e.moveTo(0,-n),e.lineTo(o,s);for(var a=1;a<5;++a){var c=r.tau*a/5,d=Math.cos(c),l=Math.sin(c);e.lineTo(l*n,-d*n),e.lineTo(d*o-l*s,l*o+d*s)}e.closePath()}}},"./node_modules/d3-shape/src/symbol/triangle.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/triangle.js ***!
  \******************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=Math.sqrt(3);t.default={draw:function(e,t){var n=-Math.sqrt(t/(3*r));e.moveTo(0,2*n),e.lineTo(-r*n,-n),e.lineTo(r*n,-n),e.closePath()}}},"./node_modules/d3-shape/src/symbol/wye.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/symbol/wye.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=-.5,o=Math.sqrt(3)/2,u=1/Math.sqrt(12),i=3*(u/2+1);t.default={draw:function(e,t){var n=Math.sqrt(t/i),s=n/2,a=n*u,c=s,d=n*u+n,l=-c,f=d;e.moveTo(s,a),e.lineTo(c,d),e.lineTo(l,f),e.lineTo(r*s-o*a,o*s+r*a),e.lineTo(r*c-o*d,o*c+r*d),e.lineTo(r*l-o*f,o*l+r*f),e.lineTo(r*s+o*a,r*a-o*s),e.lineTo(r*c+o*d,r*d-o*c),e.lineTo(r*l+o*f,r*f-o*l),e.closePath()}}},"./node_modules/d3-time-format/src/defaultLocale.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-time-format/src/defaultLocale.js ***!
  \**********************************************************/
/*! exports provided: timeFormat, timeParse, utcFormat, utcParse, default */function(e,t,n){"use strict";n.r(t),n.d(t,"timeFormat",(function(){return o})),n.d(t,"timeParse",(function(){return u})),n.d(t,"utcFormat",(function(){return i})),n.d(t,"utcParse",(function(){return s})),n.d(t,"default",(function(){return c}));var r,o,u,i,s,a=n(/*! ./locale.js */"./node_modules/d3-time-format/src/locale.js");function c(e){return r=Object(a.default)(e),o=r.format,u=r.parse,i=r.utcFormat,s=r.utcParse,r}c({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]})},"./node_modules/d3-time-format/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-time-format/src/index.js ***!
  \**************************************************/
/*! exports provided: timeFormatDefaultLocale, timeFormat, timeParse, utcFormat, utcParse, timeFormatLocale, isoFormat, isoParse */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./defaultLocale.js */"./node_modules/d3-time-format/src/defaultLocale.js");n.d(t,"timeFormatDefaultLocale",(function(){return r.default})),n.d(t,"timeFormat",(function(){return r.timeFormat})),n.d(t,"timeParse",(function(){return r.timeParse})),n.d(t,"utcFormat",(function(){return r.utcFormat})),n.d(t,"utcParse",(function(){return r.utcParse}));var o=n(/*! ./locale.js */"./node_modules/d3-time-format/src/locale.js");n.d(t,"timeFormatLocale",(function(){return o.default}));var u=n(/*! ./isoFormat.js */"./node_modules/d3-time-format/src/isoFormat.js");n.d(t,"isoFormat",(function(){return u.default}));var i=n(/*! ./isoParse.js */"./node_modules/d3-time-format/src/isoParse.js");n.d(t,"isoParse",(function(){return i.default}))},"./node_modules/d3-time-format/src/isoFormat.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-time-format/src/isoFormat.js ***!
  \******************************************************/
/*! exports provided: isoSpecifier, default */function(e,t,n){"use strict";n.r(t),n.d(t,"isoSpecifier",(function(){return o}));var r=n(/*! ./defaultLocale.js */"./node_modules/d3-time-format/src/defaultLocale.js"),o="%Y-%m-%dT%H:%M:%S.%LZ";var u=Date.prototype.toISOString?function(e){return e.toISOString()}:Object(r.utcFormat)(o);t.default=u},"./node_modules/d3-time-format/src/isoParse.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-time-format/src/isoParse.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./isoFormat.js */"./node_modules/d3-time-format/src/isoFormat.js"),o=n(/*! ./defaultLocale.js */"./node_modules/d3-time-format/src/defaultLocale.js");var u=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:Object(o.utcParse)(r.isoSpecifier);t.default=u},"./node_modules/d3-time-format/src/locale.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-time-format/src/locale.js ***!
  \***************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n(/*! d3-time */"./node_modules/d3-time/src/index.js");function o(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function u(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function i(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function s(e){var t=e.dateTime,n=e.date,s=e.time,c=e.periods,d=e.days,l=e.shortDays,f=e.months,h=e.shortMonths,je=m(c),be=p(c),ye=m(d),xe=p(d),we=m(l),Oe=p(l),Me=m(f),Se=p(f),Ee=m(h),ke=p(h),Ce={a:function(e){return l[e.getDay()]},A:function(e){return d[e.getDay()]},b:function(e){return h[e.getMonth()]},B:function(e){return f[e.getMonth()]},c:null,d:q,e:q,f:D,H:B,I:F,j:L,L:z,m:G,M:U,p:function(e){return c[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:ge,s:ve,S:Y,u:H,U:W,V:V,w:$,W:X,x:null,X:null,y:K,Y:Z,Z:Q,"%":_e},Ae={a:function(e){return l[e.getUTCDay()]},A:function(e){return d[e.getUTCDay()]},b:function(e){return h[e.getUTCMonth()]},B:function(e){return f[e.getUTCMonth()]},c:null,d:J,e:J,f:oe,H:ee,I:te,j:ne,L:re,m:ue,M:ie,p:function(e){return c[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:ge,s:ve,S:se,u:ae,U:ce,V:de,w:le,W:fe,x:null,X:null,y:he,Y:me,Z:pe,"%":_e},Te={a:function(e,t,n){var r=we.exec(t.slice(n));return r?(e.w=Oe[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=ye.exec(t.slice(n));return r?(e.w=xe[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=Ee.exec(t.slice(n));return r?(e.m=ke[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=Me.exec(t.slice(n));return r?(e.m=Se[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return Pe(e,t,n,r)},d:S,e:S,f:R,H:k,I:k,j:E,L:T,m:M,M:C,p:function(e,t,n){var r=je.exec(t.slice(n));return r?(e.p=be[r[0].toLowerCase()],n+r[0].length):-1},q:O,Q:P,s:I,S:A,u:g,U:v,V:j,w:_,W:b,x:function(e,t,r){return Pe(e,n,t,r)},X:function(e,t,n){return Pe(e,s,t,n)},y:x,Y:y,Z:w,"%":N};function Re(e,t){return function(n){var r,o,u,i=[],s=-1,c=0,d=e.length;for(n instanceof Date||(n=new Date(+n));++s<d;)37===e.charCodeAt(s)&&(i.push(e.slice(c,s)),null!=(o=a[r=e.charAt(++s)])?r=e.charAt(++s):o="e"===r?" ":"0",(u=t[r])&&(r=u(n,o)),i.push(r),c=s+1);return i.push(e.slice(c,s)),i.join("")}}function Ne(e,t){return function(n){var s,a,c=i(1900,void 0,1);if(Pe(c,e,n+="",0)!=n.length)return null;if("Q"in c)return new Date(c.Q);if("s"in c)return new Date(1e3*c.s+("L"in c?c.L:0));if(t&&!("Z"in c)&&(c.Z=0),"p"in c&&(c.H=c.H%12+12*c.p),void 0===c.m&&(c.m="q"in c?c.q:0),"V"in c){if(c.V<1||c.V>53)return null;"w"in c||(c.w=1),"Z"in c?(a=(s=u(i(c.y,0,1))).getUTCDay(),s=a>4||0===a?r.utcMonday.ceil(s):Object(r.utcMonday)(s),s=r.utcDay.offset(s,7*(c.V-1)),c.y=s.getUTCFullYear(),c.m=s.getUTCMonth(),c.d=s.getUTCDate()+(c.w+6)%7):(a=(s=o(i(c.y,0,1))).getDay(),s=a>4||0===a?r.timeMonday.ceil(s):Object(r.timeMonday)(s),s=r.timeDay.offset(s,7*(c.V-1)),c.y=s.getFullYear(),c.m=s.getMonth(),c.d=s.getDate()+(c.w+6)%7)}else("W"in c||"U"in c)&&("w"in c||(c.w="u"in c?c.u%7:"W"in c?1:0),a="Z"in c?u(i(c.y,0,1)).getUTCDay():o(i(c.y,0,1)).getDay(),c.m=0,c.d="W"in c?(c.w+6)%7+7*c.W-(a+5)%7:c.w+7*c.U-(a+6)%7);return"Z"in c?(c.H+=c.Z/100|0,c.M+=c.Z%100,u(c)):o(c)}}function Pe(e,t,n,r){for(var o,u,i=0,s=t.length,c=n.length;i<s;){if(r>=c)return-1;if(37===(o=t.charCodeAt(i++))){if(o=t.charAt(i++),!(u=Te[o in a?t.charAt(i++):o])||(r=u(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return Ce.x=Re(n,Ce),Ce.X=Re(s,Ce),Ce.c=Re(t,Ce),Ae.x=Re(n,Ae),Ae.X=Re(s,Ae),Ae.c=Re(t,Ae),{format:function(e){var t=Re(e+="",Ce);return t.toString=function(){return e},t},parse:function(e){var t=Ne(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=Re(e+="",Ae);return t.toString=function(){return e},t},utcParse:function(e){var t=Ne(e+="",!0);return t.toString=function(){return e},t}}}var a={"-":"",_:" ",0:"0"},c=/^\s*\d+/,d=/^%/,l=/[\\^$*+?|[\]().{}]/g;function f(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",u=o.length;return r+(u<n?new Array(n-u+1).join(t)+o:o)}function h(e){return e.replace(l,"\\$&")}function m(e){return new RegExp("^(?:"+e.map(h).join("|")+")","i")}function p(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function _(e,t,n){var r=c.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function g(e,t,n){var r=c.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function v(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function j(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function b(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function y(e,t,n){var r=c.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function x(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function w(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function O(e,t,n){var r=c.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function M(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function S(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function E(e,t,n){var r=c.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function k(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function C(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function A(e,t,n){var r=c.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function T(e,t,n){var r=c.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function R(e,t,n){var r=c.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function N(e,t,n){var r=d.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function P(e,t,n){var r=c.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function I(e,t,n){var r=c.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function q(e,t){return f(e.getDate(),t,2)}function B(e,t){return f(e.getHours(),t,2)}function F(e,t){return f(e.getHours()%12||12,t,2)}function L(e,t){return f(1+r.timeDay.count(Object(r.timeYear)(e),e),t,3)}function z(e,t){return f(e.getMilliseconds(),t,3)}function D(e,t){return z(e,t)+"000"}function G(e,t){return f(e.getMonth()+1,t,2)}function U(e,t){return f(e.getMinutes(),t,2)}function Y(e,t){return f(e.getSeconds(),t,2)}function H(e){var t=e.getDay();return 0===t?7:t}function W(e,t){return f(r.timeSunday.count(Object(r.timeYear)(e)-1,e),t,2)}function V(e,t){var n=e.getDay();return e=n>=4||0===n?Object(r.timeThursday)(e):r.timeThursday.ceil(e),f(r.timeThursday.count(Object(r.timeYear)(e),e)+(4===Object(r.timeYear)(e).getDay()),t,2)}function $(e){return e.getDay()}function X(e,t){return f(r.timeMonday.count(Object(r.timeYear)(e)-1,e),t,2)}function K(e,t){return f(e.getFullYear()%100,t,2)}function Z(e,t){return f(e.getFullYear()%1e4,t,4)}function Q(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+f(t/60|0,"0",2)+f(t%60,"0",2)}function J(e,t){return f(e.getUTCDate(),t,2)}function ee(e,t){return f(e.getUTCHours(),t,2)}function te(e,t){return f(e.getUTCHours()%12||12,t,2)}function ne(e,t){return f(1+r.utcDay.count(Object(r.utcYear)(e),e),t,3)}function re(e,t){return f(e.getUTCMilliseconds(),t,3)}function oe(e,t){return re(e,t)+"000"}function ue(e,t){return f(e.getUTCMonth()+1,t,2)}function ie(e,t){return f(e.getUTCMinutes(),t,2)}function se(e,t){return f(e.getUTCSeconds(),t,2)}function ae(e){var t=e.getUTCDay();return 0===t?7:t}function ce(e,t){return f(r.utcSunday.count(Object(r.utcYear)(e)-1,e),t,2)}function de(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Object(r.utcThursday)(e):r.utcThursday.ceil(e),f(r.utcThursday.count(Object(r.utcYear)(e),e)+(4===Object(r.utcYear)(e).getUTCDay()),t,2)}function le(e){return e.getUTCDay()}function fe(e,t){return f(r.utcMonday.count(Object(r.utcYear)(e)-1,e),t,2)}function he(e,t){return f(e.getUTCFullYear()%100,t,2)}function me(e,t){return f(e.getUTCFullYear()%1e4,t,4)}function pe(){return"+0000"}function _e(){return"%"}function ge(e){return+e}function ve(e){return Math.floor(+e/1e3)}},"./node_modules/d3-time/src/day.js":
/*!*****************************************!*\
  !*** ./node_modules/d3-time/src/day.js ***!
  \*****************************************/
/*! exports provided: default, days */function(e,t,n){"use strict";n.r(t),n.d(t,"days",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o.durationMinute)/o.durationDay}),(function(e){return e.getDate()-1}));t.default=u;var i=u.range},"./node_modules/d3-time/src/duration.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-time/src/duration.js ***!
  \**********************************************/
/*! exports provided: durationSecond, durationMinute, durationHour, durationDay, durationWeek */function(e,t,n){"use strict";n.r(t),n.d(t,"durationSecond",(function(){return r})),n.d(t,"durationMinute",(function(){return o})),n.d(t,"durationHour",(function(){return u})),n.d(t,"durationDay",(function(){return i})),n.d(t,"durationWeek",(function(){return s}));var r=1e3,o=6e4,u=36e5,i=864e5,s=6048e5},"./node_modules/d3-time/src/hour.js":
/*!******************************************!*\
  !*** ./node_modules/d3-time/src/hour.js ***!
  \******************************************/
/*! exports provided: default, hours */function(e,t,n){"use strict";n.r(t),n.d(t,"hours",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds()-e.getSeconds()*o.durationSecond-e.getMinutes()*o.durationMinute)}),(function(e,t){e.setTime(+e+t*o.durationHour)}),(function(e,t){return(t-e)/o.durationHour}),(function(e){return e.getHours()}));t.default=u;var i=u.range},"./node_modules/d3-time/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-time/src/index.js ***!
  \*******************************************/
/*! exports provided: timeInterval, timeMillisecond, timeMilliseconds, utcMillisecond, utcMilliseconds, timeSecond, timeSeconds, utcSecond, utcSeconds, timeMinute, timeMinutes, timeHour, timeHours, timeDay, timeDays, timeWeek, timeWeeks, timeSunday, timeSundays, timeMonday, timeMondays, timeTuesday, timeTuesdays, timeWednesday, timeWednesdays, timeThursday, timeThursdays, timeFriday, timeFridays, timeSaturday, timeSaturdays, timeMonth, timeMonths, timeYear, timeYears, utcMinute, utcMinutes, utcHour, utcHours, utcDay, utcDays, utcWeek, utcWeeks, utcSunday, utcSundays, utcMonday, utcMondays, utcTuesday, utcTuesdays, utcWednesday, utcWednesdays, utcThursday, utcThursdays, utcFriday, utcFridays, utcSaturday, utcSaturdays, utcMonth, utcMonths, utcYear, utcYears */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js");n.d(t,"timeInterval",(function(){return r.default}));var o=n(/*! ./millisecond.js */"./node_modules/d3-time/src/millisecond.js");n.d(t,"timeMillisecond",(function(){return o.default})),n.d(t,"timeMilliseconds",(function(){return o.milliseconds})),n.d(t,"utcMillisecond",(function(){return o.default})),n.d(t,"utcMilliseconds",(function(){return o.milliseconds}));var u=n(/*! ./second.js */"./node_modules/d3-time/src/second.js");n.d(t,"timeSecond",(function(){return u.default})),n.d(t,"timeSeconds",(function(){return u.seconds})),n.d(t,"utcSecond",(function(){return u.default})),n.d(t,"utcSeconds",(function(){return u.seconds}));var i=n(/*! ./minute.js */"./node_modules/d3-time/src/minute.js");n.d(t,"timeMinute",(function(){return i.default})),n.d(t,"timeMinutes",(function(){return i.minutes}));var s=n(/*! ./hour.js */"./node_modules/d3-time/src/hour.js");n.d(t,"timeHour",(function(){return s.default})),n.d(t,"timeHours",(function(){return s.hours}));var a=n(/*! ./day.js */"./node_modules/d3-time/src/day.js");n.d(t,"timeDay",(function(){return a.default})),n.d(t,"timeDays",(function(){return a.days}));var c=n(/*! ./week.js */"./node_modules/d3-time/src/week.js");n.d(t,"timeWeek",(function(){return c.sunday})),n.d(t,"timeWeeks",(function(){return c.sundays})),n.d(t,"timeSunday",(function(){return c.sunday})),n.d(t,"timeSundays",(function(){return c.sundays})),n.d(t,"timeMonday",(function(){return c.monday})),n.d(t,"timeMondays",(function(){return c.mondays})),n.d(t,"timeTuesday",(function(){return c.tuesday})),n.d(t,"timeTuesdays",(function(){return c.tuesdays})),n.d(t,"timeWednesday",(function(){return c.wednesday})),n.d(t,"timeWednesdays",(function(){return c.wednesdays})),n.d(t,"timeThursday",(function(){return c.thursday})),n.d(t,"timeThursdays",(function(){return c.thursdays})),n.d(t,"timeFriday",(function(){return c.friday})),n.d(t,"timeFridays",(function(){return c.fridays})),n.d(t,"timeSaturday",(function(){return c.saturday})),n.d(t,"timeSaturdays",(function(){return c.saturdays}));var d=n(/*! ./month.js */"./node_modules/d3-time/src/month.js");n.d(t,"timeMonth",(function(){return d.default})),n.d(t,"timeMonths",(function(){return d.months}));var l=n(/*! ./year.js */"./node_modules/d3-time/src/year.js");n.d(t,"timeYear",(function(){return l.default})),n.d(t,"timeYears",(function(){return l.years}));var f=n(/*! ./utcMinute.js */"./node_modules/d3-time/src/utcMinute.js");n.d(t,"utcMinute",(function(){return f.default})),n.d(t,"utcMinutes",(function(){return f.utcMinutes}));var h=n(/*! ./utcHour.js */"./node_modules/d3-time/src/utcHour.js");n.d(t,"utcHour",(function(){return h.default})),n.d(t,"utcHours",(function(){return h.utcHours}));var m=n(/*! ./utcDay.js */"./node_modules/d3-time/src/utcDay.js");n.d(t,"utcDay",(function(){return m.default})),n.d(t,"utcDays",(function(){return m.utcDays}));var p=n(/*! ./utcWeek.js */"./node_modules/d3-time/src/utcWeek.js");n.d(t,"utcWeek",(function(){return p.utcSunday})),n.d(t,"utcWeeks",(function(){return p.utcSundays})),n.d(t,"utcSunday",(function(){return p.utcSunday})),n.d(t,"utcSundays",(function(){return p.utcSundays})),n.d(t,"utcMonday",(function(){return p.utcMonday})),n.d(t,"utcMondays",(function(){return p.utcMondays})),n.d(t,"utcTuesday",(function(){return p.utcTuesday})),n.d(t,"utcTuesdays",(function(){return p.utcTuesdays})),n.d(t,"utcWednesday",(function(){return p.utcWednesday})),n.d(t,"utcWednesdays",(function(){return p.utcWednesdays})),n.d(t,"utcThursday",(function(){return p.utcThursday})),n.d(t,"utcThursdays",(function(){return p.utcThursdays})),n.d(t,"utcFriday",(function(){return p.utcFriday})),n.d(t,"utcFridays",(function(){return p.utcFridays})),n.d(t,"utcSaturday",(function(){return p.utcSaturday})),n.d(t,"utcSaturdays",(function(){return p.utcSaturdays}));var _=n(/*! ./utcMonth.js */"./node_modules/d3-time/src/utcMonth.js");n.d(t,"utcMonth",(function(){return _.default})),n.d(t,"utcMonths",(function(){return _.utcMonths}));var g=n(/*! ./utcYear.js */"./node_modules/d3-time/src/utcYear.js");n.d(t,"utcYear",(function(){return g.default})),n.d(t,"utcYears",(function(){return g.utcYears}))},"./node_modules/d3-time/src/interval.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-time/src/interval.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=new Date,o=new Date;function u(e,t,n,i){function s(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return s.floor=function(t){return e(t=new Date(+t)),t},s.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},s.round=function(e){var t=s(e),n=s.ceil(e);return e-t<n-e?t:n},s.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},s.range=function(n,r,o){var u,i=[];if(n=s.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return i;do{i.push(u=new Date(+n)),t(n,o),e(n)}while(u<n&&n<r);return i},s.filter=function(n){return u((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(s.count=function(t,u){return r.setTime(+t),o.setTime(+u),e(r),e(o),Math.floor(n(r,o))},s.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?s.filter(i?function(t){return i(t)%e==0}:function(t){return s.count(0,t)%e==0}):s:null}),s}},"./node_modules/d3-time/src/millisecond.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-time/src/millisecond.js ***!
  \*************************************************/
/*! exports provided: default, milliseconds */function(e,t,n){"use strict";n.r(t),n.d(t,"milliseconds",(function(){return u}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e}));o.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?Object(r.default)((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):o:null},t.default=o;var u=o.range},"./node_modules/d3-time/src/minute.js":
/*!********************************************!*\
  !*** ./node_modules/d3-time/src/minute.js ***!
  \********************************************/
/*! exports provided: default, minutes */function(e,t,n){"use strict";n.r(t),n.d(t,"minutes",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds()-e.getSeconds()*o.durationSecond)}),(function(e,t){e.setTime(+e+t*o.durationMinute)}),(function(e,t){return(t-e)/o.durationMinute}),(function(e){return e.getMinutes()}));t.default=u;var i=u.range},"./node_modules/d3-time/src/month.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-time/src/month.js ***!
  \*******************************************/
/*! exports provided: default, months */function(e,t,n){"use strict";n.r(t),n.d(t,"months",(function(){return u}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()}));t.default=o;var u=o.range},"./node_modules/d3-time/src/second.js":
/*!********************************************!*\
  !*** ./node_modules/d3-time/src/second.js ***!
  \********************************************/
/*! exports provided: default, seconds */function(e,t,n){"use strict";n.r(t),n.d(t,"seconds",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+t*o.durationSecond)}),(function(e,t){return(t-e)/o.durationSecond}),(function(e){return e.getUTCSeconds()}));t.default=u;var i=u.range},"./node_modules/d3-time/src/utcDay.js":
/*!********************************************!*\
  !*** ./node_modules/d3-time/src/utcDay.js ***!
  \********************************************/
/*! exports provided: default, utcDays */function(e,t,n){"use strict";n.r(t),n.d(t,"utcDays",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/o.durationDay}),(function(e){return e.getUTCDate()-1}));t.default=u;var i=u.range},"./node_modules/d3-time/src/utcHour.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-time/src/utcHour.js ***!
  \*********************************************/
/*! exports provided: default, utcHours */function(e,t,n){"use strict";n.r(t),n.d(t,"utcHours",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+t*o.durationHour)}),(function(e,t){return(t-e)/o.durationHour}),(function(e){return e.getUTCHours()}));t.default=u;var i=u.range},"./node_modules/d3-time/src/utcMinute.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-time/src/utcMinute.js ***!
  \***********************************************/
/*! exports provided: default, utcMinutes */function(e,t,n){"use strict";n.r(t),n.d(t,"utcMinutes",(function(){return i}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js"),u=Object(r.default)((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+t*o.durationMinute)}),(function(e,t){return(t-e)/o.durationMinute}),(function(e){return e.getUTCMinutes()}));t.default=u;var i=u.range},"./node_modules/d3-time/src/utcMonth.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-time/src/utcMonth.js ***!
  \**********************************************/
/*! exports provided: default, utcMonths */function(e,t,n){"use strict";n.r(t),n.d(t,"utcMonths",(function(){return u}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()}));t.default=o;var u=o.range},"./node_modules/d3-time/src/utcWeek.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-time/src/utcWeek.js ***!
  \*********************************************/
/*! exports provided: utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays */function(e,t,n){"use strict";n.r(t),n.d(t,"utcSunday",(function(){return i})),n.d(t,"utcMonday",(function(){return s})),n.d(t,"utcTuesday",(function(){return a})),n.d(t,"utcWednesday",(function(){return c})),n.d(t,"utcThursday",(function(){return d})),n.d(t,"utcFriday",(function(){return l})),n.d(t,"utcSaturday",(function(){return f})),n.d(t,"utcSundays",(function(){return h})),n.d(t,"utcMondays",(function(){return m})),n.d(t,"utcTuesdays",(function(){return p})),n.d(t,"utcWednesdays",(function(){return _})),n.d(t,"utcThursdays",(function(){return g})),n.d(t,"utcFridays",(function(){return v})),n.d(t,"utcSaturdays",(function(){return j}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js");function u(e){return Object(r.default)((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/o.durationWeek}))}var i=u(0),s=u(1),a=u(2),c=u(3),d=u(4),l=u(5),f=u(6),h=i.range,m=s.range,p=a.range,_=c.range,g=d.range,v=l.range,j=f.range},"./node_modules/d3-time/src/utcYear.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-time/src/utcYear.js ***!
  \*********************************************/
/*! exports provided: default, utcYears */function(e,t,n){"use strict";n.r(t),n.d(t,"utcYears",(function(){return u}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()}));o.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Object(r.default)((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null},t.default=o;var u=o.range},"./node_modules/d3-time/src/week.js":
/*!******************************************!*\
  !*** ./node_modules/d3-time/src/week.js ***!
  \******************************************/
/*! exports provided: sunday, monday, tuesday, wednesday, thursday, friday, saturday, sundays, mondays, tuesdays, wednesdays, thursdays, fridays, saturdays */function(e,t,n){"use strict";n.r(t),n.d(t,"sunday",(function(){return i})),n.d(t,"monday",(function(){return s})),n.d(t,"tuesday",(function(){return a})),n.d(t,"wednesday",(function(){return c})),n.d(t,"thursday",(function(){return d})),n.d(t,"friday",(function(){return l})),n.d(t,"saturday",(function(){return f})),n.d(t,"sundays",(function(){return h})),n.d(t,"mondays",(function(){return m})),n.d(t,"tuesdays",(function(){return p})),n.d(t,"wednesdays",(function(){return _})),n.d(t,"thursdays",(function(){return g})),n.d(t,"fridays",(function(){return v})),n.d(t,"saturdays",(function(){return j}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=n(/*! ./duration.js */"./node_modules/d3-time/src/duration.js");function u(e){return Object(r.default)((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o.durationMinute)/o.durationWeek}))}var i=u(0),s=u(1),a=u(2),c=u(3),d=u(4),l=u(5),f=u(6),h=i.range,m=s.range,p=a.range,_=c.range,g=d.range,v=l.range,j=f.range},"./node_modules/d3-time/src/year.js":
/*!******************************************!*\
  !*** ./node_modules/d3-time/src/year.js ***!
  \******************************************/
/*! exports provided: default, years */function(e,t,n){"use strict";n.r(t),n.d(t,"years",(function(){return u}));var r=n(/*! ./interval.js */"./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));o.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Object(r.default)((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null},t.default=o;var u=o.range},"./node_modules/d3-timer/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-timer/src/index.js ***!
  \********************************************/
/*! exports provided: now, timer, timerFlush, timeout, interval */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./timer.js */"./node_modules/d3-timer/src/timer.js");n.d(t,"now",(function(){return r.now})),n.d(t,"timer",(function(){return r.timer})),n.d(t,"timerFlush",(function(){return r.timerFlush}));var o=n(/*! ./timeout.js */"./node_modules/d3-timer/src/timeout.js");n.d(t,"timeout",(function(){return o.default}));var u=n(/*! ./interval.js */"./node_modules/d3-timer/src/interval.js");n.d(t,"interval",(function(){return u.default}))},"./node_modules/d3-timer/src/interval.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-timer/src/interval.js ***!
  \***********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./timer.js */"./node_modules/d3-timer/src/timer.js");t.default=function(e,t,n){var o=new r.Timer,u=t;return null==t?(o.restart(e,t,n),o):(t=+t,n=null==n?Object(r.now)():+n,o.restart((function r(i){i+=u,o.restart(r,u+=t,n),e(i)}),t,n),o)}},"./node_modules/d3-timer/src/timeout.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-timer/src/timeout.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./timer.js */"./node_modules/d3-timer/src/timer.js");t.default=function(e,t,n){var o=new r.Timer;return t=null==t?0:+t,o.restart((function(n){o.stop(),e(n+t)}),t,n),o}},"./node_modules/d3-timer/src/timer.js":
/*!********************************************!*\
  !*** ./node_modules/d3-timer/src/timer.js ***!
  \********************************************/
/*! exports provided: now, Timer, timer, timerFlush */function(e,t,n){"use strict";n.r(t),n.d(t,"now",(function(){return h})),n.d(t,"Timer",(function(){return p})),n.d(t,"timer",(function(){return _})),n.d(t,"timerFlush",(function(){return g}));var r,o,u=0,i=0,s=0,a=0,c=0,d=0,l="object"==typeof performance&&performance.now?performance:Date,f="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function h(){return c||(f(m),c=l.now()+d)}function m(){c=0}function p(){this._call=this._time=this._next=null}function _(e,t,n){var r=new p;return r.restart(e,t,n),r}function g(){h(),++u;for(var e,t=r;t;)(e=c-t._time)>=0&&t._call.call(null,e),t=t._next;--u}function v(){c=(a=l.now())+d,u=i=0;try{g()}finally{u=0,function(){var e,t,n=r,u=1/0;for(;n;)n._call?(u>n._time&&(u=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:r=t);o=e,b(u)}(),c=0}}function j(){var e=l.now(),t=e-a;t>1e3&&(d-=t,a=e)}function b(e){u||(i&&(i=clearTimeout(i)),e-c>24?(e<1/0&&(i=setTimeout(v,e-l.now()-d)),s&&(s=clearInterval(s))):(s||(a=l.now(),s=setInterval(j,1e3)),u=1,f(v)))}p.prototype=_.prototype={constructor:p,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?h():+n)+(null==t?0:+t),this._next||o===this||(o?o._next=this:r=this,o=this),this._call=e,this._time=n,b()},stop:function(){this._call&&(this._call=null,this._time=1/0,b())}}},"./node_modules/d3-transition/src/active.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-transition/src/active.js ***!
  \**************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./transition/index.js */"./node_modules/d3-transition/src/transition/index.js"),o=n(/*! ./transition/schedule.js */"./node_modules/d3-transition/src/transition/schedule.js"),u=[null];t.default=function(e,t){var n,i,s=e.__transition;if(s)for(i in t=null==t?null:t+"",s)if((n=s[i]).state>o.SCHEDULED&&n.name===t)return new r.Transition([[e]],u,t,+i);return null}},"./node_modules/d3-transition/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-transition/src/index.js ***!
  \*************************************************/
/*! exports provided: transition, active, interrupt */function(e,t,n){"use strict";n.r(t);n(/*! ./selection/index.js */"./node_modules/d3-transition/src/selection/index.js");var r=n(/*! ./transition/index.js */"./node_modules/d3-transition/src/transition/index.js");n.d(t,"transition",(function(){return r.default}));var o=n(/*! ./active.js */"./node_modules/d3-transition/src/active.js");n.d(t,"active",(function(){return o.default}));var u=n(/*! ./interrupt.js */"./node_modules/d3-transition/src/interrupt.js");n.d(t,"interrupt",(function(){return u.default}))},"./node_modules/d3-transition/src/interrupt.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-transition/src/interrupt.js ***!
  \*****************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./transition/schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e,t){var n,o,u,i=e.__transition,s=!0;if(i){for(u in t=null==t?null:t+"",i)(n=i[u]).name===t?(o=n.state>r.STARTING&&n.state<r.ENDING,n.state=r.ENDED,n.timer.stop(),n.on.call(o?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[u]):s=!1;s&&delete e.__transition}}},"./node_modules/d3-transition/src/selection/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/index.js ***!
  \***********************************************************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./interrupt.js */"./node_modules/d3-transition/src/selection/interrupt.js"),u=n(/*! ./transition.js */"./node_modules/d3-transition/src/selection/transition.js");r.selection.prototype.interrupt=o.default,r.selection.prototype.transition=u.default},"./node_modules/d3-transition/src/selection/interrupt.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/interrupt.js ***!
  \***************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../interrupt.js */"./node_modules/d3-transition/src/interrupt.js");t.default=function(e){return this.each((function(){Object(r.default)(this,e)}))}},"./node_modules/d3-transition/src/selection/transition.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/transition.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ../transition/index.js */"./node_modules/d3-transition/src/transition/index.js"),o=n(/*! ../transition/schedule.js */"./node_modules/d3-transition/src/transition/schedule.js"),u=n(/*! d3-ease */"./node_modules/d3-ease/src/index.js"),i=n(/*! d3-timer */"./node_modules/d3-timer/src/index.js"),s={time:null,delay:0,duration:250,ease:u.easeCubicInOut};function a(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return s.time=Object(i.now)(),s;return n}t.default=function(e){var t,n;e instanceof r.Transition?(t=e._id,e=e._name):(t=Object(r.newId)(),(n=s).time=Object(i.now)(),e=null==e?null:e+"");for(var u=this._groups,c=u.length,d=0;d<c;++d)for(var l,f=u[d],h=f.length,m=0;m<h;++m)(l=f[m])&&Object(o.default)(l,e,t,m,f,n||a(l,t));return new r.Transition(u,this._parents,e,t)}},"./node_modules/d3-transition/src/transition/attr.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/attr.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),o=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),u=n(/*! ./tween.js */"./node_modules/d3-transition/src/transition/tween.js"),i=n(/*! ./interpolate.js */"./node_modules/d3-transition/src/transition/interpolate.js");function s(e){return function(){this.removeAttribute(e)}}function a(e){return function(){this.removeAttributeNS(e.space,e.local)}}function c(e,t,n){var r,o,u=n+"";return function(){var i=this.getAttribute(e);return i===u?null:i===r?o:o=t(r=i,n)}}function d(e,t,n){var r,o,u=n+"";return function(){var i=this.getAttributeNS(e.space,e.local);return i===u?null:i===r?o:o=t(r=i,n)}}function l(e,t,n){var r,o,u;return function(){var i,s,a=n(this);if(null!=a)return(i=this.getAttribute(e))===(s=a+"")?null:i===r&&s===o?u:(o=s,u=t(r=i,a));this.removeAttribute(e)}}function f(e,t,n){var r,o,u;return function(){var i,s,a=n(this);if(null!=a)return(i=this.getAttributeNS(e.space,e.local))===(s=a+"")?null:i===r&&s===o?u:(o=s,u=t(r=i,a));this.removeAttributeNS(e.space,e.local)}}t.default=function(e,t){var n=Object(o.namespace)(e),h="transform"===n?r.interpolateTransformSvg:i.default;return this.attrTween(e,"function"==typeof t?(n.local?f:l)(n,h,Object(u.tweenValue)(this,"attr."+e,t)):null==t?(n.local?a:s)(n):(n.local?d:c)(n,h,t))}},"./node_modules/d3-transition/src/transition/attrTween.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/attrTween.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");function o(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function u(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function i(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&u(e,o)),n}return o._value=t,o}function s(e,t){var n,r;function u(){var u=t.apply(this,arguments);return u!==r&&(n=(r=u)&&o(e,u)),n}return u._value=t,u}t.default=function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var o=Object(r.namespace)(e);return this.tween(n,(o.local?i:s)(o,t))}},"./node_modules/d3-transition/src/transition/delay.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/delay.js ***!
  \************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){return function(){Object(r.init)(this,e).delay=+t.apply(this,arguments)}}function u(e,t){return t=+t,function(){Object(r.init)(this,e).delay=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?o:u)(t,e)):Object(r.get)(this.node(),t).delay}},"./node_modules/d3-transition/src/transition/duration.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/duration.js ***!
  \***************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){return function(){Object(r.set)(this,e).duration=+t.apply(this,arguments)}}function u(e,t){return t=+t,function(){Object(r.set)(this,e).duration=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?o:u)(t,e)):Object(r.get)(this.node(),t).duration}},"./node_modules/d3-transition/src/transition/ease.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/ease.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){if("function"!=typeof t)throw new Error;return function(){Object(r.set)(this,e).ease=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(o(t,e)):Object(r.get)(this.node(),t).ease}},"./node_modules/d3-transition/src/transition/end.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/end.js ***!
  \**********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");t.default=function(){var e,t,n=this,o=n._id,u=n.size();return new Promise((function(i,s){var a={value:s},c={value:function(){0==--u&&i()}};n.each((function(){var n=Object(r.set)(this,o),u=n.on;u!==e&&((t=(e=u).copy())._.cancel.push(a),t._.interrupt.push(a),t._.end.push(c)),n.on=t}))}))}},"./node_modules/d3-transition/src/transition/filter.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/filter.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./index.js */"./node_modules/d3-transition/src/transition/index.js");t.default=function(e){"function"!=typeof e&&(e=Object(r.matcher)(e));for(var t=this._groups,n=t.length,u=new Array(n),i=0;i<n;++i)for(var s,a=t[i],c=a.length,d=u[i]=[],l=0;l<c;++l)(s=a[l])&&e.call(s,s.__data__,l,a)&&d.push(s);return new o.Transition(u,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/index.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/index.js ***!
  \************************************************************/
/*! exports provided: Transition, default, newId */function(e,t,n){"use strict";n.r(t),n.d(t,"Transition",(function(){return O})),n.d(t,"default",(function(){return M})),n.d(t,"newId",(function(){return S}));var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./attr.js */"./node_modules/d3-transition/src/transition/attr.js"),u=n(/*! ./attrTween.js */"./node_modules/d3-transition/src/transition/attrTween.js"),i=n(/*! ./delay.js */"./node_modules/d3-transition/src/transition/delay.js"),s=n(/*! ./duration.js */"./node_modules/d3-transition/src/transition/duration.js"),a=n(/*! ./ease.js */"./node_modules/d3-transition/src/transition/ease.js"),c=n(/*! ./filter.js */"./node_modules/d3-transition/src/transition/filter.js"),d=n(/*! ./merge.js */"./node_modules/d3-transition/src/transition/merge.js"),l=n(/*! ./on.js */"./node_modules/d3-transition/src/transition/on.js"),f=n(/*! ./remove.js */"./node_modules/d3-transition/src/transition/remove.js"),h=n(/*! ./select.js */"./node_modules/d3-transition/src/transition/select.js"),m=n(/*! ./selectAll.js */"./node_modules/d3-transition/src/transition/selectAll.js"),p=n(/*! ./selection.js */"./node_modules/d3-transition/src/transition/selection.js"),_=n(/*! ./style.js */"./node_modules/d3-transition/src/transition/style.js"),g=n(/*! ./styleTween.js */"./node_modules/d3-transition/src/transition/styleTween.js"),v=n(/*! ./text.js */"./node_modules/d3-transition/src/transition/text.js"),j=n(/*! ./textTween.js */"./node_modules/d3-transition/src/transition/textTween.js"),b=n(/*! ./transition.js */"./node_modules/d3-transition/src/transition/transition.js"),y=n(/*! ./tween.js */"./node_modules/d3-transition/src/transition/tween.js"),x=n(/*! ./end.js */"./node_modules/d3-transition/src/transition/end.js"),w=0;function O(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function M(e){return Object(r.selection)().transition(e)}function S(){return++w}var E=r.selection.prototype;O.prototype=M.prototype={constructor:O,select:h.default,selectAll:m.default,filter:c.default,merge:d.default,selection:p.default,transition:b.default,call:E.call,nodes:E.nodes,node:E.node,size:E.size,empty:E.empty,each:E.each,on:l.default,attr:o.default,attrTween:u.default,style:_.default,styleTween:g.default,text:v.default,textTween:j.default,remove:f.default,tween:y.default,delay:i.default,duration:s.default,ease:a.default,end:x.default}},"./node_modules/d3-transition/src/transition/interpolate.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/interpolate.js ***!
  \******************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-color */"./node_modules/d3-color/src/index.js"),o=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js");t.default=function(e,t){var n;return("number"==typeof t?o.interpolateNumber:t instanceof r.color?o.interpolateRgb:(n=Object(r.color)(t))?(t=n,o.interpolateRgb):o.interpolateString)(e,t)}},"./node_modules/d3-transition/src/transition/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/merge.js ***!
  \************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index.js */"./node_modules/d3-transition/src/transition/index.js");t.default=function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,o=t.length,u=n.length,i=Math.min(o,u),s=new Array(o),a=0;a<i;++a)for(var c,d=t[a],l=n[a],f=d.length,h=s[a]=new Array(f),m=0;m<f;++m)(c=d[m]||l[m])&&(h[m]=c);for(;a<o;++a)s[a]=t[a];return new r.Transition(s,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/on.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/on.js ***!
  \*********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");function o(e,t,n){var o,u,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?r.init:r.set;return function(){var r=i(this,e),s=r.on;s!==o&&(u=(o=s).copy()).on(t,n),r.on=u}}t.default=function(e,t){var n=this._id;return arguments.length<2?Object(r.get)(this.node(),n).on.on(e):this.each(o(n,e,t))}},"./node_modules/d3-transition/src/transition/remove.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/remove.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e}},"./node_modules/d3-transition/src/transition/schedule.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/schedule.js ***!
  \***************************************************************/
/*! exports provided: CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED, default, init, set, get */function(e,t,n){"use strict";n.r(t),n.d(t,"CREATED",(function(){return s})),n.d(t,"SCHEDULED",(function(){return a})),n.d(t,"STARTING",(function(){return c})),n.d(t,"STARTED",(function(){return d})),n.d(t,"RUNNING",(function(){return l})),n.d(t,"ENDING",(function(){return f})),n.d(t,"ENDED",(function(){return h})),n.d(t,"init",(function(){return m})),n.d(t,"set",(function(){return p})),n.d(t,"get",(function(){return _}));var r=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js"),o=n(/*! d3-timer */"./node_modules/d3-timer/src/index.js"),u=Object(r.dispatch)("start","end","cancel","interrupt"),i=[],s=0,a=1,c=2,d=3,l=4,f=5,h=6;function m(e,t){var n=_(e,t);if(n.state>s)throw new Error("too late; already scheduled");return n}function p(e,t){var n=_(e,t);if(n.state>d)throw new Error("too late; already running");return n}function _(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}t.default=function(e,t,n,r,m,p){var _=e.__transition;if(_){if(n in _)return}else e.__transition={};!function(e,t,n){var r,u=e.__transition;function i(f){var p,_,g,v;if(n.state!==a)return m();for(p in u)if((v=u[p]).name===n.name){if(v.state===d)return Object(o.timeout)(i);v.state===l?(v.state=h,v.timer.stop(),v.on.call("interrupt",e,e.__data__,v.index,v.group),delete u[p]):+p<t&&(v.state=h,v.timer.stop(),v.on.call("cancel",e,e.__data__,v.index,v.group),delete u[p])}if(Object(o.timeout)((function(){n.state===d&&(n.state=l,n.timer.restart(s,n.delay,n.time),s(f))})),n.state=c,n.on.call("start",e,e.__data__,n.index,n.group),n.state===c){for(n.state=d,r=new Array(g=n.tween.length),p=0,_=-1;p<g;++p)(v=n.tween[p].value.call(e,e.__data__,n.index,n.group))&&(r[++_]=v);r.length=_+1}}function s(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(m),n.state=f,1),u=-1,i=r.length;++u<i;)r[u].call(e,o);n.state===f&&(n.on.call("end",e,e.__data__,n.index,n.group),m())}function m(){for(var r in n.state=h,n.timer.stop(),delete u[t],u)return;delete e.__transition}u[t]=n,n.timer=Object(o.timer)((function(e){n.state=a,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:m,on:u,tween:i,time:p.time,delay:p.delay,duration:p.duration,ease:p.ease,timer:null,state:s})}},"./node_modules/d3-transition/src/transition/select.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/select.js ***!
  \*************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./index.js */"./node_modules/d3-transition/src/transition/index.js"),u=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Object(r.selector)(e));for(var i=this._groups,s=i.length,a=new Array(s),c=0;c<s;++c)for(var d,l,f=i[c],h=f.length,m=a[c]=new Array(h),p=0;p<h;++p)(d=f[p])&&(l=e.call(d,d.__data__,p,f))&&("__data__"in d&&(l.__data__=d.__data__),m[p]=l,Object(u.default)(m[p],t,n,p,m,Object(u.get)(d,n)));return new o.Transition(a,this._parents,t,n)}},"./node_modules/d3-transition/src/transition/selectAll.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/selectAll.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),o=n(/*! ./index.js */"./node_modules/d3-transition/src/transition/index.js"),u=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Object(r.selectorAll)(e));for(var i=this._groups,s=i.length,a=[],c=[],d=0;d<s;++d)for(var l,f=i[d],h=f.length,m=0;m<h;++m)if(l=f[m]){for(var p,_=e.call(l,l.__data__,m,f),g=Object(u.get)(l,n),v=0,j=_.length;v<j;++v)(p=_[v])&&Object(u.default)(p,t,n,v,_,g);a.push(_),c.push(l)}return new o.Transition(a,c,t,n)}},"./node_modules/d3-transition/src/transition/selection.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/selection.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js").selection.prototype.constructor;t.default=function(){return new r(this._groups,this._parents)}},"./node_modules/d3-transition/src/transition/style.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/style.js ***!
  \************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),o=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),u=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js"),i=n(/*! ./tween.js */"./node_modules/d3-transition/src/transition/tween.js"),s=n(/*! ./interpolate.js */"./node_modules/d3-transition/src/transition/interpolate.js");function a(e){return function(){this.style.removeProperty(e)}}t.default=function(e,t,n){var c="transform"==(e+="")?r.interpolateTransformCss:s.default;return null==t?this.styleTween(e,function(e,t){var n,r,u;return function(){var i=Object(o.style)(this,e),s=(this.style.removeProperty(e),Object(o.style)(this,e));return i===s?null:i===n&&s===r?u:u=t(n=i,r=s)}}(e,c)).on("end.style."+e,a(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,u,i;return function(){var s=Object(o.style)(this,e),a=n(this),c=a+"";return null==a&&(this.style.removeProperty(e),c=a=Object(o.style)(this,e)),s===c?null:s===r&&c===u?i:(u=c,i=t(r=s,a))}}(e,c,Object(i.tweenValue)(this,"style."+e,t))).each(function(e,t){var n,r,o,i,s="style."+t,c="end."+s;return function(){var d=Object(u.set)(this,e),l=d.on,f=null==d.value[s]?i||(i=a(t)):void 0;l===n&&o===f||(r=(n=l).copy()).on(c,o=f),d.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,u,i=n+"";return function(){var s=Object(o.style)(this,e);return s===i?null:s===r?u:u=t(r=s,n)}}(e,c,t),n).on("end.style."+e,null)}},"./node_modules/d3-transition/src/transition/styleTween.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/styleTween.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function o(e,t,n){var o,u;function i(){var i=t.apply(this,arguments);return i!==u&&(o=(u=i)&&r(e,i,n)),o}return i._value=t,i}n.r(t),t.default=function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,o(e,t,null==n?"":n))}},"./node_modules/d3-transition/src/transition/text.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/text.js ***!
  \***********************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./tween.js */"./node_modules/d3-transition/src/transition/tween.js");t.default=function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Object(r.tweenValue)(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))}},"./node_modules/d3-transition/src/transition/textTween.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/textTween.js ***!
  \****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e){return function(t){this.textContent=e.call(this,t)}}function o(e){var t,n;function o(){var o=e.apply(this,arguments);return o!==n&&(t=(n=o)&&r(o)),t}return o._value=e,o}n.r(t),t.default=function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,o(e))}},"./node_modules/d3-transition/src/transition/transition.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/transition.js ***!
  \*****************************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./index.js */"./node_modules/d3-transition/src/transition/index.js"),o=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");t.default=function(){for(var e=this._name,t=this._id,n=Object(r.newId)(),u=this._groups,i=u.length,s=0;s<i;++s)for(var a,c=u[s],d=c.length,l=0;l<d;++l)if(a=c[l]){var f=Object(o.get)(a,t);Object(o.default)(a,e,n,l,c,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new r.Transition(u,this._parents,e,n)}},"./node_modules/d3-transition/src/transition/tween.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/tween.js ***!
  \************************************************************/
/*! exports provided: default, tweenValue */function(e,t,n){"use strict";n.r(t),n.d(t,"tweenValue",(function(){return i}));var r=n(/*! ./schedule.js */"./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){var n,o;return function(){var u=Object(r.set)(this,e),i=u.tween;if(i!==n)for(var s=0,a=(o=n=i).length;s<a;++s)if(o[s].name===t){(o=o.slice()).splice(s,1);break}u.tween=o}}function u(e,t,n){var o,u;if("function"!=typeof n)throw new Error;return function(){var i=Object(r.set)(this,e),s=i.tween;if(s!==o){u=(o=s).slice();for(var a={name:t,value:n},c=0,d=u.length;c<d;++c)if(u[c].name===t){u[c]=a;break}c===d&&u.push(a)}i.tween=u}}function i(e,t,n){var o=e._id;return e.each((function(){var e=Object(r.set)(this,o);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return Object(r.get)(e,o).value[t]}}t.default=function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var i,s=Object(r.get)(this.node(),n).tween,a=0,c=s.length;a<c;++a)if((i=s[a]).name===e)return i.value;return null}return this.each((null==t?o:u)(n,e,t))}},"./node_modules/d3-voronoi/src/Beach.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-voronoi/src/Beach.js ***!
  \**********************************************/
/*! exports provided: removeBeach, addBeach */function(e,t,n){"use strict";n.r(t),n.d(t,"removeBeach",(function(){return f})),n.d(t,"addBeach",(function(){return h}));var r=n(/*! ./RedBlackTree */"./node_modules/d3-voronoi/src/RedBlackTree.js"),o=n(/*! ./Cell */"./node_modules/d3-voronoi/src/Cell.js"),u=n(/*! ./Circle */"./node_modules/d3-voronoi/src/Circle.js"),i=n(/*! ./Edge */"./node_modules/d3-voronoi/src/Edge.js"),s=n(/*! ./Diagram */"./node_modules/d3-voronoi/src/Diagram.js"),a=[];function c(){Object(r.RedBlackNode)(this),this.edge=this.site=this.circle=null}function d(e){var t=a.pop()||new c;return t.site=e,t}function l(e){Object(u.detachCircle)(e),s.beaches.remove(e),a.push(e),Object(r.RedBlackNode)(e)}function f(e){var t=e.circle,n=t.x,r=t.cy,o=[n,r],a=e.P,c=e.N,d=[e];l(e);for(var f=a;f.circle&&Math.abs(n-f.circle.x)<s.epsilon&&Math.abs(r-f.circle.cy)<s.epsilon;)a=f.P,d.unshift(f),l(f),f=a;d.unshift(f),Object(u.detachCircle)(f);for(var h=c;h.circle&&Math.abs(n-h.circle.x)<s.epsilon&&Math.abs(r-h.circle.cy)<s.epsilon;)c=h.N,d.push(h),l(h),h=c;d.push(h),Object(u.detachCircle)(h);var m,p=d.length;for(m=1;m<p;++m)h=d[m],f=d[m-1],Object(i.setEdgeEnd)(h.edge,f.site,h.site,o);f=d[0],(h=d[p-1]).edge=Object(i.createEdge)(f.site,h.site,null,o),Object(u.attachCircle)(f),Object(u.attachCircle)(h)}function h(e){for(var t,n,r,a,c=e[0],l=e[1],f=s.beaches._;f;)if((r=m(f,l)-c)>s.epsilon)f=f.L;else{if(!((a=c-p(f,l))>s.epsilon)){r>-s.epsilon?(t=f.P,n=f):a>-s.epsilon?(t=f,n=f.N):t=n=f;break}if(!f.R){t=f;break}f=f.R}Object(o.createCell)(e);var h=d(e);if(s.beaches.insert(t,h),t||n){if(t===n)return Object(u.detachCircle)(t),n=d(t.site),s.beaches.insert(h,n),h.edge=n.edge=Object(i.createEdge)(t.site,h.site),Object(u.attachCircle)(t),void Object(u.attachCircle)(n);if(n){Object(u.detachCircle)(t),Object(u.detachCircle)(n);var _=t.site,g=_[0],v=_[1],j=e[0]-g,b=e[1]-v,y=n.site,x=y[0]-g,w=y[1]-v,O=2*(j*w-b*x),M=j*j+b*b,S=x*x+w*w,E=[(w*M-b*S)/O+g,(j*S-x*M)/O+v];Object(i.setEdgeEnd)(n.edge,_,y,E),h.edge=Object(i.createEdge)(_,e,null,E),n.edge=Object(i.createEdge)(e,y,null,E),Object(u.attachCircle)(t),Object(u.attachCircle)(n)}else h.edge=Object(i.createEdge)(t.site,h.site)}}function m(e,t){var n=e.site,r=n[0],o=n[1],u=o-t;if(!u)return r;var i=e.P;if(!i)return-1/0;var s=(n=i.site)[0],a=n[1],c=a-t;if(!c)return s;var d=s-r,l=1/u-1/c,f=d/c;return l?(-f+Math.sqrt(f*f-2*l*(d*d/(-2*c)-a+c/2+o-u/2)))/l+r:(r+s)/2}function p(e,t){var n=e.N;if(n)return m(n,t);var r=e.site;return r[1]===t?r[0]:1/0}},"./node_modules/d3-voronoi/src/Cell.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-voronoi/src/Cell.js ***!
  \*********************************************/
/*! exports provided: createCell, cellHalfedgeStart, cellHalfedgeEnd, sortCellHalfedges, clipCells */function(e,t,n){"use strict";n.r(t),n.d(t,"createCell",(function(){return u})),n.d(t,"cellHalfedgeStart",(function(){return s})),n.d(t,"cellHalfedgeEnd",(function(){return a})),n.d(t,"sortCellHalfedges",(function(){return c})),n.d(t,"clipCells",(function(){return d}));var r=n(/*! ./Edge */"./node_modules/d3-voronoi/src/Edge.js"),o=n(/*! ./Diagram */"./node_modules/d3-voronoi/src/Diagram.js");function u(e){return o.cells[e.index]={site:e,halfedges:[]}}function i(e,t){var n=e.site,r=t.left,o=t.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=t[1],o=t[0]):(r=t[0],o=t[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function s(e,t){return t[+(t.left!==e.site)]}function a(e,t){return t[+(t.left===e.site)]}function c(){for(var e,t,n,r,u=0,s=o.cells.length;u<s;++u)if((e=o.cells[u])&&(r=(t=e.halfedges).length)){var a=new Array(r),c=new Array(r);for(n=0;n<r;++n)a[n]=n,c[n]=i(e,o.edges[t[n]]);for(a.sort((function(e,t){return c[t]-c[e]})),n=0;n<r;++n)c[n]=t[a[n]];for(n=0;n<r;++n)t[n]=c[n]}}function d(e,t,n,u){var i,c,d,l,f,h,m,p,_,g,v,j,b=o.cells.length,y=!0;for(i=0;i<b;++i)if(c=o.cells[i]){for(d=c.site,l=(f=c.halfedges).length;l--;)o.edges[f[l]]||f.splice(l,1);for(l=0,h=f.length;l<h;)v=(g=a(c,o.edges[f[l]]))[0],j=g[1],p=(m=s(c,o.edges[f[++l%h]]))[0],_=m[1],(Math.abs(v-p)>o.epsilon||Math.abs(j-_)>o.epsilon)&&(f.splice(l,0,o.edges.push(Object(r.createBorderEdge)(d,g,Math.abs(v-e)<o.epsilon&&u-j>o.epsilon?[e,Math.abs(p-e)<o.epsilon?_:u]:Math.abs(j-u)<o.epsilon&&n-v>o.epsilon?[Math.abs(_-u)<o.epsilon?p:n,u]:Math.abs(v-n)<o.epsilon&&j-t>o.epsilon?[n,Math.abs(p-n)<o.epsilon?_:t]:Math.abs(j-t)<o.epsilon&&v-e>o.epsilon?[Math.abs(_-t)<o.epsilon?p:e,t]:null))-1),++h);h&&(y=!1)}if(y){var x,w,O,M=1/0;for(i=0,y=null;i<b;++i)(c=o.cells[i])&&(O=(x=(d=c.site)[0]-e)*x+(w=d[1]-t)*w)<M&&(M=O,y=c);if(y){var S=[e,t],E=[e,u],k=[n,u],C=[n,t];y.halfedges.push(o.edges.push(Object(r.createBorderEdge)(d=y.site,S,E))-1,o.edges.push(Object(r.createBorderEdge)(d,E,k))-1,o.edges.push(Object(r.createBorderEdge)(d,k,C))-1,o.edges.push(Object(r.createBorderEdge)(d,C,S))-1)}}for(i=0;i<b;++i)(c=o.cells[i])&&(c.halfedges.length||delete o.cells[i])}},"./node_modules/d3-voronoi/src/Circle.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-voronoi/src/Circle.js ***!
  \***********************************************/
/*! exports provided: firstCircle, attachCircle, detachCircle */function(e,t,n){"use strict";n.r(t),n.d(t,"firstCircle",(function(){return r})),n.d(t,"attachCircle",(function(){return a})),n.d(t,"detachCircle",(function(){return c}));var r,o=n(/*! ./RedBlackTree */"./node_modules/d3-voronoi/src/RedBlackTree.js"),u=n(/*! ./Diagram */"./node_modules/d3-voronoi/src/Diagram.js"),i=[];function s(){Object(o.RedBlackNode)(this),this.x=this.y=this.arc=this.site=this.cy=null}function a(e){var t=e.P,n=e.N;if(t&&n){var o=t.site,a=e.site,c=n.site;if(o!==c){var d=a[0],l=a[1],f=o[0]-d,h=o[1]-l,m=c[0]-d,p=c[1]-l,_=2*(f*p-h*m);if(!(_>=-u.epsilon2)){var g=f*f+h*h,v=m*m+p*p,j=(p*g-h*v)/_,b=(f*v-m*g)/_,y=i.pop()||new s;y.arc=e,y.site=a,y.x=j+d,y.y=(y.cy=b+l)+Math.sqrt(j*j+b*b),e.circle=y;for(var x=null,w=u.circles._;w;)if(y.y<w.y||y.y===w.y&&y.x<=w.x){if(!w.L){x=w.P;break}w=w.L}else{if(!w.R){x=w;break}w=w.R}u.circles.insert(x,y),x||(r=y)}}}}function c(e){var t=e.circle;t&&(t.P||(r=t.N),u.circles.remove(t),i.push(t),Object(o.RedBlackNode)(t),e.circle=null)}},"./node_modules/d3-voronoi/src/Diagram.js":
/*!************************************************!*\
  !*** ./node_modules/d3-voronoi/src/Diagram.js ***!
  \************************************************/
/*! exports provided: epsilon, epsilon2, beaches, cells, circles, edges, default */function(e,t,n){"use strict";n.r(t),n.d(t,"epsilon",(function(){return f})),n.d(t,"epsilon2",(function(){return h})),n.d(t,"beaches",(function(){return r})),n.d(t,"cells",(function(){return o})),n.d(t,"circles",(function(){return u})),n.d(t,"edges",(function(){return i})),n.d(t,"default",(function(){return p}));var r,o,u,i,s=n(/*! ./Beach */"./node_modules/d3-voronoi/src/Beach.js"),a=n(/*! ./Cell */"./node_modules/d3-voronoi/src/Cell.js"),c=n(/*! ./Circle */"./node_modules/d3-voronoi/src/Circle.js"),d=n(/*! ./Edge */"./node_modules/d3-voronoi/src/Edge.js"),l=n(/*! ./RedBlackTree */"./node_modules/d3-voronoi/src/RedBlackTree.js"),f=1e-6,h=1e-12;function m(e,t){return t[1]-e[1]||t[0]-e[0]}function p(e,t){var n,f,h,p=e.sort(m).pop();for(i=[],o=new Array(e.length),r=new l.default,u=new l.default;;)if(h=c.firstCircle,p&&(!h||p[1]<h.y||p[1]===h.y&&p[0]<h.x))p[0]===n&&p[1]===f||(Object(s.addBeach)(p),n=p[0],f=p[1]),p=e.pop();else{if(!h)break;Object(s.removeBeach)(h.arc)}if(Object(a.sortCellHalfedges)(),t){var _=+t[0][0],g=+t[0][1],v=+t[1][0],j=+t[1][1];Object(d.clipEdges)(_,g,v,j),Object(a.clipCells)(_,g,v,j)}this.edges=i,this.cells=o,r=u=i=o=null}p.prototype={constructor:p,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return Object(a.cellHalfedgeStart)(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(u=(o=n.halfedges).length)for(var o,u,i,s,a,c,d=n.site,l=-1,f=t[o[u-1]],h=f.left===d?f.right:f.left;++l<u;)i=h,h=(f=t[o[l]]).left===d?f.right:f.left,i&&h&&r<i.index&&r<h.index&&(a=i,c=h,((s=d)[0]-c[0])*(a[1]-s[1])-(s[0]-a[0])*(c[1]-s[1])<0)&&e.push([d.data,i.data,h.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,o,u=this,i=u._found||0,s=u.cells.length;!(o=u.cells[i]);)if(++i>=s)return null;var a=e-o.site[0],c=t-o.site[1],d=a*a+c*c;do{o=u.cells[r=i],i=null,o.halfedges.forEach((function(n){var r=u.edges[n],s=r.left;if(s!==o.site&&s||(s=r.right)){var a=e-s[0],c=t-s[1],l=a*a+c*c;l<d&&(d=l,i=s.index)}}))}while(null!==i);return u._found=r,null==n||d<=n*n?o.site:null}}},"./node_modules/d3-voronoi/src/Edge.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-voronoi/src/Edge.js ***!
  \*********************************************/
/*! exports provided: createEdge, createBorderEdge, setEdgeEnd, clipEdges */function(e,t,n){"use strict";n.r(t),n.d(t,"createEdge",(function(){return o})),n.d(t,"createBorderEdge",(function(){return u})),n.d(t,"setEdgeEnd",(function(){return i})),n.d(t,"clipEdges",(function(){return c}));var r=n(/*! ./Diagram */"./node_modules/d3-voronoi/src/Diagram.js");function o(e,t,n,o){var u=[null,null],s=r.edges.push(u)-1;return u.left=e,u.right=t,n&&i(u,e,t,n),o&&i(u,t,e,o),r.cells[e.index].halfedges.push(s),r.cells[t.index].halfedges.push(s),u}function u(e,t,n){var r=[t,n];return r.left=e,r}function i(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function s(e,t,n,r,o){var u,i=e[0],s=e[1],a=i[0],c=i[1],d=0,l=1,f=s[0]-a,h=s[1]-c;if(u=t-a,f||!(u>0)){if(u/=f,f<0){if(u<d)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>d&&(d=u)}if(u=r-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>d&&(d=u)}else if(f>0){if(u<d)return;u<l&&(l=u)}if(u=n-c,h||!(u>0)){if(u/=h,h<0){if(u<d)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>d&&(d=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>d&&(d=u)}else if(h>0){if(u<d)return;u<l&&(l=u)}return!(d>0||l<1)||(d>0&&(e[0]=[a+d*f,c+d*h]),l<1&&(e[1]=[a+l*f,c+l*h]),!0)}}}}}function a(e,t,n,r,o){var u=e[1];if(u)return!0;var i,s,a=e[0],c=e.left,d=e.right,l=c[0],f=c[1],h=d[0],m=d[1],p=(l+h)/2,_=(f+m)/2;if(m===f){if(p<t||p>=r)return;if(l>h){if(a){if(a[1]>=o)return}else a=[p,n];u=[p,o]}else{if(a){if(a[1]<n)return}else a=[p,o];u=[p,n]}}else if(s=_-(i=(l-h)/(m-f))*p,i<-1||i>1)if(l>h){if(a){if(a[1]>=o)return}else a=[(n-s)/i,n];u=[(o-s)/i,o]}else{if(a){if(a[1]<n)return}else a=[(o-s)/i,o];u=[(n-s)/i,n]}else if(f<m){if(a){if(a[0]>=r)return}else a=[t,i*t+s];u=[r,i*r+s]}else{if(a){if(a[0]<t)return}else a=[r,i*r+s];u=[t,i*t+s]}return e[0]=a,e[1]=u,!0}function c(e,t,n,o){for(var u,i=r.edges.length;i--;)a(u=r.edges[i],e,t,n,o)&&s(u,e,t,n,o)&&(Math.abs(u[0][0]-u[1][0])>r.epsilon||Math.abs(u[0][1]-u[1][1])>r.epsilon)||delete r.edges[i]}},"./node_modules/d3-voronoi/src/RedBlackTree.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-voronoi/src/RedBlackTree.js ***!
  \*****************************************************/
/*! exports provided: RedBlackNode, default */function(e,t,n){"use strict";function r(){this._=null}function o(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function u(e,t){var n=t,r=t.R,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function i(e,t){var n=t,r=t.L,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function s(e){for(;e.L;)e=e.L;return e}n.r(t),n.d(t,"RedBlackNode",(function(){return o})),r.prototype={constructor:r,insert:function(e,t){var n,r,o;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=s(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.R&&(u(this,n),n=(e=n).U),n.C=!1,r.C=!0,i(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.L&&(i(this,n),n=(e=n).U),n.C=!1,r.C=!0,u(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,o=e.U,a=e.L,c=e.R;if(n=a?c?s(c):a:c,o?o.L===e?o.L=n:o.R=n:this._=n,a&&c?(r=n.C,n.C=e.C,n.L=a,a.U=n,n!==c?(o=n.U,n.U=e.U,e=n.R,o.L=e,n.R=c,c.U=n):(n.U=o,o=n,e=n.R)):(r=e.C,e=n),e&&(e.U=o),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===o.L){if((t=o.R).C&&(t.C=!1,o.C=!0,u(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,i(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,u(this,o),e=this._;break}}else if((t=o.L).C&&(t.C=!1,o.C=!0,i(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,u(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,i(this,o),e=this._;break}t.C=!0,e=o,o=o.U}while(!e.C);e&&(e.C=!1)}}},t.default=r},"./node_modules/d3-voronoi/src/constant.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-voronoi/src/constant.js ***!
  \*************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-voronoi/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-voronoi/src/index.js ***!
  \**********************************************/
/*! exports provided: voronoi */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./voronoi */"./node_modules/d3-voronoi/src/voronoi.js");n.d(t,"voronoi",(function(){return r.default}))},"./node_modules/d3-voronoi/src/point.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-voronoi/src/point.js ***!
  \**********************************************/
/*! exports provided: x, y */function(e,t,n){"use strict";function r(e){return e[0]}function o(e){return e[1]}n.r(t),n.d(t,"x",(function(){return r})),n.d(t,"y",(function(){return o}))},"./node_modules/d3-voronoi/src/voronoi.js":
/*!************************************************!*\
  !*** ./node_modules/d3-voronoi/src/voronoi.js ***!
  \************************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./constant */"./node_modules/d3-voronoi/src/constant.js"),o=n(/*! ./point */"./node_modules/d3-voronoi/src/point.js"),u=n(/*! ./Diagram */"./node_modules/d3-voronoi/src/Diagram.js");t.default=function(){var e=o.x,t=o.y,n=null;function i(r){return new u.default(r.map((function(n,o){var i=[Math.round(e(n,o,r)/u.epsilon)*u.epsilon,Math.round(t(n,o,r)/u.epsilon)*u.epsilon];return i.index=o,i.data=n,i})),n)}return i.polygons=function(e){return i(e).polygons()},i.links=function(e){return i(e).links()},i.triangles=function(e){return i(e).triangles()},i.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),i):e},i.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(r.default)(+e),i):t},i.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],i):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},i.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],i):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},i}},"./node_modules/d3-zoom/src/constant.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-zoom/src/constant.js ***!
  \**********************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-zoom/src/event.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-zoom/src/event.js ***!
  \*******************************************/
/*! exports provided: default */function(e,t,n){"use strict";function r(e,t,n){this.target=e,this.type=t,this.transform=n}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-zoom/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-zoom/src/index.js ***!
  \*******************************************/
/*! exports provided: zoom, zoomTransform, zoomIdentity */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./zoom.js */"./node_modules/d3-zoom/src/zoom.js");n.d(t,"zoom",(function(){return r.default}));var o=n(/*! ./transform.js */"./node_modules/d3-zoom/src/transform.js");n.d(t,"zoomTransform",(function(){return o.default})),n.d(t,"zoomIdentity",(function(){return o.identity}))},"./node_modules/d3-zoom/src/noevent.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-zoom/src/noevent.js ***!
  \*********************************************/
/*! exports provided: nopropagation, default */function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-zoom/src/transform.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-zoom/src/transform.js ***!
  \***********************************************/
/*! exports provided: Transform, identity, default */function(e,t,n){"use strict";function r(e,t,n){this.k=e,this.x=t,this.y=n}n.r(t),n.d(t,"Transform",(function(){return r})),n.d(t,"identity",(function(){return o})),n.d(t,"default",(function(){return u})),r.prototype={constructor:r,scale:function(e){return 1===e?this:new r(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new r(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var o=new r(1,0,0);function u(e){for(;!e.__zoom;)if(!(e=e.parentNode))return o;return e.__zoom}u.prototype=r.prototype},"./node_modules/d3-zoom/src/zoom.js":
/*!******************************************!*\
  !*** ./node_modules/d3-zoom/src/zoom.js ***!
  \******************************************/
/*! exports provided: default */function(e,t,n){"use strict";n.r(t);var r=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js"),o=n(/*! d3-drag */"./node_modules/d3-drag/src/index.js"),u=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js"),i=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js"),s=n(/*! d3-transition */"./node_modules/d3-transition/src/index.js"),a=n(/*! ./constant.js */"./node_modules/d3-zoom/src/constant.js"),c=n(/*! ./event.js */"./node_modules/d3-zoom/src/event.js"),d=n(/*! ./transform.js */"./node_modules/d3-zoom/src/transform.js"),l=n(/*! ./noevent.js */"./node_modules/d3-zoom/src/noevent.js");function f(){return!i.event.ctrlKey&&!i.event.button}function h(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function m(){return this.__zoom||d.identity}function p(){return-i.event.deltaY*(1===i.event.deltaMode?.05:i.event.deltaMode?1:.002)}function _(){return navigator.maxTouchPoints||"ontouchstart"in this}function g(e,t,n){var r=e.invertX(t[0][0])-n[0][0],o=e.invertX(t[1][0])-n[1][0],u=e.invertY(t[0][1])-n[0][1],i=e.invertY(t[1][1])-n[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),i>u?(u+i)/2:Math.min(0,u)||Math.max(0,i))}t.default=function(){var e,t,n=f,v=h,j=g,b=p,y=_,x=[0,1/0],w=[[-1/0,-1/0],[1/0,1/0]],O=250,M=u.interpolateZoom,S=Object(r.dispatch)("start","zoom","end"),E=0;function k(e){e.property("__zoom",m).on("wheel.zoom",I).on("mousedown.zoom",q).on("dblclick.zoom",B).filter(y).on("touchstart.zoom",F).on("touchmove.zoom",L).on("touchend.zoom touchcancel.zoom",z).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function C(e,t){return(t=Math.max(x[0],Math.min(x[1],t)))===e.k?e:new d.Transform(t,e.x,e.y)}function A(e,t,n){var r=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return r===e.x&&o===e.y?e:new d.Transform(e.k,r,o)}function T(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function R(e,t,n){e.on("start.zoom",(function(){N(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){N(this,arguments).end()})).tween("zoom",(function(){var e=this,r=arguments,o=N(e,r),u=v.apply(e,r),i=null==n?T(u):"function"==typeof n?n.apply(e,r):n,s=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),a=e.__zoom,c="function"==typeof t?t.apply(e,r):t,l=M(a.invert(i).concat(s/a.k),c.invert(i).concat(s/c.k));return function(e){if(1===e)e=c;else{var t=l(e),n=s/t[2];e=new d.Transform(n,i[0]-t[0]*n,i[1]-t[1]*n)}o.zoom(null,e)}}))}function N(e,t,n){return!n&&e.__zooming||new P(e,t)}function P(e,t){this.that=e,this.args=t,this.active=0,this.extent=v.apply(e,t),this.taps=0}function I(){if(n.apply(this,arguments)){var e=N(this,arguments),t=this.__zoom,r=Math.max(x[0],Math.min(x[1],t.k*Math.pow(2,b.apply(this,arguments)))),o=Object(i.mouse)(this);if(e.wheel)e.mouse[0][0]===o[0]&&e.mouse[0][1]===o[1]||(e.mouse[1]=t.invert(e.mouse[0]=o)),clearTimeout(e.wheel);else{if(t.k===r)return;e.mouse=[o,t.invert(o)],Object(s.interrupt)(this),e.start()}Object(l.default)(),e.wheel=setTimeout(u,150),e.zoom("mouse",j(A(C(t,r),e.mouse[0],e.mouse[1]),e.extent,w))}function u(){e.wheel=null,e.end()}}function q(){if(!t&&n.apply(this,arguments)){var e=N(this,arguments,!0),r=Object(i.select)(i.event.view).on("mousemove.zoom",d,!0).on("mouseup.zoom",f,!0),u=Object(i.mouse)(this),a=i.event.clientX,c=i.event.clientY;Object(o.dragDisable)(i.event.view),Object(l.nopropagation)(),e.mouse=[u,this.__zoom.invert(u)],Object(s.interrupt)(this),e.start()}function d(){if(Object(l.default)(),!e.moved){var t=i.event.clientX-a,n=i.event.clientY-c;e.moved=t*t+n*n>E}e.zoom("mouse",j(A(e.that.__zoom,e.mouse[0]=Object(i.mouse)(e.that),e.mouse[1]),e.extent,w))}function f(){r.on("mousemove.zoom mouseup.zoom",null),Object(o.dragEnable)(i.event.view,e.moved),Object(l.default)(),e.end()}}function B(){if(n.apply(this,arguments)){var e=this.__zoom,t=Object(i.mouse)(this),r=e.invert(t),o=e.k*(i.event.shiftKey?.5:2),u=j(A(C(e,o),t,r),v.apply(this,arguments),w);Object(l.default)(),O>0?Object(i.select)(this).transition().duration(O).call(R,u,t):Object(i.select)(this).call(k.transform,u)}}function F(){if(n.apply(this,arguments)){var t,r,o,u,a=i.event.touches,c=a.length,d=N(this,arguments,i.event.changedTouches.length===c);for(Object(l.nopropagation)(),r=0;r<c;++r)o=a[r],u=[u=Object(i.touch)(this,a,o.identifier),this.__zoom.invert(u),o.identifier],d.touch0?d.touch1||d.touch0[2]===u[2]||(d.touch1=u,d.taps=0):(d.touch0=u,t=!0,d.taps=1+!!e);e&&(e=clearTimeout(e)),t&&(d.taps<2&&(e=setTimeout((function(){e=null}),500)),Object(s.interrupt)(this),d.start())}}function L(){if(this.__zooming){var t,n,r,o,u=N(this,arguments),s=i.event.changedTouches,a=s.length;for(Object(l.default)(),e&&(e=clearTimeout(e)),u.taps=0,t=0;t<a;++t)n=s[t],r=Object(i.touch)(this,s,n.identifier),u.touch0&&u.touch0[2]===n.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===n.identifier&&(u.touch1[0]=r);if(n=u.that.__zoom,u.touch1){var c=u.touch0[0],d=u.touch0[1],f=u.touch1[0],h=u.touch1[1],m=(m=f[0]-c[0])*m+(m=f[1]-c[1])*m,p=(p=h[0]-d[0])*p+(p=h[1]-d[1])*p;n=C(n,Math.sqrt(m/p)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],o=[(d[0]+h[0])/2,(d[1]+h[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],o=u.touch0[1]}u.zoom("touch",j(A(n,r,o),u.extent,w))}}function z(){if(this.__zooming){var e,n,r=N(this,arguments),o=i.event.changedTouches,u=o.length;for(Object(l.nopropagation)(),t&&clearTimeout(t),t=setTimeout((function(){t=null}),500),e=0;e<u;++e)n=o[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var s=Object(i.select)(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return k.transform=function(e,t,n){var r=e.selection?e.selection():e;r.property("__zoom",m),e!==r?R(e,t,n):r.interrupt().each((function(){N(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},k.scaleBy=function(e,t,n){k.scaleTo(e,(function(){var e=this.__zoom.k,n="function"==typeof t?t.apply(this,arguments):t;return e*n}),n)},k.scaleTo=function(e,t,n){k.transform(e,(function(){var e=v.apply(this,arguments),r=this.__zoom,o=null==n?T(e):"function"==typeof n?n.apply(this,arguments):n,u=r.invert(o),i="function"==typeof t?t.apply(this,arguments):t;return j(A(C(r,i),o,u),e,w)}),n)},k.translateBy=function(e,t,n){k.transform(e,(function(){return j(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),v.apply(this,arguments),w)}))},k.translateTo=function(e,t,n,r){k.transform(e,(function(){var e=v.apply(this,arguments),o=this.__zoom,u=null==r?T(e):"function"==typeof r?r.apply(this,arguments):r;return j(d.identity.translate(u[0],u[1]).scale(o.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,w)}),r)},P.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){Object(i.customEvent)(new c.default(k,e,this.that.__zoom),S.apply,S,[e,this.that,this.args])}},k.wheelDelta=function(e){return arguments.length?(b="function"==typeof e?e:Object(a.default)(+e),k):b},k.filter=function(e){return arguments.length?(n="function"==typeof e?e:Object(a.default)(!!e),k):n},k.touchable=function(e){return arguments.length?(y="function"==typeof e?e:Object(a.default)(!!e),k):y},k.extent=function(e){return arguments.length?(v="function"==typeof e?e:Object(a.default)([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),k):v},k.scaleExtent=function(e){return arguments.length?(x[0]=+e[0],x[1]=+e[1],k):[x[0],x[1]]},k.translateExtent=function(e){return arguments.length?(w[0][0]=+e[0][0],w[1][0]=+e[1][0],w[0][1]=+e[0][1],w[1][1]=+e[1][1],k):[[w[0][0],w[0][1]],[w[1][0],w[1][1]]]},k.constrain=function(e){return arguments.length?(j=e,k):j},k.duration=function(e){return arguments.length?(O=+e,k):O},k.interpolate=function(e){return arguments.length?(M=e,k):M},k.on=function(){var e=S.on.apply(S,arguments);return e===S?k:e},k.clickDistance=function(e){return arguments.length?(E=(e=+e)*e,k):Math.sqrt(E)},k}},"./node_modules/d3/dist/package.js":
/*!*****************************************!*\
  !*** ./node_modules/d3/dist/package.js ***!
  \*****************************************/
/*! exports provided: name, version, description, keywords, homepage, license, author, main, unpkg, jsdelivr, module, repository, files, scripts, devDependencies, dependencies */function(e,t,n){"use strict";n.r(t),n.d(t,"name",(function(){return r})),n.d(t,"version",(function(){return o})),n.d(t,"description",(function(){return u})),n.d(t,"keywords",(function(){return i})),n.d(t,"homepage",(function(){return s})),n.d(t,"license",(function(){return a})),n.d(t,"author",(function(){return c})),n.d(t,"main",(function(){return d})),n.d(t,"unpkg",(function(){return l})),n.d(t,"jsdelivr",(function(){return f})),n.d(t,"module",(function(){return e})),n.d(t,"repository",(function(){return h})),n.d(t,"files",(function(){return m})),n.d(t,"scripts",(function(){return p})),n.d(t,"devDependencies",(function(){return _})),n.d(t,"dependencies",(function(){return g}));var r="d3",o="5.12.0",u="Data-Driven Documents",i=["dom","visualization","svg","animation","canvas"],s="https://d3js.org",a="BSD-3-Clause",c={name:"Mike Bostock",url:"https://bost.ocks.org/mike"},d="dist/d3.node.js",l="dist/d3.min.js",f="dist/d3.min.js",h=(e="index.js",{type:"git",url:"https://github.com/d3/d3.git"}),m=["dist/**/*.js","index.js"],p={pretest:"rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",test:"tape 'test/**/*-test.js'",prepublishOnly:"yarn test",postpublish:'git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m "d3 ${npm_package_version}" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m "${npm_package_version}" && git tag -am "${npm_package_version}" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js'},_={json2module:"0.0",rimraf:"2",rollup:"1","rollup-plugin-ascii":"0.0","rollup-plugin-node-resolve":"3","rollup-plugin-terser":"5",tape:"4"},g={"d3-array":"1","d3-axis":"1","d3-brush":"1","d3-chord":"1","d3-collection":"1","d3-color":"1","d3-contour":"1","d3-dispatch":"1","d3-drag":"1","d3-dsv":"1","d3-ease":"1","d3-fetch":"1","d3-force":"1","d3-format":"1","d3-geo":"1","d3-hierarchy":"1","d3-interpolate":"1","d3-path":"1","d3-polygon":"1","d3-quadtree":"1","d3-random":"1","d3-scale":"2","d3-scale-chromatic":"1","d3-selection":"1","d3-shape":"1","d3-time":"1","d3-time-format":"2","d3-timer":"1","d3-transition":"1","d3-voronoi":"1","d3-zoom":"1"}},"./node_modules/d3/index.js":
/*!**********************************!*\
  !*** ./node_modules/d3/index.js ***!
  \**********************************/
/*! exports provided: version, bisect, bisectRight, bisectLeft, ascending, bisector, cross, descending, deviation, extent, histogram, thresholdFreedmanDiaconis, thresholdScott, thresholdSturges, max, mean, median, merge, min, pairs, permute, quantile, range, scan, shuffle, sum, ticks, tickIncrement, tickStep, transpose, variance, zip, axisTop, axisRight, axisBottom, axisLeft, brush, brushX, brushY, brushSelection, chord, ribbon, nest, set, map, keys, values, entries, color, rgb, hsl, lab, hcl, lch, gray, cubehelix, contours, contourDensity, dispatch, drag, dragDisable, dragEnable, dsvFormat, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue, autoType, easeLinear, easeQuad, easeQuadIn, easeQuadOut, easeQuadInOut, easeCubic, easeCubicIn, easeCubicOut, easeCubicInOut, easePoly, easePolyIn, easePolyOut, easePolyInOut, easeSin, easeSinIn, easeSinOut, easeSinInOut, easeExp, easeExpIn, easeExpOut, easeExpInOut, easeCircle, easeCircleIn, easeCircleOut, easeCircleInOut, easeBounce, easeBounceIn, easeBounceOut, easeBounceInOut, easeBack, easeBackIn, easeBackOut, easeBackInOut, easeElastic, easeElasticIn, easeElasticOut, easeElasticInOut, blob, buffer, dsv, csv, tsv, image, json, text, xml, html, svg, forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY, formatDefaultLocale, format, formatPrefix, formatLocale, formatSpecifier, FormatSpecifier, precisionFixed, precisionPrefix, precisionRound, geoArea, geoBounds, geoCentroid, geoCircle, geoClipAntimeridian, geoClipCircle, geoClipExtent, geoClipRectangle, geoContains, geoDistance, geoGraticule, geoGraticule10, geoInterpolate, geoLength, geoPath, geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEqualAreaRaw, geoAzimuthalEquidistant, geoAzimuthalEquidistantRaw, geoConicConformal, geoConicConformalRaw, geoConicEqualArea, geoConicEqualAreaRaw, geoConicEquidistant, geoConicEquidistantRaw, geoEqualEarth, geoEqualEarthRaw, geoEquirectangular, geoEquirectangularRaw, geoGnomonic, geoGnomonicRaw, geoIdentity, geoProjection, geoProjectionMutator, geoMercator, geoMercatorRaw, geoNaturalEarth1, geoNaturalEarth1Raw, geoOrthographic, geoOrthographicRaw, geoStereographic, geoStereographicRaw, geoTransverseMercator, geoTransverseMercatorRaw, geoRotation, geoStream, geoTransform, cluster, hierarchy, pack, packSiblings, packEnclose, partition, stratify, tree, treemap, treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify, interpolate, interpolateArray, interpolateBasis, interpolateBasisClosed, interpolateDate, interpolateDiscrete, interpolateHue, interpolateNumber, interpolateNumberArray, interpolateObject, interpolateRound, interpolateString, interpolateTransformCss, interpolateTransformSvg, interpolateZoom, interpolateRgb, interpolateRgbBasis, interpolateRgbBasisClosed, interpolateHsl, interpolateHslLong, interpolateLab, interpolateHcl, interpolateHclLong, interpolateCubehelix, interpolateCubehelixLong, piecewise, quantize, path, polygonArea, polygonCentroid, polygonHull, polygonContains, polygonLength, quadtree, randomUniform, randomNormal, randomLogNormal, randomBates, randomIrwinHall, randomExponential, scaleBand, scalePoint, scaleIdentity, scaleLinear, scaleLog, scaleSymlog, scaleOrdinal, scaleImplicit, scalePow, scaleSqrt, scaleQuantile, scaleQuantize, scaleThreshold, scaleTime, scaleUtc, scaleSequential, scaleSequentialLog, scaleSequentialPow, scaleSequentialSqrt, scaleSequentialSymlog, scaleSequentialQuantile, scaleDiverging, scaleDivergingLog, scaleDivergingPow, scaleDivergingSqrt, scaleDivergingSymlog, tickFormat, schemeCategory10, schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3, schemeTableau10, interpolateBrBG, schemeBrBG, interpolatePRGn, schemePRGn, interpolatePiYG, schemePiYG, interpolatePuOr, schemePuOr, interpolateRdBu, schemeRdBu, interpolateRdGy, schemeRdGy, interpolateRdYlBu, schemeRdYlBu, interpolateRdYlGn, schemeRdYlGn, interpolateSpectral, schemeSpectral, interpolateBuGn, schemeBuGn, interpolateBuPu, schemeBuPu, interpolateGnBu, schemeGnBu, interpolateOrRd, schemeOrRd, interpolatePuBuGn, schemePuBuGn, interpolatePuBu, schemePuBu, interpolatePuRd, schemePuRd, interpolateRdPu, schemeRdPu, interpolateYlGnBu, schemeYlGnBu, interpolateYlGn, schemeYlGn, interpolateYlOrBr, schemeYlOrBr, interpolateYlOrRd, schemeYlOrRd, interpolateBlues, schemeBlues, interpolateGreens, schemeGreens, interpolateGreys, schemeGreys, interpolatePurples, schemePurples, interpolateReds, schemeReds, interpolateOranges, schemeOranges, interpolateCividis, interpolateCubehelixDefault, interpolateRainbow, interpolateWarm, interpolateCool, interpolateSinebow, interpolateTurbo, interpolateViridis, interpolateMagma, interpolateInferno, interpolatePlasma, create, creator, local, matcher, mouse, namespace, namespaces, clientPoint, select, selectAll, selection, selector, selectorAll, style, touch, touches, window, event, customEvent, arc, area, line, pie, areaRadial, radialArea, lineRadial, radialLine, pointRadial, linkHorizontal, linkVertical, linkRadial, symbol, symbols, symbolCircle, symbolCross, symbolDiamond, symbolSquare, symbolStar, symbolTriangle, symbolWye, curveBasisClosed, curveBasisOpen, curveBasis, curveBundle, curveCardinalClosed, curveCardinalOpen, curveCardinal, curveCatmullRomClosed, curveCatmullRomOpen, curveCatmullRom, curveLinearClosed, curveLinear, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore, stack, stackOffsetExpand, stackOffsetDiverging, stackOffsetNone, stackOffsetSilhouette, stackOffsetWiggle, stackOrderAppearance, stackOrderAscending, stackOrderDescending, stackOrderInsideOut, stackOrderNone, stackOrderReverse, timeInterval, timeMillisecond, timeMilliseconds, utcMillisecond, utcMilliseconds, timeSecond, timeSeconds, utcSecond, utcSeconds, timeMinute, timeMinutes, timeHour, timeHours, timeDay, timeDays, timeWeek, timeWeeks, timeSunday, timeSundays, timeMonday, timeMondays, timeTuesday, timeTuesdays, timeWednesday, timeWednesdays, timeThursday, timeThursdays, timeFriday, timeFridays, timeSaturday, timeSaturdays, timeMonth, timeMonths, timeYear, timeYears, utcMinute, utcMinutes, utcHour, utcHours, utcDay, utcDays, utcWeek, utcWeeks, utcSunday, utcSundays, utcMonday, utcMondays, utcTuesday, utcTuesdays, utcWednesday, utcWednesdays, utcThursday, utcThursdays, utcFriday, utcFridays, utcSaturday, utcSaturdays, utcMonth, utcMonths, utcYear, utcYears, timeFormatDefaultLocale, timeFormat, timeParse, utcFormat, utcParse, timeFormatLocale, isoFormat, isoParse, now, timer, timerFlush, timeout, interval, transition, active, interrupt, voronoi, zoom, zoomTransform, zoomIdentity */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dist/package.js */"./node_modules/d3/dist/package.js");n.d(t,"version",(function(){return r.version}));var o=n(/*! d3-array */"./node_modules/d3-array/src/index.js");n.d(t,"bisect",(function(){return o.bisect})),n.d(t,"bisectRight",(function(){return o.bisectRight})),n.d(t,"bisectLeft",(function(){return o.bisectLeft})),n.d(t,"ascending",(function(){return o.ascending})),n.d(t,"bisector",(function(){return o.bisector})),n.d(t,"cross",(function(){return o.cross})),n.d(t,"descending",(function(){return o.descending})),n.d(t,"deviation",(function(){return o.deviation})),n.d(t,"extent",(function(){return o.extent})),n.d(t,"histogram",(function(){return o.histogram})),n.d(t,"thresholdFreedmanDiaconis",(function(){return o.thresholdFreedmanDiaconis})),n.d(t,"thresholdScott",(function(){return o.thresholdScott})),n.d(t,"thresholdSturges",(function(){return o.thresholdSturges})),n.d(t,"max",(function(){return o.max})),n.d(t,"mean",(function(){return o.mean})),n.d(t,"median",(function(){return o.median})),n.d(t,"merge",(function(){return o.merge})),n.d(t,"min",(function(){return o.min})),n.d(t,"pairs",(function(){return o.pairs})),n.d(t,"permute",(function(){return o.permute})),n.d(t,"quantile",(function(){return o.quantile})),n.d(t,"range",(function(){return o.range})),n.d(t,"scan",(function(){return o.scan})),n.d(t,"shuffle",(function(){return o.shuffle})),n.d(t,"sum",(function(){return o.sum})),n.d(t,"ticks",(function(){return o.ticks})),n.d(t,"tickIncrement",(function(){return o.tickIncrement})),n.d(t,"tickStep",(function(){return o.tickStep})),n.d(t,"transpose",(function(){return o.transpose})),n.d(t,"variance",(function(){return o.variance})),n.d(t,"zip",(function(){return o.zip}));var u=n(/*! d3-axis */"./node_modules/d3-axis/src/index.js");n.d(t,"axisTop",(function(){return u.axisTop})),n.d(t,"axisRight",(function(){return u.axisRight})),n.d(t,"axisBottom",(function(){return u.axisBottom})),n.d(t,"axisLeft",(function(){return u.axisLeft}));var i=n(/*! d3-brush */"./node_modules/d3-brush/src/index.js");n.d(t,"brush",(function(){return i.brush})),n.d(t,"brushX",(function(){return i.brushX})),n.d(t,"brushY",(function(){return i.brushY})),n.d(t,"brushSelection",(function(){return i.brushSelection}));var s=n(/*! d3-chord */"./node_modules/d3-chord/src/index.js");n.d(t,"chord",(function(){return s.chord})),n.d(t,"ribbon",(function(){return s.ribbon}));var a=n(/*! d3-collection */"./node_modules/d3-collection/src/index.js");n.d(t,"nest",(function(){return a.nest})),n.d(t,"set",(function(){return a.set})),n.d(t,"map",(function(){return a.map})),n.d(t,"keys",(function(){return a.keys})),n.d(t,"values",(function(){return a.values})),n.d(t,"entries",(function(){return a.entries}));var c=n(/*! d3-color */"./node_modules/d3-color/src/index.js");n.d(t,"color",(function(){return c.color})),n.d(t,"rgb",(function(){return c.rgb})),n.d(t,"hsl",(function(){return c.hsl})),n.d(t,"lab",(function(){return c.lab})),n.d(t,"hcl",(function(){return c.hcl})),n.d(t,"lch",(function(){return c.lch})),n.d(t,"gray",(function(){return c.gray})),n.d(t,"cubehelix",(function(){return c.cubehelix}));var d=n(/*! d3-contour */"./node_modules/d3-contour/src/index.js");n.d(t,"contours",(function(){return d.contours})),n.d(t,"contourDensity",(function(){return d.contourDensity}));var l=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js");n.d(t,"dispatch",(function(){return l.dispatch}));var f=n(/*! d3-drag */"./node_modules/d3-drag/src/index.js");n.d(t,"drag",(function(){return f.drag})),n.d(t,"dragDisable",(function(){return f.dragDisable})),n.d(t,"dragEnable",(function(){return f.dragEnable}));var h=n(/*! d3-dsv */"./node_modules/d3-dsv/src/index.js");n.d(t,"dsvFormat",(function(){return h.dsvFormat})),n.d(t,"csvParse",(function(){return h.csvParse})),n.d(t,"csvParseRows",(function(){return h.csvParseRows})),n.d(t,"csvFormat",(function(){return h.csvFormat})),n.d(t,"csvFormatBody",(function(){return h.csvFormatBody})),n.d(t,"csvFormatRows",(function(){return h.csvFormatRows})),n.d(t,"csvFormatRow",(function(){return h.csvFormatRow})),n.d(t,"csvFormatValue",(function(){return h.csvFormatValue})),n.d(t,"tsvParse",(function(){return h.tsvParse})),n.d(t,"tsvParseRows",(function(){return h.tsvParseRows})),n.d(t,"tsvFormat",(function(){return h.tsvFormat})),n.d(t,"tsvFormatBody",(function(){return h.tsvFormatBody})),n.d(t,"tsvFormatRows",(function(){return h.tsvFormatRows})),n.d(t,"tsvFormatRow",(function(){return h.tsvFormatRow})),n.d(t,"tsvFormatValue",(function(){return h.tsvFormatValue})),n.d(t,"autoType",(function(){return h.autoType}));var m=n(/*! d3-ease */"./node_modules/d3-ease/src/index.js");n.d(t,"easeLinear",(function(){return m.easeLinear})),n.d(t,"easeQuad",(function(){return m.easeQuad})),n.d(t,"easeQuadIn",(function(){return m.easeQuadIn})),n.d(t,"easeQuadOut",(function(){return m.easeQuadOut})),n.d(t,"easeQuadInOut",(function(){return m.easeQuadInOut})),n.d(t,"easeCubic",(function(){return m.easeCubic})),n.d(t,"easeCubicIn",(function(){return m.easeCubicIn})),n.d(t,"easeCubicOut",(function(){return m.easeCubicOut})),n.d(t,"easeCubicInOut",(function(){return m.easeCubicInOut})),n.d(t,"easePoly",(function(){return m.easePoly})),n.d(t,"easePolyIn",(function(){return m.easePolyIn})),n.d(t,"easePolyOut",(function(){return m.easePolyOut})),n.d(t,"easePolyInOut",(function(){return m.easePolyInOut})),n.d(t,"easeSin",(function(){return m.easeSin})),n.d(t,"easeSinIn",(function(){return m.easeSinIn})),n.d(t,"easeSinOut",(function(){return m.easeSinOut})),n.d(t,"easeSinInOut",(function(){return m.easeSinInOut})),n.d(t,"easeExp",(function(){return m.easeExp})),n.d(t,"easeExpIn",(function(){return m.easeExpIn})),n.d(t,"easeExpOut",(function(){return m.easeExpOut})),n.d(t,"easeExpInOut",(function(){return m.easeExpInOut})),n.d(t,"easeCircle",(function(){return m.easeCircle})),n.d(t,"easeCircleIn",(function(){return m.easeCircleIn})),n.d(t,"easeCircleOut",(function(){return m.easeCircleOut})),n.d(t,"easeCircleInOut",(function(){return m.easeCircleInOut})),n.d(t,"easeBounce",(function(){return m.easeBounce})),n.d(t,"easeBounceIn",(function(){return m.easeBounceIn})),n.d(t,"easeBounceOut",(function(){return m.easeBounceOut})),n.d(t,"easeBounceInOut",(function(){return m.easeBounceInOut})),n.d(t,"easeBack",(function(){return m.easeBack})),n.d(t,"easeBackIn",(function(){return m.easeBackIn})),n.d(t,"easeBackOut",(function(){return m.easeBackOut})),n.d(t,"easeBackInOut",(function(){return m.easeBackInOut})),n.d(t,"easeElastic",(function(){return m.easeElastic})),n.d(t,"easeElasticIn",(function(){return m.easeElasticIn})),n.d(t,"easeElasticOut",(function(){return m.easeElasticOut})),n.d(t,"easeElasticInOut",(function(){return m.easeElasticInOut}));var p=n(/*! d3-fetch */"./node_modules/d3-fetch/src/index.js");n.d(t,"blob",(function(){return p.blob})),n.d(t,"buffer",(function(){return p.buffer})),n.d(t,"dsv",(function(){return p.dsv})),n.d(t,"csv",(function(){return p.csv})),n.d(t,"tsv",(function(){return p.tsv})),n.d(t,"image",(function(){return p.image})),n.d(t,"json",(function(){return p.json})),n.d(t,"text",(function(){return p.text})),n.d(t,"xml",(function(){return p.xml})),n.d(t,"html",(function(){return p.html})),n.d(t,"svg",(function(){return p.svg}));var _=n(/*! d3-force */"./node_modules/d3-force/src/index.js");n.d(t,"forceCenter",(function(){return _.forceCenter})),n.d(t,"forceCollide",(function(){return _.forceCollide})),n.d(t,"forceLink",(function(){return _.forceLink})),n.d(t,"forceManyBody",(function(){return _.forceManyBody})),n.d(t,"forceRadial",(function(){return _.forceRadial})),n.d(t,"forceSimulation",(function(){return _.forceSimulation})),n.d(t,"forceX",(function(){return _.forceX})),n.d(t,"forceY",(function(){return _.forceY}));var g=n(/*! d3-format */"./node_modules/d3-format/src/index.js");n.d(t,"formatDefaultLocale",(function(){return g.formatDefaultLocale})),n.d(t,"format",(function(){return g.format})),n.d(t,"formatPrefix",(function(){return g.formatPrefix})),n.d(t,"formatLocale",(function(){return g.formatLocale})),n.d(t,"formatSpecifier",(function(){return g.formatSpecifier})),n.d(t,"FormatSpecifier",(function(){return g.FormatSpecifier})),n.d(t,"precisionFixed",(function(){return g.precisionFixed})),n.d(t,"precisionPrefix",(function(){return g.precisionPrefix})),n.d(t,"precisionRound",(function(){return g.precisionRound}));var v=n(/*! d3-geo */"./node_modules/d3-geo/src/index.js");n.d(t,"geoArea",(function(){return v.geoArea})),n.d(t,"geoBounds",(function(){return v.geoBounds})),n.d(t,"geoCentroid",(function(){return v.geoCentroid})),n.d(t,"geoCircle",(function(){return v.geoCircle})),n.d(t,"geoClipAntimeridian",(function(){return v.geoClipAntimeridian})),n.d(t,"geoClipCircle",(function(){return v.geoClipCircle})),n.d(t,"geoClipExtent",(function(){return v.geoClipExtent})),n.d(t,"geoClipRectangle",(function(){return v.geoClipRectangle})),n.d(t,"geoContains",(function(){return v.geoContains})),n.d(t,"geoDistance",(function(){return v.geoDistance})),n.d(t,"geoGraticule",(function(){return v.geoGraticule})),n.d(t,"geoGraticule10",(function(){return v.geoGraticule10})),n.d(t,"geoInterpolate",(function(){return v.geoInterpolate})),n.d(t,"geoLength",(function(){return v.geoLength})),n.d(t,"geoPath",(function(){return v.geoPath})),n.d(t,"geoAlbers",(function(){return v.geoAlbers})),n.d(t,"geoAlbersUsa",(function(){return v.geoAlbersUsa})),n.d(t,"geoAzimuthalEqualArea",(function(){return v.geoAzimuthalEqualArea})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return v.geoAzimuthalEqualAreaRaw})),n.d(t,"geoAzimuthalEquidistant",(function(){return v.geoAzimuthalEquidistant})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return v.geoAzimuthalEquidistantRaw})),n.d(t,"geoConicConformal",(function(){return v.geoConicConformal})),n.d(t,"geoConicConformalRaw",(function(){return v.geoConicConformalRaw})),n.d(t,"geoConicEqualArea",(function(){return v.geoConicEqualArea})),n.d(t,"geoConicEqualAreaRaw",(function(){return v.geoConicEqualAreaRaw})),n.d(t,"geoConicEquidistant",(function(){return v.geoConicEquidistant})),n.d(t,"geoConicEquidistantRaw",(function(){return v.geoConicEquidistantRaw})),n.d(t,"geoEqualEarth",(function(){return v.geoEqualEarth})),n.d(t,"geoEqualEarthRaw",(function(){return v.geoEqualEarthRaw})),n.d(t,"geoEquirectangular",(function(){return v.geoEquirectangular})),n.d(t,"geoEquirectangularRaw",(function(){return v.geoEquirectangularRaw})),n.d(t,"geoGnomonic",(function(){return v.geoGnomonic})),n.d(t,"geoGnomonicRaw",(function(){return v.geoGnomonicRaw})),n.d(t,"geoIdentity",(function(){return v.geoIdentity})),n.d(t,"geoProjection",(function(){return v.geoProjection})),n.d(t,"geoProjectionMutator",(function(){return v.geoProjectionMutator})),n.d(t,"geoMercator",(function(){return v.geoMercator})),n.d(t,"geoMercatorRaw",(function(){return v.geoMercatorRaw})),n.d(t,"geoNaturalEarth1",(function(){return v.geoNaturalEarth1})),n.d(t,"geoNaturalEarth1Raw",(function(){return v.geoNaturalEarth1Raw})),n.d(t,"geoOrthographic",(function(){return v.geoOrthographic})),n.d(t,"geoOrthographicRaw",(function(){return v.geoOrthographicRaw})),n.d(t,"geoStereographic",(function(){return v.geoStereographic})),n.d(t,"geoStereographicRaw",(function(){return v.geoStereographicRaw})),n.d(t,"geoTransverseMercator",(function(){return v.geoTransverseMercator})),n.d(t,"geoTransverseMercatorRaw",(function(){return v.geoTransverseMercatorRaw})),n.d(t,"geoRotation",(function(){return v.geoRotation})),n.d(t,"geoStream",(function(){return v.geoStream})),n.d(t,"geoTransform",(function(){return v.geoTransform}));var j=n(/*! d3-hierarchy */"./node_modules/d3-hierarchy/src/index.js");n.d(t,"cluster",(function(){return j.cluster})),n.d(t,"hierarchy",(function(){return j.hierarchy})),n.d(t,"pack",(function(){return j.pack})),n.d(t,"packSiblings",(function(){return j.packSiblings})),n.d(t,"packEnclose",(function(){return j.packEnclose})),n.d(t,"partition",(function(){return j.partition})),n.d(t,"stratify",(function(){return j.stratify})),n.d(t,"tree",(function(){return j.tree})),n.d(t,"treemap",(function(){return j.treemap})),n.d(t,"treemapBinary",(function(){return j.treemapBinary})),n.d(t,"treemapDice",(function(){return j.treemapDice})),n.d(t,"treemapSlice",(function(){return j.treemapSlice})),n.d(t,"treemapSliceDice",(function(){return j.treemapSliceDice})),n.d(t,"treemapSquarify",(function(){return j.treemapSquarify})),n.d(t,"treemapResquarify",(function(){return j.treemapResquarify}));var b=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js");n.d(t,"interpolate",(function(){return b.interpolate})),n.d(t,"interpolateArray",(function(){return b.interpolateArray})),n.d(t,"interpolateBasis",(function(){return b.interpolateBasis})),n.d(t,"interpolateBasisClosed",(function(){return b.interpolateBasisClosed})),n.d(t,"interpolateDate",(function(){return b.interpolateDate})),n.d(t,"interpolateDiscrete",(function(){return b.interpolateDiscrete})),n.d(t,"interpolateHue",(function(){return b.interpolateHue})),n.d(t,"interpolateNumber",(function(){return b.interpolateNumber})),n.d(t,"interpolateNumberArray",(function(){return b.interpolateNumberArray})),n.d(t,"interpolateObject",(function(){return b.interpolateObject})),n.d(t,"interpolateRound",(function(){return b.interpolateRound})),n.d(t,"interpolateString",(function(){return b.interpolateString})),n.d(t,"interpolateTransformCss",(function(){return b.interpolateTransformCss})),n.d(t,"interpolateTransformSvg",(function(){return b.interpolateTransformSvg})),n.d(t,"interpolateZoom",(function(){return b.interpolateZoom})),n.d(t,"interpolateRgb",(function(){return b.interpolateRgb})),n.d(t,"interpolateRgbBasis",(function(){return b.interpolateRgbBasis})),n.d(t,"interpolateRgbBasisClosed",(function(){return b.interpolateRgbBasisClosed})),n.d(t,"interpolateHsl",(function(){return b.interpolateHsl})),n.d(t,"interpolateHslLong",(function(){return b.interpolateHslLong})),n.d(t,"interpolateLab",(function(){return b.interpolateLab})),n.d(t,"interpolateHcl",(function(){return b.interpolateHcl})),n.d(t,"interpolateHclLong",(function(){return b.interpolateHclLong})),n.d(t,"interpolateCubehelix",(function(){return b.interpolateCubehelix})),n.d(t,"interpolateCubehelixLong",(function(){return b.interpolateCubehelixLong})),n.d(t,"piecewise",(function(){return b.piecewise})),n.d(t,"quantize",(function(){return b.quantize}));var y=n(/*! d3-path */"./node_modules/d3-path/src/index.js");n.d(t,"path",(function(){return y.path}));var x=n(/*! d3-polygon */"./node_modules/d3-polygon/src/index.js");n.d(t,"polygonArea",(function(){return x.polygonArea})),n.d(t,"polygonCentroid",(function(){return x.polygonCentroid})),n.d(t,"polygonHull",(function(){return x.polygonHull})),n.d(t,"polygonContains",(function(){return x.polygonContains})),n.d(t,"polygonLength",(function(){return x.polygonLength}));var w=n(/*! d3-quadtree */"./node_modules/d3-quadtree/src/index.js");n.d(t,"quadtree",(function(){return w.quadtree}));var O=n(/*! d3-random */"./node_modules/d3-random/src/index.js");n.d(t,"randomUniform",(function(){return O.randomUniform})),n.d(t,"randomNormal",(function(){return O.randomNormal})),n.d(t,"randomLogNormal",(function(){return O.randomLogNormal})),n.d(t,"randomBates",(function(){return O.randomBates})),n.d(t,"randomIrwinHall",(function(){return O.randomIrwinHall})),n.d(t,"randomExponential",(function(){return O.randomExponential}));var M=n(/*! d3-scale */"./node_modules/d3-scale/src/index.js");n.d(t,"scaleBand",(function(){return M.scaleBand})),n.d(t,"scalePoint",(function(){return M.scalePoint})),n.d(t,"scaleIdentity",(function(){return M.scaleIdentity})),n.d(t,"scaleLinear",(function(){return M.scaleLinear})),n.d(t,"scaleLog",(function(){return M.scaleLog})),n.d(t,"scaleSymlog",(function(){return M.scaleSymlog})),n.d(t,"scaleOrdinal",(function(){return M.scaleOrdinal})),n.d(t,"scaleImplicit",(function(){return M.scaleImplicit})),n.d(t,"scalePow",(function(){return M.scalePow})),n.d(t,"scaleSqrt",(function(){return M.scaleSqrt})),n.d(t,"scaleQuantile",(function(){return M.scaleQuantile})),n.d(t,"scaleQuantize",(function(){return M.scaleQuantize})),n.d(t,"scaleThreshold",(function(){return M.scaleThreshold})),n.d(t,"scaleTime",(function(){return M.scaleTime})),n.d(t,"scaleUtc",(function(){return M.scaleUtc})),n.d(t,"scaleSequential",(function(){return M.scaleSequential})),n.d(t,"scaleSequentialLog",(function(){return M.scaleSequentialLog})),n.d(t,"scaleSequentialPow",(function(){return M.scaleSequentialPow})),n.d(t,"scaleSequentialSqrt",(function(){return M.scaleSequentialSqrt})),n.d(t,"scaleSequentialSymlog",(function(){return M.scaleSequentialSymlog})),n.d(t,"scaleSequentialQuantile",(function(){return M.scaleSequentialQuantile})),n.d(t,"scaleDiverging",(function(){return M.scaleDiverging})),n.d(t,"scaleDivergingLog",(function(){return M.scaleDivergingLog})),n.d(t,"scaleDivergingPow",(function(){return M.scaleDivergingPow})),n.d(t,"scaleDivergingSqrt",(function(){return M.scaleDivergingSqrt})),n.d(t,"scaleDivergingSymlog",(function(){return M.scaleDivergingSymlog})),n.d(t,"tickFormat",(function(){return M.tickFormat}));var S=n(/*! d3-scale-chromatic */"./node_modules/d3-scale-chromatic/src/index.js");n.d(t,"schemeCategory10",(function(){return S.schemeCategory10})),n.d(t,"schemeAccent",(function(){return S.schemeAccent})),n.d(t,"schemeDark2",(function(){return S.schemeDark2})),n.d(t,"schemePaired",(function(){return S.schemePaired})),n.d(t,"schemePastel1",(function(){return S.schemePastel1})),n.d(t,"schemePastel2",(function(){return S.schemePastel2})),n.d(t,"schemeSet1",(function(){return S.schemeSet1})),n.d(t,"schemeSet2",(function(){return S.schemeSet2})),n.d(t,"schemeSet3",(function(){return S.schemeSet3})),n.d(t,"schemeTableau10",(function(){return S.schemeTableau10})),n.d(t,"interpolateBrBG",(function(){return S.interpolateBrBG})),n.d(t,"schemeBrBG",(function(){return S.schemeBrBG})),n.d(t,"interpolatePRGn",(function(){return S.interpolatePRGn})),n.d(t,"schemePRGn",(function(){return S.schemePRGn})),n.d(t,"interpolatePiYG",(function(){return S.interpolatePiYG})),n.d(t,"schemePiYG",(function(){return S.schemePiYG})),n.d(t,"interpolatePuOr",(function(){return S.interpolatePuOr})),n.d(t,"schemePuOr",(function(){return S.schemePuOr})),n.d(t,"interpolateRdBu",(function(){return S.interpolateRdBu})),n.d(t,"schemeRdBu",(function(){return S.schemeRdBu})),n.d(t,"interpolateRdGy",(function(){return S.interpolateRdGy})),n.d(t,"schemeRdGy",(function(){return S.schemeRdGy})),n.d(t,"interpolateRdYlBu",(function(){return S.interpolateRdYlBu})),n.d(t,"schemeRdYlBu",(function(){return S.schemeRdYlBu})),n.d(t,"interpolateRdYlGn",(function(){return S.interpolateRdYlGn})),n.d(t,"schemeRdYlGn",(function(){return S.schemeRdYlGn})),n.d(t,"interpolateSpectral",(function(){return S.interpolateSpectral})),n.d(t,"schemeSpectral",(function(){return S.schemeSpectral})),n.d(t,"interpolateBuGn",(function(){return S.interpolateBuGn})),n.d(t,"schemeBuGn",(function(){return S.schemeBuGn})),n.d(t,"interpolateBuPu",(function(){return S.interpolateBuPu})),n.d(t,"schemeBuPu",(function(){return S.schemeBuPu})),n.d(t,"interpolateGnBu",(function(){return S.interpolateGnBu})),n.d(t,"schemeGnBu",(function(){return S.schemeGnBu})),n.d(t,"interpolateOrRd",(function(){return S.interpolateOrRd})),n.d(t,"schemeOrRd",(function(){return S.schemeOrRd})),n.d(t,"interpolatePuBuGn",(function(){return S.interpolatePuBuGn})),n.d(t,"schemePuBuGn",(function(){return S.schemePuBuGn})),n.d(t,"interpolatePuBu",(function(){return S.interpolatePuBu})),n.d(t,"schemePuBu",(function(){return S.schemePuBu})),n.d(t,"interpolatePuRd",(function(){return S.interpolatePuRd})),n.d(t,"schemePuRd",(function(){return S.schemePuRd})),n.d(t,"interpolateRdPu",(function(){return S.interpolateRdPu})),n.d(t,"schemeRdPu",(function(){return S.schemeRdPu})),n.d(t,"interpolateYlGnBu",(function(){return S.interpolateYlGnBu})),n.d(t,"schemeYlGnBu",(function(){return S.schemeYlGnBu})),n.d(t,"interpolateYlGn",(function(){return S.interpolateYlGn})),n.d(t,"schemeYlGn",(function(){return S.schemeYlGn})),n.d(t,"interpolateYlOrBr",(function(){return S.interpolateYlOrBr})),n.d(t,"schemeYlOrBr",(function(){return S.schemeYlOrBr})),n.d(t,"interpolateYlOrRd",(function(){return S.interpolateYlOrRd})),n.d(t,"schemeYlOrRd",(function(){return S.schemeYlOrRd})),n.d(t,"interpolateBlues",(function(){return S.interpolateBlues})),n.d(t,"schemeBlues",(function(){return S.schemeBlues})),n.d(t,"interpolateGreens",(function(){return S.interpolateGreens})),n.d(t,"schemeGreens",(function(){return S.schemeGreens})),n.d(t,"interpolateGreys",(function(){return S.interpolateGreys})),n.d(t,"schemeGreys",(function(){return S.schemeGreys})),n.d(t,"interpolatePurples",(function(){return S.interpolatePurples})),n.d(t,"schemePurples",(function(){return S.schemePurples})),n.d(t,"interpolateReds",(function(){return S.interpolateReds})),n.d(t,"schemeReds",(function(){return S.schemeReds})),n.d(t,"interpolateOranges",(function(){return S.interpolateOranges})),n.d(t,"schemeOranges",(function(){return S.schemeOranges})),n.d(t,"interpolateCividis",(function(){return S.interpolateCividis})),n.d(t,"interpolateCubehelixDefault",(function(){return S.interpolateCubehelixDefault})),n.d(t,"interpolateRainbow",(function(){return S.interpolateRainbow})),n.d(t,"interpolateWarm",(function(){return S.interpolateWarm})),n.d(t,"interpolateCool",(function(){return S.interpolateCool})),n.d(t,"interpolateSinebow",(function(){return S.interpolateSinebow})),n.d(t,"interpolateTurbo",(function(){return S.interpolateTurbo})),n.d(t,"interpolateViridis",(function(){return S.interpolateViridis})),n.d(t,"interpolateMagma",(function(){return S.interpolateMagma})),n.d(t,"interpolateInferno",(function(){return S.interpolateInferno})),n.d(t,"interpolatePlasma",(function(){return S.interpolatePlasma}));var E=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");n.d(t,"create",(function(){return E.create})),n.d(t,"creator",(function(){return E.creator})),n.d(t,"local",(function(){return E.local})),n.d(t,"matcher",(function(){return E.matcher})),n.d(t,"mouse",(function(){return E.mouse})),n.d(t,"namespace",(function(){return E.namespace})),n.d(t,"namespaces",(function(){return E.namespaces})),n.d(t,"clientPoint",(function(){return E.clientPoint})),n.d(t,"select",(function(){return E.select})),n.d(t,"selectAll",(function(){return E.selectAll})),n.d(t,"selection",(function(){return E.selection})),n.d(t,"selector",(function(){return E.selector})),n.d(t,"selectorAll",(function(){return E.selectorAll})),n.d(t,"style",(function(){return E.style})),n.d(t,"touch",(function(){return E.touch})),n.d(t,"touches",(function(){return E.touches})),n.d(t,"window",(function(){return E.window})),n.d(t,"event",(function(){return E.event})),n.d(t,"customEvent",(function(){return E.customEvent}));var k=n(/*! d3-shape */"./node_modules/d3-shape/src/index.js");n.d(t,"arc",(function(){return k.arc})),n.d(t,"area",(function(){return k.area})),n.d(t,"line",(function(){return k.line})),n.d(t,"pie",(function(){return k.pie})),n.d(t,"areaRadial",(function(){return k.areaRadial})),n.d(t,"radialArea",(function(){return k.radialArea})),n.d(t,"lineRadial",(function(){return k.lineRadial})),n.d(t,"radialLine",(function(){return k.radialLine})),n.d(t,"pointRadial",(function(){return k.pointRadial})),n.d(t,"linkHorizontal",(function(){return k.linkHorizontal})),n.d(t,"linkVertical",(function(){return k.linkVertical})),n.d(t,"linkRadial",(function(){return k.linkRadial})),n.d(t,"symbol",(function(){return k.symbol})),n.d(t,"symbols",(function(){return k.symbols})),n.d(t,"symbolCircle",(function(){return k.symbolCircle})),n.d(t,"symbolCross",(function(){return k.symbolCross})),n.d(t,"symbolDiamond",(function(){return k.symbolDiamond})),n.d(t,"symbolSquare",(function(){return k.symbolSquare})),n.d(t,"symbolStar",(function(){return k.symbolStar})),n.d(t,"symbolTriangle",(function(){return k.symbolTriangle})),n.d(t,"symbolWye",(function(){return k.symbolWye})),n.d(t,"curveBasisClosed",(function(){return k.curveBasisClosed})),n.d(t,"curveBasisOpen",(function(){return k.curveBasisOpen})),n.d(t,"curveBasis",(function(){return k.curveBasis})),n.d(t,"curveBundle",(function(){return k.curveBundle})),n.d(t,"curveCardinalClosed",(function(){return k.curveCardinalClosed})),n.d(t,"curveCardinalOpen",(function(){return k.curveCardinalOpen})),n.d(t,"curveCardinal",(function(){return k.curveCardinal})),n.d(t,"curveCatmullRomClosed",(function(){return k.curveCatmullRomClosed})),n.d(t,"curveCatmullRomOpen",(function(){return k.curveCatmullRomOpen})),n.d(t,"curveCatmullRom",(function(){return k.curveCatmullRom})),n.d(t,"curveLinearClosed",(function(){return k.curveLinearClosed})),n.d(t,"curveLinear",(function(){return k.curveLinear})),n.d(t,"curveMonotoneX",(function(){return k.curveMonotoneX})),n.d(t,"curveMonotoneY",(function(){return k.curveMonotoneY})),n.d(t,"curveNatural",(function(){return k.curveNatural})),n.d(t,"curveStep",(function(){return k.curveStep})),n.d(t,"curveStepAfter",(function(){return k.curveStepAfter})),n.d(t,"curveStepBefore",(function(){return k.curveStepBefore})),n.d(t,"stack",(function(){return k.stack})),n.d(t,"stackOffsetExpand",(function(){return k.stackOffsetExpand})),n.d(t,"stackOffsetDiverging",(function(){return k.stackOffsetDiverging})),n.d(t,"stackOffsetNone",(function(){return k.stackOffsetNone})),n.d(t,"stackOffsetSilhouette",(function(){return k.stackOffsetSilhouette})),n.d(t,"stackOffsetWiggle",(function(){return k.stackOffsetWiggle})),n.d(t,"stackOrderAppearance",(function(){return k.stackOrderAppearance})),n.d(t,"stackOrderAscending",(function(){return k.stackOrderAscending})),n.d(t,"stackOrderDescending",(function(){return k.stackOrderDescending})),n.d(t,"stackOrderInsideOut",(function(){return k.stackOrderInsideOut})),n.d(t,"stackOrderNone",(function(){return k.stackOrderNone})),n.d(t,"stackOrderReverse",(function(){return k.stackOrderReverse}));var C=n(/*! d3-time */"./node_modules/d3-time/src/index.js");n.d(t,"timeInterval",(function(){return C.timeInterval})),n.d(t,"timeMillisecond",(function(){return C.timeMillisecond})),n.d(t,"timeMilliseconds",(function(){return C.timeMilliseconds})),n.d(t,"utcMillisecond",(function(){return C.utcMillisecond})),n.d(t,"utcMilliseconds",(function(){return C.utcMilliseconds})),n.d(t,"timeSecond",(function(){return C.timeSecond})),n.d(t,"timeSeconds",(function(){return C.timeSeconds})),n.d(t,"utcSecond",(function(){return C.utcSecond})),n.d(t,"utcSeconds",(function(){return C.utcSeconds})),n.d(t,"timeMinute",(function(){return C.timeMinute})),n.d(t,"timeMinutes",(function(){return C.timeMinutes})),n.d(t,"timeHour",(function(){return C.timeHour})),n.d(t,"timeHours",(function(){return C.timeHours})),n.d(t,"timeDay",(function(){return C.timeDay})),n.d(t,"timeDays",(function(){return C.timeDays})),n.d(t,"timeWeek",(function(){return C.timeWeek})),n.d(t,"timeWeeks",(function(){return C.timeWeeks})),n.d(t,"timeSunday",(function(){return C.timeSunday})),n.d(t,"timeSundays",(function(){return C.timeSundays})),n.d(t,"timeMonday",(function(){return C.timeMonday})),n.d(t,"timeMondays",(function(){return C.timeMondays})),n.d(t,"timeTuesday",(function(){return C.timeTuesday})),n.d(t,"timeTuesdays",(function(){return C.timeTuesdays})),n.d(t,"timeWednesday",(function(){return C.timeWednesday})),n.d(t,"timeWednesdays",(function(){return C.timeWednesdays})),n.d(t,"timeThursday",(function(){return C.timeThursday})),n.d(t,"timeThursdays",(function(){return C.timeThursdays})),n.d(t,"timeFriday",(function(){return C.timeFriday})),n.d(t,"timeFridays",(function(){return C.timeFridays})),n.d(t,"timeSaturday",(function(){return C.timeSaturday})),n.d(t,"timeSaturdays",(function(){return C.timeSaturdays})),n.d(t,"timeMonth",(function(){return C.timeMonth})),n.d(t,"timeMonths",(function(){return C.timeMonths})),n.d(t,"timeYear",(function(){return C.timeYear})),n.d(t,"timeYears",(function(){return C.timeYears})),n.d(t,"utcMinute",(function(){return C.utcMinute})),n.d(t,"utcMinutes",(function(){return C.utcMinutes})),n.d(t,"utcHour",(function(){return C.utcHour})),n.d(t,"utcHours",(function(){return C.utcHours})),n.d(t,"utcDay",(function(){return C.utcDay})),n.d(t,"utcDays",(function(){return C.utcDays})),n.d(t,"utcWeek",(function(){return C.utcWeek})),n.d(t,"utcWeeks",(function(){return C.utcWeeks})),n.d(t,"utcSunday",(function(){return C.utcSunday})),n.d(t,"utcSundays",(function(){return C.utcSundays})),n.d(t,"utcMonday",(function(){return C.utcMonday})),n.d(t,"utcMondays",(function(){return C.utcMondays})),n.d(t,"utcTuesday",(function(){return C.utcTuesday})),n.d(t,"utcTuesdays",(function(){return C.utcTuesdays})),n.d(t,"utcWednesday",(function(){return C.utcWednesday})),n.d(t,"utcWednesdays",(function(){return C.utcWednesdays})),n.d(t,"utcThursday",(function(){return C.utcThursday})),n.d(t,"utcThursdays",(function(){return C.utcThursdays})),n.d(t,"utcFriday",(function(){return C.utcFriday})),n.d(t,"utcFridays",(function(){return C.utcFridays})),n.d(t,"utcSaturday",(function(){return C.utcSaturday})),n.d(t,"utcSaturdays",(function(){return C.utcSaturdays})),n.d(t,"utcMonth",(function(){return C.utcMonth})),n.d(t,"utcMonths",(function(){return C.utcMonths})),n.d(t,"utcYear",(function(){return C.utcYear})),n.d(t,"utcYears",(function(){return C.utcYears}));var A=n(/*! d3-time-format */"./node_modules/d3-time-format/src/index.js");n.d(t,"timeFormatDefaultLocale",(function(){return A.timeFormatDefaultLocale})),n.d(t,"timeFormat",(function(){return A.timeFormat})),n.d(t,"timeParse",(function(){return A.timeParse})),n.d(t,"utcFormat",(function(){return A.utcFormat})),n.d(t,"utcParse",(function(){return A.utcParse})),n.d(t,"timeFormatLocale",(function(){return A.timeFormatLocale})),n.d(t,"isoFormat",(function(){return A.isoFormat})),n.d(t,"isoParse",(function(){return A.isoParse}));var T=n(/*! d3-timer */"./node_modules/d3-timer/src/index.js");n.d(t,"now",(function(){return T.now})),n.d(t,"timer",(function(){return T.timer})),n.d(t,"timerFlush",(function(){return T.timerFlush})),n.d(t,"timeout",(function(){return T.timeout})),n.d(t,"interval",(function(){return T.interval}));var R=n(/*! d3-transition */"./node_modules/d3-transition/src/index.js");n.d(t,"transition",(function(){return R.transition})),n.d(t,"active",(function(){return R.active})),n.d(t,"interrupt",(function(){return R.interrupt}));var N=n(/*! d3-voronoi */"./node_modules/d3-voronoi/src/index.js");n.d(t,"voronoi",(function(){return N.voronoi}));var P=n(/*! d3-zoom */"./node_modules/d3-zoom/src/index.js");n.d(t,"zoom",(function(){return P.zoom})),n.d(t,"zoomTransform",(function(){return P.zoomTransform})),n.d(t,"zoomIdentity",(function(){return P.zoomIdentity}))},"./node_modules/dagre-d3/index.js":
/*!****************************************!*\
  !*** ./node_modules/dagre-d3/index.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){
/**
 * @license
 * Copyright (c) 2012-2013 Chris Pettitt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
e.exports={graphlib:n(/*! ./lib/graphlib */"./node_modules/dagre-d3/lib/graphlib.js"),dagre:n(/*! ./lib/dagre */"./node_modules/dagre-d3/lib/dagre.js"),intersect:n(/*! ./lib/intersect */"./node_modules/dagre-d3/lib/intersect/index.js"),render:n(/*! ./lib/render */"./node_modules/dagre-d3/lib/render.js"),util:n(/*! ./lib/util */"./node_modules/dagre-d3/lib/util.js"),version:n(/*! ./lib/version */"./node_modules/dagre-d3/lib/version.js")}},"./node_modules/dagre-d3/lib/arrows.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre-d3/lib/arrows.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js");function o(e,t,n,o){var u=e.append("marker").attr("id",t).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 0 L 10 5 L 0 10 z").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(u,n[o+"Style"]),n[o+"Class"]&&u.attr("class",n[o+"Class"])}e.exports={default:o,normal:o,vee:function(e,t,n,o){var u=e.append("marker").attr("id",t).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 0 L 10 5 L 0 10 L 4 5 z").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(u,n[o+"Style"]),n[o+"Class"]&&u.attr("class",n[o+"Class"])},undirected:function(e,t,n,o){var u=e.append("marker").attr("id",t).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 5 L 10 5").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(u,n[o+"Style"]),n[o+"Class"]&&u.attr("class",n[o+"Class"])}}},"./node_modules/dagre-d3/lib/create-clusters.js":
/*!******************************************************!*\
  !*** ./node_modules/dagre-d3/lib/create-clusters.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),o=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js"),u=n(/*! ./label/add-label */"./node_modules/dagre-d3/lib/label/add-label.js");e.exports=function(e,t){var n,i=t.nodes().filter((function(e){return r.isSubgraph(t,e)})),s=e.selectAll("g.cluster").data(i,(function(e){return e}));s.selectAll("*").remove(),s.enter().append("g").attr("class","cluster").attr("id",(function(e){return t.node(e).id})).style("opacity",0),s=e.selectAll("g.cluster"),r.applyTransition(s,t).style("opacity",1),s.each((function(e){var n=t.node(e),r=o.select(this);o.select(this).append("rect");var i=r.append("g").attr("class","label");u(i,n,n.clusterLabelPos)})),s.selectAll("rect").each((function(e){var n=t.node(e),u=o.select(this);r.applyStyle(u,n.style)})),n=s.exit?s.exit():s.selectAll(null);return r.applyTransition(n,t).style("opacity",0).remove(),s}},"./node_modules/dagre-d3/lib/create-edge-labels.js":
/*!*********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/create-edge-labels.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js"),o=n(/*! ./label/add-label */"./node_modules/dagre-d3/lib/label/add-label.js"),u=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),i=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js");e.exports=function(e,t){var n,s=e.selectAll("g.edgeLabel").data(t.edges(),(function(e){return u.edgeToId(e)})).classed("update",!0);s.exit().remove(),s.enter().append("g").classed("edgeLabel",!0).style("opacity",0),(s=e.selectAll("g.edgeLabel")).each((function(e){var n=i.select(this);n.select(".label").remove();var u=t.edge(e),s=o(n,t.edge(e),0,0).classed("label",!0),a=s.node().getBBox();u.labelId&&s.attr("id",u.labelId),r.has(u,"width")||(u.width=a.width),r.has(u,"height")||(u.height=a.height)})),n=s.exit?s.exit():s.selectAll(null);return u.applyTransition(n,t).style("opacity",0).remove(),s}},"./node_modules/dagre-d3/lib/create-edge-paths.js":
/*!********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/create-edge-paths.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js"),o=n(/*! ./intersect/intersect-node */"./node_modules/dagre-d3/lib/intersect/intersect-node.js"),u=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),i=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js");function s(e,t){var n=(i.line||i.svg.line)().x((function(e){return e.x})).y((function(e){return e.y}));return(n.curve||n.interpolate)(e.curve),n(t)}e.exports=function(e,t,n){var a=e.selectAll("g.edgePath").data(t.edges(),(function(e){return u.edgeToId(e)})).classed("update",!0),c=function(e,t){var n=e.enter().append("g").attr("class","edgePath").style("opacity",0);return n.append("path").attr("class","path").attr("d",(function(e){var n=t.edge(e),o=t.node(e.v).elem;return s(n,r.range(n.points.length).map((function(){return t=(e=o).getBBox(),{x:(n=e.ownerSVGElement.getScreenCTM().inverse().multiply(e.getScreenCTM()).translate(t.width/2,t.height/2)).e,y:n.f};var e,t,n})))})),n.append("defs"),n}(a,t);!function(e,t){var n=e.exit();u.applyTransition(n,t).style("opacity",0).remove()}(a,t);var d=void 0!==a.merge?a.merge(c):a;return u.applyTransition(d,t).style("opacity",1),d.each((function(e){var n=i.select(this),r=t.edge(e);r.elem=this,r.id&&n.attr("id",r.id),u.applyClass(n,r.class,(n.classed("update")?"update ":"")+"edgePath")})),d.selectAll("path.path").each((function(e){var n=t.edge(e);n.arrowheadId=r.uniqueId("arrowhead");var a=i.select(this).attr("marker-end",(function(){return"url("+(e=location.href,t=n.arrowheadId,e.split("#")[0]+"#"+t+")");var e,t})).style("fill","none");u.applyTransition(a,t).attr("d",(function(e){return function(e,t){var n=e.edge(t),r=e.node(t.v),u=e.node(t.w),i=n.points.slice(1,n.points.length-1);return i.unshift(o(r,i[0])),i.push(o(u,i[i.length-1])),s(n,i)}(t,e)})),u.applyStyle(a,n.style)})),d.selectAll("defs *").remove(),d.selectAll("defs").each((function(e){var r=t.edge(e);(0,n[r.arrowhead])(i.select(this),r.arrowheadId,r,"arrowhead")})),d}},"./node_modules/dagre-d3/lib/create-nodes.js":
/*!***************************************************!*\
  !*** ./node_modules/dagre-d3/lib/create-nodes.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js"),o=n(/*! ./label/add-label */"./node_modules/dagre-d3/lib/label/add-label.js"),u=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),i=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js");e.exports=function(e,t,n){var s,a=t.nodes().filter((function(e){return!u.isSubgraph(t,e)})),c=e.selectAll("g.node").data(a,(function(e){return e})).classed("update",!0);c.exit().remove(),c.enter().append("g").attr("class","node").style("opacity",0),(c=e.selectAll("g.node")).each((function(e){var s=t.node(e),a=i.select(this);u.applyClass(a,s.class,(a.classed("update")?"update ":"")+"node"),a.select("g.label").remove();var c=a.append("g").attr("class","label"),d=o(c,s),l=n[s.shape],f=r.pick(d.node().getBBox(),"width","height");s.elem=this,s.id&&a.attr("id",s.id),s.labelId&&c.attr("id",s.labelId),r.has(s,"width")&&(f.width=s.width),r.has(s,"height")&&(f.height=s.height),f.width+=s.paddingLeft+s.paddingRight,f.height+=s.paddingTop+s.paddingBottom,c.attr("transform","translate("+(s.paddingLeft-s.paddingRight)/2+","+(s.paddingTop-s.paddingBottom)/2+")");var h=i.select(this);h.select(".label-container").remove();var m=l(h,f,s).classed("label-container",!0);u.applyStyle(m,s.style);var p=m.node().getBBox();s.width=p.width,s.height=p.height})),s=c.exit?c.exit():c.selectAll(null);return u.applyTransition(s,t).style("opacity",0).remove(),c}},"./node_modules/dagre-d3/lib/d3.js":
/*!*****************************************!*\
  !*** ./node_modules/dagre-d3/lib/d3.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r;if(!r)try{r=n(/*! d3 */"./node_modules/dagre-d3/node_modules/d3/index.js")}catch(e){}r||(r=window.d3),e.exports=r},"./node_modules/dagre-d3/lib/dagre.js":
/*!********************************************!*\
  !*** ./node_modules/dagre-d3/lib/dagre.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r;try{r=n(/*! dagre */"./node_modules/dagre/index.js")}catch(e){}r||(r=window.dagre),e.exports=r},"./node_modules/dagre-d3/lib/graphlib.js":
/*!***********************************************!*\
  !*** ./node_modules/dagre-d3/lib/graphlib.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r;try{r=n(/*! graphlib */"./node_modules/graphlib/index.js")}catch(e){}r||(r=window.graphlib),e.exports=r},"./node_modules/dagre-d3/lib/intersect/index.js":
/*!******************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/index.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){e.exports={node:n(/*! ./intersect-node */"./node_modules/dagre-d3/lib/intersect/intersect-node.js"),circle:n(/*! ./intersect-circle */"./node_modules/dagre-d3/lib/intersect/intersect-circle.js"),ellipse:n(/*! ./intersect-ellipse */"./node_modules/dagre-d3/lib/intersect/intersect-ellipse.js"),polygon:n(/*! ./intersect-polygon */"./node_modules/dagre-d3/lib/intersect/intersect-polygon.js"),rect:n(/*! ./intersect-rect */"./node_modules/dagre-d3/lib/intersect/intersect-rect.js")}},"./node_modules/dagre-d3/lib/intersect/intersect-circle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-circle.js ***!
  \*****************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./intersect-ellipse */"./node_modules/dagre-d3/lib/intersect/intersect-ellipse.js");e.exports=function(e,t,n){return r(e,t,t,n)}},"./node_modules/dagre-d3/lib/intersect/intersect-ellipse.js":
/*!******************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-ellipse.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n,r){var o=e.x,u=e.y,i=o-r.x,s=u-r.y,a=Math.sqrt(t*t*s*s+n*n*i*i),c=Math.abs(t*n*i/a);r.x<o&&(c=-c);var d=Math.abs(t*n*s/a);r.y<u&&(d=-d);return{x:o+c,y:u+d}}},"./node_modules/dagre-d3/lib/intersect/intersect-line.js":
/*!***************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-line.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t){function n(e,t){return e*t>0}e.exports=function(e,t,r,o){var u,i,s,a,c,d,l,f,h,m,p,_,g;if(u=t.y-e.y,s=e.x-t.x,c=t.x*e.y-e.x*t.y,h=u*r.x+s*r.y+c,m=u*o.x+s*o.y+c,0!==h&&0!==m&&n(h,m))return;if(i=o.y-r.y,a=r.x-o.x,d=o.x*r.y-r.x*o.y,l=i*e.x+a*e.y+d,f=i*t.x+a*t.y+d,0!==l&&0!==f&&n(l,f))return;if(0===(p=u*a-i*s))return;return _=Math.abs(p/2),{x:(g=s*d-a*c)<0?(g-_)/p:(g+_)/p,y:(g=i*c-u*d)<0?(g-_)/p:(g+_)/p}}},"./node_modules/dagre-d3/lib/intersect/intersect-node.js":
/*!***************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-node.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return e.intersect(t)}},"./node_modules/dagre-d3/lib/intersect/intersect-polygon.js":
/*!******************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-polygon.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./intersect-line */"./node_modules/dagre-d3/lib/intersect/intersect-line.js");e.exports=function(e,t,n){var o=e.x,u=e.y,i=[],s=Number.POSITIVE_INFINITY,a=Number.POSITIVE_INFINITY;t.forEach((function(e){s=Math.min(s,e.x),a=Math.min(a,e.y)}));for(var c=o-e.width/2-s,d=u-e.height/2-a,l=0;l<t.length;l++){var f=t[l],h=t[l<t.length-1?l+1:0],m=r(e,n,{x:c+f.x,y:d+f.y},{x:c+h.x,y:d+h.y});m&&i.push(m)}if(!i.length)return console.log("NO INTERSECTION FOUND, RETURN NODE CENTER",e),e;i.length>1&&i.sort((function(e,t){var r=e.x-n.x,o=e.y-n.y,u=Math.sqrt(r*r+o*o),i=t.x-n.x,s=t.y-n.y,a=Math.sqrt(i*i+s*s);return u<a?-1:u===a?0:1}));return i[0]}},"./node_modules/dagre-d3/lib/intersect/intersect-rect.js":
/*!***************************************************************!*\
  !*** ./node_modules/dagre-d3/lib/intersect/intersect-rect.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){var n,r,o=e.x,u=e.y,i=t.x-o,s=t.y-u,a=e.width/2,c=e.height/2;Math.abs(s)*a>Math.abs(i)*c?(s<0&&(c=-c),n=0===s?0:c*i/s,r=c):(i<0&&(a=-a),n=a,r=0===i?0:a*s/i);return{x:o+n,y:u+r}}},"./node_modules/dagre-d3/lib/label/add-html-label.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/label/add-html-label.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../util */"./node_modules/dagre-d3/lib/util.js");e.exports=function(e,t){var n=e.append("foreignObject").attr("width","100000"),o=n.append("xhtml:div");o.attr("xmlns","http://www.w3.org/1999/xhtml");var u=t.label;switch(typeof u){case"function":o.insert(u);break;case"object":o.insert((function(){return u}));break;default:o.html(u)}r.applyStyle(o,t.labelStyle),o.style("display","inline-block"),o.style("white-space","nowrap");var i=o.node().getBoundingClientRect();return n.attr("width",i.width).attr("height",i.height),n}},"./node_modules/dagre-d3/lib/label/add-label.js":
/*!******************************************************!*\
  !*** ./node_modules/dagre-d3/lib/label/add-label.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./add-text-label */"./node_modules/dagre-d3/lib/label/add-text-label.js"),o=n(/*! ./add-html-label */"./node_modules/dagre-d3/lib/label/add-html-label.js"),u=n(/*! ./add-svg-label */"./node_modules/dagre-d3/lib/label/add-svg-label.js");e.exports=function(e,t,n){var i=t.label,s=e.append("g");"svg"===t.labelType?u(s,t):"string"!=typeof i||"html"===t.labelType?o(s,t):r(s,t);var a,c=s.node().getBBox();switch(n){case"top":a=-t.height/2;break;case"bottom":a=t.height/2-c.height;break;default:a=-c.height/2}return s.attr("transform","translate("+-c.width/2+","+a+")"),s}},"./node_modules/dagre-d3/lib/label/add-svg-label.js":
/*!**********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/label/add-svg-label.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../util */"./node_modules/dagre-d3/lib/util.js");e.exports=function(e,t){var n=e;return n.node().appendChild(t.label),r.applyStyle(n,t.labelStyle),n}},"./node_modules/dagre-d3/lib/label/add-text-label.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/label/add-text-label.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../util */"./node_modules/dagre-d3/lib/util.js");e.exports=function(e,t){for(var n=e.append("text"),o=function(e){for(var t,n="",r=!1,o=0;o<e.length;++o)if(t=e[o],r){switch(t){case"n":n+="\n";break;default:n+=t}r=!1}else"\\"===t?r=!0:n+=t;return n}(t.label).split("\n"),u=0;u<o.length;u++)n.append("tspan").attr("xml:space","preserve").attr("dy","1em").attr("x","1").text(o[u]);return r.applyStyle(n,t.labelStyle),n}},"./node_modules/dagre-d3/lib/lodash.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre-d3/lib/lodash.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r;try{r={defaults:n(/*! lodash/defaults */"./node_modules/lodash/defaults.js"),each:n(/*! lodash/each */"./node_modules/lodash/each.js"),isFunction:n(/*! lodash/isFunction */"./node_modules/lodash/isFunction.js"),isPlainObject:n(/*! lodash/isPlainObject */"./node_modules/lodash/isPlainObject.js"),pick:n(/*! lodash/pick */"./node_modules/lodash/pick.js"),has:n(/*! lodash/has */"./node_modules/lodash/has.js"),range:n(/*! lodash/range */"./node_modules/lodash/range.js"),uniqueId:n(/*! lodash/uniqueId */"./node_modules/lodash/uniqueId.js")}}catch(e){}r||(r=window._),e.exports=r},"./node_modules/dagre-d3/lib/position-clusters.js":
/*!********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/position-clusters.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),o=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js");e.exports=function(e,t){var n=e.filter((function(){return!o.select(this).classed("update")}));function u(e){var n=t.node(e);return"translate("+n.x+","+n.y+")"}n.attr("transform",u),r.applyTransition(e,t).style("opacity",1).attr("transform",u),r.applyTransition(n.selectAll("rect"),t).attr("width",(function(e){return t.node(e).width})).attr("height",(function(e){return t.node(e).height})).attr("x",(function(e){return-t.node(e).width/2})).attr("y",(function(e){return-t.node(e).height/2}))}},"./node_modules/dagre-d3/lib/position-edge-labels.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre-d3/lib/position-edge-labels.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),o=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js"),u=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js");e.exports=function(e,t){function n(e){var n=t.edge(e);return u.has(n,"x")?"translate("+n.x+","+n.y+")":""}e.filter((function(){return!o.select(this).classed("update")})).attr("transform",n),r.applyTransition(e,t).style("opacity",1).attr("transform",n)}},"./node_modules/dagre-d3/lib/position-nodes.js":
/*!*****************************************************!*\
  !*** ./node_modules/dagre-d3/lib/position-nodes.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./util */"./node_modules/dagre-d3/lib/util.js"),o=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js");e.exports=function(e,t){function n(e){var n=t.node(e);return"translate("+n.x+","+n.y+")"}e.filter((function(){return!o.select(this).classed("update")})).attr("transform",n),r.applyTransition(e,t).style("opacity",1).attr("transform",n)}},"./node_modules/dagre-d3/lib/render.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre-d3/lib/render.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js"),o=n(/*! ./d3 */"./node_modules/dagre-d3/lib/d3.js"),u=n(/*! ./dagre */"./node_modules/dagre-d3/lib/dagre.js").layout;e.exports=function(){var e=n(/*! ./create-nodes */"./node_modules/dagre-d3/lib/create-nodes.js"),t=n(/*! ./create-clusters */"./node_modules/dagre-d3/lib/create-clusters.js"),o=n(/*! ./create-edge-labels */"./node_modules/dagre-d3/lib/create-edge-labels.js"),c=n(/*! ./create-edge-paths */"./node_modules/dagre-d3/lib/create-edge-paths.js"),d=n(/*! ./position-nodes */"./node_modules/dagre-d3/lib/position-nodes.js"),l=n(/*! ./position-edge-labels */"./node_modules/dagre-d3/lib/position-edge-labels.js"),f=n(/*! ./position-clusters */"./node_modules/dagre-d3/lib/position-clusters.js"),h=n(/*! ./shapes */"./node_modules/dagre-d3/lib/shapes.js"),m=n(/*! ./arrows */"./node_modules/dagre-d3/lib/arrows.js"),p=function(n,p){!function(e){e.nodes().forEach((function(t){var n=e.node(t);r.has(n,"label")||e.children(t).length||(n.label=t),r.has(n,"paddingX")&&r.defaults(n,{paddingLeft:n.paddingX,paddingRight:n.paddingX}),r.has(n,"paddingY")&&r.defaults(n,{paddingTop:n.paddingY,paddingBottom:n.paddingY}),r.has(n,"padding")&&r.defaults(n,{paddingLeft:n.padding,paddingRight:n.padding,paddingTop:n.padding,paddingBottom:n.padding}),r.defaults(n,i),r.each(["paddingLeft","paddingRight","paddingTop","paddingBottom"],(function(e){n[e]=Number(n[e])})),r.has(n,"width")&&(n._prevWidth=n.width),r.has(n,"height")&&(n._prevHeight=n.height)})),e.edges().forEach((function(t){var n=e.edge(t);r.has(n,"label")||(n.label=""),r.defaults(n,s)}))}(p);var _=a(n,"output"),g=a(_,"clusters"),v=a(_,"edgePaths"),j=o(a(_,"edgeLabels"),p),b=e(a(_,"nodes"),p,h);u(p),d(b,p),l(j,p),c(v,p,m);var y=t(g,p);f(y,p),function(e){r.each(e.nodes(),(function(t){var n=e.node(t);r.has(n,"_prevWidth")?n.width=n._prevWidth:delete n.width,r.has(n,"_prevHeight")?n.height=n._prevHeight:delete n.height,delete n._prevWidth,delete n._prevHeight}))}(p)};return p.createNodes=function(t){return arguments.length?(e=t,p):e},p.createClusters=function(e){return arguments.length?(t=e,p):t},p.createEdgeLabels=function(e){return arguments.length?(o=e,p):o},p.createEdgePaths=function(e){return arguments.length?(c=e,p):c},p.shapes=function(e){return arguments.length?(h=e,p):h},p.arrows=function(e){return arguments.length?(m=e,p):m},p};var i={paddingLeft:10,paddingRight:10,paddingTop:10,paddingBottom:10,rx:0,ry:0,shape:"rect"},s={arrowhead:"normal",curve:o.curveLinear};function a(e,t){var n=e.select("g."+t);return n.empty()&&(n=e.append("g").attr("class",t)),n}},"./node_modules/dagre-d3/lib/shapes.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre-d3/lib/shapes.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./intersect/intersect-rect */"./node_modules/dagre-d3/lib/intersect/intersect-rect.js"),o=n(/*! ./intersect/intersect-ellipse */"./node_modules/dagre-d3/lib/intersect/intersect-ellipse.js"),u=n(/*! ./intersect/intersect-circle */"./node_modules/dagre-d3/lib/intersect/intersect-circle.js"),i=n(/*! ./intersect/intersect-polygon */"./node_modules/dagre-d3/lib/intersect/intersect-polygon.js");e.exports={rect:function(e,t,n){var o=e.insert("rect",":first-child").attr("rx",n.rx).attr("ry",n.ry).attr("x",-t.width/2).attr("y",-t.height/2).attr("width",t.width).attr("height",t.height);return n.intersect=function(e){return r(n,e)},o},ellipse:function(e,t,n){var r=t.width/2,u=t.height/2,i=e.insert("ellipse",":first-child").attr("x",-t.width/2).attr("y",-t.height/2).attr("rx",r).attr("ry",u);return n.intersect=function(e){return o(n,r,u,e)},i},circle:function(e,t,n){var r=Math.max(t.width,t.height)/2,o=e.insert("circle",":first-child").attr("x",-t.width/2).attr("y",-t.height/2).attr("r",r);return n.intersect=function(e){return u(n,r,e)},o},diamond:function(e,t,n){var r=t.width*Math.SQRT2/2,o=t.height*Math.SQRT2/2,u=[{x:0,y:-o},{x:-r,y:0},{x:0,y:o},{x:r,y:0}],s=e.insert("polygon",":first-child").attr("points",u.map((function(e){return e.x+","+e.y})).join(" "));return n.intersect=function(e){return i(n,u,e)},s}}},"./node_modules/dagre-d3/lib/util.js":
/*!*******************************************!*\
  !*** ./node_modules/dagre-d3/lib/util.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre-d3/lib/lodash.js");e.exports={isSubgraph:function(e,t){return!!e.children(t).length},edgeToId:function(e){return u(e.v)+":"+u(e.w)+":"+u(e.name)},applyStyle:function(e,t){t&&e.attr("style",t)},applyClass:function(e,t,n){t&&e.attr("class",t).attr("class",n+" "+e.attr("class"))},applyTransition:function(e,t){var n=t.graph();if(r.isPlainObject(n)){var o=n.transition;if(r.isFunction(o))return o(e)}return e}};var o=/:/g;function u(e){return e?String(e).replace(o,"\\:"):""}},"./node_modules/dagre-d3/lib/version.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre-d3/lib/version.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){e.exports="0.6.4"},"./node_modules/dagre-d3/node_modules/d3/dist/package.js":
/*!***************************************************************!*\
  !*** ./node_modules/dagre-d3/node_modules/d3/dist/package.js ***!
  \***************************************************************/
/*! exports provided: name, version, description, keywords, homepage, license, author, main, unpkg, jsdelivr, module, repository, files, scripts, devDependencies, dependencies */function(e,t,n){"use strict";n.r(t),n.d(t,"name",(function(){return r})),n.d(t,"version",(function(){return o})),n.d(t,"description",(function(){return u})),n.d(t,"keywords",(function(){return i})),n.d(t,"homepage",(function(){return s})),n.d(t,"license",(function(){return a})),n.d(t,"author",(function(){return c})),n.d(t,"main",(function(){return d})),n.d(t,"unpkg",(function(){return l})),n.d(t,"jsdelivr",(function(){return f})),n.d(t,"module",(function(){return e})),n.d(t,"repository",(function(){return h})),n.d(t,"files",(function(){return m})),n.d(t,"scripts",(function(){return p})),n.d(t,"devDependencies",(function(){return _})),n.d(t,"dependencies",(function(){return g}));var r="d3",o="5.16.0",u="Data-Driven Documents",i=["dom","visualization","svg","animation","canvas"],s="https://d3js.org",a="BSD-3-Clause",c={name:"Mike Bostock",url:"https://bost.ocks.org/mike"},d="dist/d3.node.js",l="dist/d3.min.js",f="dist/d3.min.js",h=(e="index.js",{type:"git",url:"https://github.com/d3/d3.git"}),m=["dist/**/*.js","index.js"],p={pretest:"rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",test:"tape 'test/**/*-test.js'",prepublishOnly:"yarn test",postpublish:'git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m "d3 ${npm_package_version}" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m "${npm_package_version}" && git tag -am "${npm_package_version}" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js'},_={json2module:"0.0",rimraf:"2",rollup:"1","rollup-plugin-ascii":"0.0","rollup-plugin-node-resolve":"3","rollup-plugin-terser":"5",tape:"4"},g={"d3-array":"1","d3-axis":"1","d3-brush":"1","d3-chord":"1","d3-collection":"1","d3-color":"1","d3-contour":"1","d3-dispatch":"1","d3-drag":"1","d3-dsv":"1","d3-ease":"1","d3-fetch":"1","d3-force":"1","d3-format":"1","d3-geo":"1","d3-hierarchy":"1","d3-interpolate":"1","d3-path":"1","d3-polygon":"1","d3-quadtree":"1","d3-random":"1","d3-scale":"2","d3-scale-chromatic":"1","d3-selection":"1","d3-shape":"1","d3-time":"1","d3-time-format":"2","d3-timer":"1","d3-transition":"1","d3-voronoi":"1","d3-zoom":"1"}},"./node_modules/dagre-d3/node_modules/d3/index.js":
/*!********************************************************!*\
  !*** ./node_modules/dagre-d3/node_modules/d3/index.js ***!
  \********************************************************/
/*! exports provided: version, bisect, bisectRight, bisectLeft, ascending, bisector, cross, descending, deviation, extent, histogram, thresholdFreedmanDiaconis, thresholdScott, thresholdSturges, max, mean, median, merge, min, pairs, permute, quantile, range, scan, shuffle, sum, ticks, tickIncrement, tickStep, transpose, variance, zip, axisTop, axisRight, axisBottom, axisLeft, brush, brushX, brushY, brushSelection, chord, ribbon, nest, set, map, keys, values, entries, color, rgb, hsl, lab, hcl, lch, gray, cubehelix, contours, contourDensity, dispatch, drag, dragDisable, dragEnable, dsvFormat, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue, autoType, easeLinear, easeQuad, easeQuadIn, easeQuadOut, easeQuadInOut, easeCubic, easeCubicIn, easeCubicOut, easeCubicInOut, easePoly, easePolyIn, easePolyOut, easePolyInOut, easeSin, easeSinIn, easeSinOut, easeSinInOut, easeExp, easeExpIn, easeExpOut, easeExpInOut, easeCircle, easeCircleIn, easeCircleOut, easeCircleInOut, easeBounce, easeBounceIn, easeBounceOut, easeBounceInOut, easeBack, easeBackIn, easeBackOut, easeBackInOut, easeElastic, easeElasticIn, easeElasticOut, easeElasticInOut, blob, buffer, dsv, csv, tsv, image, json, text, xml, html, svg, forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY, formatDefaultLocale, format, formatPrefix, formatLocale, formatSpecifier, FormatSpecifier, precisionFixed, precisionPrefix, precisionRound, geoArea, geoBounds, geoCentroid, geoCircle, geoClipAntimeridian, geoClipCircle, geoClipExtent, geoClipRectangle, geoContains, geoDistance, geoGraticule, geoGraticule10, geoInterpolate, geoLength, geoPath, geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEqualAreaRaw, geoAzimuthalEquidistant, geoAzimuthalEquidistantRaw, geoConicConformal, geoConicConformalRaw, geoConicEqualArea, geoConicEqualAreaRaw, geoConicEquidistant, geoConicEquidistantRaw, geoEqualEarth, geoEqualEarthRaw, geoEquirectangular, geoEquirectangularRaw, geoGnomonic, geoGnomonicRaw, geoIdentity, geoProjection, geoProjectionMutator, geoMercator, geoMercatorRaw, geoNaturalEarth1, geoNaturalEarth1Raw, geoOrthographic, geoOrthographicRaw, geoStereographic, geoStereographicRaw, geoTransverseMercator, geoTransverseMercatorRaw, geoRotation, geoStream, geoTransform, cluster, hierarchy, pack, packSiblings, packEnclose, partition, stratify, tree, treemap, treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify, interpolate, interpolateArray, interpolateBasis, interpolateBasisClosed, interpolateDate, interpolateDiscrete, interpolateHue, interpolateNumber, interpolateNumberArray, interpolateObject, interpolateRound, interpolateString, interpolateTransformCss, interpolateTransformSvg, interpolateZoom, interpolateRgb, interpolateRgbBasis, interpolateRgbBasisClosed, interpolateHsl, interpolateHslLong, interpolateLab, interpolateHcl, interpolateHclLong, interpolateCubehelix, interpolateCubehelixLong, piecewise, quantize, path, polygonArea, polygonCentroid, polygonHull, polygonContains, polygonLength, quadtree, randomUniform, randomNormal, randomLogNormal, randomBates, randomIrwinHall, randomExponential, scaleBand, scalePoint, scaleIdentity, scaleLinear, scaleLog, scaleSymlog, scaleOrdinal, scaleImplicit, scalePow, scaleSqrt, scaleQuantile, scaleQuantize, scaleThreshold, scaleTime, scaleUtc, scaleSequential, scaleSequentialLog, scaleSequentialPow, scaleSequentialSqrt, scaleSequentialSymlog, scaleSequentialQuantile, scaleDiverging, scaleDivergingLog, scaleDivergingPow, scaleDivergingSqrt, scaleDivergingSymlog, tickFormat, schemeCategory10, schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3, schemeTableau10, interpolateBrBG, schemeBrBG, interpolatePRGn, schemePRGn, interpolatePiYG, schemePiYG, interpolatePuOr, schemePuOr, interpolateRdBu, schemeRdBu, interpolateRdGy, schemeRdGy, interpolateRdYlBu, schemeRdYlBu, interpolateRdYlGn, schemeRdYlGn, interpolateSpectral, schemeSpectral, interpolateBuGn, schemeBuGn, interpolateBuPu, schemeBuPu, interpolateGnBu, schemeGnBu, interpolateOrRd, schemeOrRd, interpolatePuBuGn, schemePuBuGn, interpolatePuBu, schemePuBu, interpolatePuRd, schemePuRd, interpolateRdPu, schemeRdPu, interpolateYlGnBu, schemeYlGnBu, interpolateYlGn, schemeYlGn, interpolateYlOrBr, schemeYlOrBr, interpolateYlOrRd, schemeYlOrRd, interpolateBlues, schemeBlues, interpolateGreens, schemeGreens, interpolateGreys, schemeGreys, interpolatePurples, schemePurples, interpolateReds, schemeReds, interpolateOranges, schemeOranges, interpolateCividis, interpolateCubehelixDefault, interpolateRainbow, interpolateWarm, interpolateCool, interpolateSinebow, interpolateTurbo, interpolateViridis, interpolateMagma, interpolateInferno, interpolatePlasma, create, creator, local, matcher, mouse, namespace, namespaces, clientPoint, select, selectAll, selection, selector, selectorAll, style, touch, touches, window, event, customEvent, arc, area, line, pie, areaRadial, radialArea, lineRadial, radialLine, pointRadial, linkHorizontal, linkVertical, linkRadial, symbol, symbols, symbolCircle, symbolCross, symbolDiamond, symbolSquare, symbolStar, symbolTriangle, symbolWye, curveBasisClosed, curveBasisOpen, curveBasis, curveBundle, curveCardinalClosed, curveCardinalOpen, curveCardinal, curveCatmullRomClosed, curveCatmullRomOpen, curveCatmullRom, curveLinearClosed, curveLinear, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore, stack, stackOffsetExpand, stackOffsetDiverging, stackOffsetNone, stackOffsetSilhouette, stackOffsetWiggle, stackOrderAppearance, stackOrderAscending, stackOrderDescending, stackOrderInsideOut, stackOrderNone, stackOrderReverse, timeInterval, timeMillisecond, timeMilliseconds, utcMillisecond, utcMilliseconds, timeSecond, timeSeconds, utcSecond, utcSeconds, timeMinute, timeMinutes, timeHour, timeHours, timeDay, timeDays, timeWeek, timeWeeks, timeSunday, timeSundays, timeMonday, timeMondays, timeTuesday, timeTuesdays, timeWednesday, timeWednesdays, timeThursday, timeThursdays, timeFriday, timeFridays, timeSaturday, timeSaturdays, timeMonth, timeMonths, timeYear, timeYears, utcMinute, utcMinutes, utcHour, utcHours, utcDay, utcDays, utcWeek, utcWeeks, utcSunday, utcSundays, utcMonday, utcMondays, utcTuesday, utcTuesdays, utcWednesday, utcWednesdays, utcThursday, utcThursdays, utcFriday, utcFridays, utcSaturday, utcSaturdays, utcMonth, utcMonths, utcYear, utcYears, timeFormatDefaultLocale, timeFormat, timeParse, utcFormat, utcParse, timeFormatLocale, isoFormat, isoParse, now, timer, timerFlush, timeout, interval, transition, active, interrupt, voronoi, zoom, zoomTransform, zoomIdentity */function(e,t,n){"use strict";n.r(t);var r=n(/*! ./dist/package.js */"./node_modules/dagre-d3/node_modules/d3/dist/package.js");n.d(t,"version",(function(){return r.version}));var o=n(/*! d3-array */"./node_modules/d3-array/src/index.js");n.d(t,"bisect",(function(){return o.bisect})),n.d(t,"bisectRight",(function(){return o.bisectRight})),n.d(t,"bisectLeft",(function(){return o.bisectLeft})),n.d(t,"ascending",(function(){return o.ascending})),n.d(t,"bisector",(function(){return o.bisector})),n.d(t,"cross",(function(){return o.cross})),n.d(t,"descending",(function(){return o.descending})),n.d(t,"deviation",(function(){return o.deviation})),n.d(t,"extent",(function(){return o.extent})),n.d(t,"histogram",(function(){return o.histogram})),n.d(t,"thresholdFreedmanDiaconis",(function(){return o.thresholdFreedmanDiaconis})),n.d(t,"thresholdScott",(function(){return o.thresholdScott})),n.d(t,"thresholdSturges",(function(){return o.thresholdSturges})),n.d(t,"max",(function(){return o.max})),n.d(t,"mean",(function(){return o.mean})),n.d(t,"median",(function(){return o.median})),n.d(t,"merge",(function(){return o.merge})),n.d(t,"min",(function(){return o.min})),n.d(t,"pairs",(function(){return o.pairs})),n.d(t,"permute",(function(){return o.permute})),n.d(t,"quantile",(function(){return o.quantile})),n.d(t,"range",(function(){return o.range})),n.d(t,"scan",(function(){return o.scan})),n.d(t,"shuffle",(function(){return o.shuffle})),n.d(t,"sum",(function(){return o.sum})),n.d(t,"ticks",(function(){return o.ticks})),n.d(t,"tickIncrement",(function(){return o.tickIncrement})),n.d(t,"tickStep",(function(){return o.tickStep})),n.d(t,"transpose",(function(){return o.transpose})),n.d(t,"variance",(function(){return o.variance})),n.d(t,"zip",(function(){return o.zip}));var u=n(/*! d3-axis */"./node_modules/d3-axis/src/index.js");n.d(t,"axisTop",(function(){return u.axisTop})),n.d(t,"axisRight",(function(){return u.axisRight})),n.d(t,"axisBottom",(function(){return u.axisBottom})),n.d(t,"axisLeft",(function(){return u.axisLeft}));var i=n(/*! d3-brush */"./node_modules/d3-brush/src/index.js");n.d(t,"brush",(function(){return i.brush})),n.d(t,"brushX",(function(){return i.brushX})),n.d(t,"brushY",(function(){return i.brushY})),n.d(t,"brushSelection",(function(){return i.brushSelection}));var s=n(/*! d3-chord */"./node_modules/d3-chord/src/index.js");n.d(t,"chord",(function(){return s.chord})),n.d(t,"ribbon",(function(){return s.ribbon}));var a=n(/*! d3-collection */"./node_modules/d3-collection/src/index.js");n.d(t,"nest",(function(){return a.nest})),n.d(t,"set",(function(){return a.set})),n.d(t,"map",(function(){return a.map})),n.d(t,"keys",(function(){return a.keys})),n.d(t,"values",(function(){return a.values})),n.d(t,"entries",(function(){return a.entries}));var c=n(/*! d3-color */"./node_modules/d3-color/src/index.js");n.d(t,"color",(function(){return c.color})),n.d(t,"rgb",(function(){return c.rgb})),n.d(t,"hsl",(function(){return c.hsl})),n.d(t,"lab",(function(){return c.lab})),n.d(t,"hcl",(function(){return c.hcl})),n.d(t,"lch",(function(){return c.lch})),n.d(t,"gray",(function(){return c.gray})),n.d(t,"cubehelix",(function(){return c.cubehelix}));var d=n(/*! d3-contour */"./node_modules/d3-contour/src/index.js");n.d(t,"contours",(function(){return d.contours})),n.d(t,"contourDensity",(function(){return d.contourDensity}));var l=n(/*! d3-dispatch */"./node_modules/d3-dispatch/src/index.js");n.d(t,"dispatch",(function(){return l.dispatch}));var f=n(/*! d3-drag */"./node_modules/d3-drag/src/index.js");n.d(t,"drag",(function(){return f.drag})),n.d(t,"dragDisable",(function(){return f.dragDisable})),n.d(t,"dragEnable",(function(){return f.dragEnable}));var h=n(/*! d3-dsv */"./node_modules/d3-dsv/src/index.js");n.d(t,"dsvFormat",(function(){return h.dsvFormat})),n.d(t,"csvParse",(function(){return h.csvParse})),n.d(t,"csvParseRows",(function(){return h.csvParseRows})),n.d(t,"csvFormat",(function(){return h.csvFormat})),n.d(t,"csvFormatBody",(function(){return h.csvFormatBody})),n.d(t,"csvFormatRows",(function(){return h.csvFormatRows})),n.d(t,"csvFormatRow",(function(){return h.csvFormatRow})),n.d(t,"csvFormatValue",(function(){return h.csvFormatValue})),n.d(t,"tsvParse",(function(){return h.tsvParse})),n.d(t,"tsvParseRows",(function(){return h.tsvParseRows})),n.d(t,"tsvFormat",(function(){return h.tsvFormat})),n.d(t,"tsvFormatBody",(function(){return h.tsvFormatBody})),n.d(t,"tsvFormatRows",(function(){return h.tsvFormatRows})),n.d(t,"tsvFormatRow",(function(){return h.tsvFormatRow})),n.d(t,"tsvFormatValue",(function(){return h.tsvFormatValue})),n.d(t,"autoType",(function(){return h.autoType}));var m=n(/*! d3-ease */"./node_modules/d3-ease/src/index.js");n.d(t,"easeLinear",(function(){return m.easeLinear})),n.d(t,"easeQuad",(function(){return m.easeQuad})),n.d(t,"easeQuadIn",(function(){return m.easeQuadIn})),n.d(t,"easeQuadOut",(function(){return m.easeQuadOut})),n.d(t,"easeQuadInOut",(function(){return m.easeQuadInOut})),n.d(t,"easeCubic",(function(){return m.easeCubic})),n.d(t,"easeCubicIn",(function(){return m.easeCubicIn})),n.d(t,"easeCubicOut",(function(){return m.easeCubicOut})),n.d(t,"easeCubicInOut",(function(){return m.easeCubicInOut})),n.d(t,"easePoly",(function(){return m.easePoly})),n.d(t,"easePolyIn",(function(){return m.easePolyIn})),n.d(t,"easePolyOut",(function(){return m.easePolyOut})),n.d(t,"easePolyInOut",(function(){return m.easePolyInOut})),n.d(t,"easeSin",(function(){return m.easeSin})),n.d(t,"easeSinIn",(function(){return m.easeSinIn})),n.d(t,"easeSinOut",(function(){return m.easeSinOut})),n.d(t,"easeSinInOut",(function(){return m.easeSinInOut})),n.d(t,"easeExp",(function(){return m.easeExp})),n.d(t,"easeExpIn",(function(){return m.easeExpIn})),n.d(t,"easeExpOut",(function(){return m.easeExpOut})),n.d(t,"easeExpInOut",(function(){return m.easeExpInOut})),n.d(t,"easeCircle",(function(){return m.easeCircle})),n.d(t,"easeCircleIn",(function(){return m.easeCircleIn})),n.d(t,"easeCircleOut",(function(){return m.easeCircleOut})),n.d(t,"easeCircleInOut",(function(){return m.easeCircleInOut})),n.d(t,"easeBounce",(function(){return m.easeBounce})),n.d(t,"easeBounceIn",(function(){return m.easeBounceIn})),n.d(t,"easeBounceOut",(function(){return m.easeBounceOut})),n.d(t,"easeBounceInOut",(function(){return m.easeBounceInOut})),n.d(t,"easeBack",(function(){return m.easeBack})),n.d(t,"easeBackIn",(function(){return m.easeBackIn})),n.d(t,"easeBackOut",(function(){return m.easeBackOut})),n.d(t,"easeBackInOut",(function(){return m.easeBackInOut})),n.d(t,"easeElastic",(function(){return m.easeElastic})),n.d(t,"easeElasticIn",(function(){return m.easeElasticIn})),n.d(t,"easeElasticOut",(function(){return m.easeElasticOut})),n.d(t,"easeElasticInOut",(function(){return m.easeElasticInOut}));var p=n(/*! d3-fetch */"./node_modules/d3-fetch/src/index.js");n.d(t,"blob",(function(){return p.blob})),n.d(t,"buffer",(function(){return p.buffer})),n.d(t,"dsv",(function(){return p.dsv})),n.d(t,"csv",(function(){return p.csv})),n.d(t,"tsv",(function(){return p.tsv})),n.d(t,"image",(function(){return p.image})),n.d(t,"json",(function(){return p.json})),n.d(t,"text",(function(){return p.text})),n.d(t,"xml",(function(){return p.xml})),n.d(t,"html",(function(){return p.html})),n.d(t,"svg",(function(){return p.svg}));var _=n(/*! d3-force */"./node_modules/d3-force/src/index.js");n.d(t,"forceCenter",(function(){return _.forceCenter})),n.d(t,"forceCollide",(function(){return _.forceCollide})),n.d(t,"forceLink",(function(){return _.forceLink})),n.d(t,"forceManyBody",(function(){return _.forceManyBody})),n.d(t,"forceRadial",(function(){return _.forceRadial})),n.d(t,"forceSimulation",(function(){return _.forceSimulation})),n.d(t,"forceX",(function(){return _.forceX})),n.d(t,"forceY",(function(){return _.forceY}));var g=n(/*! d3-format */"./node_modules/d3-format/src/index.js");n.d(t,"formatDefaultLocale",(function(){return g.formatDefaultLocale})),n.d(t,"format",(function(){return g.format})),n.d(t,"formatPrefix",(function(){return g.formatPrefix})),n.d(t,"formatLocale",(function(){return g.formatLocale})),n.d(t,"formatSpecifier",(function(){return g.formatSpecifier})),n.d(t,"FormatSpecifier",(function(){return g.FormatSpecifier})),n.d(t,"precisionFixed",(function(){return g.precisionFixed})),n.d(t,"precisionPrefix",(function(){return g.precisionPrefix})),n.d(t,"precisionRound",(function(){return g.precisionRound}));var v=n(/*! d3-geo */"./node_modules/d3-geo/src/index.js");n.d(t,"geoArea",(function(){return v.geoArea})),n.d(t,"geoBounds",(function(){return v.geoBounds})),n.d(t,"geoCentroid",(function(){return v.geoCentroid})),n.d(t,"geoCircle",(function(){return v.geoCircle})),n.d(t,"geoClipAntimeridian",(function(){return v.geoClipAntimeridian})),n.d(t,"geoClipCircle",(function(){return v.geoClipCircle})),n.d(t,"geoClipExtent",(function(){return v.geoClipExtent})),n.d(t,"geoClipRectangle",(function(){return v.geoClipRectangle})),n.d(t,"geoContains",(function(){return v.geoContains})),n.d(t,"geoDistance",(function(){return v.geoDistance})),n.d(t,"geoGraticule",(function(){return v.geoGraticule})),n.d(t,"geoGraticule10",(function(){return v.geoGraticule10})),n.d(t,"geoInterpolate",(function(){return v.geoInterpolate})),n.d(t,"geoLength",(function(){return v.geoLength})),n.d(t,"geoPath",(function(){return v.geoPath})),n.d(t,"geoAlbers",(function(){return v.geoAlbers})),n.d(t,"geoAlbersUsa",(function(){return v.geoAlbersUsa})),n.d(t,"geoAzimuthalEqualArea",(function(){return v.geoAzimuthalEqualArea})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return v.geoAzimuthalEqualAreaRaw})),n.d(t,"geoAzimuthalEquidistant",(function(){return v.geoAzimuthalEquidistant})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return v.geoAzimuthalEquidistantRaw})),n.d(t,"geoConicConformal",(function(){return v.geoConicConformal})),n.d(t,"geoConicConformalRaw",(function(){return v.geoConicConformalRaw})),n.d(t,"geoConicEqualArea",(function(){return v.geoConicEqualArea})),n.d(t,"geoConicEqualAreaRaw",(function(){return v.geoConicEqualAreaRaw})),n.d(t,"geoConicEquidistant",(function(){return v.geoConicEquidistant})),n.d(t,"geoConicEquidistantRaw",(function(){return v.geoConicEquidistantRaw})),n.d(t,"geoEqualEarth",(function(){return v.geoEqualEarth})),n.d(t,"geoEqualEarthRaw",(function(){return v.geoEqualEarthRaw})),n.d(t,"geoEquirectangular",(function(){return v.geoEquirectangular})),n.d(t,"geoEquirectangularRaw",(function(){return v.geoEquirectangularRaw})),n.d(t,"geoGnomonic",(function(){return v.geoGnomonic})),n.d(t,"geoGnomonicRaw",(function(){return v.geoGnomonicRaw})),n.d(t,"geoIdentity",(function(){return v.geoIdentity})),n.d(t,"geoProjection",(function(){return v.geoProjection})),n.d(t,"geoProjectionMutator",(function(){return v.geoProjectionMutator})),n.d(t,"geoMercator",(function(){return v.geoMercator})),n.d(t,"geoMercatorRaw",(function(){return v.geoMercatorRaw})),n.d(t,"geoNaturalEarth1",(function(){return v.geoNaturalEarth1})),n.d(t,"geoNaturalEarth1Raw",(function(){return v.geoNaturalEarth1Raw})),n.d(t,"geoOrthographic",(function(){return v.geoOrthographic})),n.d(t,"geoOrthographicRaw",(function(){return v.geoOrthographicRaw})),n.d(t,"geoStereographic",(function(){return v.geoStereographic})),n.d(t,"geoStereographicRaw",(function(){return v.geoStereographicRaw})),n.d(t,"geoTransverseMercator",(function(){return v.geoTransverseMercator})),n.d(t,"geoTransverseMercatorRaw",(function(){return v.geoTransverseMercatorRaw})),n.d(t,"geoRotation",(function(){return v.geoRotation})),n.d(t,"geoStream",(function(){return v.geoStream})),n.d(t,"geoTransform",(function(){return v.geoTransform}));var j=n(/*! d3-hierarchy */"./node_modules/d3-hierarchy/src/index.js");n.d(t,"cluster",(function(){return j.cluster})),n.d(t,"hierarchy",(function(){return j.hierarchy})),n.d(t,"pack",(function(){return j.pack})),n.d(t,"packSiblings",(function(){return j.packSiblings})),n.d(t,"packEnclose",(function(){return j.packEnclose})),n.d(t,"partition",(function(){return j.partition})),n.d(t,"stratify",(function(){return j.stratify})),n.d(t,"tree",(function(){return j.tree})),n.d(t,"treemap",(function(){return j.treemap})),n.d(t,"treemapBinary",(function(){return j.treemapBinary})),n.d(t,"treemapDice",(function(){return j.treemapDice})),n.d(t,"treemapSlice",(function(){return j.treemapSlice})),n.d(t,"treemapSliceDice",(function(){return j.treemapSliceDice})),n.d(t,"treemapSquarify",(function(){return j.treemapSquarify})),n.d(t,"treemapResquarify",(function(){return j.treemapResquarify}));var b=n(/*! d3-interpolate */"./node_modules/d3-interpolate/src/index.js");n.d(t,"interpolate",(function(){return b.interpolate})),n.d(t,"interpolateArray",(function(){return b.interpolateArray})),n.d(t,"interpolateBasis",(function(){return b.interpolateBasis})),n.d(t,"interpolateBasisClosed",(function(){return b.interpolateBasisClosed})),n.d(t,"interpolateDate",(function(){return b.interpolateDate})),n.d(t,"interpolateDiscrete",(function(){return b.interpolateDiscrete})),n.d(t,"interpolateHue",(function(){return b.interpolateHue})),n.d(t,"interpolateNumber",(function(){return b.interpolateNumber})),n.d(t,"interpolateNumberArray",(function(){return b.interpolateNumberArray})),n.d(t,"interpolateObject",(function(){return b.interpolateObject})),n.d(t,"interpolateRound",(function(){return b.interpolateRound})),n.d(t,"interpolateString",(function(){return b.interpolateString})),n.d(t,"interpolateTransformCss",(function(){return b.interpolateTransformCss})),n.d(t,"interpolateTransformSvg",(function(){return b.interpolateTransformSvg})),n.d(t,"interpolateZoom",(function(){return b.interpolateZoom})),n.d(t,"interpolateRgb",(function(){return b.interpolateRgb})),n.d(t,"interpolateRgbBasis",(function(){return b.interpolateRgbBasis})),n.d(t,"interpolateRgbBasisClosed",(function(){return b.interpolateRgbBasisClosed})),n.d(t,"interpolateHsl",(function(){return b.interpolateHsl})),n.d(t,"interpolateHslLong",(function(){return b.interpolateHslLong})),n.d(t,"interpolateLab",(function(){return b.interpolateLab})),n.d(t,"interpolateHcl",(function(){return b.interpolateHcl})),n.d(t,"interpolateHclLong",(function(){return b.interpolateHclLong})),n.d(t,"interpolateCubehelix",(function(){return b.interpolateCubehelix})),n.d(t,"interpolateCubehelixLong",(function(){return b.interpolateCubehelixLong})),n.d(t,"piecewise",(function(){return b.piecewise})),n.d(t,"quantize",(function(){return b.quantize}));var y=n(/*! d3-path */"./node_modules/d3-path/src/index.js");n.d(t,"path",(function(){return y.path}));var x=n(/*! d3-polygon */"./node_modules/d3-polygon/src/index.js");n.d(t,"polygonArea",(function(){return x.polygonArea})),n.d(t,"polygonCentroid",(function(){return x.polygonCentroid})),n.d(t,"polygonHull",(function(){return x.polygonHull})),n.d(t,"polygonContains",(function(){return x.polygonContains})),n.d(t,"polygonLength",(function(){return x.polygonLength}));var w=n(/*! d3-quadtree */"./node_modules/d3-quadtree/src/index.js");n.d(t,"quadtree",(function(){return w.quadtree}));var O=n(/*! d3-random */"./node_modules/d3-random/src/index.js");n.d(t,"randomUniform",(function(){return O.randomUniform})),n.d(t,"randomNormal",(function(){return O.randomNormal})),n.d(t,"randomLogNormal",(function(){return O.randomLogNormal})),n.d(t,"randomBates",(function(){return O.randomBates})),n.d(t,"randomIrwinHall",(function(){return O.randomIrwinHall})),n.d(t,"randomExponential",(function(){return O.randomExponential}));var M=n(/*! d3-scale */"./node_modules/d3-scale/src/index.js");n.d(t,"scaleBand",(function(){return M.scaleBand})),n.d(t,"scalePoint",(function(){return M.scalePoint})),n.d(t,"scaleIdentity",(function(){return M.scaleIdentity})),n.d(t,"scaleLinear",(function(){return M.scaleLinear})),n.d(t,"scaleLog",(function(){return M.scaleLog})),n.d(t,"scaleSymlog",(function(){return M.scaleSymlog})),n.d(t,"scaleOrdinal",(function(){return M.scaleOrdinal})),n.d(t,"scaleImplicit",(function(){return M.scaleImplicit})),n.d(t,"scalePow",(function(){return M.scalePow})),n.d(t,"scaleSqrt",(function(){return M.scaleSqrt})),n.d(t,"scaleQuantile",(function(){return M.scaleQuantile})),n.d(t,"scaleQuantize",(function(){return M.scaleQuantize})),n.d(t,"scaleThreshold",(function(){return M.scaleThreshold})),n.d(t,"scaleTime",(function(){return M.scaleTime})),n.d(t,"scaleUtc",(function(){return M.scaleUtc})),n.d(t,"scaleSequential",(function(){return M.scaleSequential})),n.d(t,"scaleSequentialLog",(function(){return M.scaleSequentialLog})),n.d(t,"scaleSequentialPow",(function(){return M.scaleSequentialPow})),n.d(t,"scaleSequentialSqrt",(function(){return M.scaleSequentialSqrt})),n.d(t,"scaleSequentialSymlog",(function(){return M.scaleSequentialSymlog})),n.d(t,"scaleSequentialQuantile",(function(){return M.scaleSequentialQuantile})),n.d(t,"scaleDiverging",(function(){return M.scaleDiverging})),n.d(t,"scaleDivergingLog",(function(){return M.scaleDivergingLog})),n.d(t,"scaleDivergingPow",(function(){return M.scaleDivergingPow})),n.d(t,"scaleDivergingSqrt",(function(){return M.scaleDivergingSqrt})),n.d(t,"scaleDivergingSymlog",(function(){return M.scaleDivergingSymlog})),n.d(t,"tickFormat",(function(){return M.tickFormat}));var S=n(/*! d3-scale-chromatic */"./node_modules/d3-scale-chromatic/src/index.js");n.d(t,"schemeCategory10",(function(){return S.schemeCategory10})),n.d(t,"schemeAccent",(function(){return S.schemeAccent})),n.d(t,"schemeDark2",(function(){return S.schemeDark2})),n.d(t,"schemePaired",(function(){return S.schemePaired})),n.d(t,"schemePastel1",(function(){return S.schemePastel1})),n.d(t,"schemePastel2",(function(){return S.schemePastel2})),n.d(t,"schemeSet1",(function(){return S.schemeSet1})),n.d(t,"schemeSet2",(function(){return S.schemeSet2})),n.d(t,"schemeSet3",(function(){return S.schemeSet3})),n.d(t,"schemeTableau10",(function(){return S.schemeTableau10})),n.d(t,"interpolateBrBG",(function(){return S.interpolateBrBG})),n.d(t,"schemeBrBG",(function(){return S.schemeBrBG})),n.d(t,"interpolatePRGn",(function(){return S.interpolatePRGn})),n.d(t,"schemePRGn",(function(){return S.schemePRGn})),n.d(t,"interpolatePiYG",(function(){return S.interpolatePiYG})),n.d(t,"schemePiYG",(function(){return S.schemePiYG})),n.d(t,"interpolatePuOr",(function(){return S.interpolatePuOr})),n.d(t,"schemePuOr",(function(){return S.schemePuOr})),n.d(t,"interpolateRdBu",(function(){return S.interpolateRdBu})),n.d(t,"schemeRdBu",(function(){return S.schemeRdBu})),n.d(t,"interpolateRdGy",(function(){return S.interpolateRdGy})),n.d(t,"schemeRdGy",(function(){return S.schemeRdGy})),n.d(t,"interpolateRdYlBu",(function(){return S.interpolateRdYlBu})),n.d(t,"schemeRdYlBu",(function(){return S.schemeRdYlBu})),n.d(t,"interpolateRdYlGn",(function(){return S.interpolateRdYlGn})),n.d(t,"schemeRdYlGn",(function(){return S.schemeRdYlGn})),n.d(t,"interpolateSpectral",(function(){return S.interpolateSpectral})),n.d(t,"schemeSpectral",(function(){return S.schemeSpectral})),n.d(t,"interpolateBuGn",(function(){return S.interpolateBuGn})),n.d(t,"schemeBuGn",(function(){return S.schemeBuGn})),n.d(t,"interpolateBuPu",(function(){return S.interpolateBuPu})),n.d(t,"schemeBuPu",(function(){return S.schemeBuPu})),n.d(t,"interpolateGnBu",(function(){return S.interpolateGnBu})),n.d(t,"schemeGnBu",(function(){return S.schemeGnBu})),n.d(t,"interpolateOrRd",(function(){return S.interpolateOrRd})),n.d(t,"schemeOrRd",(function(){return S.schemeOrRd})),n.d(t,"interpolatePuBuGn",(function(){return S.interpolatePuBuGn})),n.d(t,"schemePuBuGn",(function(){return S.schemePuBuGn})),n.d(t,"interpolatePuBu",(function(){return S.interpolatePuBu})),n.d(t,"schemePuBu",(function(){return S.schemePuBu})),n.d(t,"interpolatePuRd",(function(){return S.interpolatePuRd})),n.d(t,"schemePuRd",(function(){return S.schemePuRd})),n.d(t,"interpolateRdPu",(function(){return S.interpolateRdPu})),n.d(t,"schemeRdPu",(function(){return S.schemeRdPu})),n.d(t,"interpolateYlGnBu",(function(){return S.interpolateYlGnBu})),n.d(t,"schemeYlGnBu",(function(){return S.schemeYlGnBu})),n.d(t,"interpolateYlGn",(function(){return S.interpolateYlGn})),n.d(t,"schemeYlGn",(function(){return S.schemeYlGn})),n.d(t,"interpolateYlOrBr",(function(){return S.interpolateYlOrBr})),n.d(t,"schemeYlOrBr",(function(){return S.schemeYlOrBr})),n.d(t,"interpolateYlOrRd",(function(){return S.interpolateYlOrRd})),n.d(t,"schemeYlOrRd",(function(){return S.schemeYlOrRd})),n.d(t,"interpolateBlues",(function(){return S.interpolateBlues})),n.d(t,"schemeBlues",(function(){return S.schemeBlues})),n.d(t,"interpolateGreens",(function(){return S.interpolateGreens})),n.d(t,"schemeGreens",(function(){return S.schemeGreens})),n.d(t,"interpolateGreys",(function(){return S.interpolateGreys})),n.d(t,"schemeGreys",(function(){return S.schemeGreys})),n.d(t,"interpolatePurples",(function(){return S.interpolatePurples})),n.d(t,"schemePurples",(function(){return S.schemePurples})),n.d(t,"interpolateReds",(function(){return S.interpolateReds})),n.d(t,"schemeReds",(function(){return S.schemeReds})),n.d(t,"interpolateOranges",(function(){return S.interpolateOranges})),n.d(t,"schemeOranges",(function(){return S.schemeOranges})),n.d(t,"interpolateCividis",(function(){return S.interpolateCividis})),n.d(t,"interpolateCubehelixDefault",(function(){return S.interpolateCubehelixDefault})),n.d(t,"interpolateRainbow",(function(){return S.interpolateRainbow})),n.d(t,"interpolateWarm",(function(){return S.interpolateWarm})),n.d(t,"interpolateCool",(function(){return S.interpolateCool})),n.d(t,"interpolateSinebow",(function(){return S.interpolateSinebow})),n.d(t,"interpolateTurbo",(function(){return S.interpolateTurbo})),n.d(t,"interpolateViridis",(function(){return S.interpolateViridis})),n.d(t,"interpolateMagma",(function(){return S.interpolateMagma})),n.d(t,"interpolateInferno",(function(){return S.interpolateInferno})),n.d(t,"interpolatePlasma",(function(){return S.interpolatePlasma}));var E=n(/*! d3-selection */"./node_modules/d3-selection/src/index.js");n.d(t,"create",(function(){return E.create})),n.d(t,"creator",(function(){return E.creator})),n.d(t,"local",(function(){return E.local})),n.d(t,"matcher",(function(){return E.matcher})),n.d(t,"mouse",(function(){return E.mouse})),n.d(t,"namespace",(function(){return E.namespace})),n.d(t,"namespaces",(function(){return E.namespaces})),n.d(t,"clientPoint",(function(){return E.clientPoint})),n.d(t,"select",(function(){return E.select})),n.d(t,"selectAll",(function(){return E.selectAll})),n.d(t,"selection",(function(){return E.selection})),n.d(t,"selector",(function(){return E.selector})),n.d(t,"selectorAll",(function(){return E.selectorAll})),n.d(t,"style",(function(){return E.style})),n.d(t,"touch",(function(){return E.touch})),n.d(t,"touches",(function(){return E.touches})),n.d(t,"window",(function(){return E.window})),n.d(t,"event",(function(){return E.event})),n.d(t,"customEvent",(function(){return E.customEvent}));var k=n(/*! d3-shape */"./node_modules/d3-shape/src/index.js");n.d(t,"arc",(function(){return k.arc})),n.d(t,"area",(function(){return k.area})),n.d(t,"line",(function(){return k.line})),n.d(t,"pie",(function(){return k.pie})),n.d(t,"areaRadial",(function(){return k.areaRadial})),n.d(t,"radialArea",(function(){return k.radialArea})),n.d(t,"lineRadial",(function(){return k.lineRadial})),n.d(t,"radialLine",(function(){return k.radialLine})),n.d(t,"pointRadial",(function(){return k.pointRadial})),n.d(t,"linkHorizontal",(function(){return k.linkHorizontal})),n.d(t,"linkVertical",(function(){return k.linkVertical})),n.d(t,"linkRadial",(function(){return k.linkRadial})),n.d(t,"symbol",(function(){return k.symbol})),n.d(t,"symbols",(function(){return k.symbols})),n.d(t,"symbolCircle",(function(){return k.symbolCircle})),n.d(t,"symbolCross",(function(){return k.symbolCross})),n.d(t,"symbolDiamond",(function(){return k.symbolDiamond})),n.d(t,"symbolSquare",(function(){return k.symbolSquare})),n.d(t,"symbolStar",(function(){return k.symbolStar})),n.d(t,"symbolTriangle",(function(){return k.symbolTriangle})),n.d(t,"symbolWye",(function(){return k.symbolWye})),n.d(t,"curveBasisClosed",(function(){return k.curveBasisClosed})),n.d(t,"curveBasisOpen",(function(){return k.curveBasisOpen})),n.d(t,"curveBasis",(function(){return k.curveBasis})),n.d(t,"curveBundle",(function(){return k.curveBundle})),n.d(t,"curveCardinalClosed",(function(){return k.curveCardinalClosed})),n.d(t,"curveCardinalOpen",(function(){return k.curveCardinalOpen})),n.d(t,"curveCardinal",(function(){return k.curveCardinal})),n.d(t,"curveCatmullRomClosed",(function(){return k.curveCatmullRomClosed})),n.d(t,"curveCatmullRomOpen",(function(){return k.curveCatmullRomOpen})),n.d(t,"curveCatmullRom",(function(){return k.curveCatmullRom})),n.d(t,"curveLinearClosed",(function(){return k.curveLinearClosed})),n.d(t,"curveLinear",(function(){return k.curveLinear})),n.d(t,"curveMonotoneX",(function(){return k.curveMonotoneX})),n.d(t,"curveMonotoneY",(function(){return k.curveMonotoneY})),n.d(t,"curveNatural",(function(){return k.curveNatural})),n.d(t,"curveStep",(function(){return k.curveStep})),n.d(t,"curveStepAfter",(function(){return k.curveStepAfter})),n.d(t,"curveStepBefore",(function(){return k.curveStepBefore})),n.d(t,"stack",(function(){return k.stack})),n.d(t,"stackOffsetExpand",(function(){return k.stackOffsetExpand})),n.d(t,"stackOffsetDiverging",(function(){return k.stackOffsetDiverging})),n.d(t,"stackOffsetNone",(function(){return k.stackOffsetNone})),n.d(t,"stackOffsetSilhouette",(function(){return k.stackOffsetSilhouette})),n.d(t,"stackOffsetWiggle",(function(){return k.stackOffsetWiggle})),n.d(t,"stackOrderAppearance",(function(){return k.stackOrderAppearance})),n.d(t,"stackOrderAscending",(function(){return k.stackOrderAscending})),n.d(t,"stackOrderDescending",(function(){return k.stackOrderDescending})),n.d(t,"stackOrderInsideOut",(function(){return k.stackOrderInsideOut})),n.d(t,"stackOrderNone",(function(){return k.stackOrderNone})),n.d(t,"stackOrderReverse",(function(){return k.stackOrderReverse}));var C=n(/*! d3-time */"./node_modules/d3-time/src/index.js");n.d(t,"timeInterval",(function(){return C.timeInterval})),n.d(t,"timeMillisecond",(function(){return C.timeMillisecond})),n.d(t,"timeMilliseconds",(function(){return C.timeMilliseconds})),n.d(t,"utcMillisecond",(function(){return C.utcMillisecond})),n.d(t,"utcMilliseconds",(function(){return C.utcMilliseconds})),n.d(t,"timeSecond",(function(){return C.timeSecond})),n.d(t,"timeSeconds",(function(){return C.timeSeconds})),n.d(t,"utcSecond",(function(){return C.utcSecond})),n.d(t,"utcSeconds",(function(){return C.utcSeconds})),n.d(t,"timeMinute",(function(){return C.timeMinute})),n.d(t,"timeMinutes",(function(){return C.timeMinutes})),n.d(t,"timeHour",(function(){return C.timeHour})),n.d(t,"timeHours",(function(){return C.timeHours})),n.d(t,"timeDay",(function(){return C.timeDay})),n.d(t,"timeDays",(function(){return C.timeDays})),n.d(t,"timeWeek",(function(){return C.timeWeek})),n.d(t,"timeWeeks",(function(){return C.timeWeeks})),n.d(t,"timeSunday",(function(){return C.timeSunday})),n.d(t,"timeSundays",(function(){return C.timeSundays})),n.d(t,"timeMonday",(function(){return C.timeMonday})),n.d(t,"timeMondays",(function(){return C.timeMondays})),n.d(t,"timeTuesday",(function(){return C.timeTuesday})),n.d(t,"timeTuesdays",(function(){return C.timeTuesdays})),n.d(t,"timeWednesday",(function(){return C.timeWednesday})),n.d(t,"timeWednesdays",(function(){return C.timeWednesdays})),n.d(t,"timeThursday",(function(){return C.timeThursday})),n.d(t,"timeThursdays",(function(){return C.timeThursdays})),n.d(t,"timeFriday",(function(){return C.timeFriday})),n.d(t,"timeFridays",(function(){return C.timeFridays})),n.d(t,"timeSaturday",(function(){return C.timeSaturday})),n.d(t,"timeSaturdays",(function(){return C.timeSaturdays})),n.d(t,"timeMonth",(function(){return C.timeMonth})),n.d(t,"timeMonths",(function(){return C.timeMonths})),n.d(t,"timeYear",(function(){return C.timeYear})),n.d(t,"timeYears",(function(){return C.timeYears})),n.d(t,"utcMinute",(function(){return C.utcMinute})),n.d(t,"utcMinutes",(function(){return C.utcMinutes})),n.d(t,"utcHour",(function(){return C.utcHour})),n.d(t,"utcHours",(function(){return C.utcHours})),n.d(t,"utcDay",(function(){return C.utcDay})),n.d(t,"utcDays",(function(){return C.utcDays})),n.d(t,"utcWeek",(function(){return C.utcWeek})),n.d(t,"utcWeeks",(function(){return C.utcWeeks})),n.d(t,"utcSunday",(function(){return C.utcSunday})),n.d(t,"utcSundays",(function(){return C.utcSundays})),n.d(t,"utcMonday",(function(){return C.utcMonday})),n.d(t,"utcMondays",(function(){return C.utcMondays})),n.d(t,"utcTuesday",(function(){return C.utcTuesday})),n.d(t,"utcTuesdays",(function(){return C.utcTuesdays})),n.d(t,"utcWednesday",(function(){return C.utcWednesday})),n.d(t,"utcWednesdays",(function(){return C.utcWednesdays})),n.d(t,"utcThursday",(function(){return C.utcThursday})),n.d(t,"utcThursdays",(function(){return C.utcThursdays})),n.d(t,"utcFriday",(function(){return C.utcFriday})),n.d(t,"utcFridays",(function(){return C.utcFridays})),n.d(t,"utcSaturday",(function(){return C.utcSaturday})),n.d(t,"utcSaturdays",(function(){return C.utcSaturdays})),n.d(t,"utcMonth",(function(){return C.utcMonth})),n.d(t,"utcMonths",(function(){return C.utcMonths})),n.d(t,"utcYear",(function(){return C.utcYear})),n.d(t,"utcYears",(function(){return C.utcYears}));var A=n(/*! d3-time-format */"./node_modules/d3-time-format/src/index.js");n.d(t,"timeFormatDefaultLocale",(function(){return A.timeFormatDefaultLocale})),n.d(t,"timeFormat",(function(){return A.timeFormat})),n.d(t,"timeParse",(function(){return A.timeParse})),n.d(t,"utcFormat",(function(){return A.utcFormat})),n.d(t,"utcParse",(function(){return A.utcParse})),n.d(t,"timeFormatLocale",(function(){return A.timeFormatLocale})),n.d(t,"isoFormat",(function(){return A.isoFormat})),n.d(t,"isoParse",(function(){return A.isoParse}));var T=n(/*! d3-timer */"./node_modules/d3-timer/src/index.js");n.d(t,"now",(function(){return T.now})),n.d(t,"timer",(function(){return T.timer})),n.d(t,"timerFlush",(function(){return T.timerFlush})),n.d(t,"timeout",(function(){return T.timeout})),n.d(t,"interval",(function(){return T.interval}));var R=n(/*! d3-transition */"./node_modules/d3-transition/src/index.js");n.d(t,"transition",(function(){return R.transition})),n.d(t,"active",(function(){return R.active})),n.d(t,"interrupt",(function(){return R.interrupt}));var N=n(/*! d3-voronoi */"./node_modules/d3-voronoi/src/index.js");n.d(t,"voronoi",(function(){return N.voronoi}));var P=n(/*! d3-zoom */"./node_modules/d3-zoom/src/index.js");n.d(t,"zoom",(function(){return P.zoom})),n.d(t,"zoomTransform",(function(){return P.zoomTransform})),n.d(t,"zoomIdentity",(function(){return P.zoomIdentity}))},"./node_modules/dagre/index.js":
/*!*************************************!*\
  !*** ./node_modules/dagre/index.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){e.exports={graphlib:n(/*! ./lib/graphlib */"./node_modules/dagre/lib/graphlib.js"),layout:n(/*! ./lib/layout */"./node_modules/dagre/lib/layout.js"),debug:n(/*! ./lib/debug */"./node_modules/dagre/lib/debug.js"),util:{time:n(/*! ./lib/util */"./node_modules/dagre/lib/util.js").time,notime:n(/*! ./lib/util */"./node_modules/dagre/lib/util.js").notime},version:n(/*! ./lib/version */"./node_modules/dagre/lib/version.js")}},"./node_modules/dagre/lib/acyclic.js":
/*!*******************************************!*\
  !*** ./node_modules/dagre/lib/acyclic.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./greedy-fas */"./node_modules/dagre/lib/greedy-fas.js");e.exports={run:function(e){var t="greedy"===e.graph().acyclicer?o(e,function(e){return function(t){return e.edge(t).weight}}(e)):function(e){var t=[],n={},o={};function u(i){r.has(o,i)||(o[i]=!0,n[i]=!0,r.forEach(e.outEdges(i),(function(e){r.has(n,e.w)?t.push(e):u(e.w)})),delete n[i])}return r.forEach(e.nodes(),u),t}(e);r.forEach(t,(function(t){var n=e.edge(t);e.removeEdge(t),n.forwardName=t.name,n.reversed=!0,e.setEdge(t.w,t.v,n,r.uniqueId("rev"))}))},undo:function(e){r.forEach(e.edges(),(function(t){var n=e.edge(t);if(n.reversed){e.removeEdge(t);var r=n.forwardName;delete n.reversed,delete n.forwardName,e.setEdge(t.w,t.v,n,r)}}))}}},"./node_modules/dagre/lib/add-border-segments.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/add-border-segments.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./util */"./node_modules/dagre/lib/util.js");function u(e,t,n,r,u,i){var s={width:0,height:0,rank:i,borderType:t},a=u[t][i-1],c=o.addDummyNode(e,"border",s,n);u[t][i]=c,e.setParent(c,r),a&&e.setEdge(a,c,{weight:1})}e.exports=function(e){r.forEach(e.children(),(function t(n){var o=e.children(n),i=e.node(n);if(o.length&&r.forEach(o,t),r.has(i,"minRank")){i.borderLeft=[],i.borderRight=[];for(var s=i.minRank,a=i.maxRank+1;s<a;++s)u(e,"borderLeft","_bl",n,i,s),u(e,"borderRight","_br",n,i,s)}}))}},"./node_modules/dagre/lib/coordinate-system.js":
/*!*****************************************************!*\
  !*** ./node_modules/dagre/lib/coordinate-system.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js");function o(e){r.forEach(e.nodes(),(function(t){u(e.node(t))})),r.forEach(e.edges(),(function(t){u(e.edge(t))}))}function u(e){var t=e.width;e.width=e.height,e.height=t}function i(e){e.y=-e.y}function s(e){var t=e.x;e.x=e.y,e.y=t}e.exports={adjust:function(e){var t=e.graph().rankdir.toLowerCase();"lr"!==t&&"rl"!==t||o(e)},undo:function(e){var t=e.graph().rankdir.toLowerCase();"bt"!==t&&"rl"!==t||function(e){r.forEach(e.nodes(),(function(t){i(e.node(t))})),r.forEach(e.edges(),(function(t){var n=e.edge(t);r.forEach(n.points,i),r.has(n,"y")&&i(n)}))}(e);"lr"!==t&&"rl"!==t||(!function(e){r.forEach(e.nodes(),(function(t){s(e.node(t))})),r.forEach(e.edges(),(function(t){var n=e.edge(t);r.forEach(n.points,s),r.has(n,"x")&&s(n)}))}(e),o(e))}}},"./node_modules/dagre/lib/data/list.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/data/list.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){function n(){var e={};e._next=e._prev=e,this._sentinel=e}function r(e){e._prev._next=e._next,e._next._prev=e._prev,delete e._next,delete e._prev}function o(e,t){if("_next"!==e&&"_prev"!==e)return t}e.exports=n,n.prototype.dequeue=function(){var e=this._sentinel,t=e._prev;if(t!==e)return r(t),t},n.prototype.enqueue=function(e){var t=this._sentinel;e._prev&&e._next&&r(e),e._next=t._next,t._next._prev=e,t._next=e,e._prev=t},n.prototype.toString=function(){for(var e=[],t=this._sentinel,n=t._prev;n!==t;)e.push(JSON.stringify(n,o)),n=n._prev;return"["+e.join(", ")+"]"}},"./node_modules/dagre/lib/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/dagre/lib/debug.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./util */"./node_modules/dagre/lib/util.js"),u=n(/*! ./graphlib */"./node_modules/dagre/lib/graphlib.js").Graph;e.exports={debugOrdering:function(e){var t=o.buildLayerMatrix(e),n=new u({compound:!0,multigraph:!0}).setGraph({});return r.forEach(e.nodes(),(function(t){n.setNode(t,{label:t}),n.setParent(t,"layer"+e.node(t).rank)})),r.forEach(e.edges(),(function(e){n.setEdge(e.v,e.w,{},e.name)})),r.forEach(t,(function(e,t){var o="layer"+t;n.setNode(o,{rank:"same"}),r.reduce(e,(function(e,t){return n.setEdge(e,t,{style:"invis"}),t}))})),n}}},"./node_modules/dagre/lib/graphlib.js":
/*!********************************************!*\
  !*** ./node_modules/dagre/lib/graphlib.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r;try{r=n(/*! graphlib */"./node_modules/graphlib/index.js")}catch(e){}r||(r=window.graphlib),e.exports=r},"./node_modules/dagre/lib/greedy-fas.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/greedy-fas.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./graphlib */"./node_modules/dagre/lib/graphlib.js").Graph,u=n(/*! ./data/list */"./node_modules/dagre/lib/data/list.js");e.exports=function(e,t){if(e.nodeCount()<=1)return[];var n=function(e,t){var n=new o,i=0,s=0;r.forEach(e.nodes(),(function(e){n.setNode(e,{v:e,in:0,out:0})})),r.forEach(e.edges(),(function(e){var r=n.edge(e.v,e.w)||0,o=t(e),u=r+o;n.setEdge(e.v,e.w,u),s=Math.max(s,n.node(e.v).out+=o),i=Math.max(i,n.node(e.w).in+=o)}));var c=r.range(s+i+3).map((function(){return new u})),d=i+1;return r.forEach(n.nodes(),(function(e){a(c,d,n.node(e))})),{graph:n,buckets:c,zeroIdx:d}}(e,t||i),c=function(e,t,n){var r,o=[],u=t[t.length-1],i=t[0];for(;e.nodeCount();){for(;r=i.dequeue();)s(e,t,n,r);for(;r=u.dequeue();)s(e,t,n,r);if(e.nodeCount())for(var a=t.length-2;a>0;--a)if(r=t[a].dequeue()){o=o.concat(s(e,t,n,r,!0));break}}return o}(n.graph,n.buckets,n.zeroIdx);return r.flatten(r.map(c,(function(t){return e.outEdges(t.v,t.w)})),!0)};var i=r.constant(1);function s(e,t,n,o,u){var i=u?[]:void 0;return r.forEach(e.inEdges(o.v),(function(r){var o=e.edge(r),s=e.node(r.v);u&&i.push({v:r.v,w:r.w}),s.out-=o,a(t,n,s)})),r.forEach(e.outEdges(o.v),(function(r){var o=e.edge(r),u=r.w,i=e.node(u);i.in-=o,a(t,n,i)})),e.removeNode(o.v),i}function a(e,t,n){n.out?n.in?e[n.out-n.in+t].enqueue(n):e[e.length-1].enqueue(n):e[0].enqueue(n)}},"./node_modules/dagre/lib/layout.js":
/*!******************************************!*\
  !*** ./node_modules/dagre/lib/layout.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./acyclic */"./node_modules/dagre/lib/acyclic.js"),u=n(/*! ./normalize */"./node_modules/dagre/lib/normalize.js"),i=n(/*! ./rank */"./node_modules/dagre/lib/rank/index.js"),s=n(/*! ./util */"./node_modules/dagre/lib/util.js").normalizeRanks,a=n(/*! ./parent-dummy-chains */"./node_modules/dagre/lib/parent-dummy-chains.js"),c=n(/*! ./util */"./node_modules/dagre/lib/util.js").removeEmptyRanks,d=n(/*! ./nesting-graph */"./node_modules/dagre/lib/nesting-graph.js"),l=n(/*! ./add-border-segments */"./node_modules/dagre/lib/add-border-segments.js"),f=n(/*! ./coordinate-system */"./node_modules/dagre/lib/coordinate-system.js"),h=n(/*! ./order */"./node_modules/dagre/lib/order/index.js"),m=n(/*! ./position */"./node_modules/dagre/lib/position/index.js"),p=n(/*! ./util */"./node_modules/dagre/lib/util.js"),_=n(/*! ./graphlib */"./node_modules/dagre/lib/graphlib.js").Graph;e.exports=function(e,t){var n=t&&t.debugTiming?p.time:p.notime;n("layout",(function(){var t=n("  buildLayoutGraph",(function(){return function(e){var t=new _({multigraph:!0,compound:!0}),n=S(e.graph());return t.setGraph(r.merge({},v,M(n,g),r.pick(n,j))),r.forEach(e.nodes(),(function(n){var o=S(e.node(n));t.setNode(n,r.defaults(M(o,b),y)),t.setParent(n,e.parent(n))})),r.forEach(e.edges(),(function(n){var o=S(e.edge(n));t.setEdge(n,r.merge({},w,M(o,x),r.pick(o,O)))})),t}(e)}));n("  runLayout",(function(){!function(e,t){t("    makeSpaceForEdgeLabels",(function(){!function(e){var t=e.graph();t.ranksep/=2,r.forEach(e.edges(),(function(n){var r=e.edge(n);r.minlen*=2,"c"!==r.labelpos.toLowerCase()&&("TB"===t.rankdir||"BT"===t.rankdir?r.width+=r.labeloffset:r.height+=r.labeloffset)}))}(e)})),t("    removeSelfEdges",(function(){!function(e){r.forEach(e.edges(),(function(t){if(t.v===t.w){var n=e.node(t.v);n.selfEdges||(n.selfEdges=[]),n.selfEdges.push({e:t,label:e.edge(t)}),e.removeEdge(t)}}))}(e)})),t("    acyclic",(function(){o.run(e)})),t("    nestingGraph.run",(function(){d.run(e)})),t("    rank",(function(){i(p.asNonCompoundGraph(e))})),t("    injectEdgeLabelProxies",(function(){!function(e){r.forEach(e.edges(),(function(t){var n=e.edge(t);if(n.width&&n.height){var r=e.node(t.v),o={rank:(e.node(t.w).rank-r.rank)/2+r.rank,e:t};p.addDummyNode(e,"edge-proxy",o,"_ep")}}))}(e)})),t("    removeEmptyRanks",(function(){c(e)})),t("    nestingGraph.cleanup",(function(){d.cleanup(e)})),t("    normalizeRanks",(function(){s(e)})),t("    assignRankMinMax",(function(){!function(e){var t=0;r.forEach(e.nodes(),(function(n){var o=e.node(n);o.borderTop&&(o.minRank=e.node(o.borderTop).rank,o.maxRank=e.node(o.borderBottom).rank,t=r.max(t,o.maxRank))})),e.graph().maxRank=t}(e)})),t("    removeEdgeLabelProxies",(function(){!function(e){r.forEach(e.nodes(),(function(t){var n=e.node(t);"edge-proxy"===n.dummy&&(e.edge(n.e).labelRank=n.rank,e.removeNode(t))}))}(e)})),t("    normalize.run",(function(){u.run(e)})),t("    parentDummyChains",(function(){a(e)})),t("    addBorderSegments",(function(){l(e)})),t("    order",(function(){h(e)})),t("    insertSelfEdges",(function(){!function(e){var t=p.buildLayerMatrix(e);r.forEach(t,(function(t){var n=0;r.forEach(t,(function(t,o){var u=e.node(t);u.order=o+n,r.forEach(u.selfEdges,(function(t){p.addDummyNode(e,"selfedge",{width:t.label.width,height:t.label.height,rank:u.rank,order:o+ ++n,e:t.e,label:t.label},"_se")})),delete u.selfEdges}))}))}(e)})),t("    adjustCoordinateSystem",(function(){f.adjust(e)})),t("    position",(function(){m(e)})),t("    positionSelfEdges",(function(){!function(e){r.forEach(e.nodes(),(function(t){var n=e.node(t);if("selfedge"===n.dummy){var r=e.node(n.e.v),o=r.x+r.width/2,u=r.y,i=n.x-o,s=r.height/2;e.setEdge(n.e,n.label),e.removeNode(t),n.label.points=[{x:o+2*i/3,y:u-s},{x:o+5*i/6,y:u-s},{x:o+i,y:u},{x:o+5*i/6,y:u+s},{x:o+2*i/3,y:u+s}],n.label.x=n.x,n.label.y=n.y}}))}(e)})),t("    removeBorderNodes",(function(){!function(e){r.forEach(e.nodes(),(function(t){if(e.children(t).length){var n=e.node(t),o=e.node(n.borderTop),u=e.node(n.borderBottom),i=e.node(r.last(n.borderLeft)),s=e.node(r.last(n.borderRight));n.width=Math.abs(s.x-i.x),n.height=Math.abs(u.y-o.y),n.x=i.x+n.width/2,n.y=o.y+n.height/2}})),r.forEach(e.nodes(),(function(t){"border"===e.node(t).dummy&&e.removeNode(t)}))}(e)})),t("    normalize.undo",(function(){u.undo(e)})),t("    fixupEdgeLabelCoords",(function(){!function(e){r.forEach(e.edges(),(function(t){var n=e.edge(t);if(r.has(n,"x"))switch("l"!==n.labelpos&&"r"!==n.labelpos||(n.width-=n.labeloffset),n.labelpos){case"l":n.x-=n.width/2+n.labeloffset;break;case"r":n.x+=n.width/2+n.labeloffset}}))}(e)})),t("    undoCoordinateSystem",(function(){f.undo(e)})),t("    translateGraph",(function(){!function(e){var t=Number.POSITIVE_INFINITY,n=0,o=Number.POSITIVE_INFINITY,u=0,i=e.graph(),s=i.marginx||0,a=i.marginy||0;function c(e){var r=e.x,i=e.y,s=e.width,a=e.height;t=Math.min(t,r-s/2),n=Math.max(n,r+s/2),o=Math.min(o,i-a/2),u=Math.max(u,i+a/2)}r.forEach(e.nodes(),(function(t){c(e.node(t))})),r.forEach(e.edges(),(function(t){var n=e.edge(t);r.has(n,"x")&&c(n)})),t-=s,o-=a,r.forEach(e.nodes(),(function(n){var r=e.node(n);r.x-=t,r.y-=o})),r.forEach(e.edges(),(function(n){var u=e.edge(n);r.forEach(u.points,(function(e){e.x-=t,e.y-=o})),r.has(u,"x")&&(u.x-=t),r.has(u,"y")&&(u.y-=o)})),i.width=n-t+s,i.height=u-o+a}(e)})),t("    assignNodeIntersects",(function(){!function(e){r.forEach(e.edges(),(function(t){var n,r,o=e.edge(t),u=e.node(t.v),i=e.node(t.w);o.points?(n=o.points[0],r=o.points[o.points.length-1]):(o.points=[],n=i,r=u),o.points.unshift(p.intersectRect(u,n)),o.points.push(p.intersectRect(i,r))}))}(e)})),t("    reversePoints",(function(){!function(e){r.forEach(e.edges(),(function(t){var n=e.edge(t);n.reversed&&n.points.reverse()}))}(e)})),t("    acyclic.undo",(function(){o.undo(e)}))}(t,n)})),n("  updateInputGraph",(function(){!function(e,t){r.forEach(e.nodes(),(function(n){var r=e.node(n),o=t.node(n);r&&(r.x=o.x,r.y=o.y,t.children(n).length&&(r.width=o.width,r.height=o.height))})),r.forEach(e.edges(),(function(n){var o=e.edge(n),u=t.edge(n);o.points=u.points,r.has(u,"x")&&(o.x=u.x,o.y=u.y)})),e.graph().width=t.graph().width,e.graph().height=t.graph().height}(e,t)}))}))};var g=["nodesep","edgesep","ranksep","marginx","marginy"],v={ranksep:50,edgesep:20,nodesep:50,rankdir:"tb"},j=["acyclicer","ranker","rankdir","align"],b=["width","height"],y={width:0,height:0},x=["minlen","weight","width","height","labeloffset"],w={minlen:1,weight:1,width:0,height:0,labeloffset:10,labelpos:"r"},O=["labelpos"];function M(e,t){return r.mapValues(r.pick(e,t),Number)}function S(e){var t={};return r.forEach(e,(function(e,n){t[n.toLowerCase()]=e})),t}},"./node_modules/dagre/lib/lodash.js":
/*!******************************************!*\
  !*** ./node_modules/dagre/lib/lodash.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r;try{r={cloneDeep:n(/*! lodash/cloneDeep */"./node_modules/lodash/cloneDeep.js"),constant:n(/*! lodash/constant */"./node_modules/lodash/constant.js"),defaults:n(/*! lodash/defaults */"./node_modules/lodash/defaults.js"),each:n(/*! lodash/each */"./node_modules/lodash/each.js"),filter:n(/*! lodash/filter */"./node_modules/lodash/filter.js"),find:n(/*! lodash/find */"./node_modules/lodash/find.js"),flatten:n(/*! lodash/flatten */"./node_modules/lodash/flatten.js"),forEach:n(/*! lodash/forEach */"./node_modules/lodash/forEach.js"),forIn:n(/*! lodash/forIn */"./node_modules/lodash/forIn.js"),has:n(/*! lodash/has */"./node_modules/lodash/has.js"),isUndefined:n(/*! lodash/isUndefined */"./node_modules/lodash/isUndefined.js"),last:n(/*! lodash/last */"./node_modules/lodash/last.js"),map:n(/*! lodash/map */"./node_modules/lodash/map.js"),mapValues:n(/*! lodash/mapValues */"./node_modules/lodash/mapValues.js"),max:n(/*! lodash/max */"./node_modules/lodash/max.js"),merge:n(/*! lodash/merge */"./node_modules/lodash/merge.js"),min:n(/*! lodash/min */"./node_modules/lodash/min.js"),minBy:n(/*! lodash/minBy */"./node_modules/lodash/minBy.js"),now:n(/*! lodash/now */"./node_modules/lodash/now.js"),pick:n(/*! lodash/pick */"./node_modules/lodash/pick.js"),range:n(/*! lodash/range */"./node_modules/lodash/range.js"),reduce:n(/*! lodash/reduce */"./node_modules/lodash/reduce.js"),sortBy:n(/*! lodash/sortBy */"./node_modules/lodash/sortBy.js"),uniqueId:n(/*! lodash/uniqueId */"./node_modules/lodash/uniqueId.js"),values:n(/*! lodash/values */"./node_modules/lodash/values.js"),zipObject:n(/*! lodash/zipObject */"./node_modules/lodash/zipObject.js")}}catch(e){}r||(r=window._),e.exports=r},"./node_modules/dagre/lib/nesting-graph.js":
/*!*************************************************!*\
  !*** ./node_modules/dagre/lib/nesting-graph.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./util */"./node_modules/dagre/lib/util.js");e.exports={run:function(e){var t=o.addDummyNode(e,"root",{},"_root"),n=function(e){var t={};return r.forEach(e.children(),(function(n){!function n(o,u){var i=e.children(o);i&&i.length&&r.forEach(i,(function(e){n(e,u+1)}));t[o]=u}(n,1)})),t}(e),u=r.max(r.values(n))-1,i=2*u+1;e.graph().nestingRoot=t,r.forEach(e.edges(),(function(t){e.edge(t).minlen*=i}));var s=function(e){return r.reduce(e.edges(),(function(t,n){return t+e.edge(n).weight}),0)}(e)+1;r.forEach(e.children(),(function(a){!function e(t,n,u,i,s,a,c){var d=t.children(c);if(!d.length)return void(c!==n&&t.setEdge(n,c,{weight:0,minlen:u}));var l=o.addBorderNode(t,"_bt"),f=o.addBorderNode(t,"_bb"),h=t.node(c);t.setParent(l,c),h.borderTop=l,t.setParent(f,c),h.borderBottom=f,r.forEach(d,(function(r){e(t,n,u,i,s,a,r);var o=t.node(r),d=o.borderTop?o.borderTop:r,h=o.borderBottom?o.borderBottom:r,m=o.borderTop?i:2*i,p=d!==h?1:s-a[c]+1;t.setEdge(l,d,{weight:m,minlen:p,nestingEdge:!0}),t.setEdge(h,f,{weight:m,minlen:p,nestingEdge:!0})})),t.parent(c)||t.setEdge(n,l,{weight:0,minlen:s+a[c]})}(e,t,i,s,u,n,a)})),e.graph().nodeRankFactor=i},cleanup:function(e){var t=e.graph();e.removeNode(t.nestingRoot),delete t.nestingRoot,r.forEach(e.edges(),(function(t){e.edge(t).nestingEdge&&e.removeEdge(t)}))}}},"./node_modules/dagre/lib/normalize.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/normalize.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./util */"./node_modules/dagre/lib/util.js");e.exports={run:function(e){e.graph().dummyChains=[],r.forEach(e.edges(),(function(t){!function(e,t){var n,r,u,i=t.v,s=e.node(i).rank,a=t.w,c=e.node(a).rank,d=t.name,l=e.edge(t),f=l.labelRank;if(c===s+1)return;for(e.removeEdge(t),u=0,++s;s<c;++u,++s)l.points=[],r={width:0,height:0,edgeLabel:l,edgeObj:t,rank:s},n=o.addDummyNode(e,"edge",r,"_d"),s===f&&(r.width=l.width,r.height=l.height,r.dummy="edge-label",r.labelpos=l.labelpos),e.setEdge(i,n,{weight:l.weight},d),0===u&&e.graph().dummyChains.push(n),i=n;e.setEdge(i,a,{weight:l.weight},d)}(e,t)}))},undo:function(e){r.forEach(e.graph().dummyChains,(function(t){var n,r=e.node(t),o=r.edgeLabel;for(e.setEdge(r.edgeObj,o);r.dummy;)n=e.successors(t)[0],e.removeNode(t),o.points.push({x:r.x,y:r.y}),"edge-label"===r.dummy&&(o.x=r.x,o.y=r.y,o.width=r.width,o.height=r.height),t=n,r=e.node(t)}))}}},"./node_modules/dagre/lib/order/add-subgraph-constraints.js":
/*!******************************************************************!*\
  !*** ./node_modules/dagre/lib/order/add-subgraph-constraints.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");e.exports=function(e,t,n){var o,u={};r.forEach(n,(function(n){for(var r,i,s=e.parent(n);s;){if((r=e.parent(s))?(i=u[r],u[r]=s):(i=o,o=s),i&&i!==s)return void t.setEdge(i,s);s=r}}))}},"./node_modules/dagre/lib/order/barycenter.js":
/*!****************************************************!*\
  !*** ./node_modules/dagre/lib/order/barycenter.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");e.exports=function(e,t){return r.map(t,(function(t){var n=e.inEdges(t);if(n.length){var o=r.reduce(n,(function(t,n){var r=e.edge(n),o=e.node(n.v);return{sum:t.sum+r.weight*o.order,weight:t.weight+r.weight}}),{sum:0,weight:0});return{v:t,barycenter:o.sum/o.weight,weight:o.weight}}return{v:t}}))}},"./node_modules/dagre/lib/order/build-layer-graph.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre/lib/order/build-layer-graph.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").Graph;e.exports=function(e,t,n){var u=function(e){var t;for(;e.hasNode(t=r.uniqueId("_root")););return t}(e),i=new o({compound:!0}).setGraph({root:u}).setDefaultNodeLabel((function(t){return e.node(t)}));return r.forEach(e.nodes(),(function(o){var s=e.node(o),a=e.parent(o);(s.rank===t||s.minRank<=t&&t<=s.maxRank)&&(i.setNode(o),i.setParent(o,a||u),r.forEach(e[n](o),(function(t){var n=t.v===o?t.w:t.v,u=i.edge(n,o),s=r.isUndefined(u)?0:u.weight;i.setEdge(n,o,{weight:e.edge(t).weight+s})})),r.has(s,"minRank")&&i.setNode(o,{borderLeft:s.borderLeft[t],borderRight:s.borderRight[t]}))})),i}},"./node_modules/dagre/lib/order/cross-count.js":
/*!*****************************************************!*\
  !*** ./node_modules/dagre/lib/order/cross-count.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");function o(e,t,n){for(var o=r.zipObject(n,r.map(n,(function(e,t){return t}))),u=r.flatten(r.map(t,(function(t){return r.sortBy(r.map(e.outEdges(t),(function(t){return{pos:o[t.w],weight:e.edge(t).weight}})),"pos")})),!0),i=1;i<n.length;)i<<=1;var s=2*i-1;i-=1;var a=r.map(new Array(s),(function(){return 0})),c=0;return r.forEach(u.forEach((function(e){var t=e.pos+i;a[t]+=e.weight;for(var n=0;t>0;)t%2&&(n+=a[t+1]),a[t=t-1>>1]+=e.weight;c+=e.weight*n}))),c}e.exports=function(e,t){for(var n=0,r=1;r<t.length;++r)n+=o(e,t[r-1],t[r]);return n}},"./node_modules/dagre/lib/order/index.js":
/*!***********************************************!*\
  !*** ./node_modules/dagre/lib/order/index.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./init-order */"./node_modules/dagre/lib/order/init-order.js"),u=n(/*! ./cross-count */"./node_modules/dagre/lib/order/cross-count.js"),i=n(/*! ./sort-subgraph */"./node_modules/dagre/lib/order/sort-subgraph.js"),s=n(/*! ./build-layer-graph */"./node_modules/dagre/lib/order/build-layer-graph.js"),a=n(/*! ./add-subgraph-constraints */"./node_modules/dagre/lib/order/add-subgraph-constraints.js"),c=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").Graph,d=n(/*! ../util */"./node_modules/dagre/lib/util.js");function l(e,t,n){return r.map(t,(function(t){return s(e,t,n)}))}function f(e,t){var n=new c;r.forEach(e,(function(e){var o=e.graph().root,u=i(e,o,n,t);r.forEach(u.vs,(function(t,n){e.node(t).order=n})),a(e,n,u.vs)}))}function h(e,t){r.forEach(t,(function(t){r.forEach(t,(function(t,n){e.node(t).order=n}))}))}e.exports=function(e){var t=d.maxRank(e),n=l(e,r.range(1,t+1),"inEdges"),i=l(e,r.range(t-1,-1,-1),"outEdges"),s=o(e);h(e,s);for(var a,c=Number.POSITIVE_INFINITY,m=0,p=0;p<4;++m,++p){f(m%2?n:i,m%4>=2),s=d.buildLayerMatrix(e);var _=u(e,s);_<c&&(p=0,a=r.cloneDeep(s),c=_)}h(e,a)}},"./node_modules/dagre/lib/order/init-order.js":
/*!****************************************************!*\
  !*** ./node_modules/dagre/lib/order/init-order.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");e.exports=function(e){var t={},n=r.filter(e.nodes(),(function(t){return!e.children(t).length})),o=r.max(r.map(n,(function(t){return e.node(t).rank}))),u=r.map(r.range(o+1),(function(){return[]}));var i=r.sortBy(n,(function(t){return e.node(t).rank}));return r.forEach(i,(function n(o){if(r.has(t,o))return;t[o]=!0;var i=e.node(o);u[i.rank].push(o),r.forEach(e.successors(o),n)})),u}},"./node_modules/dagre/lib/order/resolve-conflicts.js":
/*!***********************************************************!*\
  !*** ./node_modules/dagre/lib/order/resolve-conflicts.js ***!
  \***********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");e.exports=function(e,t){var n={};return r.forEach(e,(function(e,t){var o=n[e.v]={indegree:0,in:[],out:[],vs:[e.v],i:t};r.isUndefined(e.barycenter)||(o.barycenter=e.barycenter,o.weight=e.weight)})),r.forEach(t.edges(),(function(e){var t=n[e.v],o=n[e.w];r.isUndefined(t)||r.isUndefined(o)||(o.indegree++,t.out.push(n[e.w]))})),function(e){var t=[];function n(e){return function(t){t.merged||(r.isUndefined(t.barycenter)||r.isUndefined(e.barycenter)||t.barycenter>=e.barycenter)&&function(e,t){var n=0,r=0;e.weight&&(n+=e.barycenter*e.weight,r+=e.weight);t.weight&&(n+=t.barycenter*t.weight,r+=t.weight);e.vs=t.vs.concat(e.vs),e.barycenter=n/r,e.weight=r,e.i=Math.min(t.i,e.i),t.merged=!0}(e,t)}}function o(t){return function(n){n.in.push(t),0==--n.indegree&&e.push(n)}}for(;e.length;){var u=e.pop();t.push(u),r.forEach(u.in.reverse(),n(u)),r.forEach(u.out,o(u))}return r.map(r.filter(t,(function(e){return!e.merged})),(function(e){return r.pick(e,["vs","i","barycenter","weight"])}))}(r.filter(n,(function(e){return!e.indegree})))}},"./node_modules/dagre/lib/order/sort-subgraph.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/order/sort-subgraph.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./barycenter */"./node_modules/dagre/lib/order/barycenter.js"),u=n(/*! ./resolve-conflicts */"./node_modules/dagre/lib/order/resolve-conflicts.js"),i=n(/*! ./sort */"./node_modules/dagre/lib/order/sort.js");e.exports=function e(t,n,s,a){var c=t.children(n),d=t.node(n),l=d?d.borderLeft:void 0,f=d?d.borderRight:void 0,h={};l&&(c=r.filter(c,(function(e){return e!==l&&e!==f})));var m=o(t,c);r.forEach(m,(function(n){if(t.children(n.v).length){var o=e(t,n.v,s,a);h[n.v]=o,r.has(o,"barycenter")&&(u=n,i=o,r.isUndefined(u.barycenter)?(u.barycenter=i.barycenter,u.weight=i.weight):(u.barycenter=(u.barycenter*u.weight+i.barycenter*i.weight)/(u.weight+i.weight),u.weight+=i.weight))}var u,i}));var p=u(m,s);!function(e,t){r.forEach(e,(function(e){e.vs=r.flatten(e.vs.map((function(e){return t[e]?t[e].vs:e})),!0)}))}(p,h);var _=i(p,a);if(l&&(_.vs=r.flatten([l,_.vs,f],!0),t.predecessors(l).length)){var g=t.node(t.predecessors(l)[0]),v=t.node(t.predecessors(f)[0]);r.has(_,"barycenter")||(_.barycenter=0,_.weight=0),_.barycenter=(_.barycenter*_.weight+g.order+v.order)/(_.weight+2),_.weight+=2}return _}},"./node_modules/dagre/lib/order/sort.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/order/sort.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ../util */"./node_modules/dagre/lib/util.js");function u(e,t,n){for(var o;t.length&&(o=r.last(t)).i<=n;)t.pop(),e.push(o.vs),n++;return n}e.exports=function(e,t){var n=o.partition(e,(function(e){return r.has(e,"barycenter")})),i=n.lhs,s=r.sortBy(n.rhs,(function(e){return-e.i})),a=[],c=0,d=0,l=0;i.sort((f=!!t,function(e,t){return e.barycenter<t.barycenter?-1:e.barycenter>t.barycenter?1:f?t.i-e.i:e.i-t.i})),l=u(a,s,l),r.forEach(i,(function(e){l+=e.vs.length,a.push(e.vs),c+=e.barycenter*e.weight,d+=e.weight,l=u(a,s,l)}));var f;var h={vs:r.flatten(a,!0)};d&&(h.barycenter=c/d,h.weight=d);return h}},"./node_modules/dagre/lib/parent-dummy-chains.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre/lib/parent-dummy-chains.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js");e.exports=function(e){var t=function(e){var t={},n=0;function o(u){var i=n;r.forEach(e.children(u),o),t[u]={low:i,lim:n++}}return r.forEach(e.children(),o),t}(e);r.forEach(e.graph().dummyChains,(function(n){for(var r=e.node(n),o=r.edgeObj,u=function(e,t,n,r){var o,u,i=[],s=[],a=Math.min(t[n].low,t[r].low),c=Math.max(t[n].lim,t[r].lim);o=n;do{o=e.parent(o),i.push(o)}while(o&&(t[o].low>a||c>t[o].lim));u=o,o=r;for(;(o=e.parent(o))!==u;)s.push(o);return{path:i.concat(s.reverse()),lca:u}}(e,t,o.v,o.w),i=u.path,s=u.lca,a=0,c=i[a],d=!0;n!==o.w;){if(r=e.node(n),d){for(;(c=i[a])!==s&&e.node(c).maxRank<r.rank;)a++;c===s&&(d=!1)}if(!d){for(;a<i.length-1&&e.node(c=i[a+1]).minRank<=r.rank;)a++;c=i[a]}e.setParent(n,c),n=e.successors(n)[0]}}))}},"./node_modules/dagre/lib/position/bk.js":
/*!***********************************************!*\
  !*** ./node_modules/dagre/lib/position/bk.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").Graph,u=n(/*! ../util */"./node_modules/dagre/lib/util.js");function i(e,t){var n={};return r.reduce(t,(function(t,o){var u=0,i=0,s=t.length,c=r.last(o);return r.forEach(o,(function(t,d){var l=function(e,t){if(e.node(t).dummy)return r.find(e.predecessors(t),(function(t){return e.node(t).dummy}))}(e,t),f=l?e.node(l).order:s;(l||t===c)&&(r.forEach(o.slice(i,d+1),(function(t){r.forEach(e.predecessors(t),(function(r){var o=e.node(r),i=o.order;!(i<u||f<i)||o.dummy&&e.node(t).dummy||a(n,r,t)}))})),i=d+1,u=f)})),o})),n}function s(e,t){var n={};function o(t,o,u,i,s){var c;r.forEach(r.range(o,u),(function(o){c=t[o],e.node(c).dummy&&r.forEach(e.predecessors(c),(function(t){var r=e.node(t);r.dummy&&(r.order<i||r.order>s)&&a(n,t,c)}))}))}return r.reduce(t,(function(t,n){var u,i=-1,s=0;return r.forEach(n,(function(r,a){if("border"===e.node(r).dummy){var c=e.predecessors(r);c.length&&(u=e.node(c[0]).order,o(n,s,a,i,u),s=a,i=u)}o(n,s,n.length,u,t.length)})),n})),n}function a(e,t,n){if(t>n){var r=t;t=n,n=r}var o=e[t];o||(e[t]=o={}),o[n]=!0}function c(e,t,n){if(t>n){var o=t;t=n,n=o}return r.has(e[t],n)}function d(e,t,n,o){var u={},i={},s={};return r.forEach(t,(function(e){r.forEach(e,(function(e,t){u[e]=e,i[e]=e,s[e]=t}))})),r.forEach(t,(function(e){var t=-1;r.forEach(e,(function(e){var a=o(e);if(a.length)for(var d=((a=r.sortBy(a,(function(e){return s[e]}))).length-1)/2,l=Math.floor(d),f=Math.ceil(d);l<=f;++l){var h=a[l];i[e]===e&&t<s[h]&&!c(n,e,h)&&(i[h]=e,i[e]=u[e]=u[h],t=s[h])}}))})),{root:u,align:i}}function l(e,t,n,u,i){var s={},a=function(e,t,n,u){var i=new o,s=e.graph(),a=function(e,t,n){return function(o,u,i){var s,a=o.node(u),c=o.node(i),d=0;if(d+=a.width/2,r.has(a,"labelpos"))switch(a.labelpos.toLowerCase()){case"l":s=-a.width/2;break;case"r":s=a.width/2}if(s&&(d+=n?s:-s),s=0,d+=(a.dummy?t:e)/2,d+=(c.dummy?t:e)/2,d+=c.width/2,r.has(c,"labelpos"))switch(c.labelpos.toLowerCase()){case"l":s=c.width/2;break;case"r":s=-c.width/2}return s&&(d+=n?s:-s),s=0,d}}(s.nodesep,s.edgesep,u);return r.forEach(t,(function(t){var o;r.forEach(t,(function(t){var r=n[t];if(i.setNode(r),o){var u=n[o],s=i.edge(u,r);i.setEdge(u,r,Math.max(a(e,t,o),s||0))}o=t}))})),i}(e,t,n,i),c=i?"borderLeft":"borderRight";function d(e,t){for(var n=a.nodes(),r=n.pop(),o={};r;)o[r]?e(r):(o[r]=!0,n.push(r),n=n.concat(t(r))),r=n.pop()}return d((function(e){s[e]=a.inEdges(e).reduce((function(e,t){return Math.max(e,s[t.v]+a.edge(t))}),0)}),a.predecessors.bind(a)),d((function(t){var n=a.outEdges(t).reduce((function(e,t){return Math.min(e,s[t.w]-a.edge(t))}),Number.POSITIVE_INFINITY),r=e.node(t);n!==Number.POSITIVE_INFINITY&&r.borderType!==c&&(s[t]=Math.max(s[t],n))}),a.successors.bind(a)),r.forEach(u,(function(e){s[e]=s[n[e]]})),s}function f(e,t){return r.minBy(r.values(t),(function(t){var n=Number.NEGATIVE_INFINITY,o=Number.POSITIVE_INFINITY;return r.forIn(t,(function(t,r){var u=function(e,t){return e.node(t).width}(e,r)/2;n=Math.max(t+u,n),o=Math.min(t-u,o)})),n-o}))}function h(e,t){var n=r.values(t),o=r.min(n),u=r.max(n);r.forEach(["u","d"],(function(n){r.forEach(["l","r"],(function(i){var s,a=n+i,c=e[a];if(c!==t){var d=r.values(c);(s="l"===i?o-r.min(d):u-r.max(d))&&(e[a]=r.mapValues(c,(function(e){return e+s})))}}))}))}function m(e,t){return r.mapValues(e.ul,(function(n,o){if(t)return e[t.toLowerCase()][o];var u=r.sortBy(r.map(e,o));return(u[1]+u[2])/2}))}e.exports={positionX:function(e){var t,n=u.buildLayerMatrix(e),o=r.merge(i(e,n),s(e,n)),a={};r.forEach(["u","d"],(function(u){t="u"===u?n:r.values(n).reverse(),r.forEach(["l","r"],(function(n){"r"===n&&(t=r.map(t,(function(e){return r.values(e).reverse()})));var i=("u"===u?e.predecessors:e.successors).bind(e),s=d(e,t,o,i),c=l(e,t,s.root,s.align,"r"===n);"r"===n&&(c=r.mapValues(c,(function(e){return-e}))),a[u+n]=c}))}));var c=f(e,a);return h(a,c),m(a,e.graph().align)},findType1Conflicts:i,findType2Conflicts:s,addConflict:a,hasConflict:c,verticalAlignment:d,horizontalCompaction:l,alignCoordinates:h,findSmallestWidthAlignment:f,balance:m}},"./node_modules/dagre/lib/position/index.js":
/*!**************************************************!*\
  !*** ./node_modules/dagre/lib/position/index.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ../util */"./node_modules/dagre/lib/util.js"),u=n(/*! ./bk */"./node_modules/dagre/lib/position/bk.js").positionX;e.exports=function(e){(function(e){var t=o.buildLayerMatrix(e),n=e.graph().ranksep,u=0;r.forEach(t,(function(t){var o=r.max(r.map(t,(function(t){return e.node(t).height})));r.forEach(t,(function(t){e.node(t).y=u+o/2})),u+=o+n}))})(e=o.asNonCompoundGraph(e)),r.forEach(u(e),(function(t,n){e.node(n).x=t}))}},"./node_modules/dagre/lib/rank/feasible-tree.js":
/*!******************************************************!*\
  !*** ./node_modules/dagre/lib/rank/feasible-tree.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").Graph,u=n(/*! ./util */"./node_modules/dagre/lib/rank/util.js").slack;function i(e,t){return r.forEach(e.nodes(),(function n(o){r.forEach(t.nodeEdges(o),(function(r){var i=r.v,s=o===i?r.w:i;e.hasNode(s)||u(t,r)||(e.setNode(s,{}),e.setEdge(o,s,{}),n(s))}))})),e.nodeCount()}function s(e,t){return r.minBy(t.edges(),(function(n){if(e.hasNode(n.v)!==e.hasNode(n.w))return u(t,n)}))}function a(e,t,n){r.forEach(e.nodes(),(function(e){t.node(e).rank+=n}))}e.exports=function(e){var t,n,r=new o({directed:!1}),c=e.nodes()[0],d=e.nodeCount();r.setNode(c,{});for(;i(r,e)<d;)t=s(r,e),n=r.hasNode(t.v)?u(e,t):-u(e,t),a(r,e,n);return r}},"./node_modules/dagre/lib/rank/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dagre/lib/rank/index.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./util */"./node_modules/dagre/lib/rank/util.js").longestPath,o=n(/*! ./feasible-tree */"./node_modules/dagre/lib/rank/feasible-tree.js"),u=n(/*! ./network-simplex */"./node_modules/dagre/lib/rank/network-simplex.js");e.exports=function(e){switch(e.graph().ranker){case"network-simplex":s(e);break;case"tight-tree":!function(e){r(e),o(e)}(e);break;case"longest-path":i(e);break;default:s(e)}};var i=r;function s(e){u(e)}},"./node_modules/dagre/lib/rank/network-simplex.js":
/*!********************************************************!*\
  !*** ./node_modules/dagre/lib/rank/network-simplex.js ***!
  \********************************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./feasible-tree */"./node_modules/dagre/lib/rank/feasible-tree.js"),u=n(/*! ./util */"./node_modules/dagre/lib/rank/util.js").slack,i=n(/*! ./util */"./node_modules/dagre/lib/rank/util.js").longestPath,s=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").alg.preorder,a=n(/*! ../graphlib */"./node_modules/dagre/lib/graphlib.js").alg.postorder,c=n(/*! ../util */"./node_modules/dagre/lib/util.js").simplify;function d(e){e=c(e),i(e);var t,n=o(e);for(h(n),l(n,e);t=p(n);)g(n,e,t,_(n,e,t))}function l(e,t){var n=a(e,e.nodes());n=n.slice(0,n.length-1),r.forEach(n,(function(n){!function(e,t,n){var r=e.node(n).parent;e.edge(n,r).cutvalue=f(e,t,n)}(e,t,n)}))}function f(e,t,n){var o=e.node(n).parent,u=!0,i=t.edge(n,o),s=0;return i||(u=!1,i=t.edge(o,n)),s=i.weight,r.forEach(t.nodeEdges(n),(function(r){var i,a,c=r.v===n,d=c?r.w:r.v;if(d!==o){var l=c===u,f=t.edge(r).weight;if(s+=l?f:-f,i=n,a=d,e.hasEdge(i,a)){var h=e.edge(n,d).cutvalue;s+=l?-h:h}}})),s}function h(e,t){arguments.length<2&&(t=e.nodes()[0]),m(e,{},1,t)}function m(e,t,n,o,u){var i=n,s=e.node(o);return t[o]=!0,r.forEach(e.neighbors(o),(function(u){r.has(t,u)||(n=m(e,t,n,u,o))})),s.low=i,s.lim=n++,u?s.parent=u:delete s.parent,n}function p(e){return r.find(e.edges(),(function(t){return e.edge(t).cutvalue<0}))}function _(e,t,n){var o=n.v,i=n.w;t.hasEdge(o,i)||(o=n.w,i=n.v);var s=e.node(o),a=e.node(i),c=s,d=!1;s.lim>a.lim&&(c=a,d=!0);var l=r.filter(t.edges(),(function(t){return d===v(e,e.node(t.v),c)&&d!==v(e,e.node(t.w),c)}));return r.minBy(l,(function(e){return u(t,e)}))}function g(e,t,n,o){var u=n.v,i=n.w;e.removeEdge(u,i),e.setEdge(o.v,o.w,{}),h(e),l(e,t),function(e,t){var n=r.find(e.nodes(),(function(e){return!t.node(e).parent})),o=s(e,n);o=o.slice(1),r.forEach(o,(function(n){var r=e.node(n).parent,o=t.edge(n,r),u=!1;o||(o=t.edge(r,n),u=!0),t.node(n).rank=t.node(r).rank+(u?o.minlen:-o.minlen)}))}(e,t)}function v(e,t,n){return n.low<=t.lim&&t.lim<=n.lim}e.exports=d,d.initLowLimValues=h,d.initCutValues=l,d.calcCutValue=f,d.leaveEdge=p,d.enterEdge=_,d.exchangeEdges=g},"./node_modules/dagre/lib/rank/util.js":
/*!*********************************************!*\
  !*** ./node_modules/dagre/lib/rank/util.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ../lodash */"./node_modules/dagre/lib/lodash.js");e.exports={longestPath:function(e){var t={};r.forEach(e.sources(),(function n(o){var u=e.node(o);if(r.has(t,o))return u.rank;t[o]=!0;var i=r.min(r.map(e.outEdges(o),(function(t){return n(t.w)-e.edge(t).minlen})));return i!==Number.POSITIVE_INFINITY&&null!=i||(i=0),u.rank=i}))},slack:function(e,t){return e.node(t.w).rank-e.node(t.v).rank-e.edge(t).minlen}}},"./node_modules/dagre/lib/util.js":
/*!****************************************!*\
  !*** ./node_modules/dagre/lib/util.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/dagre/lib/lodash.js"),o=n(/*! ./graphlib */"./node_modules/dagre/lib/graphlib.js").Graph;function u(e,t,n,o){var u;do{u=r.uniqueId(o)}while(e.hasNode(u));return n.dummy=t,e.setNode(u,n),u}function i(e){return r.max(r.map(e.nodes(),(function(t){var n=e.node(t).rank;if(!r.isUndefined(n))return n})))}e.exports={addDummyNode:u,simplify:function(e){var t=(new o).setGraph(e.graph());return r.forEach(e.nodes(),(function(n){t.setNode(n,e.node(n))})),r.forEach(e.edges(),(function(n){var r=t.edge(n.v,n.w)||{weight:0,minlen:1},o=e.edge(n);t.setEdge(n.v,n.w,{weight:r.weight+o.weight,minlen:Math.max(r.minlen,o.minlen)})})),t},asNonCompoundGraph:function(e){var t=new o({multigraph:e.isMultigraph()}).setGraph(e.graph());return r.forEach(e.nodes(),(function(n){e.children(n).length||t.setNode(n,e.node(n))})),r.forEach(e.edges(),(function(n){t.setEdge(n,e.edge(n))})),t},successorWeights:function(e){var t=r.map(e.nodes(),(function(t){var n={};return r.forEach(e.outEdges(t),(function(t){n[t.w]=(n[t.w]||0)+e.edge(t).weight})),n}));return r.zipObject(e.nodes(),t)},predecessorWeights:function(e){var t=r.map(e.nodes(),(function(t){var n={};return r.forEach(e.inEdges(t),(function(t){n[t.v]=(n[t.v]||0)+e.edge(t).weight})),n}));return r.zipObject(e.nodes(),t)},intersectRect:function(e,t){var n,r,o=e.x,u=e.y,i=t.x-o,s=t.y-u,a=e.width/2,c=e.height/2;if(!i&&!s)throw new Error("Not possible to find intersection inside of the rectangle");Math.abs(s)*a>Math.abs(i)*c?(s<0&&(c=-c),n=c*i/s,r=c):(i<0&&(a=-a),n=a,r=a*s/i);return{x:o+n,y:u+r}},buildLayerMatrix:function(e){var t=r.map(r.range(i(e)+1),(function(){return[]}));return r.forEach(e.nodes(),(function(n){var o=e.node(n),u=o.rank;r.isUndefined(u)||(t[u][o.order]=n)})),t},normalizeRanks:function(e){var t=r.min(r.map(e.nodes(),(function(t){return e.node(t).rank})));r.forEach(e.nodes(),(function(n){var o=e.node(n);r.has(o,"rank")&&(o.rank-=t)}))},removeEmptyRanks:function(e){var t=r.min(r.map(e.nodes(),(function(t){return e.node(t).rank}))),n=[];r.forEach(e.nodes(),(function(r){var o=e.node(r).rank-t;n[o]||(n[o]=[]),n[o].push(r)}));var o=0,u=e.graph().nodeRankFactor;r.forEach(n,(function(t,n){r.isUndefined(t)&&n%u!=0?--o:o&&r.forEach(t,(function(t){e.node(t).rank+=o}))}))},addBorderNode:function(e,t,n,r){var o={width:0,height:0};arguments.length>=4&&(o.rank=n,o.order=r);return u(e,"border",o,t)},maxRank:i,partition:function(e,t){var n={lhs:[],rhs:[]};return r.forEach(e,(function(e){t(e)?n.lhs.push(e):n.rhs.push(e)})),n},time:function(e,t){var n=r.now();try{return t()}finally{console.log(e+" time: "+(r.now()-n)+"ms")}},notime:function(e,t){return t()}}},"./node_modules/dagre/lib/version.js":
/*!*******************************************!*\
  !*** ./node_modules/dagre/lib/version.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports="0.8.5"},"./node_modules/graphlib/index.js":
/*!****************************************!*\
  !*** ./node_modules/graphlib/index.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lib */"./node_modules/graphlib/lib/index.js");e.exports={Graph:r.Graph,json:n(/*! ./lib/json */"./node_modules/graphlib/lib/json.js"),alg:n(/*! ./lib/alg */"./node_modules/graphlib/lib/alg/index.js"),version:r.version}},"./node_modules/graphlib/lib/alg/components.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/components.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=function(e){var t,n={},o=[];function u(o){r.has(n,o)||(n[o]=!0,t.push(o),r.each(e.successors(o),u),r.each(e.predecessors(o),u))}return r.each(e.nodes(),(function(e){t=[],u(e),t.length&&o.push(t)})),o}},"./node_modules/graphlib/lib/alg/dfs.js":
/*!**********************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dfs.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=function(e,t,n){r.isArray(t)||(t=[t]);var o=(e.isDirected()?e.successors:e.neighbors).bind(e),u=[],i={};return r.each(t,(function(t){if(!e.hasNode(t))throw new Error("Graph does not have node: "+t);!function e(t,n,o,u,i,s){r.has(u,n)||(u[n]=!0,o||s.push(n),r.each(i(n),(function(n){e(t,n,o,u,i,s)})),o&&s.push(n))}(e,t,"post"===n,i,o,u)})),u}},"./node_modules/graphlib/lib/alg/dijkstra-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dijkstra-all.js ***!
  \*******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./dijkstra */"./node_modules/graphlib/lib/alg/dijkstra.js"),o=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=function(e,t,n){return o.transform(e.nodes(),(function(o,u){o[u]=r(e,u,t,n)}),{})}},"./node_modules/graphlib/lib/alg/dijkstra.js":
/*!***************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/dijkstra.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js"),o=n(/*! ../data/priority-queue */"./node_modules/graphlib/lib/data/priority-queue.js");e.exports=function(e,t,n,r){return function(e,t,n,r){var u,i,s={},a=new o,c=function(e){var t=e.v!==u?e.v:e.w,r=s[t],o=n(e),c=i.distance+o;if(o<0)throw new Error("dijkstra does not allow negative edge weights. Bad edge: "+e+" Weight: "+o);c<r.distance&&(r.distance=c,r.predecessor=u,a.decrease(t,c))};e.nodes().forEach((function(e){var n=e===t?0:Number.POSITIVE_INFINITY;s[e]={distance:n},a.add(e,n)}));for(;a.size()>0&&(u=a.removeMin(),(i=s[u]).distance!==Number.POSITIVE_INFINITY);)r(u).forEach(c);return s}(e,String(t),n||u,r||function(t){return e.outEdges(t)})};var u=r.constant(1)},"./node_modules/graphlib/lib/alg/find-cycles.js":
/*!******************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/find-cycles.js ***!
  \******************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js"),o=n(/*! ./tarjan */"./node_modules/graphlib/lib/alg/tarjan.js");e.exports=function(e){return r.filter(o(e),(function(t){return t.length>1||1===t.length&&e.hasEdge(t[0],t[0])}))}},"./node_modules/graphlib/lib/alg/floyd-warshall.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/floyd-warshall.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=function(e,t,n){return function(e,t,n){var r={},o=e.nodes();return o.forEach((function(e){r[e]={},r[e][e]={distance:0},o.forEach((function(t){e!==t&&(r[e][t]={distance:Number.POSITIVE_INFINITY})})),n(e).forEach((function(n){var o=n.v===e?n.w:n.v,u=t(n);r[e][o]={distance:u,predecessor:e}}))})),o.forEach((function(e){var t=r[e];o.forEach((function(n){var u=r[n];o.forEach((function(n){var r=u[e],o=t[n],i=u[n],s=r.distance+o.distance;s<i.distance&&(i.distance=s,i.predecessor=o.predecessor)}))}))})),r}(e,t||o,n||function(t){return e.outEdges(t)})};var o=r.constant(1)},"./node_modules/graphlib/lib/alg/index.js":
/*!************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/index.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){e.exports={components:n(/*! ./components */"./node_modules/graphlib/lib/alg/components.js"),dijkstra:n(/*! ./dijkstra */"./node_modules/graphlib/lib/alg/dijkstra.js"),dijkstraAll:n(/*! ./dijkstra-all */"./node_modules/graphlib/lib/alg/dijkstra-all.js"),findCycles:n(/*! ./find-cycles */"./node_modules/graphlib/lib/alg/find-cycles.js"),floydWarshall:n(/*! ./floyd-warshall */"./node_modules/graphlib/lib/alg/floyd-warshall.js"),isAcyclic:n(/*! ./is-acyclic */"./node_modules/graphlib/lib/alg/is-acyclic.js"),postorder:n(/*! ./postorder */"./node_modules/graphlib/lib/alg/postorder.js"),preorder:n(/*! ./preorder */"./node_modules/graphlib/lib/alg/preorder.js"),prim:n(/*! ./prim */"./node_modules/graphlib/lib/alg/prim.js"),tarjan:n(/*! ./tarjan */"./node_modules/graphlib/lib/alg/tarjan.js"),topsort:n(/*! ./topsort */"./node_modules/graphlib/lib/alg/topsort.js")}},"./node_modules/graphlib/lib/alg/is-acyclic.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/is-acyclic.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./topsort */"./node_modules/graphlib/lib/alg/topsort.js");e.exports=function(e){try{r(e)}catch(e){if(e instanceof r.CycleException)return!1;throw e}return!0}},"./node_modules/graphlib/lib/alg/postorder.js":
/*!****************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/postorder.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./dfs */"./node_modules/graphlib/lib/alg/dfs.js");e.exports=function(e,t){return r(e,t,"post")}},"./node_modules/graphlib/lib/alg/preorder.js":
/*!***************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/preorder.js ***!
  \***************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./dfs */"./node_modules/graphlib/lib/alg/dfs.js");e.exports=function(e,t){return r(e,t,"pre")}},"./node_modules/graphlib/lib/alg/prim.js":
/*!***********************************************!*\
  !*** ./node_modules/graphlib/lib/alg/prim.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js"),o=n(/*! ../graph */"./node_modules/graphlib/lib/graph.js"),u=n(/*! ../data/priority-queue */"./node_modules/graphlib/lib/data/priority-queue.js");e.exports=function(e,t){var n,i=new o,s={},a=new u;function c(e){var r=e.v===n?e.w:e.v,o=a.priority(r);if(void 0!==o){var u=t(e);u<o&&(s[r]=n,a.decrease(r,u))}}if(0===e.nodeCount())return i;r.each(e.nodes(),(function(e){a.add(e,Number.POSITIVE_INFINITY),i.setNode(e)})),a.decrease(e.nodes()[0],0);var d=!1;for(;a.size()>0;){if(n=a.removeMin(),r.has(s,n))i.setEdge(n,s[n]);else{if(d)throw new Error("Input graph is not connected: "+e);d=!0}e.nodeEdges(n).forEach(c)}return i}},"./node_modules/graphlib/lib/alg/tarjan.js":
/*!*************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/tarjan.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=function(e){var t=0,n=[],o={},u=[];return e.nodes().forEach((function(i){r.has(o,i)||function i(s){var a=o[s]={onStack:!0,lowlink:t,index:t++};if(n.push(s),e.successors(s).forEach((function(e){r.has(o,e)?o[e].onStack&&(a.lowlink=Math.min(a.lowlink,o[e].index)):(i(e),a.lowlink=Math.min(a.lowlink,o[e].lowlink))})),a.lowlink===a.index){var c,d=[];do{c=n.pop(),o[c].onStack=!1,d.push(c)}while(s!==c);u.push(d)}}(i)})),u}},"./node_modules/graphlib/lib/alg/topsort.js":
/*!**************************************************!*\
  !*** ./node_modules/graphlib/lib/alg/topsort.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");function o(e){var t={},n={},o=[];if(r.each(e.sinks(),(function i(s){if(r.has(n,s))throw new u;r.has(t,s)||(n[s]=!0,t[s]=!0,r.each(e.predecessors(s),i),delete n[s],o.push(s))})),r.size(t)!==e.nodeCount())throw new u;return o}function u(){}e.exports=o,o.CycleException=u,u.prototype=new Error},"./node_modules/graphlib/lib/data/priority-queue.js":
/*!**********************************************************!*\
  !*** ./node_modules/graphlib/lib/data/priority-queue.js ***!
  \**********************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ../lodash */"./node_modules/graphlib/lib/lodash.js");function o(){this._arr=[],this._keyIndices={}}e.exports=o,o.prototype.size=function(){return this._arr.length},o.prototype.keys=function(){return this._arr.map((function(e){return e.key}))},o.prototype.has=function(e){return r.has(this._keyIndices,e)},o.prototype.priority=function(e){var t=this._keyIndices[e];if(void 0!==t)return this._arr[t].priority},o.prototype.min=function(){if(0===this.size())throw new Error("Queue underflow");return this._arr[0].key},o.prototype.add=function(e,t){var n=this._keyIndices;if(e=String(e),!r.has(n,e)){var o=this._arr,u=o.length;return n[e]=u,o.push({key:e,priority:t}),this._decrease(u),!0}return!1},o.prototype.removeMin=function(){this._swap(0,this._arr.length-1);var e=this._arr.pop();return delete this._keyIndices[e.key],this._heapify(0),e.key},o.prototype.decrease=function(e,t){var n=this._keyIndices[e];if(t>this._arr[n].priority)throw new Error("New priority is greater than current priority. Key: "+e+" Old: "+this._arr[n].priority+" New: "+t);this._arr[n].priority=t,this._decrease(n)},o.prototype._heapify=function(e){var t=this._arr,n=2*e,r=n+1,o=e;n<t.length&&(o=t[n].priority<t[o].priority?n:o,r<t.length&&(o=t[r].priority<t[o].priority?r:o),o!==e&&(this._swap(e,o),this._heapify(o)))},o.prototype._decrease=function(e){for(var t,n=this._arr,r=n[e].priority;0!==e&&!(n[t=e>>1].priority<r);)this._swap(e,t),e=t},o.prototype._swap=function(e,t){var n=this._arr,r=this._keyIndices,o=n[e],u=n[t];n[e]=u,n[t]=o,r[u.key]=e,r[o.key]=t}},"./node_modules/graphlib/lib/graph.js":
/*!********************************************!*\
  !*** ./node_modules/graphlib/lib/graph.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){"use strict";var r=n(/*! ./lodash */"./node_modules/graphlib/lib/lodash.js");e.exports=o;function o(e){this._isDirected=!r.has(e,"directed")||e.directed,this._isMultigraph=!!r.has(e,"multigraph")&&e.multigraph,this._isCompound=!!r.has(e,"compound")&&e.compound,this._label=void 0,this._defaultNodeLabelFn=r.constant(void 0),this._defaultEdgeLabelFn=r.constant(void 0),this._nodes={},this._isCompound&&(this._parent={},this._children={},this._children["\0"]={}),this._in={},this._preds={},this._out={},this._sucs={},this._edgeObjs={},this._edgeLabels={}}function u(e,t){e[t]?e[t]++:e[t]=1}function i(e,t){--e[t]||delete e[t]}function s(e,t,n,o){var u=""+t,i=""+n;if(!e&&u>i){var s=u;u=i,i=s}return u+""+i+""+(r.isUndefined(o)?"\0":o)}function a(e,t,n,r){var o=""+t,u=""+n;if(!e&&o>u){var i=o;o=u,u=i}var s={v:o,w:u};return r&&(s.name=r),s}function c(e,t){return s(e,t.v,t.w,t.name)}o.prototype._nodeCount=0,o.prototype._edgeCount=0,o.prototype.isDirected=function(){return this._isDirected},o.prototype.isMultigraph=function(){return this._isMultigraph},o.prototype.isCompound=function(){return this._isCompound},o.prototype.setGraph=function(e){return this._label=e,this},o.prototype.graph=function(){return this._label},o.prototype.setDefaultNodeLabel=function(e){return r.isFunction(e)||(e=r.constant(e)),this._defaultNodeLabelFn=e,this},o.prototype.nodeCount=function(){return this._nodeCount},o.prototype.nodes=function(){return r.keys(this._nodes)},o.prototype.sources=function(){var e=this;return r.filter(this.nodes(),(function(t){return r.isEmpty(e._in[t])}))},o.prototype.sinks=function(){var e=this;return r.filter(this.nodes(),(function(t){return r.isEmpty(e._out[t])}))},o.prototype.setNodes=function(e,t){var n=arguments,o=this;return r.each(e,(function(e){n.length>1?o.setNode(e,t):o.setNode(e)})),this},o.prototype.setNode=function(e,t){return r.has(this._nodes,e)?(arguments.length>1&&(this._nodes[e]=t),this):(this._nodes[e]=arguments.length>1?t:this._defaultNodeLabelFn(e),this._isCompound&&(this._parent[e]="\0",this._children[e]={},this._children["\0"][e]=!0),this._in[e]={},this._preds[e]={},this._out[e]={},this._sucs[e]={},++this._nodeCount,this)},o.prototype.node=function(e){return this._nodes[e]},o.prototype.hasNode=function(e){return r.has(this._nodes,e)},o.prototype.removeNode=function(e){var t=this;if(r.has(this._nodes,e)){var n=function(e){t.removeEdge(t._edgeObjs[e])};delete this._nodes[e],this._isCompound&&(this._removeFromParentsChildList(e),delete this._parent[e],r.each(this.children(e),(function(e){t.setParent(e)})),delete this._children[e]),r.each(r.keys(this._in[e]),n),delete this._in[e],delete this._preds[e],r.each(r.keys(this._out[e]),n),delete this._out[e],delete this._sucs[e],--this._nodeCount}return this},o.prototype.setParent=function(e,t){if(!this._isCompound)throw new Error("Cannot set parent in a non-compound graph");if(r.isUndefined(t))t="\0";else{for(var n=t+="";!r.isUndefined(n);n=this.parent(n))if(n===e)throw new Error("Setting "+t+" as parent of "+e+" would create a cycle");this.setNode(t)}return this.setNode(e),this._removeFromParentsChildList(e),this._parent[e]=t,this._children[t][e]=!0,this},o.prototype._removeFromParentsChildList=function(e){delete this._children[this._parent[e]][e]},o.prototype.parent=function(e){if(this._isCompound){var t=this._parent[e];if("\0"!==t)return t}},o.prototype.children=function(e){if(r.isUndefined(e)&&(e="\0"),this._isCompound){var t=this._children[e];if(t)return r.keys(t)}else{if("\0"===e)return this.nodes();if(this.hasNode(e))return[]}},o.prototype.predecessors=function(e){var t=this._preds[e];if(t)return r.keys(t)},o.prototype.successors=function(e){var t=this._sucs[e];if(t)return r.keys(t)},o.prototype.neighbors=function(e){var t=this.predecessors(e);if(t)return r.union(t,this.successors(e))},o.prototype.isLeaf=function(e){return 0===(this.isDirected()?this.successors(e):this.neighbors(e)).length},o.prototype.filterNodes=function(e){var t=new this.constructor({directed:this._isDirected,multigraph:this._isMultigraph,compound:this._isCompound});t.setGraph(this.graph());var n=this;r.each(this._nodes,(function(n,r){e(r)&&t.setNode(r,n)})),r.each(this._edgeObjs,(function(e){t.hasNode(e.v)&&t.hasNode(e.w)&&t.setEdge(e,n.edge(e))}));var o={};return this._isCompound&&r.each(t.nodes(),(function(e){t.setParent(e,function e(r){var u=n.parent(r);return void 0===u||t.hasNode(u)?(o[r]=u,u):u in o?o[u]:e(u)}(e))})),t},o.prototype.setDefaultEdgeLabel=function(e){return r.isFunction(e)||(e=r.constant(e)),this._defaultEdgeLabelFn=e,this},o.prototype.edgeCount=function(){return this._edgeCount},o.prototype.edges=function(){return r.values(this._edgeObjs)},o.prototype.setPath=function(e,t){var n=this,o=arguments;return r.reduce(e,(function(e,r){return o.length>1?n.setEdge(e,r,t):n.setEdge(e,r),r})),this},o.prototype.setEdge=function(){var e,t,n,o,i=!1,c=arguments[0];"object"==typeof c&&null!==c&&"v"in c?(e=c.v,t=c.w,n=c.name,2===arguments.length&&(o=arguments[1],i=!0)):(e=c,t=arguments[1],n=arguments[3],arguments.length>2&&(o=arguments[2],i=!0)),e=""+e,t=""+t,r.isUndefined(n)||(n=""+n);var d=s(this._isDirected,e,t,n);if(r.has(this._edgeLabels,d))return i&&(this._edgeLabels[d]=o),this;if(!r.isUndefined(n)&&!this._isMultigraph)throw new Error("Cannot set a named edge when isMultigraph = false");this.setNode(e),this.setNode(t),this._edgeLabels[d]=i?o:this._defaultEdgeLabelFn(e,t,n);var l=a(this._isDirected,e,t,n);return e=l.v,t=l.w,Object.freeze(l),this._edgeObjs[d]=l,u(this._preds[t],e),u(this._sucs[e],t),this._in[t][d]=l,this._out[e][d]=l,this._edgeCount++,this},o.prototype.edge=function(e,t,n){var r=1===arguments.length?c(this._isDirected,arguments[0]):s(this._isDirected,e,t,n);return this._edgeLabels[r]},o.prototype.hasEdge=function(e,t,n){var o=1===arguments.length?c(this._isDirected,arguments[0]):s(this._isDirected,e,t,n);return r.has(this._edgeLabels,o)},o.prototype.removeEdge=function(e,t,n){var r=1===arguments.length?c(this._isDirected,arguments[0]):s(this._isDirected,e,t,n),o=this._edgeObjs[r];return o&&(e=o.v,t=o.w,delete this._edgeLabels[r],delete this._edgeObjs[r],i(this._preds[t],e),i(this._sucs[e],t),delete this._in[t][r],delete this._out[e][r],this._edgeCount--),this},o.prototype.inEdges=function(e,t){var n=this._in[e];if(n){var o=r.values(n);return t?r.filter(o,(function(e){return e.v===t})):o}},o.prototype.outEdges=function(e,t){var n=this._out[e];if(n){var o=r.values(n);return t?r.filter(o,(function(e){return e.w===t})):o}},o.prototype.nodeEdges=function(e,t){var n=this.inEdges(e,t);if(n)return n.concat(this.outEdges(e,t))}},"./node_modules/graphlib/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/graphlib/lib/index.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){e.exports={Graph:n(/*! ./graph */"./node_modules/graphlib/lib/graph.js"),version:n(/*! ./version */"./node_modules/graphlib/lib/version.js")}},"./node_modules/graphlib/lib/json.js":
/*!*******************************************!*\
  !*** ./node_modules/graphlib/lib/json.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./lodash */"./node_modules/graphlib/lib/lodash.js"),o=n(/*! ./graph */"./node_modules/graphlib/lib/graph.js");function u(e){return r.map(e.nodes(),(function(t){var n=e.node(t),o=e.parent(t),u={v:t};return r.isUndefined(n)||(u.value=n),r.isUndefined(o)||(u.parent=o),u}))}function i(e){return r.map(e.edges(),(function(t){var n=e.edge(t),o={v:t.v,w:t.w};return r.isUndefined(t.name)||(o.name=t.name),r.isUndefined(n)||(o.value=n),o}))}e.exports={write:function(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:u(e),edges:i(e)};r.isUndefined(e.graph())||(t.value=r.clone(e.graph()));return t},read:function(e){var t=new o(e.options).setGraph(e.value);return r.each(e.nodes,(function(e){t.setNode(e.v,e.value),e.parent&&t.setParent(e.v,e.parent)})),r.each(e.edges,(function(e){t.setEdge({v:e.v,w:e.w,name:e.name},e.value)})),t}}},"./node_modules/graphlib/lib/lodash.js":
/*!*********************************************!*\
  !*** ./node_modules/graphlib/lib/lodash.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r;try{r={clone:n(/*! lodash/clone */"./node_modules/lodash/clone.js"),constant:n(/*! lodash/constant */"./node_modules/lodash/constant.js"),each:n(/*! lodash/each */"./node_modules/lodash/each.js"),filter:n(/*! lodash/filter */"./node_modules/lodash/filter.js"),has:n(/*! lodash/has */"./node_modules/lodash/has.js"),isArray:n(/*! lodash/isArray */"./node_modules/lodash/isArray.js"),isEmpty:n(/*! lodash/isEmpty */"./node_modules/lodash/isEmpty.js"),isFunction:n(/*! lodash/isFunction */"./node_modules/lodash/isFunction.js"),isUndefined:n(/*! lodash/isUndefined */"./node_modules/lodash/isUndefined.js"),keys:n(/*! lodash/keys */"./node_modules/lodash/keys.js"),map:n(/*! lodash/map */"./node_modules/lodash/map.js"),reduce:n(/*! lodash/reduce */"./node_modules/lodash/reduce.js"),size:n(/*! lodash/size */"./node_modules/lodash/size.js"),transform:n(/*! lodash/transform */"./node_modules/lodash/transform.js"),union:n(/*! lodash/union */"./node_modules/lodash/union.js"),values:n(/*! lodash/values */"./node_modules/lodash/values.js")}}catch(e){}r||(r=window._),e.exports=r},"./node_modules/graphlib/lib/version.js":
/*!**********************************************!*\
  !*** ./node_modules/graphlib/lib/version.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){e.exports="2.1.8"},"./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(n(/*! ./_root */"./node_modules/lodash/_root.js"),"DataView");e.exports=r},"./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_hashClear */"./node_modules/lodash/_hashClear.js"),o=n(/*! ./_hashDelete */"./node_modules/lodash/_hashDelete.js"),u=n(/*! ./_hashGet */"./node_modules/lodash/_hashGet.js"),i=n(/*! ./_hashHas */"./node_modules/lodash/_hashHas.js"),s=n(/*! ./_hashSet */"./node_modules/lodash/_hashSet.js");function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=s,e.exports=a},"./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_listCacheClear */"./node_modules/lodash/_listCacheClear.js"),o=n(/*! ./_listCacheDelete */"./node_modules/lodash/_listCacheDelete.js"),u=n(/*! ./_listCacheGet */"./node_modules/lodash/_listCacheGet.js"),i=n(/*! ./_listCacheHas */"./node_modules/lodash/_listCacheHas.js"),s=n(/*! ./_listCacheSet */"./node_modules/lodash/_listCacheSet.js");function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=s,e.exports=a},"./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(n(/*! ./_root */"./node_modules/lodash/_root.js"),"Map");e.exports=r},"./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_mapCacheClear */"./node_modules/lodash/_mapCacheClear.js"),o=n(/*! ./_mapCacheDelete */"./node_modules/lodash/_mapCacheDelete.js"),u=n(/*! ./_mapCacheGet */"./node_modules/lodash/_mapCacheGet.js"),i=n(/*! ./_mapCacheHas */"./node_modules/lodash/_mapCacheHas.js"),s=n(/*! ./_mapCacheSet */"./node_modules/lodash/_mapCacheSet.js");function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}a.prototype.clear=r,a.prototype.delete=o,a.prototype.get=u,a.prototype.has=i,a.prototype.set=s,e.exports=a},"./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(n(/*! ./_root */"./node_modules/lodash/_root.js"),"Promise");e.exports=r},"./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(n(/*! ./_root */"./node_modules/lodash/_root.js"),"Set");e.exports=r},"./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_MapCache */"./node_modules/lodash/_MapCache.js"),o=n(/*! ./_setCacheAdd */"./node_modules/lodash/_setCacheAdd.js"),u=n(/*! ./_setCacheHas */"./node_modules/lodash/_setCacheHas.js");function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=o,i.prototype.has=u,e.exports=i},"./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_ListCache */"./node_modules/lodash/_ListCache.js"),o=n(/*! ./_stackClear */"./node_modules/lodash/_stackClear.js"),u=n(/*! ./_stackDelete */"./node_modules/lodash/_stackDelete.js"),i=n(/*! ./_stackGet */"./node_modules/lodash/_stackGet.js"),s=n(/*! ./_stackHas */"./node_modules/lodash/_stackHas.js"),a=n(/*! ./_stackSet */"./node_modules/lodash/_stackSet.js");function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=u,c.prototype.get=i,c.prototype.has=s,c.prototype.set=a,e.exports=c},"./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_root */"./node_modules/lodash/_root.js").Symbol;e.exports=r},"./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_root */"./node_modules/lodash/_root.js").Uint8Array;e.exports=r},"./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(n(/*! ./_root */"./node_modules/lodash/_root.js"),"WeakMap");e.exports=r},"./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},"./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},"./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,u=[];++n<r;){var i=e[n];t(i,n,e)&&(u[o++]=i)}return u}},"./node_modules/lodash/_arrayIncludes.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayIncludes.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIndexOf */"./node_modules/lodash/_baseIndexOf.js");e.exports=function(e,t){return!!(null==e?0:e.length)&&r(e,t,0)>-1}},"./node_modules/lodash/_arrayIncludesWith.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_arrayIncludesWith.js ***!
  \***************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}},"./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseTimes */"./node_modules/lodash/_baseTimes.js"),o=n(/*! ./isArguments */"./node_modules/lodash/isArguments.js"),u=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),i=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),s=n(/*! ./_isIndex */"./node_modules/lodash/_isIndex.js"),a=n(/*! ./isTypedArray */"./node_modules/lodash/isTypedArray.js"),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=u(e),d=!n&&o(e),l=!n&&!d&&i(e),f=!n&&!d&&!l&&a(e),h=n||d||l||f,m=h?r(e.length,String):[],p=m.length;for(var _ in e)!t&&!c.call(e,_)||h&&("length"==_||l&&("offset"==_||"parent"==_)||f&&("buffer"==_||"byteLength"==_||"byteOffset"==_)||s(_,p))||m.push(_);return m}},"./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},"./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},"./node_modules/lodash/_arrayReduce.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayReduce.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n,r){var o=-1,u=null==e?0:e.length;for(r&&u&&(n=e[++o]);++o<u;)n=t(n,e[o],o,e);return n}},"./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},"./node_modules/lodash/_asciiSize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_asciiSize.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseProperty */"./node_modules/lodash/_baseProperty.js")("length");e.exports=r},"./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseAssignValue */"./node_modules/lodash/_baseAssignValue.js"),o=n(/*! ./eq */"./node_modules/lodash/eq.js");e.exports=function(e,t,n){(void 0!==n&&!o(e[t],n)||void 0===n&&!(t in e))&&r(e,t,n)}},"./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseAssignValue */"./node_modules/lodash/_baseAssignValue.js"),o=n(/*! ./eq */"./node_modules/lodash/eq.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var i=e[t];u.call(e,t)&&o(i,n)&&(void 0!==n||t in e)||r(e,t,n)}},"./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./eq */"./node_modules/lodash/eq.js");e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},"./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_copyObject */"./node_modules/lodash/_copyObject.js"),o=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&r(t,o(t),e)}},"./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_copyObject */"./node_modules/lodash/_copyObject.js"),o=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js");e.exports=function(e,t){return e&&r(t,o(t),e)}},"./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_defineProperty */"./node_modules/lodash/_defineProperty.js");e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},"./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Stack */"./node_modules/lodash/_Stack.js"),o=n(/*! ./_arrayEach */"./node_modules/lodash/_arrayEach.js"),u=n(/*! ./_assignValue */"./node_modules/lodash/_assignValue.js"),i=n(/*! ./_baseAssign */"./node_modules/lodash/_baseAssign.js"),s=n(/*! ./_baseAssignIn */"./node_modules/lodash/_baseAssignIn.js"),a=n(/*! ./_cloneBuffer */"./node_modules/lodash/_cloneBuffer.js"),c=n(/*! ./_copyArray */"./node_modules/lodash/_copyArray.js"),d=n(/*! ./_copySymbols */"./node_modules/lodash/_copySymbols.js"),l=n(/*! ./_copySymbolsIn */"./node_modules/lodash/_copySymbolsIn.js"),f=n(/*! ./_getAllKeys */"./node_modules/lodash/_getAllKeys.js"),h=n(/*! ./_getAllKeysIn */"./node_modules/lodash/_getAllKeysIn.js"),m=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),p=n(/*! ./_initCloneArray */"./node_modules/lodash/_initCloneArray.js"),_=n(/*! ./_initCloneByTag */"./node_modules/lodash/_initCloneByTag.js"),g=n(/*! ./_initCloneObject */"./node_modules/lodash/_initCloneObject.js"),v=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),j=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),b=n(/*! ./isMap */"./node_modules/lodash/isMap.js"),y=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),x=n(/*! ./isSet */"./node_modules/lodash/isSet.js"),w=n(/*! ./keys */"./node_modules/lodash/keys.js"),O={};O["[object Arguments]"]=O["[object Array]"]=O["[object ArrayBuffer]"]=O["[object DataView]"]=O["[object Boolean]"]=O["[object Date]"]=O["[object Float32Array]"]=O["[object Float64Array]"]=O["[object Int8Array]"]=O["[object Int16Array]"]=O["[object Int32Array]"]=O["[object Map]"]=O["[object Number]"]=O["[object Object]"]=O["[object RegExp]"]=O["[object Set]"]=O["[object String]"]=O["[object Symbol]"]=O["[object Uint8Array]"]=O["[object Uint8ClampedArray]"]=O["[object Uint16Array]"]=O["[object Uint32Array]"]=!0,O["[object Error]"]=O["[object Function]"]=O["[object WeakMap]"]=!1,e.exports=function e(t,n,M,S,E,k){var C,A=1&n,T=2&n,R=4&n;if(M&&(C=E?M(t,S,E,k):M(t)),void 0!==C)return C;if(!y(t))return t;var N=v(t);if(N){if(C=p(t),!A)return c(t,C)}else{var P=m(t),I="[object Function]"==P||"[object GeneratorFunction]"==P;if(j(t))return a(t,A);if("[object Object]"==P||"[object Arguments]"==P||I&&!E){if(C=T||I?{}:g(t),!A)return T?l(t,s(C,t)):d(t,i(C,t))}else{if(!O[P])return E?t:{};C=_(t,P,A)}}k||(k=new r);var q=k.get(t);if(q)return q;k.set(t,C),x(t)?t.forEach((function(r){C.add(e(r,n,M,r,t,k))})):b(t)&&t.forEach((function(r,o){C.set(o,e(r,n,M,o,t,k))}));var B=R?T?h:f:T?keysIn:w,F=N?void 0:B(t);return o(F||t,(function(r,o){F&&(r=t[o=r]),u(C,o,e(r,n,M,o,t,k))})),C}},"./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),o=Object.create,u=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=u},"./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseForOwn */"./node_modules/lodash/_baseForOwn.js"),o=n(/*! ./_createBaseEach */"./node_modules/lodash/_createBaseEach.js")(r);e.exports=o},"./node_modules/lodash/_baseExtremum.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseExtremum.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js");e.exports=function(e,t,n){for(var o=-1,u=e.length;++o<u;){var i=e[o],s=t(i);if(null!=s&&(void 0===a?s==s&&!r(s):n(s,a)))var a=s,c=i}return c}},"./node_modules/lodash/_baseFilter.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseFilter.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseEach */"./node_modules/lodash/_baseEach.js");e.exports=function(e,t){var n=[];return r(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}},"./node_modules/lodash/_baseFindIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseFindIndex.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n,r){for(var o=e.length,u=n+(r?1:-1);r?u--:++u<o;)if(t(e[u],u,e))return u;return-1}},"./node_modules/lodash/_baseFlatten.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseFlatten.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayPush */"./node_modules/lodash/_arrayPush.js"),o=n(/*! ./_isFlattenable */"./node_modules/lodash/_isFlattenable.js");e.exports=function e(t,n,u,i,s){var a=-1,c=t.length;for(u||(u=o),s||(s=[]);++a<c;){var d=t[a];n>0&&u(d)?n>1?e(d,n-1,u,i,s):r(s,d):i||(s[s.length]=d)}return s}},"./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_createBaseFor */"./node_modules/lodash/_createBaseFor.js")();e.exports=r},"./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFor */"./node_modules/lodash/_baseFor.js"),o=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&r(e,t,o)}},"./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_castPath */"./node_modules/lodash/_castPath.js"),o=n(/*! ./_toKey */"./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var n=0,u=(t=r(t,e)).length;null!=e&&n<u;)e=e[o(t[n++])];return n&&n==u?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayPush */"./node_modules/lodash/_arrayPush.js"),o=n(/*! ./isArray */"./node_modules/lodash/isArray.js");e.exports=function(e,t,n){var u=t(e);return o(e)?u:r(u,n(e))}},"./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=n(/*! ./_getRawTag */"./node_modules/lodash/_getRawTag.js"),u=n(/*! ./_objectToString */"./node_modules/lodash/_objectToString.js"),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):u(e)}},"./node_modules/lodash/_baseGt.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_baseGt.js ***!
  \****************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return e>t}},"./node_modules/lodash/_baseHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseHas.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e,t){return null!=e&&n.call(e,t)}},"./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFindIndex */"./node_modules/lodash/_baseFindIndex.js"),o=n(/*! ./_baseIsNaN */"./node_modules/lodash/_baseIsNaN.js"),u=n(/*! ./_strictIndexOf */"./node_modules/lodash/_strictIndexOf.js");e.exports=function(e,t,n){return t==t?u(e,t,n):r(e,o,n)}},"./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},"./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsEqualDeep */"./node_modules/lodash/_baseIsEqualDeep.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function e(t,n,u,i,s){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,u,i,e,s))}},"./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Stack */"./node_modules/lodash/_Stack.js"),o=n(/*! ./_equalArrays */"./node_modules/lodash/_equalArrays.js"),u=n(/*! ./_equalByTag */"./node_modules/lodash/_equalByTag.js"),i=n(/*! ./_equalObjects */"./node_modules/lodash/_equalObjects.js"),s=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),a=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),c=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),d=n(/*! ./isTypedArray */"./node_modules/lodash/isTypedArray.js"),l="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,h,m,p){var _=a(e),g=a(t),v=_?"[object Array]":s(e),j=g?"[object Array]":s(t),b=(v="[object Arguments]"==v?l:v)==l,y=(j="[object Arguments]"==j?l:j)==l,x=v==j;if(x&&c(e)){if(!c(t))return!1;_=!0,b=!1}if(x&&!b)return p||(p=new r),_||d(e)?o(e,t,n,h,m,p):u(e,t,v,n,h,m,p);if(!(1&n)){var w=b&&f.call(e,"__wrapped__"),O=y&&f.call(t,"__wrapped__");if(w||O){var M=w?e.value():e,S=O?t.value():t;return p||(p=new r),m(M,S,n,h,p)}}return!!x&&(p||(p=new r),i(e,t,n,h,m,p))}},"./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return o(e)&&"[object Map]"==r(e)}},"./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Stack */"./node_modules/lodash/_Stack.js"),o=n(/*! ./_baseIsEqual */"./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,n,u){var i=n.length,s=i,a=!u;if(null==e)return!s;for(e=Object(e);i--;){var c=n[i];if(a&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++i<s;){var d=(c=n[i])[0],l=e[d],f=c[1];if(a&&c[2]){if(void 0===l&&!(d in e))return!1}else{var h=new r;if(u)var m=u(l,f,d,e,t,h);if(!(void 0===m?o(f,l,3,u,h):m))return!1}}return!0}},"./node_modules/lodash/_baseIsNaN.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsNaN.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return e!=e}},"./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isFunction */"./node_modules/lodash/isFunction.js"),o=n(/*! ./_isMasked */"./node_modules/lodash/_isMasked.js"),u=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),i=n(/*! ./_toSource */"./node_modules/lodash/_toSource.js"),s=/^\[object .+?Constructor\]$/,a=Function.prototype,c=Object.prototype,d=a.toString,l=c.hasOwnProperty,f=RegExp("^"+d.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!u(e)||o(e))&&(r(e)?f:s).test(i(e))}},"./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return o(e)&&"[object Set]"==r(e)}},"./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./isLength */"./node_modules/lodash/isLength.js"),u=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js"),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return u(e)&&o(e.length)&&!!i[r(e)]}},"./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseMatches */"./node_modules/lodash/_baseMatches.js"),o=n(/*! ./_baseMatchesProperty */"./node_modules/lodash/_baseMatchesProperty.js"),u=n(/*! ./identity */"./node_modules/lodash/identity.js"),i=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),s=n(/*! ./property */"./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?u:"object"==typeof e?i(e)?o(e[0],e[1]):r(e):s(e)}},"./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_isPrototype */"./node_modules/lodash/_isPrototype.js"),o=n(/*! ./_nativeKeys */"./node_modules/lodash/_nativeKeys.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))u.call(e,n)&&"constructor"!=n&&t.push(n);return t}},"./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),o=n(/*! ./_isPrototype */"./node_modules/lodash/_isPrototype.js"),u=n(/*! ./_nativeKeysIn */"./node_modules/lodash/_nativeKeysIn.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return u(e);var t=o(e),n=[];for(var s in e)("constructor"!=s||!t&&i.call(e,s))&&n.push(s);return n}},"./node_modules/lodash/_baseLt.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_baseLt.js ***!
  \****************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return e<t}},"./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseEach */"./node_modules/lodash/_baseEach.js"),o=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var n=-1,u=o(e)?Array(e.length):[];return r(e,(function(e,r,o){u[++n]=t(e,r,o)})),u}},"./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsMatch */"./node_modules/lodash/_baseIsMatch.js"),o=n(/*! ./_getMatchData */"./node_modules/lodash/_getMatchData.js"),u=n(/*! ./_matchesStrictComparable */"./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?u(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsEqual */"./node_modules/lodash/_baseIsEqual.js"),o=n(/*! ./get */"./node_modules/lodash/get.js"),u=n(/*! ./hasIn */"./node_modules/lodash/hasIn.js"),i=n(/*! ./_isKey */"./node_modules/lodash/_isKey.js"),s=n(/*! ./_isStrictComparable */"./node_modules/lodash/_isStrictComparable.js"),a=n(/*! ./_matchesStrictComparable */"./node_modules/lodash/_matchesStrictComparable.js"),c=n(/*! ./_toKey */"./node_modules/lodash/_toKey.js");e.exports=function(e,t){return i(e)&&s(t)?a(c(e),t):function(n){var i=o(n,e);return void 0===i&&i===t?u(n,e):r(t,i,3)}}},"./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Stack */"./node_modules/lodash/_Stack.js"),o=n(/*! ./_assignMergeValue */"./node_modules/lodash/_assignMergeValue.js"),u=n(/*! ./_baseFor */"./node_modules/lodash/_baseFor.js"),i=n(/*! ./_baseMergeDeep */"./node_modules/lodash/_baseMergeDeep.js"),s=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),a=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js"),c=n(/*! ./_safeGet */"./node_modules/lodash/_safeGet.js");e.exports=function e(t,n,d,l,f){t!==n&&u(n,(function(u,a){if(f||(f=new r),s(u))i(t,n,a,d,e,l,f);else{var h=l?l(c(t,a),u,a+"",t,n,f):void 0;void 0===h&&(h=u),o(t,a,h)}}),a)}},"./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assignMergeValue */"./node_modules/lodash/_assignMergeValue.js"),o=n(/*! ./_cloneBuffer */"./node_modules/lodash/_cloneBuffer.js"),u=n(/*! ./_cloneTypedArray */"./node_modules/lodash/_cloneTypedArray.js"),i=n(/*! ./_copyArray */"./node_modules/lodash/_copyArray.js"),s=n(/*! ./_initCloneObject */"./node_modules/lodash/_initCloneObject.js"),a=n(/*! ./isArguments */"./node_modules/lodash/isArguments.js"),c=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),d=n(/*! ./isArrayLikeObject */"./node_modules/lodash/isArrayLikeObject.js"),l=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),f=n(/*! ./isFunction */"./node_modules/lodash/isFunction.js"),h=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),m=n(/*! ./isPlainObject */"./node_modules/lodash/isPlainObject.js"),p=n(/*! ./isTypedArray */"./node_modules/lodash/isTypedArray.js"),_=n(/*! ./_safeGet */"./node_modules/lodash/_safeGet.js"),g=n(/*! ./toPlainObject */"./node_modules/lodash/toPlainObject.js");e.exports=function(e,t,n,v,j,b,y){var x=_(e,n),w=_(t,n),O=y.get(w);if(O)r(e,n,O);else{var M=b?b(x,w,n+"",e,t,y):void 0,S=void 0===M;if(S){var E=c(w),k=!E&&l(w),C=!E&&!k&&p(w);M=w,E||k||C?c(x)?M=x:d(x)?M=i(x):k?(S=!1,M=o(w,!0)):C?(S=!1,M=u(w,!0)):M=[]:m(w)||a(w)?(M=x,a(x)?M=g(x):h(x)&&!f(x)||(M=s(w))):S=!1}S&&(y.set(w,M),j(M,w,v,b,y),y.delete(w)),r(e,n,M)}}},"./node_modules/lodash/_baseOrderBy.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseOrderBy.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayMap */"./node_modules/lodash/_arrayMap.js"),o=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),u=n(/*! ./_baseMap */"./node_modules/lodash/_baseMap.js"),i=n(/*! ./_baseSortBy */"./node_modules/lodash/_baseSortBy.js"),s=n(/*! ./_baseUnary */"./node_modules/lodash/_baseUnary.js"),a=n(/*! ./_compareMultiple */"./node_modules/lodash/_compareMultiple.js"),c=n(/*! ./identity */"./node_modules/lodash/identity.js");e.exports=function(e,t,n){var d=-1;t=r(t.length?t:[c],s(o));var l=u(e,(function(e,n,o){return{criteria:r(t,(function(t){return t(e)})),index:++d,value:e}}));return i(l,(function(e,t){return a(e,t,n)}))}},"./node_modules/lodash/_basePick.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_basePick.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_basePickBy */"./node_modules/lodash/_basePickBy.js"),o=n(/*! ./hasIn */"./node_modules/lodash/hasIn.js");e.exports=function(e,t){return r(e,t,(function(t,n){return o(e,n)}))}},"./node_modules/lodash/_basePickBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePickBy.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGet */"./node_modules/lodash/_baseGet.js"),o=n(/*! ./_baseSet */"./node_modules/lodash/_baseSet.js"),u=n(/*! ./_castPath */"./node_modules/lodash/_castPath.js");e.exports=function(e,t,n){for(var i=-1,s=t.length,a={};++i<s;){var c=t[i],d=r(e,c);n(d,c)&&o(a,u(c,e),d)}return a}},"./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGet */"./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return r(t,e)}}},"./node_modules/lodash/_baseRange.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseRange.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){var n=Math.ceil,r=Math.max;e.exports=function(e,t,o,u){for(var i=-1,s=r(n((t-e)/(o||1)),0),a=Array(s);s--;)a[u?s:++i]=e,e+=o;return a}},"./node_modules/lodash/_baseReduce.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseReduce.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n,r,o){return o(e,(function(e,o,u){n=r?(r=!1,e):t(n,e,o,u)})),n}},"./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./identity */"./node_modules/lodash/identity.js"),o=n(/*! ./_overRest */"./node_modules/lodash/_overRest.js"),u=n(/*! ./_setToString */"./node_modules/lodash/_setToString.js");e.exports=function(e,t){return u(o(e,t,r),e+"")}},"./node_modules/lodash/_baseSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseSet.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assignValue */"./node_modules/lodash/_assignValue.js"),o=n(/*! ./_castPath */"./node_modules/lodash/_castPath.js"),u=n(/*! ./_isIndex */"./node_modules/lodash/_isIndex.js"),i=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),s=n(/*! ./_toKey */"./node_modules/lodash/_toKey.js");e.exports=function(e,t,n,a){if(!i(e))return e;for(var c=-1,d=(t=o(t,e)).length,l=d-1,f=e;null!=f&&++c<d;){var h=s(t[c]),m=n;if(c!=l){var p=f[h];void 0===(m=a?a(p,h,f):void 0)&&(m=i(p)?p:u(t[c+1])?[]:{})}r(f,h,m),f=f[h]}return e}},"./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./constant */"./node_modules/lodash/constant.js"),o=n(/*! ./_defineProperty */"./node_modules/lodash/_defineProperty.js"),u=n(/*! ./identity */"./node_modules/lodash/identity.js"),i=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:u;e.exports=i},"./node_modules/lodash/_baseSortBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseSortBy.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}},"./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},"./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=n(/*! ./_arrayMap */"./node_modules/lodash/_arrayMap.js"),u=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),i=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js"),s=r?r.prototype:void 0,a=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(u(t))return o(t,e)+"";if(i(t))return a?a.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},"./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_baseUniq.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseUniq.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_SetCache */"./node_modules/lodash/_SetCache.js"),o=n(/*! ./_arrayIncludes */"./node_modules/lodash/_arrayIncludes.js"),u=n(/*! ./_arrayIncludesWith */"./node_modules/lodash/_arrayIncludesWith.js"),i=n(/*! ./_cacheHas */"./node_modules/lodash/_cacheHas.js"),s=n(/*! ./_createSet */"./node_modules/lodash/_createSet.js"),a=n(/*! ./_setToArray */"./node_modules/lodash/_setToArray.js");e.exports=function(e,t,n){var c=-1,d=o,l=e.length,f=!0,h=[],m=h;if(n)f=!1,d=u;else if(l>=200){var p=t?null:s(e);if(p)return a(p);f=!1,d=i,m=new r}else m=t?[]:h;e:for(;++c<l;){var _=e[c],g=t?t(_):_;if(_=n||0!==_?_:0,f&&g==g){for(var v=m.length;v--;)if(m[v]===g)continue e;t&&m.push(g),h.push(_)}else d(m,g,n)||(m!==h&&m.push(g),h.push(_))}return h}},"./node_modules/lodash/_baseValues.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseValues.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayMap */"./node_modules/lodash/_arrayMap.js");e.exports=function(e,t){return r(t,(function(t){return e[t]}))}},"./node_modules/lodash/_baseZipObject.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseZipObject.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n){for(var r=-1,o=e.length,u=t.length,i={};++r<o;){var s=r<u?t[r]:void 0;n(i,e[r],s)}return i}},"./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_castFunction.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./identity */"./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:r}},"./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),o=n(/*! ./_isKey */"./node_modules/lodash/_isKey.js"),u=n(/*! ./_stringToPath */"./node_modules/lodash/_stringToPath.js"),i=n(/*! ./toString */"./node_modules/lodash/toString.js");e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:u(i(e))}},"./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Uint8Array */"./node_modules/lodash/_Uint8Array.js");e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},"./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=n(/*! ./_root */"./node_modules/lodash/_root.js"),o=t&&!t.nodeType&&t,u=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=u&&u.exports===o?r.Buffer:void 0,s=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=s?s(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(/*! ./../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_cloneArrayBuffer */"./node_modules/lodash/_cloneArrayBuffer.js");e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},"./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},"./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=r?r.prototype:void 0,u=o?o.valueOf:void 0;e.exports=function(e){return u?Object(u.call(e)):{}}},"./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_cloneArrayBuffer */"./node_modules/lodash/_cloneArrayBuffer.js");e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},"./node_modules/lodash/_compareAscending.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_compareAscending.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js");e.exports=function(e,t){if(e!==t){var n=void 0!==e,o=null===e,u=e==e,i=r(e),s=void 0!==t,a=null===t,c=t==t,d=r(t);if(!a&&!d&&!i&&e>t||i&&s&&c&&!a&&!d||o&&s&&c||!n&&c||!u)return 1;if(!o&&!i&&!d&&e<t||d&&n&&u&&!o&&!i||a&&n&&u||!s&&u||!c)return-1}return 0}},"./node_modules/lodash/_compareMultiple.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_compareMultiple.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_compareAscending */"./node_modules/lodash/_compareAscending.js");e.exports=function(e,t,n){for(var o=-1,u=e.criteria,i=t.criteria,s=u.length,a=n.length;++o<s;){var c=r(u[o],i[o]);if(c)return o>=a?c:c*("desc"==n[o]?-1:1)}return e.index-t.index}},"./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},"./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assignValue */"./node_modules/lodash/_assignValue.js"),o=n(/*! ./_baseAssignValue */"./node_modules/lodash/_baseAssignValue.js");e.exports=function(e,t,n,u){var i=!n;n||(n={});for(var s=-1,a=t.length;++s<a;){var c=t[s],d=u?u(n[c],e[c],c,n,e):void 0;void 0===d&&(d=e[c]),i?o(n,c,d):r(n,c,d)}return n}},"./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_copyObject */"./node_modules/lodash/_copyObject.js"),o=n(/*! ./_getSymbols */"./node_modules/lodash/_getSymbols.js");e.exports=function(e,t){return r(e,o(e),t)}},"./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_copyObject */"./node_modules/lodash/_copyObject.js"),o=n(/*! ./_getSymbolsIn */"./node_modules/lodash/_getSymbolsIn.js");e.exports=function(e,t){return r(e,o(e),t)}},"./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_root */"./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=r},"./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseRest */"./node_modules/lodash/_baseRest.js"),o=n(/*! ./_isIterateeCall */"./node_modules/lodash/_isIterateeCall.js");e.exports=function(e){return r((function(t,n){var r=-1,u=n.length,i=u>1?n[u-1]:void 0,s=u>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(u--,i):void 0,s&&o(n[0],n[1],s)&&(i=u<3?void 0:i,u=1),t=Object(t);++r<u;){var a=n[r];a&&e(t,a,r,i)}return t}))}},"./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(n,o){if(null==n)return n;if(!r(n))return e(n,o);for(var u=n.length,i=t?u:-1,s=Object(n);(t?i--:++i<u)&&!1!==o(s[i],i,s););return n}}},"./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,u=Object(t),i=r(t),s=i.length;s--;){var a=i[e?s:++o];if(!1===n(u[a],a,u))break}return t}}},"./node_modules/lodash/_createFind.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_createFind.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),o=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js"),u=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e){return function(t,n,i){var s=Object(t);if(!o(t)){var a=r(n,3);t=u(t),n=function(e){return a(s[e],e,s)}}var c=e(t,n,i);return c>-1?s[a?t[c]:c]:void 0}}},"./node_modules/lodash/_createRange.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_createRange.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseRange */"./node_modules/lodash/_baseRange.js"),o=n(/*! ./_isIterateeCall */"./node_modules/lodash/_isIterateeCall.js"),u=n(/*! ./toFinite */"./node_modules/lodash/toFinite.js");e.exports=function(e){return function(t,n,i){return i&&"number"!=typeof i&&o(t,n,i)&&(n=i=void 0),t=u(t),void 0===n?(n=t,t=0):n=u(n),i=void 0===i?t<n?1:-1:u(i),r(t,n,i,e)}}},"./node_modules/lodash/_createSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_createSet.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Set */"./node_modules/lodash/_Set.js"),o=n(/*! ./noop */"./node_modules/lodash/noop.js"),u=n(/*! ./_setToArray */"./node_modules/lodash/_setToArray.js"),i=r&&1/u(new r([,-0]))[1]==1/0?function(e){return new r(e)}:o;e.exports=i},"./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js"),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},"./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_SetCache */"./node_modules/lodash/_SetCache.js"),o=n(/*! ./_arraySome */"./node_modules/lodash/_arraySome.js"),u=n(/*! ./_cacheHas */"./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,n,i,s,a){var c=1&n,d=e.length,l=t.length;if(d!=l&&!(c&&l>d))return!1;var f=a.get(e);if(f&&a.get(t))return f==t;var h=-1,m=!0,p=2&n?new r:void 0;for(a.set(e,t),a.set(t,e);++h<d;){var _=e[h],g=t[h];if(i)var v=c?i(g,_,h,t,e,a):i(_,g,h,e,t,a);if(void 0!==v){if(v)continue;m=!1;break}if(p){if(!o(t,(function(e,t){if(!u(p,t)&&(_===e||s(_,e,n,i,a)))return p.push(t)}))){m=!1;break}}else if(_!==g&&!s(_,g,n,i,a)){m=!1;break}}return a.delete(e),a.delete(t),m}},"./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=n(/*! ./_Uint8Array */"./node_modules/lodash/_Uint8Array.js"),u=n(/*! ./eq */"./node_modules/lodash/eq.js"),i=n(/*! ./_equalArrays */"./node_modules/lodash/_equalArrays.js"),s=n(/*! ./_mapToArray */"./node_modules/lodash/_mapToArray.js"),a=n(/*! ./_setToArray */"./node_modules/lodash/_setToArray.js"),c=r?r.prototype:void 0,d=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,l,f){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!l(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return u(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var h=s;case"[object Set]":var m=1&r;if(h||(h=a),e.size!=t.size&&!m)return!1;var p=f.get(e);if(p)return p==t;r|=2,f.set(e,t);var _=i(h(e),h(t),r,c,l,f);return f.delete(e),_;case"[object Symbol]":if(d)return d.call(e)==d.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getAllKeys */"./node_modules/lodash/_getAllKeys.js"),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,u,i,s){var a=1&n,c=r(e),d=c.length;if(d!=r(t).length&&!a)return!1;for(var l=d;l--;){var f=c[l];if(!(a?f in t:o.call(t,f)))return!1}var h=s.get(e);if(h&&s.get(t))return h==t;var m=!0;s.set(e,t),s.set(t,e);for(var p=a;++l<d;){var _=e[f=c[l]],g=t[f];if(u)var v=a?u(g,_,f,t,e,s):u(_,g,f,e,t,s);if(!(void 0===v?_===g||i(_,g,n,u,s):v)){m=!1;break}p||(p="constructor"==f)}if(m&&!p){var j=e.constructor,b=t.constructor;j==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof j&&j instanceof j&&"function"==typeof b&&b instanceof b||(m=!1)}return s.delete(e),s.delete(t),m}},"./node_modules/lodash/_flatRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_flatRest.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./flatten */"./node_modules/lodash/flatten.js"),o=n(/*! ./_overRest */"./node_modules/lodash/_overRest.js"),u=n(/*! ./_setToString */"./node_modules/lodash/_setToString.js");e.exports=function(e){return u(o(e,void 0,r),e+"")}},"./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetAllKeys */"./node_modules/lodash/_baseGetAllKeys.js"),o=n(/*! ./_getSymbols */"./node_modules/lodash/_getSymbols.js"),u=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e){return r(e,u,o)}},"./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetAllKeys */"./node_modules/lodash/_baseGetAllKeys.js"),o=n(/*! ./_getSymbolsIn */"./node_modules/lodash/_getSymbolsIn.js"),u=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js");e.exports=function(e){return r(e,u,o)}},"./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_isKeyable */"./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},"./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_isStrictComparable */"./node_modules/lodash/_isStrictComparable.js"),o=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e){for(var t=o(e),n=t.length;n--;){var u=t[n],i=e[u];t[n]=[u,i,r(i)]}return t}},"./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsNative */"./node_modules/lodash/_baseIsNative.js"),o=n(/*! ./_getValue */"./node_modules/lodash/_getValue.js");e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},"./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_overArg */"./node_modules/lodash/_overArg.js")(Object.getPrototypeOf,Object);e.exports=r},"./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=Object.prototype,u=o.hasOwnProperty,i=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=u.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[s]=n:delete e[s]),o}},"./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayFilter */"./node_modules/lodash/_arrayFilter.js"),o=n(/*! ./stubArray */"./node_modules/lodash/stubArray.js"),u=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return u.call(e,t)})))}:o;e.exports=s},"./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayPush */"./node_modules/lodash/_arrayPush.js"),o=n(/*! ./_getPrototype */"./node_modules/lodash/_getPrototype.js"),u=n(/*! ./_getSymbols */"./node_modules/lodash/_getSymbols.js"),i=n(/*! ./stubArray */"./node_modules/lodash/stubArray.js"),s=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,u(e)),e=o(e);return t}:i;e.exports=s},"./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_DataView */"./node_modules/lodash/_DataView.js"),o=n(/*! ./_Map */"./node_modules/lodash/_Map.js"),u=n(/*! ./_Promise */"./node_modules/lodash/_Promise.js"),i=n(/*! ./_Set */"./node_modules/lodash/_Set.js"),s=n(/*! ./_WeakMap */"./node_modules/lodash/_WeakMap.js"),a=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),c=n(/*! ./_toSource */"./node_modules/lodash/_toSource.js"),d=c(r),l=c(o),f=c(u),h=c(i),m=c(s),p=a;(r&&"[object DataView]"!=p(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=p(new o)||u&&"[object Promise]"!=p(u.resolve())||i&&"[object Set]"!=p(new i)||s&&"[object WeakMap]"!=p(new s))&&(p=function(e){var t=a(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case d:return"[object DataView]";case l:return"[object Map]";case f:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return t}),e.exports=p},"./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_castPath */"./node_modules/lodash/_castPath.js"),o=n(/*! ./isArguments */"./node_modules/lodash/isArguments.js"),u=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),i=n(/*! ./_isIndex */"./node_modules/lodash/_isIndex.js"),s=n(/*! ./isLength */"./node_modules/lodash/isLength.js"),a=n(/*! ./_toKey */"./node_modules/lodash/_toKey.js");e.exports=function(e,t,n){for(var c=-1,d=(t=r(t,e)).length,l=!1;++c<d;){var f=a(t[c]);if(!(l=null!=e&&n(e,f)))break;e=e[f]}return l||++c!=d?l:!!(d=null==e?0:e.length)&&s(d)&&i(f,d)&&(u(e)||o(e))}},"./node_modules/lodash/_hasUnicode.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hasUnicode.js ***!
  \********************************************/
/*! no static exports found */function(e,t){var n=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return n.test(e)}},"./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_nativeCreate */"./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=r?r(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_nativeCreate */"./node_modules/lodash/_nativeCreate.js"),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_nativeCreate */"./node_modules/lodash/_nativeCreate.js"),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},"./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_nativeCreate */"./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/*! no static exports found */function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},"./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_cloneArrayBuffer */"./node_modules/lodash/_cloneArrayBuffer.js"),o=n(/*! ./_cloneDataView */"./node_modules/lodash/_cloneDataView.js"),u=n(/*! ./_cloneRegExp */"./node_modules/lodash/_cloneRegExp.js"),i=n(/*! ./_cloneSymbol */"./node_modules/lodash/_cloneSymbol.js"),s=n(/*! ./_cloneTypedArray */"./node_modules/lodash/_cloneTypedArray.js");e.exports=function(e,t,n){var a=e.constructor;switch(t){case"[object ArrayBuffer]":return r(e);case"[object Boolean]":case"[object Date]":return new a(+e);case"[object DataView]":return o(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return s(e,n);case"[object Map]":return new a;case"[object Number]":case"[object String]":return new a(e);case"[object RegExp]":return u(e);case"[object Set]":return new a;case"[object Symbol]":return i(e)}}},"./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseCreate */"./node_modules/lodash/_baseCreate.js"),o=n(/*! ./_getPrototype */"./node_modules/lodash/_getPrototype.js"),u=n(/*! ./_isPrototype */"./node_modules/lodash/_isPrototype.js");e.exports=function(e){return"function"!=typeof e.constructor||u(e)?{}:r(o(e))}},"./node_modules/lodash/_isFlattenable.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_isFlattenable.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Symbol */"./node_modules/lodash/_Symbol.js"),o=n(/*! ./isArguments */"./node_modules/lodash/isArguments.js"),u=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),i=r?r.isConcatSpreadable:void 0;e.exports=function(e){return u(e)||o(e)||!!(i&&e&&e[i])}},"./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){var n=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&n.test(e))&&e>-1&&e%1==0&&e<t}},"./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./eq */"./node_modules/lodash/eq.js"),o=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js"),u=n(/*! ./_isIndex */"./node_modules/lodash/_isIndex.js"),i=n(/*! ./isObject */"./node_modules/lodash/isObject.js");e.exports=function(e,t,n){if(!i(n))return!1;var s=typeof t;return!!("number"==s?o(n)&&u(t,n.length):"string"==s&&t in n)&&r(n[t],e)}},"./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),o=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js"),u=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(i.test(e)||!u.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r,o=n(/*! ./_coreJsData */"./node_modules/lodash/_coreJsData.js"),u=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!u&&u in e}},"./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},"./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isObject */"./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!r(e)}},"./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/*! no static exports found */function(e,t){e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assocIndexOf */"./node_modules/lodash/_assocIndexOf.js"),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assocIndexOf */"./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},"./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assocIndexOf */"./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return r(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assocIndexOf */"./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_Hash */"./node_modules/lodash/_Hash.js"),o=n(/*! ./_ListCache */"./node_modules/lodash/_ListCache.js"),u=n(/*! ./_Map */"./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(u||o),string:new r}}},"./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getMapData */"./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getMapData */"./node_modules/lodash/_getMapData.js");e.exports=function(e){return r(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getMapData */"./node_modules/lodash/_getMapData.js");e.exports=function(e){return r(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getMapData */"./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},"./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},"./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}},"./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./memoize */"./node_modules/lodash/memoize.js");e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_getNative */"./node_modules/lodash/_getNative.js")(Object,"create");e.exports=r},"./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_overArg */"./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=r},"./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},"./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=n(/*! ./_freeGlobal */"./node_modules/lodash/_freeGlobal.js"),o=t&&!t.nodeType&&t,u=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=u&&u.exports===o&&r.process,s=function(){try{var e=u&&u.require&&u.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=s}).call(this,n(/*! ./../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},"./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},"./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_apply */"./node_modules/lodash/_apply.js"),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var u=arguments,i=-1,s=o(u.length-t,0),a=Array(s);++i<s;)a[i]=u[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=u[i];return c[t]=n(a),r(e,this,c)}}},"./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_freeGlobal */"./node_modules/lodash/_freeGlobal.js"),o="object"==typeof self&&self&&self.Object===Object&&self,u=r||o||Function("return this")();e.exports=u},"./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},"./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},"./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseSetToString */"./node_modules/lodash/_baseSetToString.js"),o=n(/*! ./_shortOut */"./node_modules/lodash/_shortOut.js")(r);e.exports=o},"./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/*! no static exports found */function(e,t){var n=Date.now;e.exports=function(e){var t=0,r=0;return function(){var o=n(),u=16-(o-r);if(r=o,u>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},"./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_ListCache */"./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new r,this.size=0}},"./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},"./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_ListCache */"./node_modules/lodash/_ListCache.js"),o=n(/*! ./_Map */"./node_modules/lodash/_Map.js"),u=n(/*! ./_MapCache */"./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!o||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new u(i)}return n.set(e,t),this.size=n.size,this}},"./node_modules/lodash/_strictIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_strictIndexOf.js ***!
  \***********************************************/
/*! no static exports found */function(e,t){e.exports=function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}},"./node_modules/lodash/_stringSize.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stringSize.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_asciiSize */"./node_modules/lodash/_asciiSize.js"),o=n(/*! ./_hasUnicode */"./node_modules/lodash/_hasUnicode.js"),u=n(/*! ./_unicodeSize */"./node_modules/lodash/_unicodeSize.js");e.exports=function(e){return o(e)?u(e):r(e)}},"./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_memoizeCapped */"./node_modules/lodash/_memoizeCapped.js"),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,u=/\\(\\)?/g,i=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(u,"$1"):n||e)})),t}));e.exports=i},"./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},"./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/*! no static exports found */function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/_unicodeSize.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_unicodeSize.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){var n="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",u="[^\\ud800-\\udfff]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",a="(?:"+r+"|"+o+")"+"?",c="[\\ufe0e\\ufe0f]?"+a+("(?:\\u200d(?:"+[u,i,s].join("|")+")[\\ufe0e\\ufe0f]?"+a+")*"),d="(?:"+[u+r+"?",r,i,s,n].join("|")+")",l=RegExp(o+"(?="+o+")|"+d+c,"g");e.exports=function(e){for(var t=l.lastIndex=0;l.test(e);)++t;return t}},"./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseClone */"./node_modules/lodash/_baseClone.js");e.exports=function(e){return r(e,4)}},"./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseClone */"./node_modules/lodash/_baseClone.js");e.exports=function(e){return r(e,5)}},"./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return function(){return e}}},"./node_modules/lodash/defaults.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/defaults.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseRest */"./node_modules/lodash/_baseRest.js"),o=n(/*! ./eq */"./node_modules/lodash/eq.js"),u=n(/*! ./_isIterateeCall */"./node_modules/lodash/_isIterateeCall.js"),i=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js"),s=Object.prototype,a=s.hasOwnProperty,c=r((function(e,t){e=Object(e);var n=-1,r=t.length,c=r>2?t[2]:void 0;for(c&&u(t[0],t[1],c)&&(r=1);++n<r;)for(var d=t[n],l=i(d),f=-1,h=l.length;++f<h;){var m=l[f],p=e[m];(void 0===p||o(p,s[m])&&!a.call(e,m))&&(e[m]=d[m])}return e}));e.exports=c},"./node_modules/lodash/each.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/each.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){e.exports=n(/*! ./forEach */"./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/*! no static exports found */function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/filter.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/filter.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayFilter */"./node_modules/lodash/_arrayFilter.js"),o=n(/*! ./_baseFilter */"./node_modules/lodash/_baseFilter.js"),u=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),i=n(/*! ./isArray */"./node_modules/lodash/isArray.js");e.exports=function(e,t){return(i(e)?r:o)(e,u(t,3))}},"./node_modules/lodash/find.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/find.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_createFind */"./node_modules/lodash/_createFind.js")(n(/*! ./findIndex */"./node_modules/lodash/findIndex.js"));e.exports=r},"./node_modules/lodash/findIndex.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/findIndex.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFindIndex */"./node_modules/lodash/_baseFindIndex.js"),o=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),u=n(/*! ./toInteger */"./node_modules/lodash/toInteger.js"),i=Math.max;e.exports=function(e,t,n){var s=null==e?0:e.length;if(!s)return-1;var a=null==n?0:u(n);return a<0&&(a=i(s+a,0)),r(e,o(t,3),a)}},"./node_modules/lodash/flatten.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/flatten.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFlatten */"./node_modules/lodash/_baseFlatten.js");e.exports=function(e){return(null==e?0:e.length)?r(e,1):[]}},"./node_modules/lodash/forEach.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/forEach.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayEach */"./node_modules/lodash/_arrayEach.js"),o=n(/*! ./_baseEach */"./node_modules/lodash/_baseEach.js"),u=n(/*! ./_castFunction */"./node_modules/lodash/_castFunction.js"),i=n(/*! ./isArray */"./node_modules/lodash/isArray.js");e.exports=function(e,t){return(i(e)?r:o)(e,u(t))}},"./node_modules/lodash/forIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/forIn.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFor */"./node_modules/lodash/_baseFor.js"),o=n(/*! ./_castFunction */"./node_modules/lodash/_castFunction.js"),u=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js");e.exports=function(e,t){return null==e?e:r(e,o(t),u)}},"./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGet */"./node_modules/lodash/_baseGet.js");e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},"./node_modules/lodash/has.js":
/*!************************************!*\
  !*** ./node_modules/lodash/has.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseHas */"./node_modules/lodash/_baseHas.js"),o=n(/*! ./_hasPath */"./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&o(e,t,r)}},"./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseHasIn */"./node_modules/lodash/_baseHasIn.js"),o=n(/*! ./_hasPath */"./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&o(e,t,r)}},"./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsArguments */"./node_modules/lodash/_baseIsArguments.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js"),u=Object.prototype,i=u.hasOwnProperty,s=u.propertyIsEnumerable,a=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!s.call(e,"callee")};e.exports=a},"./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/*! no static exports found */function(e,t){var n=Array.isArray;e.exports=n},"./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isFunction */"./node_modules/lodash/isFunction.js"),o=n(/*! ./isLength */"./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},"./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return o(e)&&r(e)}},"./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){(function(e){var r=n(/*! ./_root */"./node_modules/lodash/_root.js"),o=n(/*! ./stubFalse */"./node_modules/lodash/stubFalse.js"),u=t&&!t.nodeType&&t,i=u&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===u?r.Buffer:void 0,a=(s?s.isBuffer:void 0)||o;e.exports=a}).call(this,n(/*! ./../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/lodash/isEmpty.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEmpty.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseKeys */"./node_modules/lodash/_baseKeys.js"),o=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),u=n(/*! ./isArguments */"./node_modules/lodash/isArguments.js"),i=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),s=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js"),a=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),c=n(/*! ./_isPrototype */"./node_modules/lodash/_isPrototype.js"),d=n(/*! ./isTypedArray */"./node_modules/lodash/isTypedArray.js"),l=Object.prototype.hasOwnProperty;e.exports=function(e){if(null==e)return!0;if(s(e)&&(i(e)||"string"==typeof e||"function"==typeof e.splice||a(e)||d(e)||u(e)))return!e.length;var t=o(e);if("[object Map]"==t||"[object Set]"==t)return!e.size;if(c(e))return!r(e).length;for(var n in e)if(l.call(e,n))return!1;return!0}},"./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./isObject */"./node_modules/lodash/isObject.js");e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsMap */"./node_modules/lodash/_baseIsMap.js"),o=n(/*! ./_baseUnary */"./node_modules/lodash/_baseUnary.js"),u=n(/*! ./_nodeUtil */"./node_modules/lodash/_nodeUtil.js"),i=u&&u.isMap,s=i?o(i):r;e.exports=s},"./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./_getPrototype */"./node_modules/lodash/_getPrototype.js"),u=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js"),i=Function.prototype,s=Object.prototype,a=i.toString,c=s.hasOwnProperty,d=a.call(Object);e.exports=function(e){if(!u(e)||"[object Object]"!=r(e))return!1;var t=o(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&a.call(n)==d}},"./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsSet */"./node_modules/lodash/_baseIsSet.js"),o=n(/*! ./_baseUnary */"./node_modules/lodash/_baseUnary.js"),u=n(/*! ./_nodeUtil */"./node_modules/lodash/_nodeUtil.js"),i=u&&u.isSet,s=i?o(i):r;e.exports=s},"./node_modules/lodash/isString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isString.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),u=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"string"==typeof e||!o(e)&&u(e)&&"[object String]"==r(e)}},"./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseGetTag */"./node_modules/lodash/_baseGetTag.js"),o=n(/*! ./isObjectLike */"./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},"./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseIsTypedArray */"./node_modules/lodash/_baseIsTypedArray.js"),o=n(/*! ./_baseUnary */"./node_modules/lodash/_baseUnary.js"),u=n(/*! ./_nodeUtil */"./node_modules/lodash/_nodeUtil.js"),i=u&&u.isTypedArray,s=i?o(i):r;e.exports=s},"./node_modules/lodash/isUndefined.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isUndefined.js ***!
  \********************************************/
/*! no static exports found */function(e,t){e.exports=function(e){return void 0===e}},"./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayLikeKeys */"./node_modules/lodash/_arrayLikeKeys.js"),o=n(/*! ./_baseKeys */"./node_modules/lodash/_baseKeys.js"),u=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js");e.exports=function(e){return u(e)?r(e):o(e)}},"./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayLikeKeys */"./node_modules/lodash/_arrayLikeKeys.js"),o=n(/*! ./_baseKeysIn */"./node_modules/lodash/_baseKeysIn.js"),u=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js");e.exports=function(e){return u(e)?r(e,!0):o(e)}},"./node_modules/lodash/last.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/last.js ***!
  \*************************************/
/*! no static exports found */function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},"./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){(function(e,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var u="Expected a function",i="__lodash_placeholder__",s=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],a="[object Arguments]",c="[object Array]",d="[object Boolean]",l="[object Date]",f="[object Error]",h="[object Function]",m="[object GeneratorFunction]",p="[object Map]",_="[object Number]",g="[object Object]",v="[object RegExp]",j="[object Set]",b="[object String]",y="[object Symbol]",x="[object WeakMap]",w="[object ArrayBuffer]",O="[object DataView]",M="[object Float32Array]",S="[object Float64Array]",E="[object Int8Array]",k="[object Int16Array]",C="[object Int32Array]",A="[object Uint8Array]",T="[object Uint16Array]",R="[object Uint32Array]",N=/\b__p \+= '';/g,P=/\b(__p \+=) '' \+/g,I=/(__e\(.*?\)|\b__t\)) \+\n'';/g,q=/&(?:amp|lt|gt|quot|#39);/g,B=/[&<>"']/g,F=RegExp(q.source),L=RegExp(B.source),z=/<%-([\s\S]+?)%>/g,D=/<%([\s\S]+?)%>/g,G=/<%=([\s\S]+?)%>/g,U=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Y=/^\w*$/,H=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,W=/[\\^$.*+?()[\]{}|]/g,V=RegExp(W.source),$=/^\s+|\s+$/g,X=/^\s+/,K=/\s+$/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Q=/\{\n\/\* \[wrapped with (.+)\] \*/,J=/,? & /,ee=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,te=/\\(\\)?/g,ne=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,re=/\w*$/,oe=/^[-+]0x[0-9a-f]+$/i,ue=/^0b[01]+$/i,ie=/^\[object .+?Constructor\]$/,se=/^0o[0-7]+$/i,ae=/^(?:0|[1-9]\d*)$/,ce=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,de=/($^)/,le=/['\n\r\u2028\u2029\\]/g,fe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",he="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",me="[\\ud800-\\udfff]",pe="["+he+"]",_e="["+fe+"]",ge="\\d+",ve="[\\u2700-\\u27bf]",je="[a-z\\xdf-\\xf6\\xf8-\\xff]",be="[^\\ud800-\\udfff"+he+ge+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ye="\\ud83c[\\udffb-\\udfff]",xe="[^\\ud800-\\udfff]",we="(?:\\ud83c[\\udde6-\\uddff]){2}",Oe="[\\ud800-\\udbff][\\udc00-\\udfff]",Me="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Se="(?:"+je+"|"+be+")",Ee="(?:"+Me+"|"+be+")",ke="(?:"+_e+"|"+ye+")"+"?",Ce="[\\ufe0e\\ufe0f]?"+ke+("(?:\\u200d(?:"+[xe,we,Oe].join("|")+")[\\ufe0e\\ufe0f]?"+ke+")*"),Ae="(?:"+[ve,we,Oe].join("|")+")"+Ce,Te="(?:"+[xe+_e+"?",_e,we,Oe,me].join("|")+")",Re=RegExp("['’]","g"),Ne=RegExp(_e,"g"),Pe=RegExp(ye+"(?="+ye+")|"+Te+Ce,"g"),Ie=RegExp([Me+"?"+je+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[pe,Me,"$"].join("|")+")",Ee+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[pe,Me+Se,"$"].join("|")+")",Me+"?"+Se+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Me+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ge,Ae].join("|"),"g"),qe=RegExp("[\\u200d\\ud800-\\udfff"+fe+"\\ufe0e\\ufe0f]"),Be=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Fe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Le=-1,ze={};ze[M]=ze[S]=ze[E]=ze[k]=ze[C]=ze[A]=ze["[object Uint8ClampedArray]"]=ze[T]=ze[R]=!0,ze[a]=ze[c]=ze[w]=ze[d]=ze[O]=ze[l]=ze[f]=ze[h]=ze[p]=ze[_]=ze[g]=ze[v]=ze[j]=ze[b]=ze[x]=!1;var De={};De[a]=De[c]=De[w]=De[O]=De[d]=De[l]=De[M]=De[S]=De[E]=De[k]=De[C]=De[p]=De[_]=De[g]=De[v]=De[j]=De[b]=De[y]=De[A]=De["[object Uint8ClampedArray]"]=De[T]=De[R]=!0,De[f]=De[h]=De[x]=!1;var Ge={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ue=parseFloat,Ye=parseInt,He="object"==typeof e&&e&&e.Object===Object&&e,We="object"==typeof self&&self&&self.Object===Object&&self,Ve=He||We||Function("return this")(),$e=t&&!t.nodeType&&t,Xe=$e&&"object"==typeof r&&r&&!r.nodeType&&r,Ke=Xe&&Xe.exports===$e,Ze=Ke&&He.process,Qe=function(){try{var e=Xe&&Xe.require&&Xe.require("util").types;return e||Ze&&Ze.binding&&Ze.binding("util")}catch(e){}}(),Je=Qe&&Qe.isArrayBuffer,et=Qe&&Qe.isDate,tt=Qe&&Qe.isMap,nt=Qe&&Qe.isRegExp,rt=Qe&&Qe.isSet,ot=Qe&&Qe.isTypedArray;function ut(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function it(e,t,n,r){for(var o=-1,u=null==e?0:e.length;++o<u;){var i=e[o];t(r,i,n(i),e)}return r}function st(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function at(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function ct(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function dt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,u=[];++n<r;){var i=e[n];t(i,n,e)&&(u[o++]=i)}return u}function lt(e,t){return!!(null==e?0:e.length)&&yt(e,t,0)>-1}function ft(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function ht(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function mt(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function pt(e,t,n,r){var o=-1,u=null==e?0:e.length;for(r&&u&&(n=e[++o]);++o<u;)n=t(n,e[o],o,e);return n}function _t(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var vt=Mt("length");function jt(e,t,n){var r;return n(e,(function(e,n,o){if(t(e,n,o))return r=n,!1})),r}function bt(e,t,n,r){for(var o=e.length,u=n+(r?1:-1);r?u--:++u<o;)if(t(e[u],u,e))return u;return-1}function yt(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):bt(e,wt,n)}function xt(e,t,n,r){for(var o=n-1,u=e.length;++o<u;)if(r(e[o],t))return o;return-1}function wt(e){return e!=e}function Ot(e,t){var n=null==e?0:e.length;return n?kt(e,t)/n:NaN}function Mt(e){return function(t){return null==t?void 0:t[e]}}function St(e){return function(t){return null==e?void 0:e[t]}}function Et(e,t,n,r,o){return o(e,(function(e,o,u){n=r?(r=!1,e):t(n,e,o,u)})),n}function kt(e,t){for(var n,r=-1,o=e.length;++r<o;){var u=t(e[r]);void 0!==u&&(n=void 0===n?u:n+u)}return n}function Ct(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function At(e){return function(t){return e(t)}}function Tt(e,t){return ht(t,(function(t){return e[t]}))}function Rt(e,t){return e.has(t)}function Nt(e,t){for(var n=-1,r=e.length;++n<r&&yt(t,e[n],0)>-1;);return n}function Pt(e,t){for(var n=e.length;n--&&yt(t,e[n],0)>-1;);return n}function It(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var qt=St({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Bt=St({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ft(e){return"\\"+Ge[e]}function Lt(e){return qe.test(e)}function zt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Dt(e,t){return function(n){return e(t(n))}}function Gt(e,t){for(var n=-1,r=e.length,o=0,u=[];++n<r;){var s=e[n];s!==t&&s!==i||(e[n]=i,u[o++]=n)}return u}function Ut(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Yt(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function Ht(e){return Lt(e)?function(e){var t=Pe.lastIndex=0;for(;Pe.test(e);)++t;return t}(e):vt(e)}function Wt(e){return Lt(e)?function(e){return e.match(Pe)||[]}(e):function(e){return e.split("")}(e)}var Vt=St({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $t=function e(t){var n,r=(t=null==t?Ve:$t.defaults(Ve.Object(),t,$t.pick(Ve,Fe))).Array,o=t.Date,fe=t.Error,he=t.Function,me=t.Math,pe=t.Object,_e=t.RegExp,ge=t.String,ve=t.TypeError,je=r.prototype,be=he.prototype,ye=pe.prototype,xe=t["__core-js_shared__"],we=be.toString,Oe=ye.hasOwnProperty,Me=0,Se=(n=/[^.]+$/.exec(xe&&xe.keys&&xe.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ee=ye.toString,ke=we.call(pe),Ce=Ve._,Ae=_e("^"+we.call(Oe).replace(W,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Te=Ke?t.Buffer:void 0,Pe=t.Symbol,qe=t.Uint8Array,Ge=Te?Te.allocUnsafe:void 0,He=Dt(pe.getPrototypeOf,pe),We=pe.create,$e=ye.propertyIsEnumerable,Xe=je.splice,Ze=Pe?Pe.isConcatSpreadable:void 0,Qe=Pe?Pe.iterator:void 0,vt=Pe?Pe.toStringTag:void 0,St=function(){try{var e=eu(pe,"defineProperty");return e({},"",{}),e}catch(e){}}(),Xt=t.clearTimeout!==Ve.clearTimeout&&t.clearTimeout,Kt=o&&o.now!==Ve.Date.now&&o.now,Zt=t.setTimeout!==Ve.setTimeout&&t.setTimeout,Qt=me.ceil,Jt=me.floor,en=pe.getOwnPropertySymbols,tn=Te?Te.isBuffer:void 0,nn=t.isFinite,rn=je.join,on=Dt(pe.keys,pe),un=me.max,sn=me.min,an=o.now,cn=t.parseInt,dn=me.random,ln=je.reverse,fn=eu(t,"DataView"),hn=eu(t,"Map"),mn=eu(t,"Promise"),pn=eu(t,"Set"),_n=eu(t,"WeakMap"),gn=eu(pe,"create"),vn=_n&&new _n,jn={},bn=Eu(fn),yn=Eu(hn),xn=Eu(mn),wn=Eu(pn),On=Eu(_n),Mn=Pe?Pe.prototype:void 0,Sn=Mn?Mn.valueOf:void 0,En=Mn?Mn.toString:void 0;function kn(e){if(Yi(e)&&!Ni(e)&&!(e instanceof Rn)){if(e instanceof Tn)return e;if(Oe.call(e,"__wrapped__"))return ku(e)}return new Tn(e)}var Cn=function(){function e(){}return function(t){if(!Ui(t))return{};if(We)return We(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function An(){}function Tn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=void 0}function Rn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Nn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function In(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function qn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new In;++t<n;)this.add(e[t])}function Bn(e){var t=this.__data__=new Pn(e);this.size=t.size}function Fn(e,t){var n=Ni(e),r=!n&&Ri(e),o=!n&&!r&&Bi(e),u=!n&&!r&&!o&&Qi(e),i=n||r||o||u,s=i?Ct(e.length,ge):[],a=s.length;for(var c in e)!t&&!Oe.call(e,c)||i&&("length"==c||o&&("offset"==c||"parent"==c)||u&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||su(c,a))||s.push(c);return s}function Ln(e){var t=e.length;return t?e[qr(0,t-1)]:void 0}function zn(e,t){return Ou(vo(e),Xn(t,0,e.length))}function Dn(e){return Ou(vo(e))}function Gn(e,t,n){(void 0!==n&&!Ci(e[t],n)||void 0===n&&!(t in e))&&Vn(e,t,n)}function Un(e,t,n){var r=e[t];Oe.call(e,t)&&Ci(r,n)&&(void 0!==n||t in e)||Vn(e,t,n)}function Yn(e,t){for(var n=e.length;n--;)if(Ci(e[n][0],t))return n;return-1}function Hn(e,t,n,r){return er(e,(function(e,o,u){t(r,e,n(e),u)})),r}function Wn(e,t){return e&&jo(t,bs(t),e)}function Vn(e,t,n){"__proto__"==t&&St?St(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function $n(e,t){for(var n=-1,o=t.length,u=r(o),i=null==e;++n<o;)u[n]=i?void 0:ps(e,t[n]);return u}function Xn(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}function Kn(e,t,n,r,o,u){var i,s=1&t,c=2&t,f=4&t;if(n&&(i=o?n(e,r,o,u):n(e)),void 0!==i)return i;if(!Ui(e))return e;var x=Ni(e);if(x){if(i=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&Oe.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!s)return vo(e,i)}else{var N=ru(e),P=N==h||N==m;if(Bi(e))return fo(e,s);if(N==g||N==a||P&&!o){if(i=c||P?{}:uu(e),!s)return c?function(e,t){return jo(e,nu(e),t)}(e,function(e,t){return e&&jo(t,ys(t),e)}(i,e)):function(e,t){return jo(e,tu(e),t)}(e,Wn(i,e))}else{if(!De[N])return o?e:{};i=function(e,t,n){var r=e.constructor;switch(t){case w:return ho(e);case d:case l:return new r(+e);case O:return function(e,t){var n=t?ho(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case M:case S:case E:case k:case C:case A:case"[object Uint8ClampedArray]":case T:case R:return mo(e,n);case p:return new r;case _:case b:return new r(e);case v:return function(e){var t=new e.constructor(e.source,re.exec(e));return t.lastIndex=e.lastIndex,t}(e);case j:return new r;case y:return o=e,Sn?pe(Sn.call(o)):{}}var o}(e,N,s)}}u||(u=new Bn);var I=u.get(e);if(I)return I;u.set(e,i),Xi(e)?e.forEach((function(r){i.add(Kn(r,t,n,r,e,u))})):Hi(e)&&e.forEach((function(r,o){i.set(o,Kn(r,t,n,o,e,u))}));var q=x?void 0:(f?c?Vo:Wo:c?ys:bs)(e);return st(q||e,(function(r,o){q&&(r=e[o=r]),Un(i,o,Kn(r,t,n,o,e,u))})),i}function Zn(e,t,n){var r=n.length;if(null==e)return!r;for(e=pe(e);r--;){var o=n[r],u=t[o],i=e[o];if(void 0===i&&!(o in e)||!u(i))return!1}return!0}function Qn(e,t,n){if("function"!=typeof e)throw new ve(u);return bu((function(){e.apply(void 0,n)}),t)}function Jn(e,t,n,r){var o=-1,u=lt,i=!0,s=e.length,a=[],c=t.length;if(!s)return a;n&&(t=ht(t,At(n))),r?(u=ft,i=!1):t.length>=200&&(u=Rt,i=!1,t=new qn(t));e:for(;++o<s;){var d=e[o],l=null==n?d:n(d);if(d=r||0!==d?d:0,i&&l==l){for(var f=c;f--;)if(t[f]===l)continue e;a.push(d)}else u(t,l,r)||a.push(d)}return a}kn.templateSettings={escape:z,evaluate:D,interpolate:G,variable:"",imports:{_:kn}},kn.prototype=An.prototype,kn.prototype.constructor=kn,Tn.prototype=Cn(An.prototype),Tn.prototype.constructor=Tn,Rn.prototype=Cn(An.prototype),Rn.prototype.constructor=Rn,Nn.prototype.clear=function(){this.__data__=gn?gn(null):{},this.size=0},Nn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Nn.prototype.get=function(e){var t=this.__data__;if(gn){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return Oe.call(t,e)?t[e]:void 0},Nn.prototype.has=function(e){var t=this.__data__;return gn?void 0!==t[e]:Oe.call(t,e)},Nn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=gn&&void 0===t?"__lodash_hash_undefined__":t,this},Pn.prototype.clear=function(){this.__data__=[],this.size=0},Pn.prototype.delete=function(e){var t=this.__data__,n=Yn(t,e);return!(n<0)&&(n==t.length-1?t.pop():Xe.call(t,n,1),--this.size,!0)},Pn.prototype.get=function(e){var t=this.__data__,n=Yn(t,e);return n<0?void 0:t[n][1]},Pn.prototype.has=function(e){return Yn(this.__data__,e)>-1},Pn.prototype.set=function(e,t){var n=this.__data__,r=Yn(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},In.prototype.clear=function(){this.size=0,this.__data__={hash:new Nn,map:new(hn||Pn),string:new Nn}},In.prototype.delete=function(e){var t=Qo(this,e).delete(e);return this.size-=t?1:0,t},In.prototype.get=function(e){return Qo(this,e).get(e)},In.prototype.has=function(e){return Qo(this,e).has(e)},In.prototype.set=function(e,t){var n=Qo(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},qn.prototype.add=qn.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},qn.prototype.has=function(e){return this.__data__.has(e)},Bn.prototype.clear=function(){this.__data__=new Pn,this.size=0},Bn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Bn.prototype.get=function(e){return this.__data__.get(e)},Bn.prototype.has=function(e){return this.__data__.has(e)},Bn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Pn){var r=n.__data__;if(!hn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new In(r)}return n.set(e,t),this.size=n.size,this};var er=xo(ar),tr=xo(cr,!0);function nr(e,t){var n=!0;return er(e,(function(e,r,o){return n=!!t(e,r,o)})),n}function rr(e,t,n){for(var r=-1,o=e.length;++r<o;){var u=e[r],i=t(u);if(null!=i&&(void 0===s?i==i&&!Zi(i):n(i,s)))var s=i,a=u}return a}function or(e,t){var n=[];return er(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}function ur(e,t,n,r,o){var u=-1,i=e.length;for(n||(n=iu),o||(o=[]);++u<i;){var s=e[u];t>0&&n(s)?t>1?ur(s,t-1,n,r,o):mt(o,s):r||(o[o.length]=s)}return o}var ir=wo(),sr=wo(!0);function ar(e,t){return e&&ir(e,t,bs)}function cr(e,t){return e&&sr(e,t,bs)}function dr(e,t){return dt(t,(function(t){return zi(e[t])}))}function lr(e,t){for(var n=0,r=(t=so(t,e)).length;null!=e&&n<r;)e=e[Su(t[n++])];return n&&n==r?e:void 0}function fr(e,t,n){var r=t(e);return Ni(e)?r:mt(r,n(e))}function hr(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":vt&&vt in pe(e)?function(e){var t=Oe.call(e,vt),n=e[vt];try{e[vt]=void 0;var r=!0}catch(e){}var o=Ee.call(e);r&&(t?e[vt]=n:delete e[vt]);return o}(e):function(e){return Ee.call(e)}(e)}function mr(e,t){return e>t}function pr(e,t){return null!=e&&Oe.call(e,t)}function _r(e,t){return null!=e&&t in pe(e)}function gr(e,t,n){for(var o=n?ft:lt,u=e[0].length,i=e.length,s=i,a=r(i),c=1/0,d=[];s--;){var l=e[s];s&&t&&(l=ht(l,At(t))),c=sn(l.length,c),a[s]=!n&&(t||u>=120&&l.length>=120)?new qn(s&&l):void 0}l=e[0];var f=-1,h=a[0];e:for(;++f<u&&d.length<c;){var m=l[f],p=t?t(m):m;if(m=n||0!==m?m:0,!(h?Rt(h,p):o(d,p,n))){for(s=i;--s;){var _=a[s];if(!(_?Rt(_,p):o(e[s],p,n)))continue e}h&&h.push(p),d.push(m)}}return d}function vr(e,t,n){var r=null==(e=_u(e,t=so(t,e)))?e:e[Su(Lu(t))];return null==r?void 0:ut(r,e,n)}function jr(e){return Yi(e)&&hr(e)==a}function br(e,t,n,r,o){return e===t||(null==e||null==t||!Yi(e)&&!Yi(t)?e!=e&&t!=t:function(e,t,n,r,o,u){var i=Ni(e),s=Ni(t),h=i?c:ru(e),m=s?c:ru(t),x=(h=h==a?g:h)==g,M=(m=m==a?g:m)==g,S=h==m;if(S&&Bi(e)){if(!Bi(t))return!1;i=!0,x=!1}if(S&&!x)return u||(u=new Bn),i||Qi(e)?Yo(e,t,n,r,o,u):function(e,t,n,r,o,u,i){switch(n){case O:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!u(new qe(e),new qe(t)));case d:case l:case _:return Ci(+e,+t);case f:return e.name==t.name&&e.message==t.message;case v:case b:return e==t+"";case p:var s=zt;case j:var a=1&r;if(s||(s=Ut),e.size!=t.size&&!a)return!1;var c=i.get(e);if(c)return c==t;r|=2,i.set(e,t);var h=Yo(s(e),s(t),r,o,u,i);return i.delete(e),h;case y:if(Sn)return Sn.call(e)==Sn.call(t)}return!1}(e,t,h,n,r,o,u);if(!(1&n)){var E=x&&Oe.call(e,"__wrapped__"),k=M&&Oe.call(t,"__wrapped__");if(E||k){var C=E?e.value():e,A=k?t.value():t;return u||(u=new Bn),o(C,A,n,r,u)}}if(!S)return!1;return u||(u=new Bn),function(e,t,n,r,o,u){var i=1&n,s=Wo(e),a=s.length,c=Wo(t).length;if(a!=c&&!i)return!1;var d=a;for(;d--;){var l=s[d];if(!(i?l in t:Oe.call(t,l)))return!1}var f=u.get(e),h=u.get(t);if(f&&h)return f==t&&h==e;var m=!0;u.set(e,t),u.set(t,e);var p=i;for(;++d<a;){l=s[d];var _=e[l],g=t[l];if(r)var v=i?r(g,_,l,t,e,u):r(_,g,l,e,t,u);if(!(void 0===v?_===g||o(_,g,n,r,u):v)){m=!1;break}p||(p="constructor"==l)}if(m&&!p){var j=e.constructor,b=t.constructor;j==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof j&&j instanceof j&&"function"==typeof b&&b instanceof b||(m=!1)}return u.delete(e),u.delete(t),m}(e,t,n,r,o,u)}(e,t,n,r,br,o))}function yr(e,t,n,r){var o=n.length,u=o,i=!r;if(null==e)return!u;for(e=pe(e);o--;){var s=n[o];if(i&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<u;){var a=(s=n[o])[0],c=e[a],d=s[1];if(i&&s[2]){if(void 0===c&&!(a in e))return!1}else{var l=new Bn;if(r)var f=r(c,d,a,e,t,l);if(!(void 0===f?br(d,c,3,r,l):f))return!1}}return!0}function xr(e){return!(!Ui(e)||(t=e,Se&&Se in t))&&(zi(e)?Ae:ie).test(Eu(e));var t}function wr(e){return"function"==typeof e?e:null==e?Ws:"object"==typeof e?Ni(e)?Cr(e[0],e[1]):kr(e):ta(e)}function Or(e){if(!fu(e))return on(e);var t=[];for(var n in pe(e))Oe.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Mr(e){if(!Ui(e))return function(e){var t=[];if(null!=e)for(var n in pe(e))t.push(n);return t}(e);var t=fu(e),n=[];for(var r in e)("constructor"!=r||!t&&Oe.call(e,r))&&n.push(r);return n}function Sr(e,t){return e<t}function Er(e,t){var n=-1,o=Ii(e)?r(e.length):[];return er(e,(function(e,r,u){o[++n]=t(e,r,u)})),o}function kr(e){var t=Jo(e);return 1==t.length&&t[0][2]?mu(t[0][0],t[0][1]):function(n){return n===e||yr(n,e,t)}}function Cr(e,t){return cu(e)&&hu(t)?mu(Su(e),t):function(n){var r=ps(n,e);return void 0===r&&r===t?_s(n,e):br(t,r,3)}}function Ar(e,t,n,r,o){e!==t&&ir(t,(function(u,i){if(o||(o=new Bn),Ui(u))!function(e,t,n,r,o,u,i){var s=vu(e,n),a=vu(t,n),c=i.get(a);if(c)return void Gn(e,n,c);var d=u?u(s,a,n+"",e,t,i):void 0,l=void 0===d;if(l){var f=Ni(a),h=!f&&Bi(a),m=!f&&!h&&Qi(a);d=a,f||h||m?Ni(s)?d=s:qi(s)?d=vo(s):h?(l=!1,d=fo(a,!0)):m?(l=!1,d=mo(a,!0)):d=[]:Vi(a)||Ri(a)?(d=s,Ri(s)?d=is(s):Ui(s)&&!zi(s)||(d=uu(a))):l=!1}l&&(i.set(a,d),o(d,a,r,u,i),i.delete(a));Gn(e,n,d)}(e,t,i,n,Ar,r,o);else{var s=r?r(vu(e,i),u,i+"",e,t,o):void 0;void 0===s&&(s=u),Gn(e,i,s)}}),ys)}function Tr(e,t){var n=e.length;if(n)return su(t+=t<0?n:0,n)?e[t]:void 0}function Rr(e,t,n){t=t.length?ht(t,(function(e){return Ni(e)?function(t){return lr(t,1===e.length?e[0]:e)}:e})):[Ws];var r=-1;return t=ht(t,At(Zo())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(Er(e,(function(e,n,o){return{criteria:ht(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){var r=-1,o=e.criteria,u=t.criteria,i=o.length,s=n.length;for(;++r<i;){var a=po(o[r],u[r]);if(a){if(r>=s)return a;var c=n[r];return a*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)}))}function Nr(e,t,n){for(var r=-1,o=t.length,u={};++r<o;){var i=t[r],s=lr(e,i);n(s,i)&&Dr(u,so(i,e),s)}return u}function Pr(e,t,n,r){var o=r?xt:yt,u=-1,i=t.length,s=e;for(e===t&&(t=vo(t)),n&&(s=ht(e,At(n)));++u<i;)for(var a=0,c=t[u],d=n?n(c):c;(a=o(s,d,a,r))>-1;)s!==e&&Xe.call(s,a,1),Xe.call(e,a,1);return e}function Ir(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==u){var u=o;su(o)?Xe.call(e,o,1):Jr(e,o)}}return e}function qr(e,t){return e+Jt(dn()*(t-e+1))}function Br(e,t){var n="";if(!e||t<1||t>9007199254740991)return n;do{t%2&&(n+=e),(t=Jt(t/2))&&(e+=e)}while(t);return n}function Fr(e,t){return yu(pu(e,t,Ws),e+"")}function Lr(e){return Ln(Cs(e))}function zr(e,t){var n=Cs(e);return Ou(n,Xn(t,0,n.length))}function Dr(e,t,n,r){if(!Ui(e))return e;for(var o=-1,u=(t=so(t,e)).length,i=u-1,s=e;null!=s&&++o<u;){var a=Su(t[o]),c=n;if("__proto__"===a||"constructor"===a||"prototype"===a)return e;if(o!=i){var d=s[a];void 0===(c=r?r(d,a,s):void 0)&&(c=Ui(d)?d:su(t[o+1])?[]:{})}Un(s,a,c),s=s[a]}return e}var Gr=vn?function(e,t){return vn.set(e,t),e}:Ws,Ur=St?function(e,t){return St(e,"toString",{configurable:!0,enumerable:!1,value:Us(t),writable:!0})}:Ws;function Yr(e){return Ou(Cs(e))}function Hr(e,t,n){var o=-1,u=e.length;t<0&&(t=-t>u?0:u+t),(n=n>u?u:n)<0&&(n+=u),u=t>n?0:n-t>>>0,t>>>=0;for(var i=r(u);++o<u;)i[o]=e[o+t];return i}function Wr(e,t){var n;return er(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}function Vr(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=2147483647){for(;r<o;){var u=r+o>>>1,i=e[u];null!==i&&!Zi(i)&&(n?i<=t:i<t)?r=u+1:o=u}return o}return $r(e,t,Ws,n)}function $r(e,t,n,r){var o=0,u=null==e?0:e.length;if(0===u)return 0;for(var i=(t=n(t))!=t,s=null===t,a=Zi(t),c=void 0===t;o<u;){var d=Jt((o+u)/2),l=n(e[d]),f=void 0!==l,h=null===l,m=l==l,p=Zi(l);if(i)var _=r||m;else _=c?m&&(r||f):s?m&&f&&(r||!h):a?m&&f&&!h&&(r||!p):!h&&!p&&(r?l<=t:l<t);_?o=d+1:u=d}return sn(u,4294967294)}function Xr(e,t){for(var n=-1,r=e.length,o=0,u=[];++n<r;){var i=e[n],s=t?t(i):i;if(!n||!Ci(s,a)){var a=s;u[o++]=0===i?0:i}}return u}function Kr(e){return"number"==typeof e?e:Zi(e)?NaN:+e}function Zr(e){if("string"==typeof e)return e;if(Ni(e))return ht(e,Zr)+"";if(Zi(e))return En?En.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Qr(e,t,n){var r=-1,o=lt,u=e.length,i=!0,s=[],a=s;if(n)i=!1,o=ft;else if(u>=200){var c=t?null:Fo(e);if(c)return Ut(c);i=!1,o=Rt,a=new qn}else a=t?[]:s;e:for(;++r<u;){var d=e[r],l=t?t(d):d;if(d=n||0!==d?d:0,i&&l==l){for(var f=a.length;f--;)if(a[f]===l)continue e;t&&a.push(l),s.push(d)}else o(a,l,n)||(a!==s&&a.push(l),s.push(d))}return s}function Jr(e,t){return null==(e=_u(e,t=so(t,e)))||delete e[Su(Lu(t))]}function eo(e,t,n,r){return Dr(e,t,n(lr(e,t)),r)}function to(e,t,n,r){for(var o=e.length,u=r?o:-1;(r?u--:++u<o)&&t(e[u],u,e););return n?Hr(e,r?0:u,r?u+1:o):Hr(e,r?u+1:0,r?o:u)}function no(e,t){var n=e;return n instanceof Rn&&(n=n.value()),pt(t,(function(e,t){return t.func.apply(t.thisArg,mt([e],t.args))}),n)}function ro(e,t,n){var o=e.length;if(o<2)return o?Qr(e[0]):[];for(var u=-1,i=r(o);++u<o;)for(var s=e[u],a=-1;++a<o;)a!=u&&(i[u]=Jn(i[u]||s,e[a],t,n));return Qr(ur(i,1),t,n)}function oo(e,t,n){for(var r=-1,o=e.length,u=t.length,i={};++r<o;){var s=r<u?t[r]:void 0;n(i,e[r],s)}return i}function uo(e){return qi(e)?e:[]}function io(e){return"function"==typeof e?e:Ws}function so(e,t){return Ni(e)?e:cu(e,t)?[e]:Mu(ss(e))}var ao=Fr;function co(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:Hr(e,t,n)}var lo=Xt||function(e){return Ve.clearTimeout(e)};function fo(e,t){if(t)return e.slice();var n=e.length,r=Ge?Ge(n):new e.constructor(n);return e.copy(r),r}function ho(e){var t=new e.constructor(e.byteLength);return new qe(t).set(new qe(e)),t}function mo(e,t){var n=t?ho(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function po(e,t){if(e!==t){var n=void 0!==e,r=null===e,o=e==e,u=Zi(e),i=void 0!==t,s=null===t,a=t==t,c=Zi(t);if(!s&&!c&&!u&&e>t||u&&i&&a&&!s&&!c||r&&i&&a||!n&&a||!o)return 1;if(!r&&!u&&!c&&e<t||c&&n&&o&&!r&&!u||s&&n&&o||!i&&o||!a)return-1}return 0}function _o(e,t,n,o){for(var u=-1,i=e.length,s=n.length,a=-1,c=t.length,d=un(i-s,0),l=r(c+d),f=!o;++a<c;)l[a]=t[a];for(;++u<s;)(f||u<i)&&(l[n[u]]=e[u]);for(;d--;)l[a++]=e[u++];return l}function go(e,t,n,o){for(var u=-1,i=e.length,s=-1,a=n.length,c=-1,d=t.length,l=un(i-a,0),f=r(l+d),h=!o;++u<l;)f[u]=e[u];for(var m=u;++c<d;)f[m+c]=t[c];for(;++s<a;)(h||u<i)&&(f[m+n[s]]=e[u++]);return f}function vo(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function jo(e,t,n,r){var o=!n;n||(n={});for(var u=-1,i=t.length;++u<i;){var s=t[u],a=r?r(n[s],e[s],s,n,e):void 0;void 0===a&&(a=e[s]),o?Vn(n,s,a):Un(n,s,a)}return n}function bo(e,t){return function(n,r){var o=Ni(n)?it:Hn,u=t?t():{};return o(n,e,Zo(r,2),u)}}function yo(e){return Fr((function(t,n){var r=-1,o=n.length,u=o>1?n[o-1]:void 0,i=o>2?n[2]:void 0;for(u=e.length>3&&"function"==typeof u?(o--,u):void 0,i&&au(n[0],n[1],i)&&(u=o<3?void 0:u,o=1),t=pe(t);++r<o;){var s=n[r];s&&e(t,s,r,u)}return t}))}function xo(e,t){return function(n,r){if(null==n)return n;if(!Ii(n))return e(n,r);for(var o=n.length,u=t?o:-1,i=pe(n);(t?u--:++u<o)&&!1!==r(i[u],u,i););return n}}function wo(e){return function(t,n,r){for(var o=-1,u=pe(t),i=r(t),s=i.length;s--;){var a=i[e?s:++o];if(!1===n(u[a],a,u))break}return t}}function Oo(e){return function(t){var n=Lt(t=ss(t))?Wt(t):void 0,r=n?n[0]:t.charAt(0),o=n?co(n,1).join(""):t.slice(1);return r[e]()+o}}function Mo(e){return function(t){return pt(zs(Rs(t).replace(Re,"")),e,"")}}function So(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Cn(e.prototype),r=e.apply(n,t);return Ui(r)?r:n}}function Eo(e){return function(t,n,r){var o=pe(t);if(!Ii(t)){var u=Zo(n,3);t=bs(t),n=function(e){return u(o[e],e,o)}}var i=e(t,n,r);return i>-1?o[u?t[i]:i]:void 0}}function ko(e){return Ho((function(t){var n=t.length,r=n,o=Tn.prototype.thru;for(e&&t.reverse();r--;){var i=t[r];if("function"!=typeof i)throw new ve(u);if(o&&!s&&"wrapper"==Xo(i))var s=new Tn([],!0)}for(r=s?r:n;++r<n;){var a=Xo(i=t[r]),c="wrapper"==a?$o(i):void 0;s=c&&du(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?s[Xo(c[0])].apply(s,c[3]):1==i.length&&du(i)?s[a]():s.thru(i)}return function(){var e=arguments,r=e[0];if(s&&1==e.length&&Ni(r))return s.plant(r).value();for(var o=0,u=n?t[o].apply(this,e):r;++o<n;)u=t[o].call(this,u);return u}}))}function Co(e,t,n,o,u,i,s,a,c,d){var l=128&t,f=1&t,h=2&t,m=24&t,p=512&t,_=h?void 0:So(e);return function g(){for(var v=arguments.length,j=r(v),b=v;b--;)j[b]=arguments[b];if(m)var y=Ko(g),x=It(j,y);if(o&&(j=_o(j,o,u,m)),i&&(j=go(j,i,s,m)),v-=x,m&&v<d){var w=Gt(j,y);return qo(e,t,Co,g.placeholder,n,j,w,a,c,d-v)}var O=f?n:this,M=h?O[e]:e;return v=j.length,a?j=gu(j,a):p&&v>1&&j.reverse(),l&&c<v&&(j.length=c),this&&this!==Ve&&this instanceof g&&(M=_||So(M)),M.apply(O,j)}}function Ao(e,t){return function(n,r){return function(e,t,n,r){return ar(e,(function(e,o,u){t(r,n(e),o,u)})),r}(n,e,t(r),{})}}function To(e,t){return function(n,r){var o;if(void 0===n&&void 0===r)return t;if(void 0!==n&&(o=n),void 0!==r){if(void 0===o)return r;"string"==typeof n||"string"==typeof r?(n=Zr(n),r=Zr(r)):(n=Kr(n),r=Kr(r)),o=e(n,r)}return o}}function Ro(e){return Ho((function(t){return t=ht(t,At(Zo())),Fr((function(n){var r=this;return e(t,(function(e){return ut(e,r,n)}))}))}))}function No(e,t){var n=(t=void 0===t?" ":Zr(t)).length;if(n<2)return n?Br(t,e):t;var r=Br(t,Qt(e/Ht(t)));return Lt(t)?co(Wt(r),0,e).join(""):r.slice(0,e)}function Po(e){return function(t,n,o){return o&&"number"!=typeof o&&au(t,n,o)&&(n=o=void 0),t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n,o){for(var u=-1,i=un(Qt((t-e)/(n||1)),0),s=r(i);i--;)s[o?i:++u]=e,e+=n;return s}(t,n,o=void 0===o?t<n?1:-1:ns(o),e)}}function Io(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=us(t),n=us(n)),e(t,n)}}function qo(e,t,n,r,o,u,i,s,a,c){var d=8&t;t|=d?32:64,4&(t&=~(d?64:32))||(t&=-4);var l=[e,t,o,d?u:void 0,d?i:void 0,d?void 0:u,d?void 0:i,s,a,c],f=n.apply(void 0,l);return du(e)&&ju(f,l),f.placeholder=r,xu(f,e,t)}function Bo(e){var t=me[e];return function(e,n){if(e=us(e),(n=null==n?0:sn(rs(n),292))&&nn(e)){var r=(ss(e)+"e").split("e");return+((r=(ss(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Fo=pn&&1/Ut(new pn([,-0]))[1]==1/0?function(e){return new pn(e)}:Zs;function Lo(e){return function(t){var n=ru(t);return n==p?zt(t):n==j?Yt(t):function(e,t){return ht(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function zo(e,t,n,o,s,a,c,d){var l=2&t;if(!l&&"function"!=typeof e)throw new ve(u);var f=o?o.length:0;if(f||(t&=-97,o=s=void 0),c=void 0===c?c:un(rs(c),0),d=void 0===d?d:rs(d),f-=s?s.length:0,64&t){var h=o,m=s;o=s=void 0}var p=l?void 0:$o(e),_=[e,t,n,o,s,h,m,a,c,d];if(p&&function(e,t){var n=e[1],r=t[1],o=n|r,u=o<131,s=128==r&&8==n||128==r&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!u&&!s)return e;1&r&&(e[2]=t[2],o|=1&n?0:4);var a=t[3];if(a){var c=e[3];e[3]=c?_o(c,a,t[4]):a,e[4]=c?Gt(e[3],i):t[4]}(a=t[5])&&(c=e[5],e[5]=c?go(c,a,t[6]):a,e[6]=c?Gt(e[5],i):t[6]);(a=t[7])&&(e[7]=a);128&r&&(e[8]=null==e[8]?t[8]:sn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=o}(_,p),e=_[0],t=_[1],n=_[2],o=_[3],s=_[4],!(d=_[9]=void 0===_[9]?l?0:e.length:un(_[9]-f,0))&&24&t&&(t&=-25),t&&1!=t)g=8==t||16==t?function(e,t,n){var o=So(e);return function u(){for(var i=arguments.length,s=r(i),a=i,c=Ko(u);a--;)s[a]=arguments[a];var d=i<3&&s[0]!==c&&s[i-1]!==c?[]:Gt(s,c);if((i-=d.length)<n)return qo(e,t,Co,u.placeholder,void 0,s,d,void 0,void 0,n-i);var l=this&&this!==Ve&&this instanceof u?o:e;return ut(l,this,s)}}(e,t,d):32!=t&&33!=t||s.length?Co.apply(void 0,_):function(e,t,n,o){var u=1&t,i=So(e);return function t(){for(var s=-1,a=arguments.length,c=-1,d=o.length,l=r(d+a),f=this&&this!==Ve&&this instanceof t?i:e;++c<d;)l[c]=o[c];for(;a--;)l[c++]=arguments[++s];return ut(f,u?n:this,l)}}(e,t,n,o);else var g=function(e,t,n){var r=1&t,o=So(e);return function t(){var u=this&&this!==Ve&&this instanceof t?o:e;return u.apply(r?n:this,arguments)}}(e,t,n);return xu((p?Gr:ju)(g,_),e,t)}function Do(e,t,n,r){return void 0===e||Ci(e,ye[n])&&!Oe.call(r,n)?t:e}function Go(e,t,n,r,o,u){return Ui(e)&&Ui(t)&&(u.set(t,e),Ar(e,t,void 0,Go,u),u.delete(t)),e}function Uo(e){return Vi(e)?void 0:e}function Yo(e,t,n,r,o,u){var i=1&n,s=e.length,a=t.length;if(s!=a&&!(i&&a>s))return!1;var c=u.get(e),d=u.get(t);if(c&&d)return c==t&&d==e;var l=-1,f=!0,h=2&n?new qn:void 0;for(u.set(e,t),u.set(t,e);++l<s;){var m=e[l],p=t[l];if(r)var _=i?r(p,m,l,t,e,u):r(m,p,l,e,t,u);if(void 0!==_){if(_)continue;f=!1;break}if(h){if(!gt(t,(function(e,t){if(!Rt(h,t)&&(m===e||o(m,e,n,r,u)))return h.push(t)}))){f=!1;break}}else if(m!==p&&!o(m,p,n,r,u)){f=!1;break}}return u.delete(e),u.delete(t),f}function Ho(e){return yu(pu(e,void 0,Pu),e+"")}function Wo(e){return fr(e,bs,tu)}function Vo(e){return fr(e,ys,nu)}var $o=vn?function(e){return vn.get(e)}:Zs;function Xo(e){for(var t=e.name+"",n=jn[t],r=Oe.call(jn,t)?n.length:0;r--;){var o=n[r],u=o.func;if(null==u||u==e)return o.name}return t}function Ko(e){return(Oe.call(kn,"placeholder")?kn:e).placeholder}function Zo(){var e=kn.iteratee||Vs;return e=e===Vs?wr:e,arguments.length?e(arguments[0],arguments[1]):e}function Qo(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Jo(e){for(var t=bs(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,hu(o)]}return t}function eu(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return xr(n)?n:void 0}var tu=en?function(e){return null==e?[]:(e=pe(e),dt(en(e),(function(t){return $e.call(e,t)})))}:oa,nu=en?function(e){for(var t=[];e;)mt(t,tu(e)),e=He(e);return t}:oa,ru=hr;function ou(e,t,n){for(var r=-1,o=(t=so(t,e)).length,u=!1;++r<o;){var i=Su(t[r]);if(!(u=null!=e&&n(e,i)))break;e=e[i]}return u||++r!=o?u:!!(o=null==e?0:e.length)&&Gi(o)&&su(i,o)&&(Ni(e)||Ri(e))}function uu(e){return"function"!=typeof e.constructor||fu(e)?{}:Cn(He(e))}function iu(e){return Ni(e)||Ri(e)||!!(Ze&&e&&e[Ze])}function su(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&ae.test(e))&&e>-1&&e%1==0&&e<t}function au(e,t,n){if(!Ui(n))return!1;var r=typeof t;return!!("number"==r?Ii(n)&&su(t,n.length):"string"==r&&t in n)&&Ci(n[t],e)}function cu(e,t){if(Ni(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Zi(e))||(Y.test(e)||!U.test(e)||null!=t&&e in pe(t))}function du(e){var t=Xo(e),n=kn[t];if("function"!=typeof n||!(t in Rn.prototype))return!1;if(e===n)return!0;var r=$o(n);return!!r&&e===r[0]}(fn&&ru(new fn(new ArrayBuffer(1)))!=O||hn&&ru(new hn)!=p||mn&&"[object Promise]"!=ru(mn.resolve())||pn&&ru(new pn)!=j||_n&&ru(new _n)!=x)&&(ru=function(e){var t=hr(e),n=t==g?e.constructor:void 0,r=n?Eu(n):"";if(r)switch(r){case bn:return O;case yn:return p;case xn:return"[object Promise]";case wn:return j;case On:return x}return t});var lu=xe?zi:ua;function fu(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ye)}function hu(e){return e==e&&!Ui(e)}function mu(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in pe(n)))}}function pu(e,t,n){return t=un(void 0===t?e.length-1:t,0),function(){for(var o=arguments,u=-1,i=un(o.length-t,0),s=r(i);++u<i;)s[u]=o[t+u];u=-1;for(var a=r(t+1);++u<t;)a[u]=o[u];return a[t]=n(s),ut(e,this,a)}}function _u(e,t){return t.length<2?e:lr(e,Hr(t,0,-1))}function gu(e,t){for(var n=e.length,r=sn(t.length,n),o=vo(e);r--;){var u=t[r];e[r]=su(u,n)?o[u]:void 0}return e}function vu(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ju=wu(Gr),bu=Zt||function(e,t){return Ve.setTimeout(e,t)},yu=wu(Ur);function xu(e,t,n){var r=t+"";return yu(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Z,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return st(s,(function(n){var r="_."+n[0];t&n[1]&&!lt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(Q);return t?t[1].split(J):[]}(r),n)))}function wu(e){var t=0,n=0;return function(){var r=an(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function Ou(e,t){var n=-1,r=e.length,o=r-1;for(t=void 0===t?r:t;++n<t;){var u=qr(n,o),i=e[u];e[u]=e[n],e[n]=i}return e.length=t,e}var Mu=function(e){var t=wi(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(H,(function(e,n,r,o){t.push(r?o.replace(te,"$1"):n||e)})),t}));function Su(e){if("string"==typeof e||Zi(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Eu(e){if(null!=e){try{return we.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ku(e){if(e instanceof Rn)return e.clone();var t=new Tn(e.__wrapped__,e.__chain__);return t.__actions__=vo(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var Cu=Fr((function(e,t){return qi(e)?Jn(e,ur(t,1,qi,!0)):[]})),Au=Fr((function(e,t){var n=Lu(t);return qi(n)&&(n=void 0),qi(e)?Jn(e,ur(t,1,qi,!0),Zo(n,2)):[]})),Tu=Fr((function(e,t){var n=Lu(t);return qi(n)&&(n=void 0),qi(e)?Jn(e,ur(t,1,qi,!0),void 0,n):[]}));function Ru(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:rs(n);return o<0&&(o=un(r+o,0)),bt(e,Zo(t,3),o)}function Nu(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return void 0!==n&&(o=rs(n),o=n<0?un(r+o,0):sn(o,r-1)),bt(e,Zo(t,3),o,!0)}function Pu(e){return(null==e?0:e.length)?ur(e,1):[]}function Iu(e){return e&&e.length?e[0]:void 0}var qu=Fr((function(e){var t=ht(e,uo);return t.length&&t[0]===e[0]?gr(t):[]})),Bu=Fr((function(e){var t=Lu(e),n=ht(e,uo);return t===Lu(n)?t=void 0:n.pop(),n.length&&n[0]===e[0]?gr(n,Zo(t,2)):[]})),Fu=Fr((function(e){var t=Lu(e),n=ht(e,uo);return(t="function"==typeof t?t:void 0)&&n.pop(),n.length&&n[0]===e[0]?gr(n,void 0,t):[]}));function Lu(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}var zu=Fr(Du);function Du(e,t){return e&&e.length&&t&&t.length?Pr(e,t):e}var Gu=Ho((function(e,t){var n=null==e?0:e.length,r=$n(e,t);return Ir(e,ht(t,(function(e){return su(e,n)?+e:e})).sort(po)),r}));function Uu(e){return null==e?e:ln.call(e)}var Yu=Fr((function(e){return Qr(ur(e,1,qi,!0))})),Hu=Fr((function(e){var t=Lu(e);return qi(t)&&(t=void 0),Qr(ur(e,1,qi,!0),Zo(t,2))})),Wu=Fr((function(e){var t=Lu(e);return t="function"==typeof t?t:void 0,Qr(ur(e,1,qi,!0),void 0,t)}));function Vu(e){if(!e||!e.length)return[];var t=0;return e=dt(e,(function(e){if(qi(e))return t=un(e.length,t),!0})),Ct(t,(function(t){return ht(e,Mt(t))}))}function $u(e,t){if(!e||!e.length)return[];var n=Vu(e);return null==t?n:ht(n,(function(e){return ut(t,void 0,e)}))}var Xu=Fr((function(e,t){return qi(e)?Jn(e,t):[]})),Ku=Fr((function(e){return ro(dt(e,qi))})),Zu=Fr((function(e){var t=Lu(e);return qi(t)&&(t=void 0),ro(dt(e,qi),Zo(t,2))})),Qu=Fr((function(e){var t=Lu(e);return t="function"==typeof t?t:void 0,ro(dt(e,qi),void 0,t)})),Ju=Fr(Vu);var ei=Fr((function(e){var t=e.length,n=t>1?e[t-1]:void 0;return n="function"==typeof n?(e.pop(),n):void 0,$u(e,n)}));function ti(e){var t=kn(e);return t.__chain__=!0,t}function ni(e,t){return t(e)}var ri=Ho((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return $n(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Rn&&su(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:ni,args:[o],thisArg:void 0}),new Tn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(void 0),e}))):this.thru(o)}));var oi=bo((function(e,t,n){Oe.call(e,n)?++e[n]:Vn(e,n,1)}));var ui=Eo(Ru),ii=Eo(Nu);function si(e,t){return(Ni(e)?st:er)(e,Zo(t,3))}function ai(e,t){return(Ni(e)?at:tr)(e,Zo(t,3))}var ci=bo((function(e,t,n){Oe.call(e,n)?e[n].push(t):Vn(e,n,[t])}));var di=Fr((function(e,t,n){var o=-1,u="function"==typeof t,i=Ii(e)?r(e.length):[];return er(e,(function(e){i[++o]=u?ut(t,e,n):vr(e,t,n)})),i})),li=bo((function(e,t,n){Vn(e,n,t)}));function fi(e,t){return(Ni(e)?ht:Er)(e,Zo(t,3))}var hi=bo((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var mi=Fr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&au(e,t[0],t[1])?t=[]:n>2&&au(t[0],t[1],t[2])&&(t=[t[0]]),Rr(e,ur(t,1),[])})),pi=Kt||function(){return Ve.Date.now()};function _i(e,t,n){return t=n?void 0:t,zo(e,128,void 0,void 0,void 0,void 0,t=e&&null==t?e.length:t)}function gi(e,t){var n;if("function"!=typeof t)throw new ve(u);return e=rs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=void 0),n}}var vi=Fr((function(e,t,n){var r=1;if(n.length){var o=Gt(n,Ko(vi));r|=32}return zo(e,r,t,n,o)})),ji=Fr((function(e,t,n){var r=3;if(n.length){var o=Gt(n,Ko(ji));r|=32}return zo(t,r,e,n,o)}));function bi(e,t,n){var r,o,i,s,a,c,d=0,l=!1,f=!1,h=!0;if("function"!=typeof e)throw new ve(u);function m(t){var n=r,u=o;return r=o=void 0,d=t,s=e.apply(u,n)}function p(e){return d=e,a=bu(g,t),l?m(e):s}function _(e){var n=e-c;return void 0===c||n>=t||n<0||f&&e-d>=i}function g(){var e=pi();if(_(e))return v(e);a=bu(g,function(e){var n=t-(e-c);return f?sn(n,i-(e-d)):n}(e))}function v(e){return a=void 0,h&&r?m(e):(r=o=void 0,s)}function j(){var e=pi(),n=_(e);if(r=arguments,o=this,c=e,n){if(void 0===a)return p(c);if(f)return lo(a),a=bu(g,t),m(c)}return void 0===a&&(a=bu(g,t)),s}return t=us(t)||0,Ui(n)&&(l=!!n.leading,i=(f="maxWait"in n)?un(us(n.maxWait)||0,t):i,h="trailing"in n?!!n.trailing:h),j.cancel=function(){void 0!==a&&lo(a),d=0,r=c=o=a=void 0},j.flush=function(){return void 0===a?s:v(pi())},j}var yi=Fr((function(e,t){return Qn(e,1,t)})),xi=Fr((function(e,t,n){return Qn(e,us(t)||0,n)}));function wi(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ve(u);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],u=n.cache;if(u.has(o))return u.get(o);var i=e.apply(this,r);return n.cache=u.set(o,i)||u,i};return n.cache=new(wi.Cache||In),n}function Oi(e){if("function"!=typeof e)throw new ve(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}wi.Cache=In;var Mi=ao((function(e,t){var n=(t=1==t.length&&Ni(t[0])?ht(t[0],At(Zo())):ht(ur(t,1),At(Zo()))).length;return Fr((function(r){for(var o=-1,u=sn(r.length,n);++o<u;)r[o]=t[o].call(this,r[o]);return ut(e,this,r)}))})),Si=Fr((function(e,t){return zo(e,32,void 0,t,Gt(t,Ko(Si)))})),Ei=Fr((function(e,t){return zo(e,64,void 0,t,Gt(t,Ko(Ei)))})),ki=Ho((function(e,t){return zo(e,256,void 0,void 0,void 0,t)}));function Ci(e,t){return e===t||e!=e&&t!=t}var Ai=Io(mr),Ti=Io((function(e,t){return e>=t})),Ri=jr(function(){return arguments}())?jr:function(e){return Yi(e)&&Oe.call(e,"callee")&&!$e.call(e,"callee")},Ni=r.isArray,Pi=Je?At(Je):function(e){return Yi(e)&&hr(e)==w};function Ii(e){return null!=e&&Gi(e.length)&&!zi(e)}function qi(e){return Yi(e)&&Ii(e)}var Bi=tn||ua,Fi=et?At(et):function(e){return Yi(e)&&hr(e)==l};function Li(e){if(!Yi(e))return!1;var t=hr(e);return t==f||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!Vi(e)}function zi(e){if(!Ui(e))return!1;var t=hr(e);return t==h||t==m||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Di(e){return"number"==typeof e&&e==rs(e)}function Gi(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function Ui(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Yi(e){return null!=e&&"object"==typeof e}var Hi=tt?At(tt):function(e){return Yi(e)&&ru(e)==p};function Wi(e){return"number"==typeof e||Yi(e)&&hr(e)==_}function Vi(e){if(!Yi(e)||hr(e)!=g)return!1;var t=He(e);if(null===t)return!0;var n=Oe.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&we.call(n)==ke}var $i=nt?At(nt):function(e){return Yi(e)&&hr(e)==v};var Xi=rt?At(rt):function(e){return Yi(e)&&ru(e)==j};function Ki(e){return"string"==typeof e||!Ni(e)&&Yi(e)&&hr(e)==b}function Zi(e){return"symbol"==typeof e||Yi(e)&&hr(e)==y}var Qi=ot?At(ot):function(e){return Yi(e)&&Gi(e.length)&&!!ze[hr(e)]};var Ji=Io(Sr),es=Io((function(e,t){return e<=t}));function ts(e){if(!e)return[];if(Ii(e))return Ki(e)?Wt(e):vo(e);if(Qe&&e[Qe])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Qe]());var t=ru(e);return(t==p?zt:t==j?Ut:Cs)(e)}function ns(e){return e?(e=us(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function rs(e){var t=ns(e),n=t%1;return t==t?n?t-n:t:0}function os(e){return e?Xn(rs(e),0,4294967295):0}function us(e){if("number"==typeof e)return e;if(Zi(e))return NaN;if(Ui(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ui(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace($,"");var n=ue.test(e);return n||se.test(e)?Ye(e.slice(2),n?2:8):oe.test(e)?NaN:+e}function is(e){return jo(e,ys(e))}function ss(e){return null==e?"":Zr(e)}var as=yo((function(e,t){if(fu(t)||Ii(t))jo(t,bs(t),e);else for(var n in t)Oe.call(t,n)&&Un(e,n,t[n])})),cs=yo((function(e,t){jo(t,ys(t),e)})),ds=yo((function(e,t,n,r){jo(t,ys(t),e,r)})),ls=yo((function(e,t,n,r){jo(t,bs(t),e,r)})),fs=Ho($n);var hs=Fr((function(e,t){e=pe(e);var n=-1,r=t.length,o=r>2?t[2]:void 0;for(o&&au(t[0],t[1],o)&&(r=1);++n<r;)for(var u=t[n],i=ys(u),s=-1,a=i.length;++s<a;){var c=i[s],d=e[c];(void 0===d||Ci(d,ye[c])&&!Oe.call(e,c))&&(e[c]=u[c])}return e})),ms=Fr((function(e){return e.push(void 0,Go),ut(ws,void 0,e)}));function ps(e,t,n){var r=null==e?void 0:lr(e,t);return void 0===r?n:r}function _s(e,t){return null!=e&&ou(e,t,_r)}var gs=Ao((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ee.call(t)),e[t]=n}),Us(Ws)),vs=Ao((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ee.call(t)),Oe.call(e,t)?e[t].push(n):e[t]=[n]}),Zo),js=Fr(vr);function bs(e){return Ii(e)?Fn(e):Or(e)}function ys(e){return Ii(e)?Fn(e,!0):Mr(e)}var xs=yo((function(e,t,n){Ar(e,t,n)})),ws=yo((function(e,t,n,r){Ar(e,t,n,r)})),Os=Ho((function(e,t){var n={};if(null==e)return n;var r=!1;t=ht(t,(function(t){return t=so(t,e),r||(r=t.length>1),t})),jo(e,Vo(e),n),r&&(n=Kn(n,7,Uo));for(var o=t.length;o--;)Jr(n,t[o]);return n}));var Ms=Ho((function(e,t){return null==e?{}:function(e,t){return Nr(e,t,(function(t,n){return _s(e,n)}))}(e,t)}));function Ss(e,t){if(null==e)return{};var n=ht(Vo(e),(function(e){return[e]}));return t=Zo(t),Nr(e,n,(function(e,n){return t(e,n[0])}))}var Es=Lo(bs),ks=Lo(ys);function Cs(e){return null==e?[]:Tt(e,bs(e))}var As=Mo((function(e,t,n){return t=t.toLowerCase(),e+(n?Ts(t):t)}));function Ts(e){return Ls(ss(e).toLowerCase())}function Rs(e){return(e=ss(e))&&e.replace(ce,qt).replace(Ne,"")}var Ns=Mo((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Ps=Mo((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Is=Oo("toLowerCase");var qs=Mo((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Bs=Mo((function(e,t,n){return e+(n?" ":"")+Ls(t)}));var Fs=Mo((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ls=Oo("toUpperCase");function zs(e,t,n){return e=ss(e),void 0===(t=n?void 0:t)?function(e){return Be.test(e)}(e)?function(e){return e.match(Ie)||[]}(e):function(e){return e.match(ee)||[]}(e):e.match(t)||[]}var Ds=Fr((function(e,t){try{return ut(e,void 0,t)}catch(e){return Li(e)?e:new fe(e)}})),Gs=Ho((function(e,t){return st(t,(function(t){t=Su(t),Vn(e,t,vi(e[t],e))})),e}));function Us(e){return function(){return e}}var Ys=ko(),Hs=ko(!0);function Ws(e){return e}function Vs(e){return wr("function"==typeof e?e:Kn(e,1))}var $s=Fr((function(e,t){return function(n){return vr(n,e,t)}})),Xs=Fr((function(e,t){return function(n){return vr(e,n,t)}}));function Ks(e,t,n){var r=bs(t),o=dr(t,r);null!=n||Ui(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=dr(t,bs(t)));var u=!(Ui(n)&&"chain"in n&&!n.chain),i=zi(e);return st(o,(function(n){var r=t[n];e[n]=r,i&&(e.prototype[n]=function(){var t=this.__chain__;if(u||t){var n=e(this.__wrapped__),o=n.__actions__=vo(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,mt([this.value()],arguments))})})),e}function Zs(){}var Qs=Ro(ht),Js=Ro(ct),ea=Ro(gt);function ta(e){return cu(e)?Mt(Su(e)):function(e){return function(t){return lr(t,e)}}(e)}var na=Po(),ra=Po(!0);function oa(){return[]}function ua(){return!1}var ia=To((function(e,t){return e+t}),0),sa=Bo("ceil"),aa=To((function(e,t){return e/t}),1),ca=Bo("floor");var da,la=To((function(e,t){return e*t}),1),fa=Bo("round"),ha=To((function(e,t){return e-t}),0);return kn.after=function(e,t){if("function"!=typeof t)throw new ve(u);return e=rs(e),function(){if(--e<1)return t.apply(this,arguments)}},kn.ary=_i,kn.assign=as,kn.assignIn=cs,kn.assignInWith=ds,kn.assignWith=ls,kn.at=fs,kn.before=gi,kn.bind=vi,kn.bindAll=Gs,kn.bindKey=ji,kn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Ni(e)?e:[e]},kn.chain=ti,kn.chunk=function(e,t,n){t=(n?au(e,t,n):void 0===t)?1:un(rs(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var u=0,i=0,s=r(Qt(o/t));u<o;)s[i++]=Hr(e,u,u+=t);return s},kn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var u=e[t];u&&(o[r++]=u)}return o},kn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return mt(Ni(n)?vo(n):[n],ur(t,1))},kn.cond=function(e){var t=null==e?0:e.length,n=Zo();return e=t?ht(e,(function(e){if("function"!=typeof e[1])throw new ve(u);return[n(e[0]),e[1]]})):[],Fr((function(n){for(var r=-1;++r<t;){var o=e[r];if(ut(o[0],this,n))return ut(o[1],this,n)}}))},kn.conforms=function(e){return function(e){var t=bs(e);return function(n){return Zn(n,e,t)}}(Kn(e,1))},kn.constant=Us,kn.countBy=oi,kn.create=function(e,t){var n=Cn(e);return null==t?n:Wn(n,t)},kn.curry=function e(t,n,r){var o=zo(t,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return o.placeholder=e.placeholder,o},kn.curryRight=function e(t,n,r){var o=zo(t,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return o.placeholder=e.placeholder,o},kn.debounce=bi,kn.defaults=hs,kn.defaultsDeep=ms,kn.defer=yi,kn.delay=xi,kn.difference=Cu,kn.differenceBy=Au,kn.differenceWith=Tu,kn.drop=function(e,t,n){var r=null==e?0:e.length;return r?Hr(e,(t=n||void 0===t?1:rs(t))<0?0:t,r):[]},kn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Hr(e,0,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t):[]},kn.dropRightWhile=function(e,t){return e&&e.length?to(e,Zo(t,3),!0,!0):[]},kn.dropWhile=function(e,t){return e&&e.length?to(e,Zo(t,3),!0):[]},kn.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&au(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=rs(n))<0&&(n=-n>o?0:o+n),(r=void 0===r||r>o?o:rs(r))<0&&(r+=o),r=n>r?0:os(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},kn.filter=function(e,t){return(Ni(e)?dt:or)(e,Zo(t,3))},kn.flatMap=function(e,t){return ur(fi(e,t),1)},kn.flatMapDeep=function(e,t){return ur(fi(e,t),1/0)},kn.flatMapDepth=function(e,t,n){return n=void 0===n?1:rs(n),ur(fi(e,t),n)},kn.flatten=Pu,kn.flattenDeep=function(e){return(null==e?0:e.length)?ur(e,1/0):[]},kn.flattenDepth=function(e,t){return(null==e?0:e.length)?ur(e,t=void 0===t?1:rs(t)):[]},kn.flip=function(e){return zo(e,512)},kn.flow=Ys,kn.flowRight=Hs,kn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},kn.functions=function(e){return null==e?[]:dr(e,bs(e))},kn.functionsIn=function(e){return null==e?[]:dr(e,ys(e))},kn.groupBy=ci,kn.initial=function(e){return(null==e?0:e.length)?Hr(e,0,-1):[]},kn.intersection=qu,kn.intersectionBy=Bu,kn.intersectionWith=Fu,kn.invert=gs,kn.invertBy=vs,kn.invokeMap=di,kn.iteratee=Vs,kn.keyBy=li,kn.keys=bs,kn.keysIn=ys,kn.map=fi,kn.mapKeys=function(e,t){var n={};return t=Zo(t,3),ar(e,(function(e,r,o){Vn(n,t(e,r,o),e)})),n},kn.mapValues=function(e,t){var n={};return t=Zo(t,3),ar(e,(function(e,r,o){Vn(n,r,t(e,r,o))})),n},kn.matches=function(e){return kr(Kn(e,1))},kn.matchesProperty=function(e,t){return Cr(e,Kn(t,1))},kn.memoize=wi,kn.merge=xs,kn.mergeWith=ws,kn.method=$s,kn.methodOf=Xs,kn.mixin=Ks,kn.negate=Oi,kn.nthArg=function(e){return e=rs(e),Fr((function(t){return Tr(t,e)}))},kn.omit=Os,kn.omitBy=function(e,t){return Ss(e,Oi(Zo(t)))},kn.once=function(e){return gi(2,e)},kn.orderBy=function(e,t,n,r){return null==e?[]:(Ni(t)||(t=null==t?[]:[t]),Ni(n=r?void 0:n)||(n=null==n?[]:[n]),Rr(e,t,n))},kn.over=Qs,kn.overArgs=Mi,kn.overEvery=Js,kn.overSome=ea,kn.partial=Si,kn.partialRight=Ei,kn.partition=hi,kn.pick=Ms,kn.pickBy=Ss,kn.property=ta,kn.propertyOf=function(e){return function(t){return null==e?void 0:lr(e,t)}},kn.pull=zu,kn.pullAll=Du,kn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Pr(e,t,Zo(n,2)):e},kn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Pr(e,t,void 0,n):e},kn.pullAt=Gu,kn.range=na,kn.rangeRight=ra,kn.rearg=ki,kn.reject=function(e,t){return(Ni(e)?dt:or)(e,Oi(Zo(t,3)))},kn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],u=e.length;for(t=Zo(t,3);++r<u;){var i=e[r];t(i,r,e)&&(n.push(i),o.push(r))}return Ir(e,o),n},kn.rest=function(e,t){if("function"!=typeof e)throw new ve(u);return Fr(e,t=void 0===t?t:rs(t))},kn.reverse=Uu,kn.sampleSize=function(e,t,n){return t=(n?au(e,t,n):void 0===t)?1:rs(t),(Ni(e)?zn:zr)(e,t)},kn.set=function(e,t,n){return null==e?e:Dr(e,t,n)},kn.setWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:Dr(e,t,n,r)},kn.shuffle=function(e){return(Ni(e)?Dn:Yr)(e)},kn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&au(e,t,n)?(t=0,n=r):(t=null==t?0:rs(t),n=void 0===n?r:rs(n)),Hr(e,t,n)):[]},kn.sortBy=mi,kn.sortedUniq=function(e){return e&&e.length?Xr(e):[]},kn.sortedUniqBy=function(e,t){return e&&e.length?Xr(e,Zo(t,2)):[]},kn.split=function(e,t,n){return n&&"number"!=typeof n&&au(e,t,n)&&(t=n=void 0),(n=void 0===n?4294967295:n>>>0)?(e=ss(e))&&("string"==typeof t||null!=t&&!$i(t))&&!(t=Zr(t))&&Lt(e)?co(Wt(e),0,n):e.split(t,n):[]},kn.spread=function(e,t){if("function"!=typeof e)throw new ve(u);return t=null==t?0:un(rs(t),0),Fr((function(n){var r=n[t],o=co(n,0,t);return r&&mt(o,r),ut(e,this,o)}))},kn.tail=function(e){var t=null==e?0:e.length;return t?Hr(e,1,t):[]},kn.take=function(e,t,n){return e&&e.length?Hr(e,0,(t=n||void 0===t?1:rs(t))<0?0:t):[]},kn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Hr(e,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t,r):[]},kn.takeRightWhile=function(e,t){return e&&e.length?to(e,Zo(t,3),!1,!0):[]},kn.takeWhile=function(e,t){return e&&e.length?to(e,Zo(t,3)):[]},kn.tap=function(e,t){return t(e),e},kn.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ve(u);return Ui(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),bi(e,t,{leading:r,maxWait:t,trailing:o})},kn.thru=ni,kn.toArray=ts,kn.toPairs=Es,kn.toPairsIn=ks,kn.toPath=function(e){return Ni(e)?ht(e,Su):Zi(e)?[e]:vo(Mu(ss(e)))},kn.toPlainObject=is,kn.transform=function(e,t,n){var r=Ni(e),o=r||Bi(e)||Qi(e);if(t=Zo(t,4),null==n){var u=e&&e.constructor;n=o?r?new u:[]:Ui(e)&&zi(u)?Cn(He(e)):{}}return(o?st:ar)(e,(function(e,r,o){return t(n,e,r,o)})),n},kn.unary=function(e){return _i(e,1)},kn.union=Yu,kn.unionBy=Hu,kn.unionWith=Wu,kn.uniq=function(e){return e&&e.length?Qr(e):[]},kn.uniqBy=function(e,t){return e&&e.length?Qr(e,Zo(t,2)):[]},kn.uniqWith=function(e,t){return t="function"==typeof t?t:void 0,e&&e.length?Qr(e,void 0,t):[]},kn.unset=function(e,t){return null==e||Jr(e,t)},kn.unzip=Vu,kn.unzipWith=$u,kn.update=function(e,t,n){return null==e?e:eo(e,t,io(n))},kn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:eo(e,t,io(n),r)},kn.values=Cs,kn.valuesIn=function(e){return null==e?[]:Tt(e,ys(e))},kn.without=Xu,kn.words=zs,kn.wrap=function(e,t){return Si(io(t),e)},kn.xor=Ku,kn.xorBy=Zu,kn.xorWith=Qu,kn.zip=Ju,kn.zipObject=function(e,t){return oo(e||[],t||[],Un)},kn.zipObjectDeep=function(e,t){return oo(e||[],t||[],Dr)},kn.zipWith=ei,kn.entries=Es,kn.entriesIn=ks,kn.extend=cs,kn.extendWith=ds,Ks(kn,kn),kn.add=ia,kn.attempt=Ds,kn.camelCase=As,kn.capitalize=Ts,kn.ceil=sa,kn.clamp=function(e,t,n){return void 0===n&&(n=t,t=void 0),void 0!==n&&(n=(n=us(n))==n?n:0),void 0!==t&&(t=(t=us(t))==t?t:0),Xn(us(e),t,n)},kn.clone=function(e){return Kn(e,4)},kn.cloneDeep=function(e){return Kn(e,5)},kn.cloneDeepWith=function(e,t){return Kn(e,5,t="function"==typeof t?t:void 0)},kn.cloneWith=function(e,t){return Kn(e,4,t="function"==typeof t?t:void 0)},kn.conformsTo=function(e,t){return null==t||Zn(e,t,bs(t))},kn.deburr=Rs,kn.defaultTo=function(e,t){return null==e||e!=e?t:e},kn.divide=aa,kn.endsWith=function(e,t,n){e=ss(e),t=Zr(t);var r=e.length,o=n=void 0===n?r:Xn(rs(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},kn.eq=Ci,kn.escape=function(e){return(e=ss(e))&&L.test(e)?e.replace(B,Bt):e},kn.escapeRegExp=function(e){return(e=ss(e))&&V.test(e)?e.replace(W,"\\$&"):e},kn.every=function(e,t,n){var r=Ni(e)?ct:nr;return n&&au(e,t,n)&&(t=void 0),r(e,Zo(t,3))},kn.find=ui,kn.findIndex=Ru,kn.findKey=function(e,t){return jt(e,Zo(t,3),ar)},kn.findLast=ii,kn.findLastIndex=Nu,kn.findLastKey=function(e,t){return jt(e,Zo(t,3),cr)},kn.floor=ca,kn.forEach=si,kn.forEachRight=ai,kn.forIn=function(e,t){return null==e?e:ir(e,Zo(t,3),ys)},kn.forInRight=function(e,t){return null==e?e:sr(e,Zo(t,3),ys)},kn.forOwn=function(e,t){return e&&ar(e,Zo(t,3))},kn.forOwnRight=function(e,t){return e&&cr(e,Zo(t,3))},kn.get=ps,kn.gt=Ai,kn.gte=Ti,kn.has=function(e,t){return null!=e&&ou(e,t,pr)},kn.hasIn=_s,kn.head=Iu,kn.identity=Ws,kn.includes=function(e,t,n,r){e=Ii(e)?e:Cs(e),n=n&&!r?rs(n):0;var o=e.length;return n<0&&(n=un(o+n,0)),Ki(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&yt(e,t,n)>-1},kn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:rs(n);return o<0&&(o=un(r+o,0)),yt(e,t,o)},kn.inRange=function(e,t,n){return t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n){return e>=sn(t,n)&&e<un(t,n)}(e=us(e),t,n)},kn.invoke=js,kn.isArguments=Ri,kn.isArray=Ni,kn.isArrayBuffer=Pi,kn.isArrayLike=Ii,kn.isArrayLikeObject=qi,kn.isBoolean=function(e){return!0===e||!1===e||Yi(e)&&hr(e)==d},kn.isBuffer=Bi,kn.isDate=Fi,kn.isElement=function(e){return Yi(e)&&1===e.nodeType&&!Vi(e)},kn.isEmpty=function(e){if(null==e)return!0;if(Ii(e)&&(Ni(e)||"string"==typeof e||"function"==typeof e.splice||Bi(e)||Qi(e)||Ri(e)))return!e.length;var t=ru(e);if(t==p||t==j)return!e.size;if(fu(e))return!Or(e).length;for(var n in e)if(Oe.call(e,n))return!1;return!0},kn.isEqual=function(e,t){return br(e,t)},kn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:void 0)?n(e,t):void 0;return void 0===r?br(e,t,void 0,n):!!r},kn.isError=Li,kn.isFinite=function(e){return"number"==typeof e&&nn(e)},kn.isFunction=zi,kn.isInteger=Di,kn.isLength=Gi,kn.isMap=Hi,kn.isMatch=function(e,t){return e===t||yr(e,t,Jo(t))},kn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:void 0,yr(e,t,Jo(t),n)},kn.isNaN=function(e){return Wi(e)&&e!=+e},kn.isNative=function(e){if(lu(e))throw new fe("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return xr(e)},kn.isNil=function(e){return null==e},kn.isNull=function(e){return null===e},kn.isNumber=Wi,kn.isObject=Ui,kn.isObjectLike=Yi,kn.isPlainObject=Vi,kn.isRegExp=$i,kn.isSafeInteger=function(e){return Di(e)&&e>=-9007199254740991&&e<=9007199254740991},kn.isSet=Xi,kn.isString=Ki,kn.isSymbol=Zi,kn.isTypedArray=Qi,kn.isUndefined=function(e){return void 0===e},kn.isWeakMap=function(e){return Yi(e)&&ru(e)==x},kn.isWeakSet=function(e){return Yi(e)&&"[object WeakSet]"==hr(e)},kn.join=function(e,t){return null==e?"":rn.call(e,t)},kn.kebabCase=Ns,kn.last=Lu,kn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return void 0!==n&&(o=(o=rs(n))<0?un(r+o,0):sn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):bt(e,wt,o,!0)},kn.lowerCase=Ps,kn.lowerFirst=Is,kn.lt=Ji,kn.lte=es,kn.max=function(e){return e&&e.length?rr(e,Ws,mr):void 0},kn.maxBy=function(e,t){return e&&e.length?rr(e,Zo(t,2),mr):void 0},kn.mean=function(e){return Ot(e,Ws)},kn.meanBy=function(e,t){return Ot(e,Zo(t,2))},kn.min=function(e){return e&&e.length?rr(e,Ws,Sr):void 0},kn.minBy=function(e,t){return e&&e.length?rr(e,Zo(t,2),Sr):void 0},kn.stubArray=oa,kn.stubFalse=ua,kn.stubObject=function(){return{}},kn.stubString=function(){return""},kn.stubTrue=function(){return!0},kn.multiply=la,kn.nth=function(e,t){return e&&e.length?Tr(e,rs(t)):void 0},kn.noConflict=function(){return Ve._===this&&(Ve._=Ce),this},kn.noop=Zs,kn.now=pi,kn.pad=function(e,t,n){e=ss(e);var r=(t=rs(t))?Ht(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return No(Jt(o),n)+e+No(Qt(o),n)},kn.padEnd=function(e,t,n){e=ss(e);var r=(t=rs(t))?Ht(e):0;return t&&r<t?e+No(t-r,n):e},kn.padStart=function(e,t,n){e=ss(e);var r=(t=rs(t))?Ht(e):0;return t&&r<t?No(t-r,n)+e:e},kn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),cn(ss(e).replace(X,""),t||0)},kn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&au(e,t,n)&&(t=n=void 0),void 0===n&&("boolean"==typeof t?(n=t,t=void 0):"boolean"==typeof e&&(n=e,e=void 0)),void 0===e&&void 0===t?(e=0,t=1):(e=ns(e),void 0===t?(t=e,e=0):t=ns(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=dn();return sn(e+o*(t-e+Ue("1e-"+((o+"").length-1))),t)}return qr(e,t)},kn.reduce=function(e,t,n){var r=Ni(e)?pt:Et,o=arguments.length<3;return r(e,Zo(t,4),n,o,er)},kn.reduceRight=function(e,t,n){var r=Ni(e)?_t:Et,o=arguments.length<3;return r(e,Zo(t,4),n,o,tr)},kn.repeat=function(e,t,n){return t=(n?au(e,t,n):void 0===t)?1:rs(t),Br(ss(e),t)},kn.replace=function(){var e=arguments,t=ss(e[0]);return e.length<3?t:t.replace(e[1],e[2])},kn.result=function(e,t,n){var r=-1,o=(t=so(t,e)).length;for(o||(o=1,e=void 0);++r<o;){var u=null==e?void 0:e[Su(t[r])];void 0===u&&(r=o,u=n),e=zi(u)?u.call(e):u}return e},kn.round=fa,kn.runInContext=e,kn.sample=function(e){return(Ni(e)?Ln:Lr)(e)},kn.size=function(e){if(null==e)return 0;if(Ii(e))return Ki(e)?Ht(e):e.length;var t=ru(e);return t==p||t==j?e.size:Or(e).length},kn.snakeCase=qs,kn.some=function(e,t,n){var r=Ni(e)?gt:Wr;return n&&au(e,t,n)&&(t=void 0),r(e,Zo(t,3))},kn.sortedIndex=function(e,t){return Vr(e,t)},kn.sortedIndexBy=function(e,t,n){return $r(e,t,Zo(n,2))},kn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Vr(e,t);if(r<n&&Ci(e[r],t))return r}return-1},kn.sortedLastIndex=function(e,t){return Vr(e,t,!0)},kn.sortedLastIndexBy=function(e,t,n){return $r(e,t,Zo(n,2),!0)},kn.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Vr(e,t,!0)-1;if(Ci(e[n],t))return n}return-1},kn.startCase=Bs,kn.startsWith=function(e,t,n){return e=ss(e),n=null==n?0:Xn(rs(n),0,e.length),t=Zr(t),e.slice(n,n+t.length)==t},kn.subtract=ha,kn.sum=function(e){return e&&e.length?kt(e,Ws):0},kn.sumBy=function(e,t){return e&&e.length?kt(e,Zo(t,2)):0},kn.template=function(e,t,n){var r=kn.templateSettings;n&&au(e,t,n)&&(t=void 0),e=ss(e),t=ds({},t,r,Do);var o,u,i=ds({},t.imports,r.imports,Do),s=bs(i),a=Tt(i,s),c=0,d=t.interpolate||de,l="__p += '",f=_e((t.escape||de).source+"|"+d.source+"|"+(d===G?ne:de).source+"|"+(t.evaluate||de).source+"|$","g"),h="//# sourceURL="+(Oe.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Le+"]")+"\n";e.replace(f,(function(t,n,r,i,s,a){return r||(r=i),l+=e.slice(c,a).replace(le,Ft),n&&(o=!0,l+="' +\n__e("+n+") +\n'"),s&&(u=!0,l+="';\n"+s+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=a+t.length,t})),l+="';\n";var m=Oe.call(t,"variable")&&t.variable;m||(l="with (obj) {\n"+l+"\n}\n"),l=(u?l.replace(N,""):l).replace(P,"$1").replace(I,"$1;"),l="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var p=Ds((function(){return he(s,h+"return "+l).apply(void 0,a)}));if(p.source=l,Li(p))throw p;return p},kn.times=function(e,t){if((e=rs(e))<1||e>9007199254740991)return[];var n=4294967295,r=sn(e,4294967295);e-=4294967295;for(var o=Ct(r,t=Zo(t));++n<e;)t(n);return o},kn.toFinite=ns,kn.toInteger=rs,kn.toLength=os,kn.toLower=function(e){return ss(e).toLowerCase()},kn.toNumber=us,kn.toSafeInteger=function(e){return e?Xn(rs(e),-9007199254740991,9007199254740991):0===e?e:0},kn.toString=ss,kn.toUpper=function(e){return ss(e).toUpperCase()},kn.trim=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace($,"");if(!e||!(t=Zr(t)))return e;var r=Wt(e),o=Wt(t);return co(r,Nt(r,o),Pt(r,o)+1).join("")},kn.trimEnd=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(K,"");if(!e||!(t=Zr(t)))return e;var r=Wt(e);return co(r,0,Pt(r,Wt(t))+1).join("")},kn.trimStart=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(X,"");if(!e||!(t=Zr(t)))return e;var r=Wt(e);return co(r,Nt(r,Wt(t))).join("")},kn.truncate=function(e,t){var n=30,r="...";if(Ui(t)){var o="separator"in t?t.separator:o;n="length"in t?rs(t.length):n,r="omission"in t?Zr(t.omission):r}var u=(e=ss(e)).length;if(Lt(e)){var i=Wt(e);u=i.length}if(n>=u)return e;var s=n-Ht(r);if(s<1)return r;var a=i?co(i,0,s).join(""):e.slice(0,s);if(void 0===o)return a+r;if(i&&(s+=a.length-s),$i(o)){if(e.slice(s).search(o)){var c,d=a;for(o.global||(o=_e(o.source,ss(re.exec(o))+"g")),o.lastIndex=0;c=o.exec(d);)var l=c.index;a=a.slice(0,void 0===l?s:l)}}else if(e.indexOf(Zr(o),s)!=s){var f=a.lastIndexOf(o);f>-1&&(a=a.slice(0,f))}return a+r},kn.unescape=function(e){return(e=ss(e))&&F.test(e)?e.replace(q,Vt):e},kn.uniqueId=function(e){var t=++Me;return ss(e)+t},kn.upperCase=Fs,kn.upperFirst=Ls,kn.each=si,kn.eachRight=ai,kn.first=Iu,Ks(kn,(da={},ar(kn,(function(e,t){Oe.call(kn.prototype,t)||(da[t]=e)})),da),{chain:!1}),kn.VERSION="4.17.19",st(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){kn[e].placeholder=kn})),st(["drop","take"],(function(e,t){Rn.prototype[e]=function(n){n=void 0===n?1:un(rs(n),0);var r=this.__filtered__&&!t?new Rn(this):this.clone();return r.__filtered__?r.__takeCount__=sn(n,r.__takeCount__):r.__views__.push({size:sn(n,4294967295),type:e+(r.__dir__<0?"Right":"")}),r},Rn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),st(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Rn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Zo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),st(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Rn.prototype[e]=function(){return this[n](1).value()[0]}})),st(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Rn.prototype[e]=function(){return this.__filtered__?new Rn(this):this[n](1)}})),Rn.prototype.compact=function(){return this.filter(Ws)},Rn.prototype.find=function(e){return this.filter(e).head()},Rn.prototype.findLast=function(e){return this.reverse().find(e)},Rn.prototype.invokeMap=Fr((function(e,t){return"function"==typeof e?new Rn(this):this.map((function(n){return vr(n,e,t)}))})),Rn.prototype.reject=function(e){return this.filter(Oi(Zo(e)))},Rn.prototype.slice=function(e,t){e=rs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Rn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),void 0!==t&&(n=(t=rs(t))<0?n.dropRight(-t):n.take(t-e)),n)},Rn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Rn.prototype.toArray=function(){return this.take(4294967295)},ar(Rn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=kn[r?"take"+("last"==t?"Right":""):t],u=r||/^find/.test(t);o&&(kn.prototype[t]=function(){var t=this.__wrapped__,i=r?[1]:arguments,s=t instanceof Rn,a=i[0],c=s||Ni(t),d=function(e){var t=o.apply(kn,mt([e],i));return r&&l?t[0]:t};c&&n&&"function"==typeof a&&1!=a.length&&(s=c=!1);var l=this.__chain__,f=!!this.__actions__.length,h=u&&!l,m=s&&!f;if(!u&&c){t=m?t:new Rn(this);var p=e.apply(t,i);return p.__actions__.push({func:ni,args:[d],thisArg:void 0}),new Tn(p,l)}return h&&m?e.apply(this,i):(p=this.thru(d),h?r?p.value()[0]:p.value():p)})})),st(["pop","push","shift","sort","splice","unshift"],(function(e){var t=je[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);kn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(Ni(o)?o:[],e)}return this[n]((function(n){return t.apply(Ni(n)?n:[],e)}))}})),ar(Rn.prototype,(function(e,t){var n=kn[t];if(n){var r=n.name+"";Oe.call(jn,r)||(jn[r]=[]),jn[r].push({name:t,func:n})}})),jn[Co(void 0,2).name]=[{name:"wrapper",func:void 0}],Rn.prototype.clone=function(){var e=new Rn(this.__wrapped__);return e.__actions__=vo(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=vo(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=vo(this.__views__),e},Rn.prototype.reverse=function(){if(this.__filtered__){var e=new Rn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Rn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Ni(e),r=t<0,o=n?e.length:0,u=function(e,t,n){var r=-1,o=n.length;for(;++r<o;){var u=n[r],i=u.size;switch(u.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=sn(t,e+i);break;case"takeRight":e=un(e,t-i)}}return{start:e,end:t}}(0,o,this.__views__),i=u.start,s=u.end,a=s-i,c=r?s:i-1,d=this.__iteratees__,l=d.length,f=0,h=sn(a,this.__takeCount__);if(!n||!r&&o==a&&h==a)return no(e,this.__actions__);var m=[];e:for(;a--&&f<h;){for(var p=-1,_=e[c+=t];++p<l;){var g=d[p],v=g.iteratee,j=g.type,b=v(_);if(2==j)_=b;else if(!b){if(1==j)continue e;break e}}m[f++]=_}return m},kn.prototype.at=ri,kn.prototype.chain=function(){return ti(this)},kn.prototype.commit=function(){return new Tn(this.value(),this.__chain__)},kn.prototype.next=function(){void 0===this.__values__&&(this.__values__=ts(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?void 0:this.__values__[this.__index__++]}},kn.prototype.plant=function(e){for(var t,n=this;n instanceof An;){var r=ku(n);r.__index__=0,r.__values__=void 0,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},kn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Rn){var t=e;return this.__actions__.length&&(t=new Rn(this)),(t=t.reverse()).__actions__.push({func:ni,args:[Uu],thisArg:void 0}),new Tn(t,this.__chain__)}return this.thru(Uu)},kn.prototype.toJSON=kn.prototype.valueOf=kn.prototype.value=function(){return no(this.__wrapped__,this.__actions__)},kn.prototype.first=kn.prototype.head,Qe&&(kn.prototype[Qe]=function(){return this}),kn}();Ve._=$t,void 0===(o=function(){return $t}.call(t,n,t,r))||(r.exports=o)}).call(this)}).call(this,n(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"),n(/*! ./../webpack/buildin/module.js */"./node_modules/webpack/buildin/module.js")(e))},"./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayMap */"./node_modules/lodash/_arrayMap.js"),o=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),u=n(/*! ./_baseMap */"./node_modules/lodash/_baseMap.js"),i=n(/*! ./isArray */"./node_modules/lodash/isArray.js");e.exports=function(e,t){return(i(e)?r:u)(e,o(t,3))}},"./node_modules/lodash/mapValues.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/mapValues.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseAssignValue */"./node_modules/lodash/_baseAssignValue.js"),o=n(/*! ./_baseForOwn */"./node_modules/lodash/_baseForOwn.js"),u=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js");e.exports=function(e,t){var n={};return t=u(t,3),o(e,(function(e,o,u){r(n,o,t(e,o,u))})),n}},"./node_modules/lodash/max.js":
/*!************************************!*\
  !*** ./node_modules/lodash/max.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseExtremum */"./node_modules/lodash/_baseExtremum.js"),o=n(/*! ./_baseGt */"./node_modules/lodash/_baseGt.js"),u=n(/*! ./identity */"./node_modules/lodash/identity.js");e.exports=function(e){return e&&e.length?r(e,u,o):void 0}},"./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_MapCache */"./node_modules/lodash/_MapCache.js");function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],u=n.cache;if(u.has(o))return u.get(o);var i=e.apply(this,r);return n.cache=u.set(o,i)||u,i};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},"./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseMerge */"./node_modules/lodash/_baseMerge.js"),o=n(/*! ./_createAssigner */"./node_modules/lodash/_createAssigner.js")((function(e,t,n){r(e,t,n)}));e.exports=o},"./node_modules/lodash/min.js":
/*!************************************!*\
  !*** ./node_modules/lodash/min.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseExtremum */"./node_modules/lodash/_baseExtremum.js"),o=n(/*! ./_baseLt */"./node_modules/lodash/_baseLt.js"),u=n(/*! ./identity */"./node_modules/lodash/identity.js");e.exports=function(e){return e&&e.length?r(e,u,o):void 0}},"./node_modules/lodash/minBy.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/minBy.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseExtremum */"./node_modules/lodash/_baseExtremum.js"),o=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),u=n(/*! ./_baseLt */"./node_modules/lodash/_baseLt.js");e.exports=function(e,t){return e&&e.length?r(e,o(t,2),u):void 0}},"./node_modules/lodash/noop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/noop.js ***!
  \*************************************/
/*! no static exports found */function(e,t){e.exports=function(){}},"./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_root */"./node_modules/lodash/_root.js");e.exports=function(){return r.Date.now()}},"./node_modules/lodash/pick.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/pick.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_basePick */"./node_modules/lodash/_basePick.js"),o=n(/*! ./_flatRest */"./node_modules/lodash/_flatRest.js")((function(e,t){return null==e?{}:r(e,t)}));e.exports=o},"./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseProperty */"./node_modules/lodash/_baseProperty.js"),o=n(/*! ./_basePropertyDeep */"./node_modules/lodash/_basePropertyDeep.js"),u=n(/*! ./_isKey */"./node_modules/lodash/_isKey.js"),i=n(/*! ./_toKey */"./node_modules/lodash/_toKey.js");e.exports=function(e){return u(e)?r(i(e)):o(e)}},"./node_modules/lodash/range.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/range.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_createRange */"./node_modules/lodash/_createRange.js")();e.exports=r},"./node_modules/lodash/reduce.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/reduce.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayReduce */"./node_modules/lodash/_arrayReduce.js"),o=n(/*! ./_baseEach */"./node_modules/lodash/_baseEach.js"),u=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),i=n(/*! ./_baseReduce */"./node_modules/lodash/_baseReduce.js"),s=n(/*! ./isArray */"./node_modules/lodash/isArray.js");e.exports=function(e,t,n){var a=s(e)?r:i,c=arguments.length<3;return a(e,u(t,4),n,c,o)}},"./node_modules/lodash/size.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/size.js ***!
  \*************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseKeys */"./node_modules/lodash/_baseKeys.js"),o=n(/*! ./_getTag */"./node_modules/lodash/_getTag.js"),u=n(/*! ./isArrayLike */"./node_modules/lodash/isArrayLike.js"),i=n(/*! ./isString */"./node_modules/lodash/isString.js"),s=n(/*! ./_stringSize */"./node_modules/lodash/_stringSize.js");e.exports=function(e){if(null==e)return 0;if(u(e))return i(e)?s(e):e.length;var t=o(e);return"[object Map]"==t||"[object Set]"==t?e.size:r(e).length}},"./node_modules/lodash/sortBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/sortBy.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFlatten */"./node_modules/lodash/_baseFlatten.js"),o=n(/*! ./_baseOrderBy */"./node_modules/lodash/_baseOrderBy.js"),u=n(/*! ./_baseRest */"./node_modules/lodash/_baseRest.js"),i=n(/*! ./_isIterateeCall */"./node_modules/lodash/_isIterateeCall.js"),s=u((function(e,t){if(null==e)return[];var n=t.length;return n>1&&i(e,t[0],t[1])?t=[]:n>2&&i(t[0],t[1],t[2])&&(t=[t[0]]),o(e,r(t,1),[])}));e.exports=s},"./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/*! no static exports found */function(e,t){e.exports=function(){return!1}},"./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./toNumber */"./node_modules/lodash/toNumber.js");e.exports=function(e){return e?(e=r(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},"./node_modules/lodash/toInteger.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./toFinite */"./node_modules/lodash/toFinite.js");e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},"./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),o=n(/*! ./isSymbol */"./node_modules/lodash/isSymbol.js"),u=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,a=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(u,"");var n=s.test(e);return n||a.test(e)?c(e.slice(2),n?2:8):i.test(e)?NaN:+e}},"./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_copyObject */"./node_modules/lodash/_copyObject.js"),o=n(/*! ./keysIn */"./node_modules/lodash/keysIn.js");e.exports=function(e){return r(e,o(e))}},"./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseToString */"./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":r(e)}},"./node_modules/lodash/transform.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/transform.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_arrayEach */"./node_modules/lodash/_arrayEach.js"),o=n(/*! ./_baseCreate */"./node_modules/lodash/_baseCreate.js"),u=n(/*! ./_baseForOwn */"./node_modules/lodash/_baseForOwn.js"),i=n(/*! ./_baseIteratee */"./node_modules/lodash/_baseIteratee.js"),s=n(/*! ./_getPrototype */"./node_modules/lodash/_getPrototype.js"),a=n(/*! ./isArray */"./node_modules/lodash/isArray.js"),c=n(/*! ./isBuffer */"./node_modules/lodash/isBuffer.js"),d=n(/*! ./isFunction */"./node_modules/lodash/isFunction.js"),l=n(/*! ./isObject */"./node_modules/lodash/isObject.js"),f=n(/*! ./isTypedArray */"./node_modules/lodash/isTypedArray.js");e.exports=function(e,t,n){var h=a(e),m=h||c(e)||f(e);if(t=i(t,4),null==n){var p=e&&e.constructor;n=m?h?new p:[]:l(e)&&d(p)?o(s(e)):{}}return(m?r:u)(e,(function(e,r,o){return t(n,e,r,o)})),n}},"./node_modules/lodash/union.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/union.js ***!
  \**************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseFlatten */"./node_modules/lodash/_baseFlatten.js"),o=n(/*! ./_baseRest */"./node_modules/lodash/_baseRest.js"),u=n(/*! ./_baseUniq */"./node_modules/lodash/_baseUniq.js"),i=n(/*! ./isArrayLikeObject */"./node_modules/lodash/isArrayLikeObject.js"),s=o((function(e){return u(r(e,1,i,!0))}));e.exports=s},"./node_modules/lodash/uniqueId.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/uniqueId.js ***!
  \*****************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./toString */"./node_modules/lodash/toString.js"),o=0;e.exports=function(e){var t=++o;return r(e)+t}},"./node_modules/lodash/values.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/values.js ***!
  \***************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_baseValues */"./node_modules/lodash/_baseValues.js"),o=n(/*! ./keys */"./node_modules/lodash/keys.js");e.exports=function(e){return null==e?[]:r(e,o(e))}},"./node_modules/lodash/zipObject.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/zipObject.js ***!
  \******************************************/
/*! no static exports found */function(e,t,n){var r=n(/*! ./_assignValue */"./node_modules/lodash/_assignValue.js"),o=n(/*! ./_baseZipObject */"./node_modules/lodash/_baseZipObject.js");e.exports=function(e,t){return o(e||[],t||[],r)}},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./src/autoflow.constants.ts":
/*!***********************************!*\
  !*** ./src/autoflow.constants.ts ***!
  \***********************************/
/*! exports provided: AutoFlowConstants */function(e,t,n){"use strict";n.r(t),n.d(t,"AutoFlowConstants",(function(){return r}));const r={debugEnabled:!0,about:{version:"0.1.0"},visual:{minPx:75},defaults:{dataMapping:"table",selection:{solidOpacity:1,transparentOpacity:.4},features:{contextMenu:!1,filterOtherVisuals:!0,proFeatures:{export:{exportToSvg:!0,exportToGliffy:!0},progressBar:!0,nodeUrl:!0}},graph:{nodesep:20,edgesep:10,ranksep:50,rankdir:"LR",align:null,marginx:0,marginy:0},node:{showNodeProgressbar:!0,showNodeUrl:!0,showNodeDescription:!0,backgroundColor:"#fff",backgroundTransparency:1,border:!0,borderColor:"#000",borderStrokeWidth:2,borderStyle:"solid",textAlignment:"left",font:{size:11,family:'"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif',colour:"#777777"},width:30,height:20,rx:3,ry:3,padding:0,urlIconZoom:.3},edge:{edgeColor:"#0d000d",edgeStyle:"solid",edgeWidth:2,edgeCalcMethod:1},viewport:{width:1080,height:768,background:"FFF"},export:{nodeSize:"avg"}},colors:["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"]}},"./src/autoflow.debugger.ts":
/*!**********************************!*\
  !*** ./src/autoflow.debugger.ts ***!
  \**********************************/
/*! exports provided: Debugger */function(e,t,n){"use strict";n.r(t),n.d(t,"Debugger",(function(){return r}));class r{constructor(e){this.enabled=e}clear(){this.enabled&&console.clear()}heading(e){this.enabled&&console.log(`\n====================\n${e}\n====================`)}footer(){this.enabled&&console.log("====================")}log(...e){this.enabled&&console.log("|\t",...e)}profileStart(){this.enabled&&(this.log("Profiling started."),this.startTime=performance.now())}reportExecutionTime(){this.enabled&&(this.startTime?(this.lastCheckTime&&this.log((performance.now()-this.lastCheckTime).toLocaleString()+" ms elapsed since last report"),this.log((performance.now()-this.startTime).toLocaleString()+" ms total execution time since profile start"),this.lastCheckTime=performance.now()):this.log("Unable to get execution time. Did you start profiling higher up in your code?"))}getSummary(e){return this.enabled?(this.reportExecutionTime(),{name:e,duration:this.lastCheckTime-this.startTime,startTime:this.startTime,endTime:this.lastCheckTime}):null}}},"./src/autoflow.ts":
/*!*************************!*\
  !*** ./src/autoflow.ts ***!
  \*************************/
/*! exports provided: AutoFlow */function(e,t,n){"use strict";n.r(t),n.d(t,"AutoFlow",(function(){return c}));var r=n(/*! d3 */"./node_modules/d3/index.js"),o=n(/*! dagre-d3 */"./node_modules/dagre-d3/index.js"),u=n(/*! ./autoflow.constants */"./src/autoflow.constants.ts"),i=n(/*! ./autoflow.debugger */"./src/autoflow.debugger.ts"),s=n(/*! ./export/autoflow.export */"./src/export/autoflow.export.ts"),a=n(/*! ./viewModel/dataMapper */"./src/viewModel/dataMapper.ts");class c{constructor(e,t){t=t||{},console.log("initializating AutoFlow..."),this.container=e,this.hostOptions=t&&t.viewport?t:{viewport:Object.assign({},u.AutoFlowConstants.defaults.viewport),node:Object.assign({},u.AutoFlowConstants.defaults.node),edge:Object.assign({},u.AutoFlowConstants.defaults.edge)},this.width=this.hostOptions.viewport.width||1920,this.height=this.hostOptions.viewport.height||1080,this.margin={top:0,right:0,bottom:0,left:0},this.graphOptions={graph:{nodesep:20,edgesep:20,ranksep:50,rankdir:"LR",marginx:0,marginy:0},node:{width:30,height:20},edge:{strokeWidth:2}},this.graphOptions=Object.assign(Object.assign({},this.graphOptions),u.AutoFlowConstants.defaults),this.mapper=new a.DataMapper(this.hostOptions,this.graphOptions),this.logger=new i.Debugger(u.AutoFlowConstants.debugEnabled),this.toolTipService=t.tooltipServiceWrapper,this.graph=null,this.exportUtil=null}version(){return u.AutoFlowConstants.about.version}renderFlow(e){let t=this;this.graph=new o.graphlib.Graph({directed:!0,compound:!0}),u.AutoFlowConstants.defaults.features.proFeatures.export.exportToGliffy&&new s.AutoFlowExport(this.container,this.graph,this.mapper.getSchema(null,this.hostOptions));let n=this.graph.setGraph(t.graphOptions.graph);return n.setDefaultEdgeLabel(()=>({})),n.graph().transition=e=>e.transition().duration(500),this.logger.log("mapping nodes..."),e.nodes.forEach(e=>{n.setNode(e.uuid,{rx:this.graphOptions.node.rx,ry:this.graphOptions.node.ry,padding:this.graphOptions.node.padding,data:e}),"parent"in e&&n.setParent(e.uuid,e.parent)}),n.nodes().forEach(e=>{let t=n.node(e);0===n.children(e).length?(t.labelType="html",t.label=t.data.nodeHTML):(t.clusterLabelPos="top",t.labelType="html",t.label='<div style="font-size:1em;">'+t.data.SourceName+"</div>",t.style="fill: #e3e7e8; stroke: #737778; stroke-width: 2px;")}),this.logger.log("mapping edges..."),e.edges.forEach(e=>{n.setEdge(e.v.uuid,e.w.uuid,{curve:r.curveBasis,style:t.mapper.getEdgeStyle(e),arrowheadStyle:"fill:"+this.graphOptions.edge.edgeColor}).lineInterpolate="basis"}),n}update(e,t){this.logger.log("autoflow update() calling..."),t=this.mapper.getSchema(t,this.hostOptions);let n=this.mapper.mapData(e,t);this.logger.log(e),this.logger.log(n),r.select("svg").remove();let i=r.select(this.container).style("background",this.graphOptions.viewport.background).append("svg").attr("width",this.width+this.margin.left+this.margin.right).attr("height",this.height+this.margin.top+this.margin.bottom),s=i.append("g").attr("transform","translate("+this.margin.left+","+this.margin.top+")"),a=r.zoom().on("zoom",()=>{s.attr("transform",r.event.transform)});i.call(a);let c=this.renderFlow(n);this.render=new o.render,this.render(s,c),i.selectAll("g.node rect").style("stroke",this.graphOptions.node.borderColor).style("stroke-width",this.graphOptions.node.borderStrokeWidth).attr("id",e=>"node_"+e),i.selectAll("g.edgePath path").attr("id",e=>"e-"+e.v+"_"+e.w),i.selectAll("g.edgePath").attr("data-source",e=>e.v).attr("data-target",e=>e.w),i.selectAll("g.edgeLabel g").attr("id",e=>"label_e-"+e.v+"_"+e.w),c.nodes().forEach(e=>{c.node(e).customId="node_"+e}),c.edges().forEach(e=>{c.edge(e.v,e.w).customId="e-"+e.v+"_"+e.w});function d(e,t){let n=e.x,r=e.y,o=t.x-n,u=t.y-r,i=+document.querySelector("#"+e.customId).getAttribute("width")/2,s=+document.querySelector("#"+e.customId).getAttribute("height")/2,a=0,c=0;return Math.abs(u)*i>Math.abs(o)*s?(u<0&&(s=-s),a=0===u?0:s*o/u,c=s):(o<0&&(i=-i),a=i,c=0===o?0:i*u/o),{x:n+a,y:r+c}}i.selectAll("g.node").call(r.drag().on("start",(function(e){r.event.sourceEvent.stopPropagation(),r.select(this).select("rect").classed("active",!0)})).on("end",(function(e){r.event.sourceEvent.stopPropagation(),r.select(this).select("rect").classed("active",!1)})).on("drag",(function(e){let t=r.select(this),n=c.node(e),o=n.x,i=n.y;n.x+=r.event.dx,n.y+=r.event.dy,t.attr("transform","translate("+n.x+","+n.y+")");let s=n.x-o,a=n.y-i;c.edges().forEach(t=>{if(t.v==e||t.w==e){let e=c.edge(t.v,t.w);!function(e,t,n){e.points.forEach(e=>{e.x=e.x+t,e.y=e.y+n})}(c.edge(t.v,t.w),s,a),r.select("#"+e.customId).attr("d",function(e,t){let n=function(e,t){return{1:(e,t)=>{let n=[],r=e.edge(t.v,t.w),o=e.node(t.v),u=e.node(t.w);return n=r.points.slice(1,r.points.length-1),n.unshift(d(o,n[0])),n.push(d(u,n[n.length-1])),n},2:(e,t)=>{let n=[],o=(e.edge(t.v,t.w),e.node(t.v)),u=e.node(t.w);u.width=r.select("#"+u.customId).attr("width"),o.width=r.select("#"+o.customId).attr("width");let i={x:u.x,y:u.y},s={x:o.x,y:o.y};return i.x-=u.width/2+2,s.x+=o.width/2+2,n.push(s),n.push({x:s.x+o.width/8,y:s.y}),n.push({x:i.x+u.width/8,y:i.y}),n.push(i),n}}[u.AutoFlowConstants.defaults.edge.edgeCalcMethod](e,t)}(e,t);return r.line().x(e=>e.x).y(e=>e.y).curve(r.curveBasis)(n)}(c,t));let n=document.querySelector("#label_"+e.customId),o=n.getAttribute("transform");if(""!=o){let e=/translate\(\s*([^\s,)]+)[ ,]?([^\s,)]+)?/.exec(o),t=parseInt(e[1])+s,r=parseInt(e[2])+a||a;n.setAttribute("transform","translate("+t+","+r+")")}}})}))).on("mouseover",(function(e,t){let n=r.select(this);c.node(e);n.select("rect").classed("selected",!0),c.predecessors(e)&&c.predecessors(e).forEach(e=>{})})).on("mouseout",(function(e,t){let n=r.select(this);c.node(e);n.select("rect").classed("selected",!1)}));let l=function(e,t){return e>t?1:t/e};this.logger.log("svg.w/h:"+i.attr("width")+":"+i.attr("height")),this.logger.log("g.w/g.h:"+c.graph().width+":"+c.graph().height);let f=l(c.graph().width,i.attr("width")),h=l(c.graph().height,i.attr("height")),m=.9*(f<h?f:h);this.logger.log("final Scale:"+m),m=m>2.2?2.2:m,i.call(a.transform,r.zoomIdentity.translate((+i.attr("width")-c.graph().width*m)/2,(+i.attr("height")-c.graph().height*m)/2).scale(m)),i.attr("height",this.height)}}},"./src/export/autoflow.export.ts":
/*!***************************************!*\
  !*** ./src/export/autoflow.export.ts ***!
  \***************************************/
/*! exports provided: AutoFlowExport */function(e,t,n){"use strict";n.r(t),n.d(t,"AutoFlowExport",(function(){return u}));var r=n(/*! lodash */"./node_modules/lodash/lodash.js"),o=n(/*! ../autoflow.constants */"./src/autoflow.constants.ts");class u{constructor(e,t,n){this.container=e,this.graph=t,this.schema=n,this.node_height=o.AutoFlowConstants.defaults.node.height,this.node_width=o.AutoFlowConstants.defaults.node.width;this.addExportMenu(this)}addExportMenu(e){let t=document.getElementsByClassName("dropup");for(;t.length>0;)t[0].remove();var n=document.createElement("div");n.classList.add("dropup"),n.innerHTML='<button class="dropbtn">Export</button>\n                                <div class="dropup-content">\n                                    <a class="export_to_gliffy" href="#">Gliffy</a>\n                                    <a class="export_to_svg" href="#">SVG</a>\n                                </div>',e.container.appendChild(n),document.body.addEventListener("click",(function(t){t.target&&t.target.classList.contains("export_to_gliffy")&&e.getExportGliffy()}))}getGliffyString(){let e=this,t=0,n=0;if("default"!=o.AutoFlowConstants.defaults.export.nodeSize){let o=e.graph.nodes().map(t=>{let n=e.graph.node(t);return{width:1*+document.querySelector("#"+n.customId).getAttribute("width"),height:1*+document.querySelector("#"+n.customId).getAttribute("height")}});t=r.meanBy(o,e=>e.width),n=r.meanBy(o,e=>e.height)}let u=e.graph.nodes().map((r,u)=>{let i=e.graph.node(r);return"default"==o.AutoFlowConstants.defaults.export.nodeSize&&(t=+document.querySelector("#"+i.customId).getAttribute("width"),n=+document.querySelector("#"+i.customId).getAttribute("height")),i.id=u+1,i.width=t,i.height=n,e.getGliffyNodeJsonString(e.graph.node(r))}).join(","),i=e.graph.edges().map(t=>e.getEdgeJsonString(t));return`{\n            "contentType": "application/gliffy+json",\n            "version": "1.3",\n            "stage": {\n                "background": "#FFFFFF",\n                "width": 570,\n                "height": 151,\n                "nodeIndex": 10,\n                "autoFit": true,\n                "exportBorder": false,\n                "gridOn": true,\n                "snapToGrid": true,\n                "drawingGuidesOn": true,\n                "pageBreaksOn": false,\n                "printGridOn": false,\n                "printPaper": null,\n                "printShrinkToFit": false,\n                "printPortrait": false,\n                "maxWidth": 5000,\n                "maxHeight": 5000,\n                "themeData": null,\n                "imageCache": {},\n                "viewportType": "default",\n                "fitBB": {\n                    "min": {\n                        "x": 80,\n                        "y": 90.5\n                    },\n                    "max": {\n                        "x": 570,\n                        "y": 150.5\n                    }\n                },\n                "printModel": {\n                    "pageSize": "Letter",\n                    "portrait": true,\n                    "fitToOnePage": false,\n                    "displayPageBreaks": false\n                },\n                "objects": [${u+(i?","+i:"")}],\n                    "layers": [\n                        {\n                            "guid": "ONU1t9vdHwBH",\n                            "order": 0,\n                            "name": "Layer 0",\n                            "active": true,\n                            "locked": false,\n                            "visible": true,\n                            "nodeIndex": 20\n                        }\n                    ],\n                    "shapeStyles": {},\n                    "lineStyles": {},\n                    "textStyles": {}\n                },\n                "metadata": {\n                    "title": "untitled",\n                    "revision": 0,\n                    "exportBorder": false,\n                    "loadPosition": "default",\n                    "libraries": [\n                        "com.gliffy.libraries.basic.basic_v1.default"\n                    ],\n                    "autosaveDisabled": false,\n                    "lastSerialized": 1597808589601\n                },\n                "embeddedResources": {\n                    "index": 0,\n                    "resources": []\n                }\n            }`}getNodeText(e){let t,n;return t=`<span style="font-family:Arial;font-size:12px;text-decoration:none;">${e.data.description[0]}</span>`,n=e.data.description[1]&&o.AutoFlowConstants.defaults.node.showNodeDescription?`<br/><span style="font-family:Arial;font-size:10px;text-decoration:none;">${e.data.description[1]}</span>`:"",`<p style="text-align:center;">${t} ${n}</p>`}getNodeUrl(e){let t="";return this.schema.NodeUrl&&this.schema.NodeUrl.column&&e.data.data[this.schema.NodeUrl.column]&&(t=`,\n            {\n              "x": 0,\n              "y": 0,\n              "rotation": 0,\n              "id": ${2e4+e.data.idx},\n              "uid": null,\n              "order": 20,\n              "lockAspectRatio": false,\n              "lockShape": false,\n              "graphic": {\n                "type": "Link",\n                "Link": {\n                  "href": "${e.data.data[this.schema.NodeUrl.column]}",\n                  "renderIcon": true\n                }\n              },\n              "hidden": false,\n              "layerId": "ONU1t9vdHwBH",\n              "flipHorizontal": false,\n              "flipVertical": false\n            }`),t}getEdgeJsonString(e){if(!e)return"";let t=this.graph.node(e.v),n=this.graph.node(e.w);return`{\n            "x": 306,\n            "y": 82,\n            "rotation": 0,\n            "id": ${t.data.idx},\n            "width": 55,\n            "height": 29,\n            "uid": "com.gliffy.shape.basic.basic_v1.default.line",\n            "order": 27,\n            "lockAspectRatio": false,\n            "lockShape": false,\n            "constraints": {\n              "constraints": [],\n              "startConstraint": {\n                "type": "StartPositionConstraint",\n                "StartPositionConstraint": {\n                  "nodeId": ${t.data.idx},\n                  "py": 0.5,\n                  "px": 1\n                }\n              },\n              "endConstraint": {\n                "type": "EndPositionConstraint",\n                "EndPositionConstraint": {\n                  "nodeId": ${n.data.idx},\n                  "py": 0.7071067811865475,\n                  "px": 0\n                }\n              }\n            },\n            "graphic": {\n              "type": "Line",\n              "Line": {\n                "strokeWidth": 2,\n                "strokeColor": "#000000",\n                "fillColor": "none",\n                "dashStyle": null,\n                "hopType": null,\n                "startArrow": 0,\n                "endArrow": 2,\n                "startArrowRotation": "auto",\n                "endArrowRotation": "auto",\n                "interpolationType": "linear",\n                "cornerRadius": 10,\n                "controlPath": [],\n                "lockSegments": {},\n                "ortho": true\n              }\n            },\n            "linkMap": [],\n            "hidden": false,\n            "layerId": "ONU1t9vdHwBH",\n            "flipHorizontal": false,\n            "flipVertical": false\n          }`}getGliffyNodeJsonString(e){return`{\n            "x": ${e.x},\n            "y": ${e.y},\n            "rotation": 0.0,\n            "id": ${e.data.idx},\n            "width": ${e.width<this.node_width?this.node_width:e.width},\n            "height": ${e.height<this.node_height?this.node_height:e.height},\n            "uid":"com.gliffy.shape.basic.basic_v1.default.rectangle",\n            "order": 2,\n            "lockAspectRatio": false,\n            "lockShape": false,\n            "graphic":{\n                "type":"Shape",\n                "Shape":\n                    {\n                        "tid": "com.gliffy.stencil.rectangle.basic_v1",\n                        "strokeWidth": 2.0,\n                        "strokeColor": "#333333",\n                        "fillColor": "#FFFFFF",\n                        "gradient": false,\n                        "dashStyle": null,\n                        "dropShadow": false,\n                        "state": 0,\n                        "opacity": 1.0,\n                        "shadowX": 0.0,\n                        "shadowY": 0.0\n                    }\n                },\n                "linkMap":[],\n                "children":[\n                    {\n                        "x": 2.0,\n                        "y": 0.0,\n                        "rotation": 0.0,\n                        "id":${1e4+e.data.idx},\n                        "width": ${e.width-4},\n                        "height": ${e.height-4},\n                        "uid": null,\n                        "order": 7,\n                        "lockAspectRatio": false,\n                        "lockShape": false,\n                        "graphic": {\n                            "type": "Text",\n                            "Text": {\n                                "overflow": "none",\n                                "paddingTop": 8,\n                                "paddingRight": 0,\n                                "paddingBottom": 8,\n                                "paddingLeft": 0,\n                                "outerPaddingTop": 6,\n                                "outerPaddingRight": 6,\n                                "outerPaddingBottom": 2,\n                                "outerPaddingLeft": 6,\n                                "type": "fixed",\n                                "lineTValue": null,\n                                "linePerpValue": null,\n                                "cardinalityType": null,\n                                "html": "${this.getNodeText(e).replace(/"/g,'\\"')}",\n                                "rawHtml": false,\n                                "tid": null,\n                                "valign": "middle",\n                                "vposition": "none",\n                                "hposition": "none"\n                                }\n                            },\n                        "hidden": false,\n                        "layerId": "ONU1t9vdHwBH",\n                        "flipHorizontal": false,\n                        "flipVertical": false\n                    }${this.getNodeUrl(e)}\n                ],\n            "hidden": false,\n            "layerId": "ONU1t9vdHwBH",\n            "flipHorizontal": false,\n            "flipVertical": false\n            }`}downloadJson(e,t,n){var r=document.createElement("a"),o=new Blob([e],{type:n||"text/plain"});r.href=URL.createObjectURL(o),r.download=t,r.click()}getExportGliffy(){this.downloadJson(this.getGliffyString(),"gliffy.export.json.gliffy",null)}}},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */function(e,t,n){"use strict";n.r(t);let r=[{xSourceId:1,xSource:"A1#AA",xSourceGroup:"This is a long description",xProcessId:"proc_a",xProcess:"proc_a",xTargetId:100,xTarget:"A100#AA",xTargetGroup:"A",xNodeMeasure:90,xEdgeMeasure:4,xNodeLink:"http://www.google.com"},{xSourceId:2,xSource:"A2#AA",xSourceGroup:"A",xProcessId:"proc_a",xProcess:"proc_a",xTargetId:101,xTarget:"A101#AA",xTargetGroup:"A",xNodeMeasure:80,xEdgeMeasure:2,xNodeLink:"http://www.google.com"},{xSourceId:100,xSource:"A100#AA",xSourceGroup:"A",xProcessId:"proc_b",xProcess:"proc_b",xTargetId:101,xTarget:"A101#AA",xTargetGroup:"A",xNodeMeasure:70,xEdgeMeasure:3,xNodeLink:"http://www.twitter.com"},{xSourceId:101,xSource:"A101#AA",xSourceGroup:"A",xProcessId:"proc_c",xProcess:"proc_c",xTargetId:102,xTarget:"B102#AA",xTargetGroup:"B",xNodeMeasure:40,xEdgeMeasure:1},{xSourceId:102,xSource:"B102#AA",xSourceGroup:"B",xProcessId:"proc_d",xProcess:"proc_d",xTargetId:103,xTarget:"B103#AA",xTargetGroup:"B",xNodeMeasure:3,xEdgeMeasure:2},{xSourceId:104,xSource:"B104#AA",xSourceGroup:"B",xProcessId:"proc_d",xProcess:"proc_d",xTargetId:103,xTarget:"B103#AA",xTargetGroup:"B",xNodeMeasure:8,xEdgeMeasure:1,xNodeLink:"http://www.facebook.com"}];new(n(/*! ./autoflow */"./src/autoflow.ts").AutoFlow)(document.getElementById("autoflow-chart-div"),null).update(r,{SourceId:{column:"xSource",ref:"xSource"},SourceName:{column:"xSource",ref:"xSource"},SourceName2:{column:"xSourceGroup",ref:"xSourceGroup"},TargetId:{column:"xTarget",ref:"xTarget"},TargetName:{column:"xTarget",ref:"xTarget"},TargetName2:{column:"xTargetGroup",ref:"xTargetGroup"},Process:{column:null,ref:null},NodeType:{column:null,ref:null},SourceMeasure:{column:"xNodeMeasure",ref:"xNodeMeasure"},TargetMeasure:{column:null,ref:null},EdgeMeasure:{column:"xEdgeMeasure",ref:"xEdgeMeasure"},NodeUrl:{column:"xNodeLink",ref:"xNodeLink"}})},"./src/viewModel/dataMapper.ts":
/*!*************************************!*\
  !*** ./src/viewModel/dataMapper.ts ***!
  \*************************************/
/*! exports provided: DataMapper */function(e,t,n){"use strict";n.r(t),n.d(t,"DataMapper",(function(){return u}));var r=n(/*! ../autoflow.constants */"./src/autoflow.constants.ts"),o=n(/*! ../autoflow.debugger */"./src/autoflow.debugger.ts");class u{constructor(e,t){this.COLOR_SCHEMA={1:"#ffd47f",2:"#a0bc7a",3:"#64dfdf",4:"#b8f2e6",5:"#e0fbfc",0:"#ddd"},this.pbiOptions=e,this.graphOptions=t,this.totalNodeCount=0,this.totalEdgeCount=0,this.logger=new o.Debugger(r.AutoFlowConstants.debugEnabled),this.schema=null}getTotalNodeCount(){return this.totalNodeCount}getTotalEdgeCount(){return this.totalEdgeCount}replaceSpecialChar(e,t){return e.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi,t||"-").toLowerCase()}idify(e){return this.replaceSpecialChar(""+e,"_-_")}getColor(e){return this.COLOR_SCHEMA[e||0]}findNode(e,t){return e[t]}getNodeLabel(e,t,n){return e}getNodeMeasure(e,t){return e[t]}getNodeElement(e,t,n){let o=n.Name,u=n.Description,i=n.Measure,s=n.Url,a=[],c=document.createElement("div");c.classList.add("node-body"),c.style.minWidth=this.graphOptions.node.width+"px",c.style.minHeight=this.graphOptions.node.height+"px";let d=document.createElement("div");if(d.classList.add("node-content"),r.AutoFlowConstants.defaults.features.proFeatures.nodeUrl&&this.graphOptions.node.showNodeUrl&&s&&s.column&&t[s.column]){let e=document.createElement("a");e.classList.add("node-ref-link"),e.target="_blank",e.href=t[s.column],d.appendChild(e)}let l=document.createElement("span");if(l.appendChild(document.createTextNode(t[o.column]||e)),l.classList.add("node-content-label"),d.appendChild(l),a.push(t[o.column]||e),this.graphOptions.node.showNodeDescription&&u&&u.column&&t[u.column]){let e=document.createElement("div");e.appendChild(document.createTextNode(t[u.column])),e.classList.add("node-content-description"),d.appendChild(e),a.push(t[u.column])}if(r.AutoFlowConstants.defaults.features.proFeatures.progressBar&&this.graphOptions.node.showNodeProgressbar&&i&&i.column&&t[i.column]){let e=document.createElement("progress");e.classList.add("node-content-progress"),e.style.maxHeight=.3*this.graphOptions.node.height+"px",e.max=100,e.value=this.getNodeMeasure(t,i.column),d.appendChild(e)}return c.appendChild(d),{label:c,description:a}}getEdgeStyle(e){return`stroke:${this.graphOptions.edge.edgeColor}; stroke-width:${this.graphOptions.edge.showCustomStroke&&this.schema.EdgeMeasure?e.w.data[this.schema.EdgeMeasure.column]:this.graphOptions.edge.strokeWidth||1}px;`}mapData(e,t){let n={},r={};return this.logger.log("mapper.mapping data..."),e.forEach(e=>{let o=this.idify(e[t.SourceId.column]),u=this.idify(e[t.TargetId.column]),i=this.findNode(n,o)||{uuid:o,id:o,type:e.NodeType||"NODE",targetType:"source",data:e,idx:0,uuidMetaColumn:t.SourceId.column,header:null,url:null,selectionId:o,highlight:!1},{label:s,description:a}=this.getNodeElement(o,e,{Name:t.SourceName,Description:t.SourceName2,Measure:t.SourceMeasure,Url:t.NodeUrl});i.nodeHTML=s,i.description=a,i.color=this.getColor(e.color),n[o]=i;let c=this.findNode(n,u);if(!c){let{label:n,description:r}=this.getNodeElement(u,e,{Name:t.TargetName,Description:t.TargetName2,Measure:t.TargetMeasure});c={uuid:u,id:u,type:e[t.NodeType]||"NODE",targetType:"target",nodeHTML:n,description:r,color:this.getColor(e.color),data:e,idx:0,uuidMetaColumn:t.TargetId.column,header:null,url:null,selectionId:u,highlight:!1}}n[u]=c,r[o+"-"+u]={v:i,w:c,label:e[t.Process.column],data:e}}),this.nodes=Object.values(n).map((e,t)=>(e.idx=t+1,e)),this.edges=Object.values(r),{nodes:this.nodes,edges:this.edges}}getSchema(e,t){return this.schema=this.schema||(this.schema=e||this.getHostSchema(t))}getHostSchema(e){let t={};return e&&e.dataViews[0]&&e.dataViews[0].table&&e.dataViews[0].table.columns.forEach(e=>{Object.keys(e.roles).forEach(n=>{t[n]?t[n+"2"]={column:n,ref:e.displayName}:t[n]={column:n,ref:e.displayName}})}),t.SourceName=t.SourceName||t.SourceId,t.TargetName=t.TargetName||t.TargetId,t.Process=t.Process||{column:null,ref:null},t.SourceMeasure=t.SourceMeasure||{column:null,ref:null},t.TargetMeasure=t.TargetMeasure||{column:null,ref:null},t.NodeUrl=t.NodeUrl||{column:null,ref:null},this.logger.log(t),t}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9kZXZpYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9oaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lZGlhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NjYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zaHVmZmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc3VtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL2ZyZWVkbWFuRGlhY29uaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc2NvdHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdHJhbnNwb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdmFyaWFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9heGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2Nob3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9yaWJib24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL25lc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2JsdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29udG91cnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2RlbnNpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2RyYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvbm9kcmFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2F1dG9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9iYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9ib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2VsYXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcG9seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvYmxvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2ltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3htbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NlbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NvbGxpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvamlnZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL21hbnlCb2R5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvcmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvc2ltdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25Sb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hZGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jYXJ0ZXNpYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvYW50aW1lcmlkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvZXh0ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVjdGFuZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVqb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvZ3JhdGljdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvYm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvaW50RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9seWdvbkNvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYWxiZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYWxiZXJzVXNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1YWxBcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljQ29uZm9ybWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0VxdWlkaXN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY3lsaW5kcmljYWxFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZXF1aXJlY3Rhbmd1bGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9uYXR1cmFsRWFydGgxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vb3J0aG9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3JvdGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYWNjZXNzb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NsdXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2Rlc2NlbmRhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2VhY2hCZWZvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9sZWF2ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xpbmtzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9lbmNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9zaWJsaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvc3RyYXRpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2RpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3Jlc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc2xpY2VEaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvc3F1YXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Rpc2NyZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaGNsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaHNsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvaHVsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3F1YWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvYmF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9leHBvbmVudGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9pcndpbkhhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvbG9nTm9ybWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL0FjY2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0Mi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1RhYmxlYXUxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVQdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUHVCdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvWWxHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2NpdmlkaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvc2luZWJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3R1cmJvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdmlyaWRpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvT3Jhbmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1JlZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9kaXZlcmdpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xpbmVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL25pY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zZXF1ZW50aWFsUXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9zeW1sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aHJlc2hvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aWNrRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3V0Y1RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbG9jYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tb3VzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zb3VyY2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy90b3VjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy90b3VjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhUmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc09wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxPcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21DbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhckNsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL21vbm90b25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbmF0dXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3N0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lUmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbGluay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L2RpdmVyZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9leHBhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvbm9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9zaWxob3VldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L3dpZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FwcGVhcmFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9hc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9kZXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvaW5zaWRlT3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvbm9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9wb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BvaW50UmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2Nyb3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2RpYW1vbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3F1YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL3N0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvd3llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvYWN0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2Vhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHRUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9CZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9EaWFncmFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9FZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9SZWRCbGFja1RyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL3Zvcm9ub2kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMvZGlzdC9wYWNrYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9hcnJvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9jcmVhdGUtY2x1c3RlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9jcmVhdGUtZWRnZS1sYWJlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9jcmVhdGUtZWRnZS1wYXRocy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbGliL2NyZWF0ZS1ub2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbGliL2QzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvZGFncmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9ncmFwaGxpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbGliL2ludGVyc2VjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbGliL2ludGVyc2VjdC9pbnRlcnNlY3QtY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvaW50ZXJzZWN0L2ludGVyc2VjdC1lbGxpcHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvaW50ZXJzZWN0L2ludGVyc2VjdC1saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvaW50ZXJzZWN0L2ludGVyc2VjdC1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvaW50ZXJzZWN0L2ludGVyc2VjdC1wb2x5Z29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvaW50ZXJzZWN0L2ludGVyc2VjdC1yZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvbGFiZWwvYWRkLWh0bWwtbGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9sYWJlbC9hZGQtbGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9sYWJlbC9hZGQtc3ZnLWxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvbGFiZWwvYWRkLXRleHQtbGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9wb3NpdGlvbi1jbHVzdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbGliL3Bvc2l0aW9uLWVkZ2UtbGFiZWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvcG9zaXRpb24tbm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi9zaGFwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlLWQzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS1kMy9saWIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbm9kZV9tb2R1bGVzL2QzL2Rpc3QvcGFja2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUtZDMvbm9kZV9tb2R1bGVzL2QzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2FjeWNsaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9hZGQtYm9yZGVyLXNlZ21lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvY29vcmRpbmF0ZS1zeXN0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9kYXRhL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2dyYXBobGliLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvZ3JlZWR5LWZhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2xheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL25lc3RpbmctZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9ub3JtYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9vcmRlci9hZGQtc3ViZ3JhcGgtY29uc3RyYWludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9vcmRlci9iYXJ5Y2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvb3JkZXIvYnVpbGQtbGF5ZXItZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9vcmRlci9jcm9zcy1jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvb3JkZXIvaW5pdC1vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL3Jlc29sdmUtY29uZmxpY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvb3JkZXIvc29ydC1zdWJncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL29yZGVyL3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9wYXJlbnQtZHVtbXktY2hhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYWdyZS9saWIvcG9zaXRpb24vYmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3JhbmsvZmVhc2libGUtdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3JhbmsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi9yYW5rL25ldHdvcmstc2ltcGxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3JhbmsvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFncmUvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhZ3JlL2xpYi92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9jb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2Rmcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9kaWprc3RyYS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGlqa3N0cmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZmluZC1jeWNsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZmxveWQtd2Fyc2hhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvaXMtYWN5Y2xpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9wb3N0b3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvcHJlb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvcHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy90YXJqYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvdG9wc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2RhdGEvcHJpb3JpdHktcXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9ncmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlc1dpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FzY2lpU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUV4dHJlbXVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYU4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VMdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU9yZGVyQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVBpY2tCeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU29ydEJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmlxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVppcE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZURhdGFWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lUmVnRXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb21wYXJlQXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvbXBhcmVNdWx0aXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVGaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVJhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mbGF0UmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc1VuaWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdW5pY29kZVNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2Nsb25lRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmluZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZvckVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwVmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWluQnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcGljay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc29ydEJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC96aXBPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9hdXRvZmxvdy5jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F1dG9mbG93LmRlYnVnZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9hdXRvZmxvdy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZXhwb3J0L2F1dG9mbG93LmV4cG9ydC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdNb2RlbC9kYXRhTWFwcGVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXJyYXkiLCJBcnJheSIsInNsaWNlIiwibWFwIiwiYSIsImIiLCJOYU4iLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RSaWdodCIsInJpZ2h0IiwiYmlzZWN0TGVmdCIsImxlZnQiLCJmIiwiY29tcGFyZSIsImxlbmd0aCIsIngiLCJsbyIsImhpIiwibWlkIiwiaTAiLCJpMSIsInZhbHVlMCIsIm4wIiwidmFsdWVzMCIsIm4xIiwidmFsdWVzMSIsInZhbHVlcyIsInJlZHVjZSIsInYiLCJNYXRoIiwic3FydCIsIm1pbiIsIm1heCIsInZhbHVlb2YiLCJkb21haW4iLCJ0aHJlc2hvbGQiLCJoaXN0b2dyYW0iLCJkYXRhIiwieHoiLCJ4MCIsIngxIiwidHoiLCJpc0FycmF5IiwiY2VpbCIsInNoaWZ0IiwicG9wIiwiYmluIiwiYmlucyIsInB1c2giLCJfIiwiYXJndW1lbnRzIiwidGhyZXNob2xkcyIsInN1bSIsImlzTmFOIiwibnVtYmVycyIsInNvcnQiLCJtZXJnZWQiLCJhcnJheXMiLCJqIiwicGFpciIsInBhaXJzIiwiaW5kZXhlcyIsInBlcm11dGVzIiwiZmxvb3IiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwicmFuZ2UiLCJ4aSIsInhqIiwicmFuZG9tIiwicG93IiwibG9nIiwiTE4yIiwiZTEwIiwiZTUiLCJlMiIsInRpY2tJbmNyZW1lbnQiLCJjb3VudCIsInBvd2VyIiwiTE4xMCIsImVycm9yIiwidGlja1N0ZXAiLCJzdGVwMCIsImFicyIsInN0ZXAxIiwicmV2ZXJzZSIsInRpY2tzIiwiaXNGaW5pdGUiLCJtYXRyaXgiLCJ0cmFuc3Bvc2UiLCJyb3ciLCJkZWx0YSIsIm1lYW4iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInkiLCJudW1iZXIiLCJzY2FsZSIsImNlbnRlciIsIm9mZnNldCIsImJhbmR3aWR0aCIsInJvdW5kIiwiZW50ZXJpbmciLCJ0aGlzIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsInRpY2tBcmd1bWVudHMiLCJ0aWNrVmFsdWVzIiwidGlja0Zvcm1hdCIsInRpY2tTaXplSW5uZXIiLCJ0aWNrU2l6ZU91dGVyIiwidGlja1BhZGRpbmciLCJrIiwidHJhbnNmb3JtIiwiY29udGV4dCIsImFwcGx5IiwiZm9ybWF0Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwiY29weSIsInNlbGVjdGlvbiIsInBhdGgiLCJzZWxlY3RBbGwiLCJ0aWNrIiwib3JkZXIiLCJ0aWNrRXhpdCIsImV4aXQiLCJ0aWNrRW50ZXIiLCJlbnRlciIsImFwcGVuZCIsImF0dHIiLCJsaW5lIiwic2VsZWN0IiwidGV4dCIsIm1lcmdlIiwiaW5zZXJ0IiwidHJhbnNpdGlvbiIsImdldEF0dHJpYnV0ZSIsInBhcmVudE5vZGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJlYWNoIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJudW1iZXIxIiwiZSIsIm51bWJlcjIiLCJ0b3VjaGVyIiwiaWRlbnRpZmllciIsInRhcmdldCIsInRvdWNoZXMiLCJYIiwiaGFuZGxlcyIsInR5cGUiLCJpbnB1dCIsIm91dHB1dCIsInh5IiwiWSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJ3IiwibnciLCJuZSIsInNlIiwic3ciLCJmbGlwWCIsImZsaXBZIiwic2lnbnNYIiwic2lnbnNZIiwiZGVmYXVsdEZpbHRlciIsImN0cmxLZXkiLCJidXR0b24iLCJkZWZhdWx0RXh0ZW50Iiwic3ZnIiwib3duZXJTVkdFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwidmlld0JveCIsImJhc2VWYWwiLCJ3aWR0aCIsImhlaWdodCIsImRlZmF1bHRUb3VjaGFibGUiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsImxvY2FsIiwibm9kZSIsIl9fYnJ1c2giLCJlbXB0eSIsImV4dGVudCIsImJydXNoU2VsZWN0aW9uIiwic3RhdGUiLCJkaW0iLCJicnVzaFgiLCJicnVzaCIsImJydXNoWSIsInRvdWNoZW5kaW5nIiwidG91Y2hhYmxlIiwia2V5cyIsImxpc3RlbmVycyIsImhhbmRsZVNpemUiLCJncm91cCIsImluaXRpYWxpemUiLCJoYW5kbGUiLCJyZWRyYXciLCJvbiIsInN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsInN0eWxlIiwiZW1pdHRlciIsInRoYXQiLCJhcmdzIiwiY2xlYW4iLCJFbWl0dGVyIiwiYWN0aXZlIiwidzAiLCJ3MSIsImUwIiwiZTEiLCJzMCIsInMxIiwibW92aW5nIiwibG9ja1giLCJsb2NrWSIsIl9fZGF0YV9fIiwibWV0YUtleSIsImFsdEtleSIsInNpZ25YIiwic2lnblkiLCJXIiwiTiIsIkUiLCJTIiwiZHgiLCJkeSIsInNoaWZ0aW5nIiwic2hpZnRLZXkiLCJwb2ludGVyIiwiY2hhbmdlZFRvdWNoZXMiLCJwb2ludDAiLCJwb2ludCIsImVtaXQiLCJiZWZvcmVzdGFydCIsIm1vdmVkIiwiZW5kZWQiLCJ2aWV3Iiwia2V5ZG93bmVkIiwia2V5dXBwZWQiLCJwb2ludDEiLCJtb3ZlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImVuZCIsImtleUNvZGUiLCJ0d2VlbiIsInNlbGVjdGlvbjAiLCJzZWxlY3Rpb24xIiwiY2xlYXIiLCJzdGFydGluZyIsImtleU1vZGlmaWVycyIsIm5vcHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImNvbXBhcmVWYWx1ZSIsInNvdXJjZSIsInBhZEFuZ2xlIiwic29ydEdyb3VwcyIsInNvcnRTdWJncm91cHMiLCJzb3J0Q2hvcmRzIiwiY2hvcmQiLCJncm91cFN1bXMiLCJncm91cEluZGV4Iiwic3ViZ3JvdXBJbmRleCIsImNob3JkcyIsImdyb3VwcyIsInN1Ymdyb3VwcyIsImZvckVhY2giLCJkaSIsImRqIiwiYTAiLCJhMSIsImluZGV4Iiwic3ViaW5kZXgiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJjb3MiLCJzaW4iLCJwaSIsIlBJIiwiaGFsZlBpIiwidGF1IiwiZGVmYXVsdFNvdXJjZSIsImRlZmF1bHRUYXJnZXQiLCJkZWZhdWx0UmFkaXVzIiwicmFkaXVzIiwiZGVmYXVsdFN0YXJ0QW5nbGUiLCJkZWZhdWx0RW5kQW5nbGUiLCJyaWJib24iLCJidWZmZXIiLCJhcmd2Iiwic3IiLCJzYTAiLCJzYTEiLCJzeDAiLCJzeTAiLCJ0ciIsInRhMCIsInRhMSIsIm1vdmVUbyIsImFyYyIsInF1YWRyYXRpY0N1cnZlVG8iLCJjbG9zZVBhdGgiLCJlbnRyaWVzIiwicHJlZml4IiwiTWFwIiwic2V0IiwiY29uc3RydWN0b3IiLCJoYXMiLCJzaXplIiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwic29ydFZhbHVlcyIsInJvbGx1cCIsIm5lc3QiLCJzb3J0S2V5cyIsImRlcHRoIiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0Iiwia2V5VmFsdWUiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsInNvcnRLZXkiLCJTZXQiLCJwcm90byIsImFkZCIsIkNvbG9yIiwiZGFya2VyIiwiYnJpZ2h0ZXIiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleCIsInJlUmdiSW50ZWdlciIsIlJlZ0V4cCIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJjb2xvciIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsImV4ZWMiLCJwYXJzZUludCIsInJnYm4iLCJSZ2IiLCJyZ2JhIiwiaHNsYSIsImciLCJyZ2JDb252ZXJ0Iiwib3BhY2l0eSIsInJnYl9mb3JtYXRIZXgiLCJoZXgiLCJyZ2JfZm9ybWF0UmdiIiwidG9TdHJpbmciLCJoIiwiSHNsIiwiaHNsQ29udmVydCIsImhzbCIsImhzbDJyZ2IiLCJtMSIsIm0yIiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsIkEiLCJCIiwiQyIsIkQiLCJFRCIsIkVCIiwiQkNfREEiLCJjdWJlaGVsaXhDb252ZXJ0IiwiQ3ViZWhlbGl4IiwiYmwiLCJhdGFuMiIsImN1YmVoZWxpeCIsImNvc2giLCJzaW5oIiwiZXh0ZW5kIiwicGFyZW50IiwiZGVmaW5pdGlvbiIsImZhY3RvcnkiLCJ0MSIsInQyIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImhjbDJsYWIiLCJ6IiwicmdiMmxyZ2IiLCJ4eXoybGFiIiwibGFiIiwibGFiMnh5eiIsImxyZ2IycmdiIiwiaGNsQ29udmVydCIsImxjaCIsImhjbCIsImRlZzJyYWQiLCJyYWQyZGVnIiwicmluZyIsImFyZWEiLCJibHVyWCIsImJsdXJZIiwicmluZ0NvbnRhaW5zIiwiY29udGFpbnMiLCJ5aSIsInBqIiwieWoiLCJzZWdtZW50Q29udGFpbnMiLCJxIiwiY29sbGluZWFyIiwiaG9sZSIsImNhc2VzIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91cnMiLCJjb250b3VyIiwicG9seWdvbnMiLCJob2xlcyIsImNhbGxiYWNrIiwidDAiLCJ0MyIsImZyYWdtZW50QnlTdGFydCIsImZyYWdtZW50QnlFbmQiLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjb25jYXQiLCJ1bnNoaWZ0IiwiaXNvcmluZ3MiLCJwb2x5Z29uIiwiY29vcmRpbmF0ZXMiLCJ2MCIsInh0IiwieXQiLCJ2MSIsIl8wIiwiXzEiLCJFcnJvciIsImRlZmF1bHRYIiwiZGVmYXVsdFkiLCJkZWZhdWx0V2VpZ2h0Iiwid2VpZ2h0IiwiZGVuc2l0eSIsIkZsb2F0MzJBcnJheSIsIndpIiwiZ2VvbWV0cnkiLCJ0cmFuc2Zvcm1Qb2x5Z29uIiwidHJhbnNmb3JtUmluZyIsInRyYW5zZm9ybVBvaW50IiwicmVzaXplIiwiY2VsbFNpemUiLCJub29wIiwiZGlzcGF0Y2giLCJ0ZXN0IiwiRGlzcGF0Y2giLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVzIiwic3BsaXQiLCJpbmRleE9mIiwidHlwZW5hbWUiLCJUIiwiZGVmYXVsdENvbnRhaW5lciIsImRlZmF1bHRTdWJqZWN0IiwibW91c2Vkb3dueCIsIm1vdXNlZG93bnkiLCJtb3VzZW1vdmluZyIsImNvbnRhaW5lciIsInN1YmplY3QiLCJnZXN0dXJlcyIsImNsaWNrRGlzdGFuY2UyIiwiZHJhZyIsIm1vdXNlZG93bmVkIiwidG91Y2hzdGFydGVkIiwiZ2VzdHVyZSIsIm1vdXNlbW92ZWQiLCJtb3VzZXVwcGVkIiwiY2xpZW50WCIsImNsaWVudFkiLCJtb3VzZSIsImlkIiwic3VibGlzdGVuZXJzIiwicDAiLCJjbGlja0Rpc3RhbmNlIiwiRHJhZ0V2ZW50IiwieWVzZHJhZyIsIm5vY2xpY2siLCJyb290IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJNb3pVc2VyU2VsZWN0IiwiX19ub3NlbGVjdCIsImF1dG9UeXBlIiwibWF0Y2giLCJmaXh0eiIsInJlcGxhY2UiLCJEYXRlIiwiZ2V0SG91cnMiLCJjc3YiLCJjc3ZQYXJzZSIsInBhcnNlIiwiY3N2UGFyc2VSb3dzIiwicGFyc2VSb3dzIiwiY3N2Rm9ybWF0IiwiY3N2Rm9ybWF0Qm9keSIsImZvcm1hdEJvZHkiLCJjc3ZGb3JtYXRSb3dzIiwiZm9ybWF0Um93cyIsImNzdkZvcm1hdFJvdyIsImZvcm1hdFJvdyIsImNzdkZvcm1hdFZhbHVlIiwiZm9ybWF0VmFsdWUiLCJFT0wiLCJFT0YiLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwiRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsImluZmVyQ29sdW1ucyIsInJvd3MiLCJjb2x1bW5TZXQiLCJjb2x1bW4iLCJwYWQiLCJmb3JtYXREYXRlIiwiZGF0ZSIsInllYXIiLCJob3VycyIsImdldFVUQ0hvdXJzIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwicmVGb3JtYXQiLCJkZWxpbWl0ZXIiLCJERUxJTUlURVIiLCJjaGFyQ29kZUF0IiwiSSIsImVvZiIsImVvbCIsInRva2VuIiwicHJlZm9ybWF0Qm9keSIsImNvbnZlcnQiLCJjdXN0b21Db252ZXJ0ZXIiLCJ0c3YiLCJ0c3ZQYXJzZSIsInRzdlBhcnNlUm93cyIsInRzdkZvcm1hdCIsInRzdkZvcm1hdEJvZHkiLCJ0c3ZGb3JtYXRSb3dzIiwidHN2Rm9ybWF0Um93IiwidHN2Rm9ybWF0VmFsdWUiLCJiYWNrSW4iLCJjdXN0b20iLCJvdmVyc2hvb3QiLCJiYWNrT3V0IiwiYmFja0luT3V0IiwiYjAiLCJib3VuY2VJbiIsImJvdW5jZU91dCIsImJvdW5jZUluT3V0IiwiY2lyY2xlSW4iLCJjaXJjbGVPdXQiLCJjaXJjbGVJbk91dCIsImN1YmljSW4iLCJjdWJpY091dCIsImN1YmljSW5PdXQiLCJlbGFzdGljSW4iLCJhc2luIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwiZWxhc3RpY091dCIsImVsYXN0aWNJbk91dCIsImV4cEluIiwiZXhwT3V0IiwiZXhwSW5PdXQiLCJsaW5lYXIiLCJwb2x5SW4iLCJleHBvbmVudCIsInBvbHlPdXQiLCJwb2x5SW5PdXQiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0Iiwic2luSW4iLCJzaW5PdXQiLCJzaW5Jbk91dCIsInJlc3BvbnNlQmxvYiIsInJlc3BvbnNlIiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiYmxvYiIsImZldGNoIiwiaW5pdCIsInRoZW4iLCJyZXNwb25zZUFycmF5QnVmZmVyIiwiYXJyYXlCdWZmZXIiLCJkc3ZQYXJzZSIsInVuZGVmaW5lZCIsImRzdiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2UiLCJJbWFnZSIsIm9uZXJyb3IiLCJvbmxvYWQiLCJzcmMiLCJyZXNwb25zZUpzb24iLCJqc29uIiwicmVzcG9uc2VUZXh0IiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiaHRtbCIsIm5vZGVzIiwiZm9yY2UiLCJzeCIsInN5IiwidngiLCJ2eSIsInJhZGlpIiwic3RyZW5ndGgiLCJpdGVyYXRpb25zIiwidHJlZSIsInJpIiwicmkyIiwidmlzaXRBZnRlciIsInByZXBhcmUiLCJ2aXNpdCIsInF1YWQiLCJ5MCIsInkxIiwicmoiLCJmaW5kIiwibm9kZUJ5SWQiLCJub2RlSWQiLCJzdHJlbmd0aHMiLCJkaXN0YW5jZXMiLCJiaWFzIiwibGluayIsImRpc3RhbmNlIiwiYWxwaGEiLCJsaW5rcyIsImluaXRpYWxpemVTdHJlbmd0aCIsImluaXRpYWxpemVEaXN0YW5jZSIsImRpc3RhbmNlTWluMiIsImRpc3RhbmNlTWF4MiIsIkluZmluaXR5IiwidGhldGEyIiwiYWNjdW11bGF0ZSIsIm5leHQiLCJ4MiIsImRpc3RhbmNlTWluIiwiZGlzdGFuY2VNYXgiLCJ0aGV0YSIsInJhZGl1c2VzIiwiaW5pdGlhbEFuZ2xlIiwic2ltdWxhdGlvbiIsImFscGhhTWluIiwiYWxwaGFEZWNheSIsImFscGhhVGFyZ2V0IiwidmVsb2NpdHlEZWNheSIsImZvcmNlcyIsInN0ZXBwZXIiLCJldmVudCIsImZ4IiwiZnkiLCJpbml0aWFsaXplTm9kZXMiLCJhbmdsZSIsImluaXRpYWxpemVGb3JjZSIsInJlc3RhcnQiLCJkMiIsImNsb3Nlc3QiLCJ5eiIsImxvY2FsZSIsImZvcm1hdFByZWZpeCIsImRlZmF1bHRMb2NhbGUiLCJkZWNpbWFsIiwidGhvdXNhbmRzIiwiZ3JvdXBpbmciLCJjdXJyZW5jeSIsIm1pbnVzIiwidG9FeHBvbmVudGlhbCIsImNvZWZmaWNpZW50Iiwic3Vic3RyaW5nIiwibnVtZXJhbHMiLCJwcmVmaXhFeHBvbmVudCIsInJlIiwiZm9ybWF0U3BlY2lmaWVyIiwic3BlY2lmaWVyIiwiRm9ybWF0U3BlY2lmaWVyIiwiZmlsbCIsImFsaWduIiwic2lnbiIsInN5bWJvbCIsInplcm8iLCJjb21tYSIsInByZWNpc2lvbiIsIm91dCIsInRvRml4ZWQiLCJ0b1ByZWNpc2lvbiIsInRvVXBwZXJDYXNlIiwicHJlZml4ZXMiLCJOdW1iZXIiLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5U3VmZml4IiwiU3RyaW5nIiwicGVyY2VudCIsIm5hbiIsIm5ld0Zvcm1hdCIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwicGFkZGluZyIsIkFkZGVyIiwicmVzZXQiLCJ0ZW1wIiwidmFsdWVPZiIsImFkZGVyIiwiYnYiLCJhdiIsImxhbWJkYTAwIiwicGhpMDAiLCJsYW1iZGEwIiwiY29zUGhpMCIsInNpblBoaTAiLCJhcmVhUmluZ1N1bSIsImFyZWFTdW0iLCJhcmVhU3RyZWFtIiwibGluZVN0YXJ0IiwibGluZUVuZCIsInBvbHlnb25TdGFydCIsImFyZWFSaW5nU3RhcnQiLCJhcmVhUmluZ0VuZCIsInBvbHlnb25FbmQiLCJhcmVhUmluZyIsInNwaGVyZSIsImFyZWFQb2ludEZpcnN0IiwiYXJlYVBvaW50IiwibGFtYmRhIiwicGhpIiwiZExhbWJkYSIsInNkTGFtYmRhIiwiYWRMYW1iZGEiLCJjb3NQaGkiLCJzaW5QaGkiLCJ1IiwicGhpMCIsImxhbWJkYTEiLCJwaGkxIiwibGFtYmRhMiIsInJhbmdlcyIsImRlbHRhU3VtIiwiYm91bmRzU3RyZWFtIiwiYm91bmRzUG9pbnQiLCJib3VuZHNMaW5lU3RhcnQiLCJib3VuZHNMaW5lRW5kIiwiYm91bmRzUmluZ1BvaW50IiwiYm91bmRzUmluZ1N0YXJ0IiwiYm91bmRzUmluZ0VuZCIsImxpbmVQb2ludCIsIm5vcm1hbCIsImVxdWF0b3JpYWwiLCJpbmZsZWN0aW9uIiwicGhpaSIsImxhbWJkYWkiLCJhbnRpbWVyaWRpYW4iLCJyYW5nZUNvbXBhcmUiLCJyYW5nZUNvbnRhaW5zIiwiZGVsdGFNYXgiLCJmZWF0dXJlIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiVzAiLCJXMSIsIlgwIiwiWTAiLCJaMCIsIlgxIiwiWTEiLCJaMSIsIlgyIiwiWTIiLCJaMiIsInowIiwiY2VudHJvaWRTdHJlYW0iLCJjZW50cm9pZFBvaW50IiwiY2VudHJvaWRMaW5lU3RhcnQiLCJjZW50cm9pZExpbmVFbmQiLCJjZW50cm9pZFJpbmdTdGFydCIsImNlbnRyb2lkUmluZ0VuZCIsImNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4iLCJjZW50cm9pZExpbmVQb2ludEZpcnN0IiwiY2VudHJvaWRMaW5lUG9pbnQiLCJjZW50cm9pZFJpbmdQb2ludEZpcnN0IiwiY2VudHJvaWRSaW5nUG9pbnQiLCJjeCIsImN5IiwiY3oiLCJjaXJjbGVTdHJlYW0iLCJzdHJlYW0iLCJkaXJlY3Rpb24iLCJjb3NSYWRpdXMiLCJzaW5SYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJyb3RhdGUiLCJjaXJjbGUiLCJpbnZlcnQiLCJzaWduMCIsInNpZ24xIiwiY29zUGhpMSIsInNpbkxhbWJkYTBMYW1iZGExIiwiY2xpcEFudGltZXJpZGlhbkludGVyc2VjdCIsImZyb20iLCJ0byIsImxpbmVzIiwicmVqb2luIiwiY3IiLCJzbWFsbFJhZGl1cyIsIm5vdEhlbWlzcGhlcmUiLCJ2aXNpYmxlIiwiaW50ZXJzZWN0IiwidHdvIiwicGEiLCJwYiIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsImMxIiwiYzIiLCJuMXhuMiIsInV1IiwicG9sYXIiLCJxMSIsImNvZGUiLCJjMCIsInYwMCIsInBvaW50MiIsImNhY2hlIiwiY2FjaGVTdHJlYW0iLCJjbGlwIiwidmFsaWRTZWdtZW50Iiwic2VnbWVudCIsImNvbXBhcmVJbnRlcnNlY3Rpb24iLCJzaW5rIiwic2VnbWVudHMiLCJjbGlwTGluZSIsInJpbmdCdWZmZXIiLCJyaW5nU2luayIsInBvbHlnb25TdGFydGVkIiwicG9pbnRSaW5nIiwicmluZ1N0YXJ0IiwicmluZ0VuZCIsInN0YXJ0SW5zaWRlIiwiaW50ZXJwb2xhdGUiLCJwb2ludFZpc2libGUiLCJwb2ludExpbmUiLCJyaW5nU2VnbWVudHMiLCJheCIsImF5IiwiY2xpcFJlY3RhbmdsZSIsImNvcm5lciIsImNvbXBhcmVQb2ludCIsImNhIiwiY2IiLCJ4X18iLCJ5X18iLCJ2X18iLCJ4XyIsInlfIiwidl8iLCJmaXJzdCIsImFjdGl2ZVN0cmVhbSIsImJ1ZmZlclN0cmVhbSIsImNsaXBTdHJlYW0iLCJ3aW5kaW5nIiwiYjEiLCJwb2x5Z29uSW5zaWRlIiwiY2xlYW5JbnNpZGUiLCJJbnRlcnNlY3Rpb24iLCJwb2ludHMiLCJvdGhlciIsImVudHJ5IiwicDEiLCJjdXJyZW50IiwiaXNTdWJqZWN0IiwiY29tcG9zZSIsImNvbnRhaW5zT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJjb250YWluc0dlb21ldHJ5IiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsImNvbnRhaW5zR2VvbWV0cnlUeXBlIiwiU3BoZXJlIiwiUG9pbnQiLCJjb250YWluc1BvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJjb250YWluc0xpbmUiLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwiY29udGFpbnNQb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImFvIiwiYm8iLCJhYiIsInJpbmdSYWRpYW5zIiwicG9pbnRSYWRpYW5zIiwiZ3JhdGljdWxlWCIsImdyYXRpY3VsZVkiLCJncmF0aWN1bGUiLCJEWCIsIkRZIiwib3V0bGluZSIsImV4dGVudE1ham9yIiwiZXh0ZW50TWlub3IiLCJzdGVwTWFqb3IiLCJzdGVwTWlub3IiLCJncmF0aWN1bGUxMCIsImN5MCIsImN5MSIsInN5MSIsImt4MCIsImt5MCIsImt4MSIsImt5MSIsImxlbmd0aFN1bSIsImxlbmd0aFN0cmVhbSIsImxlbmd0aFBvaW50Rmlyc3QiLCJsZW5ndGhMaW5lRW5kIiwibGVuZ3RoUG9pbnQiLCJjb3NEZWx0YSIsImV4cCIsImVwc2lsb24iLCJlcHNpbG9uMiIsInF1YXJ0ZXJQaSIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiYXRhbiIsImFjb3MiLCJoYXZlcnNpbiIsIngwMCIsInkwMCIsImJvdW5kcyIsImNlbnRyb2lkIiwiY2VudHJvaWRQb2ludEZpcnN0TGluZSIsImNlbnRyb2lkUG9pbnRMaW5lIiwiY2VudHJvaWRQb2ludEZpcnN0UmluZyIsImNlbnRyb2lkUG9pbnRSaW5nIiwiUGF0aENvbnRleHQiLCJfY29udGV4dCIsIl9yYWRpdXMiLCJwb2ludFJhZGl1cyIsIl9saW5lIiwiX3BvaW50IiwibGluZVRvIiwicHJvamVjdGlvblN0cmVhbSIsImNvbnRleHRTdHJlYW0iLCJtZWFzdXJlIiwicHJvamVjdGlvbiIsImxlbmd0aFJpbmciLCJQYXRoU3RyaW5nIiwiX3N0cmluZyIsIl9jaXJjbGUiLCJsb25naXR1ZGUiLCJzaW5QaGkxIiwiYWJzRGVsdGEiLCJpbnRlcnNlY3Rpb24iLCJwaGlBcmMiLCJwYXJhbGxlbHMiLCJ0cmFuc2xhdGUiLCJsb3dlcjQ4UG9pbnQiLCJhbGFza2FQb2ludCIsImhhd2FpaVBvaW50IiwibG93ZXI0OCIsImFsYXNrYSIsImhhd2FpaSIsInBvaW50U3RyZWFtIiwiYWxiZXJzVXNhIiwic3RyZWFtcyIsImNsaXBFeHRlbnQiLCJmaXRFeHRlbnQiLCJmaXRTaXplIiwiZml0V2lkdGgiLCJmaXRIZWlnaHQiLCJhemltdXRoYWxSYXciLCJhemltdXRoYWxJbnZlcnQiLCJzYyIsImNjIiwiYXppbXV0aGFsRXF1YWxBcmVhUmF3IiwiY3hjeSIsImNsaXBBbmdsZSIsImF6aW11dGhhbEVxdWlkaXN0YW50UmF3IiwiY29uaWNQcm9qZWN0aW9uIiwicHJvamVjdEF0IiwidGFueSIsImNvbmljQ29uZm9ybWFsUmF3IiwicHJvamVjdCIsImNvbmljRXF1YWxBcmVhUmF3IiwicjAiLCJyMHkiLCJjb25pY0VxdWlkaXN0YW50UmF3IiwiZ3kiLCJueCIsImN5bGluZHJpY2FsRXF1YWxBcmVhUmF3IiwiZm9yd2FyZCIsIkExIiwiQTIiLCJBMyIsIkE0IiwiTSIsImVxdWFsRWFydGhSYXciLCJsMiIsImw2IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiZml0IiwiZml0Qm91bmRzIiwiZ25vbW9uaWNSYXciLCJzYSIsInR4IiwidHkiLCJreCIsImt5IiwicG9zdGNsaXAiLCJyZWZsZWN0WCIsInJlZmxlY3RZIiwidHJhbnNmb3JtUmFkaWFucyIsInNjYWxlVHJhbnNsYXRlIiwic2NhbGVUcmFuc2xhdGVSb3RhdGUiLCJjb3NBbHBoYSIsInNpbkFscGhhIiwiYWkiLCJiaSIsImNpIiwiZmkiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwiZGVsdGFMYW1iZGEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJwcmVjbGlwIiwiZGVsdGEyIiwicmVjZW50ZXIiLCJ0cmFuc2Zvcm1Sb3RhdGUiLCJtZXJjYXRvclJhdyIsIm1lcmNhdG9yUHJvamVjdGlvbiIsInJlY2xpcCIsIm5hdHVyYWxFYXJ0aDFSYXciLCJwaGkyIiwicGhpNCIsIm9ydGhvZ3JhcGhpY1JhdyIsImNvc01pbkRpc3RhbmNlIiwicmVzYW1wbGVMaW5lVG8iLCJ5MiIsImR4MiIsImR5MiIsImR6IiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZSIsInJlc2FtcGxlTm9uZSIsInN0ZXJlb2dyYXBoaWNSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJyb3RhdGlvbklkZW50aXR5Iiwicm90YXRlUmFkaWFucyIsInJvdGF0aW9uTGFtYmRhIiwicm90YXRpb25QaGlHYW1tYSIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uIiwiY29zRGVsdGFQaGkiLCJzaW5EZWx0YVBoaSIsImNvc0RlbHRhR2FtbWEiLCJzaW5EZWx0YUdhbW1hIiwic3RyZWFtR2VvbWV0cnkiLCJzdHJlYW1HZW9tZXRyeVR5cGUiLCJzdHJlYW1PYmplY3RUeXBlIiwic3RyZWFtTGluZSIsInN0cmVhbVBvbHlnb24iLCJjbG9zZWQiLCJjb29yZGluYXRlIiwidHJhbnNmb3JtZXIiLCJtZXRob2RzIiwiVHJhbnNmb3JtU3RyZWFtIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsInNodWZmbGUiLCJkZWZhdWx0U2VwYXJhdGlvbiIsIm1lYW5YUmVkdWNlIiwibWF4WVJlZHVjZSIsInNlcGFyYXRpb24iLCJub2RlU2l6ZSIsImNsdXN0ZXIiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJjaGlsZHJlbiIsIm1lYW5YIiwibWF4WSIsImxlYWZMZWZ0IiwibGVhZlJpZ2h0IiwiY29uc3RhbnRaZXJvIiwiaGllcmFyY2h5IiwiY2hpbGQiLCJjaGlsZHMiLCJOb2RlIiwidmFsdWVkIiwiZGVmYXVsdENoaWxkcmVuIiwiZWFjaEJlZm9yZSIsImNvbXB1dGVIZWlnaHQiLCJjb3B5RGF0YSIsImFuY2VzdG9ycyIsImRlc2NlbmRhbnRzIiwibGVhdmVzIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwic3BsaWNlIiwiZXh0ZW5kQmFzaXMiLCJlbmNsb3Nlc1dlYWtBbGwiLCJlbmNsb3Nlc05vdCIsImVuY2xvc2VCYXNpczIiLCJlbmNsb3NlQmFzaXMzIiwiZHIiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJyMSIsInIyIiwieDIxIiwieTIxIiwicjIxIiwieDMiLCJ5MyIsInIzIiwiYTIiLCJhMyIsImIyIiwiYjMiLCJjMyIsImQxIiwiZDMiLCJ4YSIsInhiIiwieWEiLCJ5YiIsImNpcmNsZXMiLCJyYWRpdXNMZWFmIiwicGFja0NoaWxkcmVuIiwidHJhbnNsYXRlQ2hpbGQiLCJwYWNrIiwicGxhY2UiLCJpbnRlcnNlY3RzIiwic2NvcmUiLCJwcmV2aW91cyIsInBhY2tFbmNsb3NlIiwiYWEiLCJzaiIsInNrIiwicGFydGl0aW9uIiwicG9zaXRpb25Ob2RlIiwicHJlcm9vdCIsImFtYmlndW91cyIsImRlZmF1bHRJZCIsImRlZmF1bHRQYXJlbnRJZCIsInBhcmVudElkIiwic3RyYXRpZnkiLCJub2RlS2V5Iiwibm9kZUJ5S2V5IiwibmV4dExlZnQiLCJuZXh0UmlnaHQiLCJtb3ZlU3VidHJlZSIsIndtIiwid3AiLCJjaGFuZ2UiLCJuZXh0QW5jZXN0b3IiLCJ2aW0iLCJUcmVlTm9kZSIsInRyZWVSb290IiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsInNpemVOb2RlIiwiYm90dG9tIiwic2libGluZ3MiLCJleGVjdXRlU2hpZnRzIiwibWlkcG9pbnQiLCJ2aXAiLCJ2b3AiLCJ2b20iLCJzaXAiLCJzb3AiLCJzaW0iLCJzb20iLCJhcHBvcnRpb24iLCJzdW1zIiwidmFsdWVPZmZzZXQiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwidGlsZSIsInBhZGRpbmdTdGFjayIsInBhZGRpbmdJbm5lciIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJ0cmVlbWFwIiwicGFkZGluZ091dGVyIiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsInJhdGlvIiwiZGljZSIsInNxdWFyaWZ5UmF0aW8iLCJub2RlVmFsdWUiLCJzdW1WYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJuZXdSYXRpbyIsIm1pblJhdGlvIiwiYmV0YSIsInNxdWFyaWZ5IiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsImJhc2lzIiwidjIiLCJ2MyIsImh1ZSIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXhMb25nIiwic2V0VGltZSIsImhjbExvbmciLCJoc2xMb25nIiwiaXNOdW1iZXJBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJwaWVjZXdpc2UiLCJzYW1wbGVzIiwiaW50ZXJwb2xhdG9yIiwicmdiU3BsaW5lIiwic3BsaW5lIiwiY29sb3JzIiwicmdiR2FtbWEiLCJyZ2JCYXNpcyIsInJnYkJhc2lzQ2xvc2VkIiwicmVBIiwicmVCIiwiYW0iLCJibSIsImJzIiwibGFzdEluZGV4Iiwib25lIiwiaWRlbnRpdHkiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsImludGVycG9sYXRlVHJhbnNmb3JtQ3NzIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmciLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwicGFyc2VDc3MiLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiYXBwZW5kQ2hpbGQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVtb3ZlQ2hpbGQiLCJwYXJzZVN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImNvbnNvbGlkYXRlIiwicmhvIiwiU1FSVDIiLCJ1eDAiLCJ1eTAiLCJ1eDEiLCJ1eTEiLCJjb3NocjAiLCJkdXJhdGlvbiIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwiYmV6aWVyQ3VydmVUbyIsImFyY1RvIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwidDAxIiwidDIxIiwiY2N3IiwiY3ciLCJkYSIsInJlY3QiLCJpbnNpZGUiLCJsZXhpY29ncmFwaGljT3JkZXIiLCJjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyIsInNvcnRlZFBvaW50cyIsImZsaXBwZWRQb2ludHMiLCJ1cHBlckluZGV4ZXMiLCJsb3dlckluZGV4ZXMiLCJza2lwTGVmdCIsInNraXBSaWdodCIsImh1bGwiLCJwZXJpbWV0ZXIiLCJ4bSIsInltIiwieHAiLCJ5cCIsIl9yb290IiwibGVhZiIsIl94IiwiX3kiLCJhZGRBbGwiLCJjb3ZlciIsInF1YWRzIiwicXVhZHRyZWUiLCJRdWFkdHJlZSIsImxlYWZfY29weSIsInRyZWVQcm90byIsInJlbW92ZUFsbCIsInJldGFpbmVyIiwicmFuZG9tQmF0ZXMiLCJyYW5kb21JcndpbkhhbGwiLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUV4cG9uZW50aWFsIiwic291cmNlUmFuZG9tRXhwb25lbnRpYWwiLCJzb3VyY2VSYW5kb21JcndpbkhhbGwiLCJyYW5kb21Mb2dOb3JtYWwiLCJyYW5kb21Ob3JtYWwiLCJzb3VyY2VSYW5kb21Mb2dOb3JtYWwiLCJtdSIsInNpZ21hIiwic291cmNlUmFuZG9tTm9ybWFsIiwicmFuZG9tVW5pZm9ybSIsInNvdXJjZVJhbmRvbVVuaWZvcm0iLCJzY2hlbWUiLCJ3YXJtIiwiY29vbCIsInRzIiwicGlfMV8zIiwicGlfMl8zIiwicmFtcCIsIm1hZ21hIiwiaW5mZXJubyIsInBsYXNtYSIsImJhbmQiLCJ1bmtub3duIiwib3JkaW5hbFJhbmdlIiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJwb2ludGlzaCIsInVuaXQiLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJkMCIsInBvbHltYXAiLCJjbGFtcCIsInVudHJhbnNmb3JtIiwiY29udGludW91cyIsImsxMCIsImsyMSIsImRpdmVyZ2luZyIsImRpdmVyZ2luZ0xvZyIsImJhc2UiLCJkaXZlcmdpbmdTeW1sb2ciLCJjb25zdGFudCIsImRpdmVyZ2luZ1BvdyIsImRpdmVyZ2luZ1NxcnQiLCJpbml0UmFuZ2UiLCJpbml0SW50ZXJwb2xhdG9yIiwibGluZWFyaXNoIiwibmljZSIsInRyYW5zZm9ybUxvZyIsInRyYW5zZm9ybUV4cCIsInRyYW5zZm9ybUxvZ24iLCJ0cmFuc2Zvcm1FeHBuIiwicG93MTAiLCJyZWZsZWN0IiwibG9nZ2lzaCIsImxvZ3MiLCJwb3dzIiwibG9nMTAiLCJsb2cyIiwibG9ncCIsInBvd3AiLCJpbnRlcnZhbCIsImltcGxpY2l0Iiwib3JkaW5hbCIsInRyYW5zZm9ybVBvdyIsInRyYW5zZm9ybVNxcnQiLCJ0cmFuc2Zvcm1TcXVhcmUiLCJwb3dpc2giLCJxdWFudGlsZSIsImludmVydEV4dGVudCIsInF1YW50aWxlcyIsInF1YW50aXplIiwic2VxdWVudGlhbCIsInNlcXVlbnRpYWxMb2ciLCJzZXF1ZW50aWFsU3ltbG9nIiwic2VxdWVudGlhbFBvdyIsInNlcXVlbnRpYWxTcXJ0Iiwic2VxdWVudGlhbFF1YW50aWxlIiwidHJhbnNmb3JtU3ltbG9nIiwibG9nMXAiLCJ0cmFuc2Zvcm1TeW1leHAiLCJleHBtMSIsInN5bWxvZ2lzaCIsInN5bWxvZyIsImNhbGVuZGFyIiwibW9udGgiLCJ3ZWVrIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwiZm9ybWF0TWlsbGlzZWNvbmQiLCJmb3JtYXRTZWNvbmQiLCJmb3JtYXRNaW51dGUiLCJmb3JtYXRIb3VyIiwiZm9ybWF0RGF5IiwiZm9ybWF0V2VlayIsImZvcm1hdE1vbnRoIiwiZm9ybWF0WWVhciIsInRpY2tJbnRlcnZhbHMiLCJkdXJhdGlvblNlY29uZCIsImR1cmF0aW9uTWludXRlIiwiZHVyYXRpb25Ib3VyIiwiZHVyYXRpb25EYXkiLCJ0aWNrSW50ZXJ2YWwiLCJldmVyeSIsIlVUQyIsImNyZWF0b3JJbmhlcml0Iiwib3duZXJEb2N1bWVudCIsInVyaSIsIm5hbWVzcGFjZVVSSSIsImNyZWF0b3JGaXhlZCIsImZ1bGxuYW1lIiwic3BhY2UiLCJuZXh0SWQiLCJMb2NhbCIsIm1hdGNoZXMiLCJzZWxlY3RvciIsInhodG1sIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsImNyZWF0ZVNWR1BvaW50IiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudExlZnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJhdHRyRnVuY3Rpb25OUyIsImdldEF0dHJpYnV0ZU5TIiwiY2xhc3NBcnJheSIsInN0cmluZyIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImNsYXNzZWRSZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZSIsImNsb25lTm9kZSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImRlZXAiLCJiaW5kSW5kZXgiLCJ1cGRhdGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJwYXJlbnRzIiwiX3BhcmVudHMiLCJfZ3JvdXBzIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiX25leHQiLCJfZW50ZXIiLCJfZXhpdCIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsIkVudGVyTm9kZSIsImRhdHVtIiwiX3BhcmVudCIsInN1Ymdyb3VwIiwiaHRtbFJlbW92ZSIsImlubmVySFRNTCIsImh0bWxDb25zdGFudCIsImh0bWxGdW5jdGlvbiIsIlNlbGVjdGlvbiIsImNsYXNzZWQiLCJyYWlzZSIsImxvd2VyIiwiY29uc3RhbnROdWxsIiwiYmVmb3JlIiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJmaWx0ZXJFdmVudHMiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImxpc3RlbmVyIiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwiX19vbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlIiwib25BZGQiLCJ3cmFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1c3RvbUV2ZW50Iiwic291cmNlRXZlbnQiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwic3Vibm9kZSIsImFzY2VuZGluZyIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsInN0eWxlUmVtb3ZlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwidGV4dENvbnN0YW50IiwidGV4dEZ1bmN0aW9uIiwibm9uZSIsInRvdWNoIiwiYXJjSW5uZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsImFyY091dGVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJhcmNTdGFydEFuZ2xlIiwiYXJjRW5kQW5nbGUiLCJhcmNQYWRBbmdsZSIsIngxMCIsInkxMCIsIngzMiIsInkzMiIsImNvcm5lclRhbmdlbnRzIiwicmMiLCJveCIsIm95IiwieDExIiwieTExIiwiY3gwIiwiY3gxIiwiZHgwIiwiZHkwIiwiZHgxIiwiZHkxIiwiY29ybmVyUmFkaXVzIiwicGFkUmFkaXVzIiwiYTAxIiwiYTExIiwiYTEwIiwiZGEwIiwiZGExIiwiYXAiLCJycCIsInJjMCIsInJjMSIsIm9jIiwiYngiLCJieSIsImtjIiwibGMiLCJkZWZpbmVkIiwiY3VydmUiLCJkZWZpbmVkMCIsIngweiIsInkweiIsImFyZWFTdGFydCIsImFyZWFFbmQiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsImxpbmVTdGFydEFuZ2xlIiwibGluZUVuZEFuZ2xlIiwibGluZUlubmVyUmFkaXVzIiwibGluZU91dGVyUmFkaXVzIiwiX2N1cnZlIiwiQmFzaXMiLCJCYXNpc0Nsb3NlZCIsIl94MiIsIl94MyIsIl94NCIsIl95MiIsIl95MyIsIl95NCIsIkJhc2lzT3BlbiIsIkJ1bmRsZSIsIl9iYXNpcyIsIl9iZXRhIiwiYnVuZGxlIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiQ2FyZGluYWxPcGVuIiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIngyMyIsInkyMyIsImNhdG11bGxSb20iLCJDYXRtdWxsUm9tQ2xvc2VkIiwiQ2F0bXVsbFJvbU9wZW4iLCJMaW5lYXIiLCJMaW5lYXJDbG9zZWQiLCJzbG9wZTMiLCJoMCIsImgxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiTW9ub3RvbmVZIiwiUmVmbGVjdENvbnRleHQiLCJtb25vdG9uZVgiLCJtb25vdG9uZVkiLCJfdDAiLCJOYXR1cmFsIiwiY29udHJvbFBvaW50cyIsInB4IiwicHkiLCJjdXJ2ZVJhZGlhbExpbmVhciIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwicmFkaWFsIiwiU3RlcCIsIl90Iiwic3RlcEJlZm9yZSIsInN0ZXBBZnRlciIsImxpbmVSYWRpYWwiLCJsaW5rU291cmNlIiwibGlua1RhcmdldCIsImN1cnZlSG9yaXpvbnRhbCIsImN1cnZlVmVydGljYWwiLCJwMiIsInAzIiwibGlua0hvcml6b250YWwiLCJsaW5rVmVydGljYWwiLCJsaW5rUmFkaWFsIiwic2VyaWVzIiwieW4iLCJzMiIsInNpIiwic2lqMCIsInMzIiwicGVhayIsInZpIiwidmoiLCJwZWFrcyIsInRvcHMiLCJib3R0b21zIiwicGllIiwiYXJjcyIsInN0YWNrVmFsdWUiLCJzdGFjayIsIm96Iiwia3oiLCJzeiIsInNpaiIsImtpIiwic3ltYm9scyIsImRyYXciLCJ0YW4zMCIsInRhbjMwXzIiLCJrciIsInNxcnQzIiwidGltZUZvcm1hdCIsInRpbWVQYXJzZSIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwiZGF0ZVRpbWUiLCJ0aW1lIiwicGVyaW9kcyIsImRheXMiLCJzaG9ydERheXMiLCJtb250aHMiLCJzaG9ydE1vbnRocyIsImlzb1NwZWNpZmllciIsImZvcm1hdElzbyIsInRvSVNPU3RyaW5nIiwicGFyc2VJc28iLCJsb2NhbERhdGUiLCJIIiwiTCIsInNldEZ1bGxZZWFyIiwidXRjRGF0ZSIsInNldFVUQ0Z1bGxZZWFyIiwibmV3RGF0ZSIsImZvcm1hdExvY2FsZSIsImxvY2FsZV9kYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJsb2NhbGVfcGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwibG9jYWxlX21vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInBlcmlvZFJlIiwiZm9ybWF0UmUiLCJwZXJpb2RMb29rdXAiLCJmb3JtYXRMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsImdldERheSIsImdldE1vbnRoIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdE1pY3Jvc2Vjb25kcyIsImZvcm1hdEhvdXIyNCIsImZvcm1hdEhvdXIxMiIsImZvcm1hdERheU9mWWVhciIsImZvcm1hdE1pbGxpc2Vjb25kcyIsImZvcm1hdE1vbnRoTnVtYmVyIiwiZm9ybWF0TWludXRlcyIsImZvcm1hdFVuaXhUaW1lc3RhbXAiLCJmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdFNlY29uZHMiLCJmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5IiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJJU08iLCJmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlck1vbmRheSIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwidXRjRm9ybWF0cyIsImdldFVUQ0RheSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwicGFyc2VzIiwicGFyc2VTcGVjaWZpZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlSG91cjI0IiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZU1pbGxpc2Vjb25kcyIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZU1pbnV0ZXMiLCJwYXJzZVF1YXJ0ZXIiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5IiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVySVNPIiwicGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VZZWFyIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWm9uZSIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYWRzIiwiY2hhckF0IiwibmV3UGFyc2UiLCJaIiwiUSIsIlYiLCJnZXRGdWxsWWVhciIsImdldERhdGUiLCJVIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJyZXF1b3RlIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRUaW1lem9uZU9mZnNldCIsImRvdyIsInNldEhvdXJzIiwic2V0RGF0ZSIsImR1cmF0aW9uV2VlayIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwic2V0TW9udGgiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJ1dGNEYXlzIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJ1dGNIb3VycyIsInV0Y01pbnV0ZSIsInNldFVUQ1NlY29uZHMiLCJ1dGNNaW51dGVzIiwidXRjTW9udGgiLCJzZXRVVENNb250aCIsInV0Y01vbnRocyIsInV0Y1dlZWtkYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y1N1bmRheXMiLCJ1dGNNb25kYXlzIiwidXRjVHVlc2RheXMiLCJ1dGNXZWRuZXNkYXlzIiwidXRjVGh1cnNkYXlzIiwidXRjRnJpZGF5cyIsInV0Y1NhdHVyZGF5cyIsInV0Y1llYXIiLCJ1dGNZZWFycyIsIndlZWtkYXkiLCJzdW5kYXkiLCJtb25kYXkiLCJ0dWVzZGF5Iiwid2VkbmVzZGF5IiwidGh1cnNkYXkiLCJmcmlkYXkiLCJzYXR1cmRheSIsInN1bmRheXMiLCJtb25kYXlzIiwidHVlc2RheXMiLCJ3ZWRuZXNkYXlzIiwidGh1cnNkYXlzIiwiZnJpZGF5cyIsInNhdHVyZGF5cyIsInllYXJzIiwidG90YWwiLCJkZWxheSIsImVsYXBzZWQiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwiZnJhbWUiLCJ0aW1lb3V0IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93Iiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwidGltZXJGbHVzaCIsIndha2UiLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJUeXBlRXJyb3IiLCJzY2hlZHVsZSIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsImludGVycnVwdCIsImRlZmF1bHRUaW1pbmciLCJlYXNlIiwiaW5oZXJpdCIsInRpbWluZyIsIl9pZCIsIl9uYW1lIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0clR3ZWVuIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbjAiLCJvbjEiLCJjYW5jZWwiLCJUcmFuc2l0aW9uIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwic3R5bGVUd2VlbiIsInRleHRUd2VlbiIsIm9uRnVuY3Rpb24iLCJzaXQiLCJlbXB0eU9uIiwiZW1wdHlUd2VlbiIsIkNSRUFURUQiLCJTQ0hFRFVMRUQiLCJTVEFSVElORyIsIlNUQVJURUQiLCJSVU5OSU5HIiwiRU5ESU5HIiwiRU5ERUQiLCJzZWxmIiwic3R5bGVOdWxsIiwibGlzdGVuZXIwIiwic3R5bGVNYXliZVJlbW92ZSIsInN0eWxlSW50ZXJwb2xhdGUiLCJ0ZXh0SW50ZXJwb2xhdGUiLCJpZDAiLCJpZDEiLCJ0d2VlblJlbW92ZSIsInR3ZWVuMCIsInR3ZWVuMSIsInR3ZWVuRnVuY3Rpb24iLCJ0d2VlblZhbHVlIiwiYmVhY2hQb29sIiwiQmVhY2giLCJlZGdlIiwic2l0ZSIsImNyZWF0ZUJlYWNoIiwiYmVhY2giLCJkZXRhY2hCZWFjaCIsInJlbW92ZUJlYWNoIiwidmVydGV4IiwiUCIsImRpc2FwcGVhcmluZyIsImxBcmMiLCJyQXJjIiwiaUFyYyIsIm5BcmNzIiwiYWRkQmVhY2giLCJkeGwiLCJkeHIiLCJkaXJlY3RyaXgiLCJsZWZ0QnJlYWtQb2ludCIsInJpZ2h0QnJlYWtQb2ludCIsIlIiLCJuZXdBcmMiLCJsU2l0ZSIsInJTaXRlIiwiaGIiLCJoYyIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwiY3JlYXRlQ2VsbCIsImhhbGZlZGdlcyIsImNlbGxIYWxmZWRnZUFuZ2xlIiwiY2VsbCIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcENlbGxzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJuQ2VsbHMiLCJkYyIsInYwMSIsInYxMSIsInYxMCIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsIkNpcmNsZSIsImF0dGFjaENpcmNsZSIsImNTaXRlIiwiaGEiLCJkZXRhY2hDaXJjbGUiLCJiZWFjaGVzIiwiY2VsbHMiLCJlZGdlcyIsImxleGljb2dyYXBoaWMiLCJEaWFncmFtIiwic2l0ZXMiLCJ0cmlhbmdsZXMiLCJfZm91bmQiLCJjcmVhdGVFZGdlIiwic2V0RWRnZUVuZCIsImNyZWF0ZUJvcmRlckVkZ2UiLCJjbGlwRWRnZSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiY2xpcEVkZ2VzIiwiUmVkQmxhY2tUcmVlIiwiUmVkQmxhY2tOb2RlIiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsIlJlZEJsYWNrRmlyc3QiLCJhZnRlciIsImdyYW5kcGEiLCJ1bmNsZSIsInNpYmxpbmciLCJ2b3Jvbm9pIiwiWm9vbUV2ZW50IiwiVHJhbnNmb3JtIiwiYXBwbHlYIiwiYXBwbHlZIiwibG9jYXRpb24iLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJfX3pvb20iLCJTVkdFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkZWZhdWx0VHJhbnNmb3JtIiwiZGVmYXVsdFdoZWVsRGVsdGEiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJkZWZhdWx0Q29uc3RyYWluIiwidHJhbnNsYXRlRXh0ZW50IiwidG91Y2hzdGFydGluZyIsImNvbnN0cmFpbiIsIndoZWVsRGVsdGEiLCJzY2FsZUV4dGVudCIsInpvb20iLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsIl9fem9vbWluZyIsIkdlc3R1cmUiLCJ0YXBzIiwid2hlZWwiLCJ3aGVlbGlkbGVkIiwiazEiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJsMCIsImwxIiwiZHAiLCJkbCIsImNvbGxlY3Rpb24iLCJzY2FsZUJ5Iiwic2NhbGVUbyIsImswIiwidHJhbnNsYXRlQnkiLCJ0cmFuc2xhdGVUbyIsInZlcnNpb24iLCJkZXNjcmlwdGlvbiIsImtleXdvcmRzIiwiaG9tZXBhZ2UiLCJsaWNlbnNlIiwiYXV0aG9yIiwibWFpbiIsInVucGtnIiwianNkZWxpdnIiLCJyZXBvc2l0b3J5IiwiZmlsZXMiLCJzY3JpcHRzIiwiZGV2RGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwiZ3JhcGhsaWIiLCJkYWdyZSIsInJlbmRlciIsInV0aWwiLCJhcHBseVN0eWxlIiwiYWRkTGFiZWwiLCJleGl0U2VsZWN0aW9uIiwiY2x1c3RlcnMiLCJpc1N1YmdyYXBoIiwic3ZnQ2x1c3RlcnMiLCJhcHBseVRyYW5zaXRpb24iLCJ0aGlzR3JvdXAiLCJsYWJlbEdyb3VwIiwiY2x1c3RlckxhYmVsUG9zIiwiZG9tQ2x1c3RlciIsInN2Z0VkZ2VMYWJlbHMiLCJlZGdlVG9JZCIsImxhYmVsIiwiYmJveCIsImdldEJCb3giLCJsYWJlbElkIiwiaW50ZXJzZWN0Tm9kZSIsImNyZWF0ZUxpbmUiLCJhcnJvd3MiLCJwcmV2aW91c1BhdGhzIiwibmV3UGF0aHMiLCJzdmdQYXRocyIsInN2Z1BhdGhzRW50ZXIiLCJzb3VyY2VFbGVtIiwiZWxlbSIsIm11bHRpcGx5Iiwic3ZnUGF0aEV4aXQiLCJkb21FZGdlIiwiYXBwbHlDbGFzcyIsImFycm93aGVhZElkIiwidW5pcXVlSWQiLCJ1cmwiLCJocmVmIiwiZnJhZ21lbnRJZCIsInRhaWwiLCJoZWFkIiwiY2FsY1BvaW50cyIsImFycm93aGVhZCIsInNoYXBlcyIsInNpbXBsZU5vZGVzIiwic3ZnTm9kZXMiLCJsYWJlbERvbSIsInNoYXBlIiwicGljayIsInNoYXBlU3ZnIiwic2hhcGVCQm94IiwiZWxsaXBzZSIsImludGVyc2VjdEVsbGlwc2UiLCJkZXQiLCJzYW1lU2lnbiIsInEyIiwicjQiLCJkZW5vbSIsIm51bSIsImludGVyc2VjdExpbmUiLCJwb2x5UG9pbnRzIiwiaW50ZXJzZWN0aW9ucyIsIm1pblgiLCJQT1NJVElWRV9JTkZJTklUWSIsIm1pblkiLCJjb25zb2xlIiwicGR4IiwicGR5IiwiZGlzdHAiLCJxZHgiLCJxZHkiLCJkaXN0cSIsImZvIiwiZGl2IiwibGFiZWxTdHlsZSIsImNsaWVudCIsImFkZFRleHRMYWJlbCIsImFkZEh0bWxMYWJlbCIsImFkZFNWR0xhYmVsIiwibGFiZWxTdmciLCJsYWJlbFR5cGUiLCJsYWJlbEJCb3giLCJkb21Ob2RlIiwiY2giLCJuZXdUZXh0IiwiZXNjYXBlZCIsInByb2Nlc3NFc2NhcGVTZXF1ZW5jZXMiLCJsb2Rhc2giLCJkZWZhdWx0cyIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiY3JlYXRlZCIsImxheW91dCIsImNyZWF0ZU5vZGVzIiwiY3JlYXRlQ2x1c3RlcnMiLCJjcmVhdGVFZGdlTGFiZWxzIiwiY3JlYXRlRWRnZVBhdGhzIiwicG9zaXRpb25Ob2RlcyIsInBvc2l0aW9uRWRnZUxhYmVscyIsInBvc2l0aW9uQ2x1c3RlcnMiLCJmbiIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJOT0RFX0RFRkFVTFRfQVRUUlMiLCJfcHJldldpZHRoIiwiX3ByZXZIZWlnaHQiLCJFREdFX0RFRkFVTFRfQVRUUlMiLCJwcmVQcm9jZXNzR3JhcGgiLCJvdXRwdXRHcm91cCIsImNyZWF0ZU9yU2VsZWN0R3JvdXAiLCJjbHVzdGVyc0dyb3VwIiwiZWRnZVBhdGhzR3JvdXAiLCJlZGdlTGFiZWxzIiwicG9zdFByb2Nlc3NHcmFwaCIsImN1cnZlTGluZWFyIiwiaW50ZXJzZWN0UmVjdCIsImludGVyc2VjdENpcmNsZSIsImludGVyc2VjdFBvbHlnb24iLCJkaWFtb25kIiwiZXNjYXBlSWQiLCJkb20iLCJzdHlsZUZuIiwiY2xhc3NGbiIsIm90aGVyQ2xhc3NlcyIsImdyYXBoIiwiSURfREVMSU0iLCJzdHIiLCJkZWJ1ZyIsIm5vdGltZSIsImdyZWVkeUZBUyIsInJ1biIsImZhcyIsImFjeWNsaWNlciIsIndlaWdodEZuIiwidmlzaXRlZCIsImRmcyIsIm91dEVkZ2VzIiwiZGZzRkFTIiwicmVtb3ZlRWRnZSIsImZvcndhcmROYW1lIiwicmV2ZXJzZWQiLCJzZXRFZGdlIiwidW5kbyIsImFkZEJvcmRlck5vZGUiLCJwcm9wIiwic2ciLCJzZ05vZGUiLCJyYW5rIiwiYm9yZGVyVHlwZSIsInByZXYiLCJjdXJyIiwiYWRkRHVtbXlOb2RlIiwic2V0UGFyZW50IiwiYm9yZGVyTGVmdCIsImJvcmRlclJpZ2h0IiwibWluUmFuayIsIm1heFJhbmsiLCJzd2FwV2lkdGhIZWlnaHQiLCJzd2FwV2lkdGhIZWlnaHRPbmUiLCJhdHRycyIsInJldmVyc2VZT25lIiwic3dhcFhZT25lIiwiYWRqdXN0IiwicmFua0RpciIsInJhbmtkaXIiLCJyZXZlcnNlWSIsInN3YXBYWSIsIkxpc3QiLCJzZW50aW5lbCIsIl9wcmV2IiwiX3NlbnRpbmVsIiwidW5saW5rIiwiZmlsdGVyT3V0TGlua3MiLCJkZXF1ZXVlIiwiZW5xdWV1ZSIsInN0cnMiLCJHcmFwaCIsImRlYnVnT3JkZXJpbmciLCJsYXllck1hdHJpeCIsImJ1aWxkTGF5ZXJNYXRyaXgiLCJjb21wb3VuZCIsIm11bHRpZ3JhcGgiLCJzZXRHcmFwaCIsInNldE5vZGUiLCJsYXllciIsImxheWVyViIsIm5vZGVDb3VudCIsImZhc0dyYXBoIiwibWF4SW4iLCJtYXhPdXQiLCJwcmV2V2VpZ2h0IiwiZWRnZVdlaWdodCIsImJ1Y2tldHMiLCJ6ZXJvSWR4IiwiYXNzaWduQnVja2V0IiwiYnVpbGRTdGF0ZSIsIkRFRkFVTFRfV0VJR0hUX0ZOIiwicmVzdWx0cyIsInNvdXJjZXMiLCJzaW5rcyIsInJlbW92ZU5vZGUiLCJkb0dyZWVkeUZBUyIsImZsYXR0ZW4iLCJjb2xsZWN0UHJlZGVjZXNzb3JzIiwiaW5FZGdlcyIsInVFbnRyeSIsIndFbnRyeSIsImFjeWNsaWMiLCJub3JtYWxpemVSYW5rcyIsInBhcmVudER1bW15Q2hhaW5zIiwicmVtb3ZlRW1wdHlSYW5rcyIsIm5lc3RpbmdHcmFwaCIsImFkZEJvcmRlclNlZ21lbnRzIiwiY29vcmRpbmF0ZVN5c3RlbSIsIm9wdHMiLCJkZWJ1Z1RpbWluZyIsImxheW91dEdyYXBoIiwiaW5wdXRHcmFwaCIsImNhbm9uaWNhbGl6ZSIsImdyYXBoRGVmYXVsdHMiLCJzZWxlY3ROdW1iZXJBdHRycyIsImdyYXBoTnVtQXR0cnMiLCJncmFwaEF0dHJzIiwibm9kZU51bUF0dHJzIiwibm9kZURlZmF1bHRzIiwiZWRnZURlZmF1bHRzIiwiZWRnZU51bUF0dHJzIiwiZWRnZUF0dHJzIiwiYnVpbGRMYXlvdXRHcmFwaCIsInJhbmtzZXAiLCJtaW5sZW4iLCJsYWJlbHBvcyIsImxhYmVsb2Zmc2V0IiwibWFrZVNwYWNlRm9yRWRnZUxhYmVscyIsInNlbGZFZGdlcyIsInJlbW92ZVNlbGZFZGdlcyIsImFzTm9uQ29tcG91bmRHcmFwaCIsImluamVjdEVkZ2VMYWJlbFByb3hpZXMiLCJjbGVhbnVwIiwiYm9yZGVyVG9wIiwiYm9yZGVyQm90dG9tIiwiYXNzaWduUmFua01pbk1heCIsImR1bW15IiwibGFiZWxSYW5rIiwicmVtb3ZlRWRnZUxhYmVsUHJveGllcyIsImxheWVycyIsIm9yZGVyU2hpZnQiLCJzZWxmRWRnZSIsImluc2VydFNlbGZFZGdlcyIsInNlbGZOb2RlIiwicG9zaXRpb25TZWxmRWRnZXMiLCJsYXN0IiwicmVtb3ZlQm9yZGVyTm9kZXMiLCJmaXh1cEVkZ2VMYWJlbENvb3JkcyIsIm1heFgiLCJncmFwaExhYmVsIiwibWFyZ2luWCIsIm1hcmdpbngiLCJtYXJnaW5ZIiwibWFyZ2lueSIsImdldEV4dHJlbWVzIiwidHJhbnNsYXRlR3JhcGgiLCJub2RlViIsIm5vZGVXIiwiYXNzaWduTm9kZUludGVyc2VjdHMiLCJyZXZlcnNlUG9pbnRzRm9yUmV2ZXJzZWRFZGdlcyIsInJ1bkxheW91dCIsImlucHV0TGFiZWwiLCJsYXlvdXRMYWJlbCIsInVwZGF0ZUlucHV0R3JhcGgiLCJlZGdlc2VwIiwibm9kZXNlcCIsIm9iaiIsIm1hcFZhbHVlcyIsIm5ld0F0dHJzIiwiY2xvbmVEZWVwIiwiZm9ySW4iLCJpc1VuZGVmaW5lZCIsIm1pbkJ5Iiwic29ydEJ5IiwiemlwT2JqZWN0IiwiZGVwdGhzIiwidHJlZURlcHRocyIsIm5vZGVTZXAiLCJuZXN0aW5nUm9vdCIsImFjYyIsInN1bVdlaWdodHMiLCJjaGlsZE5vZGUiLCJjaGlsZFRvcCIsImNoaWxkQm90dG9tIiwidGhpc1dlaWdodCIsIm5lc3RpbmdFZGdlIiwibm9kZVJhbmtGYWN0b3IiLCJkdW1teUNoYWlucyIsInZSYW5rIiwid1JhbmsiLCJlZGdlTGFiZWwiLCJlZGdlT2JqIiwibm9ybWFsaXplRWRnZSIsIm9yaWdMYWJlbCIsInN1Y2Nlc3NvcnMiLCJjZyIsInZzIiwicm9vdFByZXYiLCJwcmV2Q2hpbGQiLCJtb3ZhYmxlIiwiaW5WIiwibm9kZVUiLCJiYXJ5Y2VudGVyIiwicmVsYXRpb25zaGlwIiwiaGFzTm9kZSIsImNyZWF0ZVJvb3ROb2RlIiwic2V0RGVmYXVsdE5vZGVMYWJlbCIsInR3b0xheWVyQ3Jvc3NDb3VudCIsIm5vcnRoTGF5ZXIiLCJzb3V0aExheWVyIiwic291dGhQb3MiLCJzb3V0aEVudHJpZXMiLCJwb3MiLCJmaXJzdEluZGV4IiwidHJlZVNpemUiLCJ3ZWlnaHRTdW0iLCJsYXllcmluZyIsImluaXRPcmRlciIsImNyb3NzQ291bnQiLCJzb3J0U3ViZ3JhcGgiLCJidWlsZExheWVyR3JhcGgiLCJhZGRTdWJncmFwaENvbnN0cmFpbnRzIiwiYnVpbGRMYXllckdyYXBocyIsInJhbmtzIiwic3dlZXBMYXllckdyYXBocyIsImxheWVyR3JhcGhzIiwiYmlhc1JpZ2h0IiwibGciLCJzb3J0ZWQiLCJhc3NpZ25PcmRlciIsImRvd25MYXllckdyYXBocyIsInVwTGF5ZXJHcmFwaHMiLCJiZXN0IiwiYmVzdENDIiwibGFzdEJlc3QiLCJvcmRlcmVkVnMiLCJtYXBwZWRFbnRyaWVzIiwidG1wIiwiaW5kZWdyZWUiLCJlbnRyeVYiLCJlbnRyeVciLCJzb3VyY2VTZXQiLCJoYW5kbGVJbiIsInZFbnRyeSIsIm1lcmdlRW50cmllcyIsImhhbmRsZU91dCIsImRvUmVzb2x2ZUNvbmZsaWN0cyIsInJlc29sdmVDb25mbGljdHMiLCJiciIsInN1YmdyYXBocyIsImJhcnljZW50ZXJzIiwic3ViZ3JhcGhSZXN1bHQiLCJleHBhbmRTdWJncmFwaHMiLCJwcmVkZWNlc3NvcnMiLCJibFByZWQiLCJiclByZWQiLCJjb25zdW1lVW5zb3J0YWJsZSIsInVuc29ydGFibGUiLCJwYXJ0cyIsInNvcnRhYmxlIiwibGhzIiwicmhzIiwidnNJbmRleCIsInBvc3RvcmRlck51bXMiLCJsaW0iLCJsb3ciLCJwb3N0b3JkZXIiLCJwYXRoRGF0YSIsImxjYSIsInZQYXRoIiwid1BhdGgiLCJmaW5kUGF0aCIsInBhdGhJZHgiLCJwYXRoViIsImZpbmRUeXBlMUNvbmZsaWN0cyIsImNvbmZsaWN0cyIsInByZXZMYXllciIsInNjYW5Qb3MiLCJwcmV2TGF5ZXJMZW5ndGgiLCJsYXN0Tm9kZSIsImZpbmRPdGhlcklubmVyU2VnbWVudE5vZGUiLCJzY2FuTm9kZSIsInVMYWJlbCIsInVQb3MiLCJhZGRDb25mbGljdCIsImZpbmRUeXBlMkNvbmZsaWN0cyIsInNjYW4iLCJzb3V0aCIsInNvdXRoRW5kIiwicHJldk5vcnRoQm9yZGVyIiwibmV4dE5vcnRoQm9yZGVyIiwidU5vZGUiLCJub3J0aCIsIm5leHROb3J0aFBvcyIsInByZXZOb3J0aFBvcyIsInNvdXRoTG9va2FoZWFkIiwiY29uZmxpY3RzViIsImhhc0NvbmZsaWN0IiwidmVydGljYWxBbGlnbm1lbnQiLCJuZWlnaGJvckZuIiwicHJldklkeCIsIndzIiwibXAiLCJpbCIsImhvcml6b250YWxDb21wYWN0aW9uIiwicmV2ZXJzZVNlcCIsInhzIiwiYmxvY2tHIiwiYmxvY2tHcmFwaCIsInNlcEZuIiwiZWRnZVNlcCIsInZMYWJlbCIsIndMYWJlbCIsInNlcCIsInZSb290IiwidVJvb3QiLCJwcmV2TWF4IiwiYnVpbGRCbG9ja0dyYXBoIiwiaXRlcmF0ZSIsInNldFhzRnVuYyIsIm5leHROb2Rlc0Z1bmMiLCJmaW5kU21hbGxlc3RXaWR0aEFsaWdubWVudCIsInhzcyIsIk5FR0FUSVZFX0lORklOSVRZIiwiaGFsZldpZHRoIiwiYWxpZ25Db29yZGluYXRlcyIsImFsaWduVG8iLCJhbGlnblRvVmFscyIsImFsaWduVG9NaW4iLCJhbGlnblRvTWF4IiwidmVydCIsImhvcml6IiwiYWxpZ25tZW50IiwieHNWYWxzIiwiYmFsYW5jZSIsInVsIiwiaWdub3JlIiwicG9zaXRpb25YIiwiYWRqdXN0ZWRMYXllcmluZyIsImlubmVyIiwic21hbGxlc3RXaWR0aCIsInJhbmtTZXAiLCJwcmV2WSIsIm1heEhlaWdodCIsInBvc2l0aW9uWSIsInNsYWNrIiwidGlnaHRUcmVlIiwibm9kZUVkZ2VzIiwiZWRnZVYiLCJmaW5kTWluU2xhY2tFZGdlIiwic2hpZnRSYW5rcyIsImRpcmVjdGVkIiwibG9uZ2VzdFBhdGgiLCJmZWFzaWJsZVRyZWUiLCJuZXR3b3JrU2ltcGxleCIsInJhbmtlciIsIm5ldHdvcmtTaW1wbGV4UmFua2VyIiwidGlnaHRUcmVlUmFua2VyIiwibG9uZ2VzdFBhdGhSYW5rZXIiLCJpbml0UmFuayIsInByZW9yZGVyIiwiYWxnIiwic2ltcGxpZnkiLCJpbml0TG93TGltVmFsdWVzIiwiaW5pdEN1dFZhbHVlcyIsImxlYXZlRWRnZSIsImV4Y2hhbmdlRWRnZXMiLCJlbnRlckVkZ2UiLCJjdXR2YWx1ZSIsImNhbGNDdXRWYWx1ZSIsImFzc2lnbkN1dFZhbHVlIiwiY2hpbGRJc1RhaWwiLCJncmFwaEVkZ2UiLCJjdXRWYWx1ZSIsImlzT3V0RWRnZSIsInBvaW50c1RvSGVhZCIsIm90aGVyV2VpZ2h0IiwiaGFzRWRnZSIsIm90aGVyQ3V0VmFsdWUiLCJkZnNBc3NpZ25Mb3dMaW0iLCJuZXh0TGltIiwibmVpZ2hib3JzIiwidGFpbExhYmVsIiwiZmxpcCIsImNhbmRpZGF0ZXMiLCJpc0Rlc2NlbmRhbnQiLCJmbGlwcGVkIiwidXBkYXRlUmFua3MiLCJyb290TGFiZWwiLCJzaW1wbGlmaWVkIiwic2ltcGxlTGFiZWwiLCJpc011bHRpZ3JhcGgiLCJzdWNjZXNzb3JXZWlnaHRzIiwid2VpZ2h0TWFwIiwic3VjcyIsInByZWRlY2Vzc29yV2VpZ2h0cyIsInByZWRzIiwibGliIiwiY21wdCIsImNtcHRzIiwibmF2aWdhdGlvbiIsImlzRGlyZWN0ZWQiLCJkb0RmcyIsImRpamtzdHJhIiwid2VpZ2h0RnVuYyIsImVkZ2VGdW5jIiwiUHJpb3JpdHlRdWV1ZSIsImVkZ2VGbiIsInBxIiwidXBkYXRlTmVpZ2hib3JzIiwicHJlZGVjZXNzb3IiLCJkZWNyZWFzZSIsInJlbW92ZU1pbiIsInJ1bkRpamtzdHJhIiwiREVGQVVMVF9XRUlHSFRfRlVOQyIsInRhcmphbiIsInJvd0siLCJyb3dJIiwiaWsiLCJraiIsImlqIiwiYWx0RGlzdGFuY2UiLCJydW5GbG95ZFdhcnNoYWxsIiwiY29tcG9uZW50cyIsImRpamtzdHJhQWxsIiwiZmluZEN5Y2xlcyIsImZsb3lkV2Fyc2hhbGwiLCJpc0FjeWNsaWMiLCJwcmltIiwidG9wc29ydCIsIkN5Y2xlRXhjZXB0aW9uIiwicHJpIiwib25TdGFjayIsImxvd2xpbmsiLCJfYXJyIiwiX2tleUluZGljZXMiLCJrZXlJbmRpY2VzIiwiYXJyIiwiX2RlY3JlYXNlIiwiX3N3YXAiLCJfaGVhcGlmeSIsImxhcmdlc3QiLCJvcmlnQXJySSIsIm9yaWdBcnJKIiwiX2lzRGlyZWN0ZWQiLCJfaXNNdWx0aWdyYXBoIiwiX2lzQ29tcG91bmQiLCJfbGFiZWwiLCJfZGVmYXVsdE5vZGVMYWJlbEZuIiwiX2RlZmF1bHRFZGdlTGFiZWxGbiIsIl9ub2RlcyIsIl9jaGlsZHJlbiIsIl9pbiIsIl9wcmVkcyIsIl9vdXQiLCJfc3VjcyIsIl9lZGdlT2JqcyIsIl9lZGdlTGFiZWxzIiwiaW5jcmVtZW50T3JJbml0RW50cnkiLCJkZWNyZW1lbnRPclJlbW92ZUVudHJ5IiwiZWRnZUFyZ3NUb0lkIiwid18iLCJlZGdlQXJnc1RvT2JqIiwiZWRnZU9ialRvSWQiLCJfbm9kZUNvdW50IiwiX2VkZ2VDb3VudCIsImlzQ29tcG91bmQiLCJuZXdEZWZhdWx0IiwiaXNFbXB0eSIsInNldE5vZGVzIiwiX3JlbW92ZUZyb21QYXJlbnRzQ2hpbGRMaXN0IiwicHJlZHNWIiwic3Vjc1YiLCJ1bmlvbiIsImlzTGVhZiIsImZpbHRlck5vZGVzIiwiZmluZFBhcmVudCIsInNldERlZmF1bHRFZGdlTGFiZWwiLCJlZGdlQ291bnQiLCJzZXRQYXRoIiwidmFsdWVTcGVjaWZpZWQiLCJhcmcwIiwiZnJlZXplIiwib3V0ViIsIndyaXRlTm9kZXMiLCJ3cml0ZUVkZ2VzIiwiZWRnZVZhbHVlIiwid3JpdGUiLCJvcHRpb25zIiwicmVhZCIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiVWludDhBcnJheSIsIldlYWtNYXAiLCJmdW5jIiwidGhpc0FyZyIsIml0ZXJhdGVlIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJiYXNlSW5kZXhPZiIsImNvbXBhcmF0b3IiLCJiYXNlVGltZXMiLCJpc0FyZ3VtZW50cyIsImlzQnVmZmVyIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUFzc2lnblZhbHVlIiwiZXEiLCJvYmpWYWx1ZSIsImNvcHlPYmplY3QiLCJrZXlzSW4iLCJhcnJheUVhY2giLCJhc3NpZ25WYWx1ZSIsImJhc2VBc3NpZ24iLCJiYXNlQXNzaWduSW4iLCJjbG9uZUJ1ZmZlciIsImNvcHlBcnJheSIsImNvcHlTeW1ib2xzIiwiY29weVN5bWJvbHNJbiIsImdldEFsbEtleXMiLCJnZXRBbGxLZXlzSW4iLCJnZXRUYWciLCJpbml0Q2xvbmVBcnJheSIsImluaXRDbG9uZUJ5VGFnIiwiaW5pdENsb25lT2JqZWN0IiwiaXNNYXAiLCJpc09iamVjdCIsImlzU2V0IiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwidGFnIiwiaXNGdW5jIiwic3RhY2tlZCIsInN1YlZhbHVlIiwia2V5c0Z1bmMiLCJwcm9wcyIsIm9iamVjdENyZWF0ZSIsImJhc2VDcmVhdGUiLCJiYXNlRm9yT3duIiwiYmFzZUVhY2giLCJjcmVhdGVCYXNlRWFjaCIsImlzU3ltYm9sIiwiY29tcHV0ZWQiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJhcnJheVB1c2giLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiY2FzdFBhdGgiLCJ0b0tleSIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImJhc2VGaW5kSW5kZXgiLCJiYXNlSXNOYU4iLCJzdHJpY3RJbmRleE9mIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwib2JqZWN0VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJiYXNlTWF0Y2hlcyIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiaXNBcnJheUxpa2UiLCJiYXNlSXNNYXRjaCIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJiYXNlTWVyZ2VEZWVwIiwic2FmZUdldCIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibmV3VmFsdWUiLCJjbG9uZVR5cGVkQXJyYXkiLCJpc0FycmF5TGlrZU9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJtZXJnZUZ1bmMiLCJpc0NvbW1vbiIsImlzVHlwZWQiLCJhcnJheU1hcCIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXAiLCJiYXNlU29ydEJ5IiwiYmFzZVVuYXJ5IiwiY29tcGFyZU11bHRpcGxlIiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiYmFzZVBpY2tCeSIsInBhdGhzIiwiYmFzZUdldCIsImJhc2VTZXQiLCJuYXRpdmVDZWlsIiwibmF0aXZlTWF4IiwiZWFjaEZ1bmMiLCJvdmVyUmVzdCIsInNldFRvU3RyaW5nIiwibmVzdGVkIiwiYmFzZVNldFRvU3RyaW5nIiwiY29tcGFyZXIiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5jbHVkZXNXaXRoIiwiY2FjaGVIYXMiLCJjcmVhdGVTZXQiLCJzZXRUb0FycmF5IiwiaW5jbHVkZXMiLCJzZWVuIiwib3V0ZXIiLCJzZWVuSW5kZXgiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsInN0cmluZ1RvUGF0aCIsImJ5dGVMZW5ndGgiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsInJlRmxhZ3MiLCJyZWdleHAiLCJzeW1ib2xWYWx1ZU9mIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzTnVsbCIsInZhbElzUmVmbGV4aXZlIiwidmFsSXNTeW1ib2wiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwiY29tcGFyZUFzY2VuZGluZyIsIm9iakNyaXRlcmlhIiwiY3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImlzTmV3IiwiZ2V0U3ltYm9scyIsImdldFN5bWJvbHNJbiIsImNvcmVKc0RhdGEiLCJiYXNlUmVzdCIsImlzSXRlcmF0ZWVDYWxsIiwiYXNzaWduZXIiLCJndWFyZCIsIml0ZXJhYmxlIiwiZmluZEluZGV4RnVuYyIsImJhc2VSYW5nZSIsInRvRmluaXRlIiwiYXJyYXlTb21lIiwiaXNQYXJ0aWFsIiwiYXJyTGVuZ3RoIiwib3RoTGVuZ3RoIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJtYXBUb0FycmF5IiwibWVzc2FnZSIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImlzS2V5YWJsZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwiZ2V0UHJvdG90eXBlIiwib3ZlckFyZyIsImdldFByb3RvdHlwZU9mIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJDdG9yIiwiY3RvclN0cmluZyIsImhhc0Z1bmMiLCJyZUhhc1VuaWNvZGUiLCJuYXRpdmVDcmVhdGUiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVN5bWJvbCIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJyZUlzVWludCIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJ1aWQiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJhc3NvY0luZGV4T2YiLCJnZXRNYXBEYXRhIiwibWVtb2l6ZSIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsImJpbmRpbmciLCJhcmciLCJvdGhlckFyZ3MiLCJmcmVlU2VsZiIsInNob3J0T3V0IiwibmF0aXZlTm93IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwiTEFSR0VfQVJSQVlfU0laRSIsImhhc1VuaWNvZGUiLCJ1bmljb2RlU2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwiQ0xPTkVfREVFUF9GTEFHIiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiYmFzZUZpbHRlciIsImNyZWF0ZUZpbmQiLCJ0b0ludGVnZXIiLCJjYXN0RnVuY3Rpb24iLCJkZWZhdWx0VmFsdWUiLCJiYXNlSGFzIiwiaGFzUGF0aCIsImJhc2VIYXNJbiIsImJhc2VJc0FyZ3VtZW50cyIsInN0dWJGYWxzZSIsImJhc2VLZXlzIiwiYmFzZUlzTWFwIiwibm9kZUlzTWFwIiwib2JqZWN0Q3RvclN0cmluZyIsImJhc2VJc1NldCIsIm5vZGVJc1NldCIsImJhc2VJc1R5cGVkQXJyYXkiLCJub2RlSXNUeXBlZEFycmF5IiwiYXJyYXlMaWtlS2V5cyIsImJhc2VLZXlzSW4iLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNUZW1wbGF0ZSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNCcmVhayIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicnNFbW9qaSIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJzdHJpbmdFc2NhcGVzIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwibW9kdWxlRXhwb3J0cyIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsImFycmF5QWdncmVnYXRvciIsInNldHRlciIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsImFycmF5UmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsImJhc2VGaW5kS2V5IiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiYmFzZVZhbHVlcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCJydW5JbkNvbnRleHQiLCJhcnJheVByb3RvIiwiaWRDb3VudGVyIiwib2xkRGFzaCIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlRmxvb3IiLCJuYXRpdmVJc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZU1pbiIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlQXQiLCJza2lwIiwidXBwZXIiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsInZhbHVlc0xlbmd0aCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiYmFzZUd0IiwiYmFzZUludGVyc2VjdGlvbiIsImNhY2hlcyIsIm1heExlbmd0aCIsImJhc2VJbnZva2UiLCJvYmpTdGFja2VkIiwib3RoU3RhY2tlZCIsImJhc2VMdCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsImdldEl0ZXJhdGVlIiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsImJhc2VTZXREYXRhIiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJoaWdoIiwiTUFYX0FSUkFZX0xFTkdUSCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc1VuZGVmaW5lZCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVVuaXEiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJTdGFja2VkIiwib3RoZXJGdW5jIiwiaXNNYXNrYWJsZSIsIm9sZEFycmF5IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsInJhbmQiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJXUkFQX0JJTkRfRkxBRyIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiZmx1c2giLCJkZWZlciIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnRCeSIsImludm9rZSIsIm9taXQiLCJiYXNlUGljayIsInBpY2tCeSIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmRXaXRoIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0cyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsIm5ld0VuZCIsInVuZXNjYXBlIiwiZWFjaFJpZ2h0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwiQXV0b0Zsb3dDb25zdGFudHMiLCJkZWJ1Z0VuYWJsZWQiLCJhYm91dCIsInZpc3VhbCIsIm1pblB4IiwiZGF0YU1hcHBpbmciLCJzb2xpZE9wYWNpdHkiLCJ0cmFuc3BhcmVudE9wYWNpdHkiLCJjb250ZXh0TWVudSIsImZpbHRlck90aGVyVmlzdWFscyIsInByb0ZlYXR1cmVzIiwiZXhwb3J0IiwiZXhwb3J0VG9TdmciLCJleHBvcnRUb0dsaWZmeSIsInByb2dyZXNzQmFyIiwibm9kZVVybCIsInNob3dOb2RlUHJvZ3Jlc3NiYXIiLCJzaG93Tm9kZVVybCIsInNob3dOb2RlRGVzY3JpcHRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kVHJhbnNwYXJlbmN5IiwiYm9yZGVyIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJTdHJva2VXaWR0aCIsImJvcmRlclN0eWxlIiwidGV4dEFsaWdubWVudCIsImZvbnQiLCJmYW1pbHkiLCJjb2xvdXIiLCJ1cmxJY29uWm9vbSIsImVkZ2VDb2xvciIsImVkZ2VTdHlsZSIsImVkZ2VXaWR0aCIsImVkZ2VDYWxjTWV0aG9kIiwidmlld3BvcnQiLCJiYWNrZ3JvdW5kIiwiRGVidWdnZXIiLCJlbmFibGVkIiwiaGVhZGluZyIsInN0YXJ0VGltZSIsImxhc3RDaGVja1RpbWUiLCJ0b0xvY2FsZVN0cmluZyIsInJlcG9ydEV4ZWN1dGlvblRpbWUiLCJlbmRUaW1lIiwiQXV0b0Zsb3ciLCJob3N0T3B0aW9ucyIsIm1hcmdpbiIsImdyYXBoT3B0aW9ucyIsInN0cm9rZVdpZHRoIiwibWFwcGVyIiwibG9nZ2VyIiwidG9vbFRpcFNlcnZpY2UiLCJ0b29sdGlwU2VydmljZVdyYXBwZXIiLCJleHBvcnRVdGlsIiwiX190aGF0IiwiZ2V0U2NoZW1hIiwidXVpZCIsIm5vZGVIVE1MIiwiU291cmNlTmFtZSIsImVkZyIsImdldEVkZ2VTdHlsZSIsImFycm93aGVhZFN0eWxlIiwibGluZUludGVycG9sYXRlIiwicmF3RGF0YSIsInNjaGVtYSIsIm1hcERhdGEiLCJyZW5kZXJGbG93IiwiY3VzdG9tSWQiLCJzdG9wUHJvcGFnYXRpb24iLCJzZWxlY3RlZE5vZGUiLCJwcmV2WCIsInRyYW5zbGF0ZUVkZ2UiLCIxIiwiMiIsImhlYWRPYmoiLCJ0YWlsT2JqIiwiZ2V0Q2FsY1BvaW50cyIsInhmb3JtcyIsImdldFNjYWxlIiwid3NjYWxlIiwiaHNjYWxlIiwiZmluYWxzY2FsZSIsIkF1dG9GbG93RXhwb3J0Iiwibm9kZV9oZWlnaHQiLCJub2RlX3dpZHRoIiwiYWRkRXhwb3J0TWVudSIsIm1lbnVUYWdzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImRpdl9kcm9wdXAiLCJib2R5IiwiZ2V0RXhwb3J0R2xpZmZ5Iiwid2hzIiwibmRlIiwibm9kZUNvbnRlbnQiLCJpZHgiLCJnZXRHbGlmZnlOb2RlSnNvblN0cmluZyIsImVkZ2VDb250ZW50IiwiZ2V0RWRnZUpzb25TdHJpbmciLCJsaW5lMSIsImxpbmUyIiwicmV0IiwiTm9kZVVybCIsImdldE5vZGVUZXh0IiwiZ2V0Tm9kZVVybCIsImNvbnRlbnQiLCJmaWxlTmFtZSIsImNvbnRlbnRUeXBlIiwiZmlsZSIsIkJsb2IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkb3dubG9hZCIsImNsaWNrIiwiZG93bmxvYWRKc29uIiwiZ2V0R2xpZmZ5U3RyaW5nIiwiZ2V0RWxlbWVudEJ5SWQiLCJTb3VyY2VJZCIsInJlZiIsIlNvdXJjZU5hbWUyIiwiVGFyZ2V0SWQiLCJUYXJnZXROYW1lIiwiVGFyZ2V0TmFtZTIiLCJQcm9jZXNzIiwiTm9kZVR5cGUiLCJTb3VyY2VNZWFzdXJlIiwiVGFyZ2V0TWVhc3VyZSIsIkVkZ2VNZWFzdXJlIiwiRGF0YU1hcHBlciIsInBiaU9wdGlvbnMiLCJDT0xPUl9TQ0hFTUEiLCIzIiwiNCIsIjUiLCIwIiwidG90YWxOb2RlQ291bnQiLCJ0b3RhbEVkZ2VDb3VudCIsInJlcGxhY2VTcGVjaWFsQ2hhciIsIm5hbWVDb2wiLCJkZXNjcmlwdGlvbkNvbCIsIm1lYXN1cmVDb2wiLCJ1cmxDb2wiLCJub2RlQm9keUVsZW1lbnQiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm5vZGVDb250ZW50RWxlbWVudCIsIm5vZGVVcmxFbGVtZW50IiwibGFiZWxFbGVtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJkZXNjcmlwdGlvbkVsZW1lbnQiLCJwcm9ncmVzc0VsZW1lbnQiLCJnZXROb2RlTWVhc3VyZSIsImdlZGdlIiwic2hvd0N1c3RvbVN0cm9rZSIsIl9fbm9kZXMiLCJfX2VkZ2VzIiwidXVpZF9zcmMiLCJpZGlmeSIsInV1aWRfdGd0Iiwibm9kZV9zcmMiLCJmaW5kTm9kZSIsInRhcmdldFR5cGUiLCJ1dWlkTWV0YUNvbHVtbiIsImhlYWRlciIsInNlbGVjdGlvbklkIiwiaGlnaGxpZ2h0IiwiZ2V0Tm9kZUVsZW1lbnQiLCJnZXRDb2xvciIsIm5vZGVfdGd0IiwiZ2V0SG9zdFNjaGVtYSIsImRhdGFWaWV3cyIsInRhYmxlIiwicm9sZXMiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIs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SyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJ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QSxHQUNWLElBQUlzL0IsRUFBUyxHQW1CYixPQWxCSXQvQixHQUFXQSxFQUFRK2xDLFVBQVUsSUFBTS9sQyxFQUFRK2xDLFVBQVUsR0FBR0MsT0FDeERobUMsRUFBUStsQyxVQUFVLEdBQUdDLE1BQU05ekcsUUFBUXhaLFFBQVExVCxJQUN2Q0ssT0FBT3NPLEtBQUszTyxFQUFFaWhJLE9BQU92dEgsUUFBUWpULElBQ3JCNjVILEVBQU83NUgsR0FDUDY1SCxFQUFPNzVILEVBQUksS0FBTyxDQUFFaXRCLE9BQVFqdEIsRUFBR2s5SCxJQUFLMzlILEVBQUVraEksYUFFdEM1RyxFQUFPNzVILEdBQUssQ0FBRWl0QixPQUFRanRCLEVBQUdrOUgsSUFBSzM5SCxFQUFFa2hJLGlCQUtoRDVHLEVBQU0sV0FBaUJBLEVBQU0sWUFBa0JBLEVBQU0sU0FDckRBLEVBQU0sV0FBaUJBLEVBQU0sWUFBa0JBLEVBQU0sU0FDckRBLEVBQU0sUUFBY0EsRUFBTSxTQUFlLENBQUU1c0csT0FBUSxLQUFNaXdHLElBQUssTUFDOURyRCxFQUFNLGNBQW9CQSxFQUFNLGVBQXFCLENBQUU1c0csT0FBUSxLQUFNaXdHLElBQUssTUFDMUVyRCxFQUFNLGNBQW9CQSxFQUFNLGVBQXFCLENBQUU1c0csT0FBUSxLQUFNaXdHLElBQUssTUFDMUVyRCxFQUFNLFFBQWNBLEVBQU0sU0FBZSxDQUFFNXNHLE9BQVEsS0FBTWl3RyxJQUFLLE1BQzlEeDFILEtBQUtxeEgsT0FBT3J6SCxJQUFJbTBILEdBQ1RBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC50c1wiKTtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge3BhaXJ9IGZyb20gXCIuL3BhaXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgdmFyaWFuY2UgZnJvbSBcIi4vdmFyaWFuY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbixcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbbWluLCBtYXhdO1xufVxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBiaXNlY3QgZnJvbSBcIi4vYmlzZWN0XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBleHRlbnQgZnJvbSBcIi4vZXh0ZW50XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcbmltcG9ydCByYW5nZSBmcm9tIFwiLi9yYW5nZVwiO1xuaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcIi4vdGlja3NcIjtcbmltcG9ydCBzdHVyZ2VzIGZyb20gXCIuL3RocmVzaG9sZC9zdHVyZ2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4LFxuICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSB2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgeDAgPSB4elswXSxcbiAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB0eiA9IHRpY2tTdGVwKHgwLCB4MSwgdHopO1xuICAgICAgdHogPSByYW5nZShNYXRoLmNlaWwoeDAgLyB0eikgKiB0eiwgeDEsIHR6KTsgLy8gZXhjbHVzaXZlXG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICB2YXIgbSA9IHR6Lmxlbmd0aDtcbiAgICB3aGlsZSAodHpbMF0gPD0geDApIHR6LnNoaWZ0KCksIC0tbTtcbiAgICB3aGlsZSAodHpbbSAtIDFdID4geDEpIHR6LnBvcCgpLCAtLW07XG5cbiAgICB2YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgIGJpbjtcblxuICAgIC8vIEluaXRpYWxpemUgYmlucy5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgYmluID0gYmluc1tpXSA9IFtdO1xuICAgICAgYmluLngwID0gaSA+IDAgPyB0eltpIC0gMV0gOiB4MDtcbiAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICB9XG5cbiAgICAvLyBBc3NpZ24gZGF0YSB0byBiaW5zIGJ5IHZhbHVlLCBpZ25vcmluZyBhbnkgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHggPSB2YWx1ZXNbaV07XG4gICAgICBpZiAoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgIGJpbnNbYmlzZWN0KHR6LCB4LCAwLCBtKV0ucHVzaChkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmlucztcbiAgfVxuXG4gIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgfTtcblxuICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW19bMF0sIF9bMV1dKSwgaGlzdG9ncmFtKSA6IGRvbWFpbjtcbiAgfTtcblxuICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIHJldHVybiBoaXN0b2dyYW07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGJpc2VjdCwgYmlzZWN0UmlnaHQsIGJpc2VjdExlZnR9IGZyb20gXCIuL2Jpc2VjdFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGFzY2VuZGluZ30gZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgYmlzZWN0b3J9IGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3Jvc3N9IGZyb20gXCIuL2Nyb3NzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZGVzY2VuZGluZ30gZnJvbSBcIi4vZGVzY2VuZGluZ1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGRldmlhdGlvbn0gZnJvbSBcIi4vZGV2aWF0aW9uXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZXh0ZW50fSBmcm9tIFwiLi9leHRlbnRcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBoaXN0b2dyYW19IGZyb20gXCIuL2hpc3RvZ3JhbVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRocmVzaG9sZEZyZWVkbWFuRGlhY29uaXN9IGZyb20gXCIuL3RocmVzaG9sZC9mcmVlZG1hbkRpYWNvbmlzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGhyZXNob2xkU2NvdHR9IGZyb20gXCIuL3RocmVzaG9sZC9zY290dFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRocmVzaG9sZFN0dXJnZXN9IGZyb20gXCIuL3RocmVzaG9sZC9zdHVyZ2VzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWF4fSBmcm9tIFwiLi9tYXhcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZWFufSBmcm9tIFwiLi9tZWFuXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgbWVkaWFufSBmcm9tIFwiLi9tZWRpYW5cIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtZXJnZX0gZnJvbSBcIi4vbWVyZ2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtaW59IGZyb20gXCIuL21pblwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBhaXJzfSBmcm9tIFwiLi9wYWlyc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBlcm11dGV9IGZyb20gXCIuL3Blcm11dGVcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBxdWFudGlsZX0gZnJvbSBcIi4vcXVhbnRpbGVcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyByYW5nZX0gZnJvbSBcIi4vcmFuZ2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2FufSBmcm9tIFwiLi9zY2FuXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2h1ZmZsZX0gZnJvbSBcIi4vc2h1ZmZsZVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN1bX0gZnJvbSBcIi4vc3VtXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGlja3MsIHRpY2tJbmNyZW1lbnQsIHRpY2tTdGVwfSBmcm9tIFwiLi90aWNrc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRyYW5zcG9zZX0gZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdmFyaWFuY2V9IGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgemlwfSBmcm9tIFwiLi96aXBcIjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcCA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IGYocCwgcCA9IGFycmF5WysraV0pO1xuICByZXR1cm4gcGFpcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWlyKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gIHZhciBpID0gaW5kZXhlcy5sZW5ndGgsIHBlcm11dGVzID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICByZXR1cm4gcGVybXV0ZXM7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkgdmFsdWVvZiA9IG51bWJlcjtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApKSB8IDAsXG4gICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgY29tcGFyZSkge1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgdmFyIG4sXG4gICAgICBpID0gMCxcbiAgICAgIGogPSAwLFxuICAgICAgeGksXG4gICAgICB4aiA9IHZhbHVlc1tqXTtcblxuICBpZiAoY29tcGFyZSA9PSBudWxsKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgaWYgKGNvbXBhcmUoeGkgPSB2YWx1ZXNbaV0sIHhqKSA8IDAgfHwgY29tcGFyZSh4aiwgeGopICE9PSAwKSB7XG4gICAgICB4aiA9IHhpLCBqID0gaTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29tcGFyZSh4aiwgeGopID09PSAwKSByZXR1cm4gajtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBpMCwgaTEpIHtcbiAgdmFyIG0gPSAoaTEgPT0gbnVsbCA/IGFycmF5Lmxlbmd0aCA6IGkxKSAtIChpMCA9IGkwID09IG51bGwgPyAwIDogK2kwKSxcbiAgICAgIHQsXG4gICAgICBpO1xuXG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgIHQgPSBhcnJheVttICsgaTBdO1xuICAgIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdO1xuICAgIGFycmF5W2kgKyBpMF0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZXNbaV0pIHN1bSArPSB2YWx1ZTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSBzdW0gKz0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1bTtcbn1cbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiLi4vYXJyYXlcIjtcbmltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4uL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQgcXVhbnRpbGUgZnJvbSBcIi4uL3F1YW50aWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgdmFsdWVzID0gbWFwLmNhbGwodmFsdWVzLCBudW1iZXIpLnNvcnQoYXNjZW5kaW5nKTtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgyICogKHF1YW50aWxlKHZhbHVlcywgMC43NSkgLSBxdWFudGlsZSh2YWx1ZXMsIDAuMjUpKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cbiIsImltcG9ydCBkZXZpYXRpb24gZnJvbSBcIi4uL2RldmlhdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMy41ICogZGV2aWF0aW9uKHZhbHVlcykgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJpbXBvcnQgbWluIGZyb20gXCIuL21pblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRyaXgpIHtcbiAgaWYgKCEobiA9IG1hdHJpeC5sZW5ndGgpKSByZXR1cm4gW107XG4gIGZvciAodmFyIGkgPSAtMSwgbSA9IG1pbihtYXRyaXgsIGxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTspIHtcbiAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRyYW5zcG9zZTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgcmV0dXJuIGQubGVuZ3RoO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSAwLFxuICAgICAgaSA9IC0xLFxuICAgICAgbWVhbiA9IDAsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRlbHRhLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgIG1lYW4gKz0gZGVsdGEgLyArK207XG4gICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChtID4gMSkgcmV0dXJuIHN1bSAvIChtIC0gMSk7XG59XG4iLCJpbXBvcnQgdHJhbnNwb3NlIGZyb20gXCIuL3RyYW5zcG9zZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRyYW5zcG9zZShhcmd1bWVudHMpO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImV4cG9ydCB7XG4gIGF4aXNUb3AsXG4gIGF4aXNSaWdodCxcbiAgYXhpc0JvdHRvbSxcbiAgYXhpc0xlZnRcbn0gZnJvbSBcIi4vYXhpc1wiO1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgdG91Y2gsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbmZ1bmN0aW9uIHRvdWNoZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRvdWNoKHRhcmdldCwgZXZlbnQudG91Y2hlcywgaWRlbnRpZmllcik7XG4gIH07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uKSB7XG4gICAgaWYgKGdyb3VwLnNlbGVjdGlvbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24wID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XG4gICAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHQgPT09IDEgJiYgc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uMCAhPT0gbnVsbCAmJiBzZWxlY3Rpb24xICE9PSBudWxsID8gdHdlZW4gOiB0d2VlbigxKTtcbiAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogc2VsZWN0aW9uMTtcbiAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGJydXNoLmNsZWFyID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHJldHVybiAoIWNsZWFuICYmIHRoYXQuX19icnVzaC5lbWl0dGVyKSB8fCBuZXcgRW1pdHRlcih0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgfVxuXG4gIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGJlZm9yZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICBlbHNlIHRoaXMuZW1pdChcImJydXNoXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSBkZWxldGUgdGhpcy5zdGF0ZS5lbWl0dGVyLCB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgJiYgIWV2ZW50LnRvdWNoZXMpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChrZXlzICYmIGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChrZXlzICYmIGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHggPSAwLFxuICAgICAgICBkeSA9IDAsXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBrZXlzICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50ZXIgPSBldmVudC50b3VjaGVzID8gdG91Y2hlcihldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyKSA6IG1vdXNlLFxuICAgICAgICBwb2ludDAgPSBwb2ludGVyKHRoYXQpLFxuICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzLCB0cnVlKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgaWYgKHR5cGUgPT09IFwib3ZlcmxheVwiKSB7XG4gICAgICBpZiAoc2VsZWN0aW9uKSBtb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1xuICAgICAgICBbdzAgPSBkaW0gPT09IFkgPyBXIDogcG9pbnQwWzBdLCBuMCA9IGRpbSA9PT0gWCA/IE4gOiBwb2ludDBbMV1dLFxuICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICBuMCA9IHNlbGVjdGlvblswXVsxXTtcbiAgICAgIGUwID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgfVxuXG4gICAgdzEgPSB3MDtcbiAgICBuMSA9IG4wO1xuICAgIGUxID0gZTA7XG4gICAgczEgPSBzMDtcblxuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcblxuICAgIHZhciBvdmVybGF5ID0gZ3JvdXAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgZW1pdC5tb3ZlZCA9IG1vdmVkO1xuICAgICAgZW1pdC5lbmRlZCA9IGVuZGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IHNlbGVjdChldmVudC52aWV3KVxuICAgICAgICAgIC5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcbiAgICAgIGlmIChrZXlzKSB2aWV3XG4gICAgICAgICAgLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG5cbiAgICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIH1cblxuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICB2YXIgcG9pbnQxID0gcG9pbnRlcih0aGF0KTtcbiAgICAgIGlmIChzaGlmdGluZyAmJiAhbG9ja1ggJiYgIWxvY2tZKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBsb2NrWCA9IHRydWU7XG4gICAgICB9XG4gICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgIHZhciB0O1xuXG4gICAgICBkeCA9IHBvaW50WzBdIC0gcG9pbnQwWzBdO1xuICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgTU9ERV9TUEFDRTpcbiAgICAgICAgY2FzZSBNT0RFX0RSQUc6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblkgPiAwKSBkeSA9IE1hdGgubWF4KE4gLSBzMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0NFTlRFUjoge1xuICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBNYXRoLm1heChXLCBNYXRoLm1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgbjAgLSBkeSAqIHNpZ25ZKSksIHMxID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kZWQoKSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSB8fCBtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4OyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzEgLSBkeDtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbik7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgaWYgKHNoaWZ0aW5nKSB7XG4gICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9ldmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLm1vdmVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmRlZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gbnVtYmVyMihleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KG51bWJlcjIoXykpLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBzZWxlY3Rpb24pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xufVxuIiwiZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBicnVzaCxcbiAgYnJ1c2hYLFxuICBicnVzaFksXG4gIGJydXNoU2VsZWN0aW9uXG59IGZyb20gXCIuL2JydXNoLmpzXCI7XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiIsImltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHttYXgsIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG5mdW5jdGlvbiBjb21wYXJlVmFsdWUoY29tcGFyZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlKFxuICAgICAgYS5zb3VyY2UudmFsdWUgKyBhLnRhcmdldC52YWx1ZSxcbiAgICAgIGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWVcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHBhZEFuZ2xlID0gMCxcbiAgICAgIHNvcnRHcm91cHMgPSBudWxsLFxuICAgICAgc29ydFN1Ymdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0Q2hvcmRzID0gbnVsbDtcblxuICBmdW5jdGlvbiBjaG9yZChtYXRyaXgpIHtcbiAgICB2YXIgbiA9IG1hdHJpeC5sZW5ndGgsXG4gICAgICAgIGdyb3VwU3VtcyA9IFtdLFxuICAgICAgICBncm91cEluZGV4ID0gcmFuZ2UobiksXG4gICAgICAgIHN1Ymdyb3VwSW5kZXggPSBbXSxcbiAgICAgICAgY2hvcmRzID0gW10sXG4gICAgICAgIGdyb3VwcyA9IGNob3Jkcy5ncm91cHMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShuICogbiksXG4gICAgICAgIGssXG4gICAgICAgIHgsXG4gICAgICAgIHgwLFxuICAgICAgICBkeCxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN1bS5cbiAgICBrID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeCA9IDAsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICB9XG4gICAgICBncm91cFN1bXMucHVzaCh4KTtcbiAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChyYW5nZShuKSk7XG4gICAgICBrICs9IHg7XG4gICAgfVxuXG4gICAgLy8gU29ydCBncm91cHPigKZcbiAgICBpZiAoc29ydEdyb3VwcykgZ3JvdXBJbmRleC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICB9KTtcblxuICAgIC8vIFNvcnQgc3ViZ3JvdXBz4oCmXG4gICAgaWYgKHNvcnRTdWJncm91cHMpIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICBkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaV1bYV0sIG1hdHJpeFtpXVtiXSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIENvbnZlcnQgdGhlIHN1bSB0byBzY2FsaW5nIGZhY3RvciBmb3IgWzAsIDJwaV0uXG4gICAgLy8gVE9ETyBBbGxvdyBzdGFydCBhbmQgZW5kIGFuZ2xlIHRvIGJlIHNwZWNpZmllZD9cbiAgICAvLyBUT0RPIEFsbG93IHBhZGRpbmcgdG8gYmUgc3BlY2lmaWVkIGFzIHBlcmNlbnRhZ2U/XG4gICAgayA9IG1heCgwLCB0YXUgLSBwYWRBbmdsZSAqIG4pIC8gaztcbiAgICBkeCA9IGsgPyBwYWRBbmdsZSA6IHRhdSAvIG47XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzdGFydCBhbmQgZW5kIGFuZ2xlIGZvciBlYWNoIGdyb3VwIGFuZCBzdWJncm91cC5cbiAgICAvLyBOb3RlOiBPcGVyYSBoYXMgYSBidWcgcmVvcmRlcmluZyBvYmplY3QgbGl0ZXJhbCBwcm9wZXJ0aWVzIVxuICAgIHggPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4MCA9IHgsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgdmFyIGRpID0gZ3JvdXBJbmRleFtpXSxcbiAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXG4gICAgICAgICAgICB2ID0gbWF0cml4W2RpXVtkal0sXG4gICAgICAgICAgICBhMCA9IHgsXG4gICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XG4gICAgICAgIHN1Ymdyb3Vwc1tkaiAqIG4gKyBkaV0gPSB7XG4gICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgIHN1YmluZGV4OiBkaixcbiAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgdmFsdWU6IHZcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGdyb3Vwc1tkaV0gPSB7XG4gICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgc3RhcnRBbmdsZTogeDAsXG4gICAgICAgIGVuZEFuZ2xlOiB4LFxuICAgICAgICB2YWx1ZTogZ3JvdXBTdW1zW2RpXVxuICAgICAgfTtcbiAgICAgIHggKz0gZHg7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgY2hvcmRzIGZvciBlYWNoIChub24tZW1wdHkpIHN1Ymdyb3VwLXN1Ymdyb3VwIGxpbmsuXG4gICAgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaiA9IGkgLSAxOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2ogKiBuICsgaV0sXG4gICAgICAgICAgICB0YXJnZXQgPSBzdWJncm91cHNbaSAqIG4gKyBqXTtcbiAgICAgICAgaWYgKHNvdXJjZS52YWx1ZSB8fCB0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICBjaG9yZHMucHVzaChzb3VyY2UudmFsdWUgPCB0YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgPyB7c291cmNlOiB0YXJnZXQsIHRhcmdldDogc291cmNlfVxuICAgICAgICAgICAgICA6IHtzb3VyY2U6IHNvdXJjZSwgdGFyZ2V0OiB0YXJnZXR9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3J0Q2hvcmRzID8gY2hvcmRzLnNvcnQoc29ydENob3JkcykgOiBjaG9yZHM7XG4gIH1cblxuICBjaG9yZC5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IG1heCgwLCBfKSwgY2hvcmQpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0R3JvdXBzID0gXywgY2hvcmQpIDogc29ydEdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRTdWJncm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0U3ViZ3JvdXBzO1xuICB9O1xuXG4gIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gc29ydENob3JkcyA9IG51bGwgOiAoc29ydENob3JkcyA9IGNvbXBhcmVWYWx1ZShfKSkuXyA9IF8sIGNob3JkKSA6IHNvcnRDaG9yZHMgJiYgc29ydENob3Jkcy5fO1xuICB9O1xuXG4gIHJldHVybiBjaG9yZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGNob3JkfSBmcm9tIFwiLi9jaG9yZFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHJpYmJvbn0gZnJvbSBcIi4vcmliYm9uXCI7XG4iLCJleHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2NvcywgaGFsZlBpLCBzaW59IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNvdXJjZShkKSB7XG4gIHJldHVybiBkLnNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRhcmdldChkKSB7XG4gIHJldHVybiBkLnRhcmdldDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gIHJldHVybiBkLnJhZGl1cztcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzb3VyY2UgPSBkZWZhdWx0U291cmNlLFxuICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcbiAgICAgIHJhZGl1cyA9IGRlZmF1bHRSYWRpdXMsXG4gICAgICBzdGFydEFuZ2xlID0gZGVmYXVsdFN0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGRlZmF1bHRFbmRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICBzciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSBzLCBhcmd2KSksXG4gICAgICAgIHNhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGksXG4gICAgICAgIHNhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICBzeDAgPSBzciAqIGNvcyhzYTApLFxuICAgICAgICBzeTAgPSBzciAqIHNpbihzYTApLFxuICAgICAgICB0ciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSB0LCBhcmd2KSksXG4gICAgICAgIHRhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGksXG4gICAgICAgIHRhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgY29udGV4dC5tb3ZlVG8oc3gwLCBzeTApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7IC8vIFRPRE8gc3IgIT09IHRyP1xuICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHRyICogY29zKHRhMCksIHRyICogc2luKHRhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICB9XG4gICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHN4MCwgc3kwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCByaWJib24pIDogcmFkaXVzO1xuICB9O1xuXG4gIHJpYmJvbi5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBlbmRBbmdsZTtcbiAgfTtcblxuICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIHJpYmJvbikgOiBzb3VyY2U7XG4gIH07XG5cbiAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xuICB9O1xuXG4gIHJpYmJvbi5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCByaWJib24pIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gcmliYm9uO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciBlbnRyaWVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGVudHJpZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiBtYXBba2V5XX0pO1xuICByZXR1cm4gZW50cmllcztcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBuZXN0fSBmcm9tIFwiLi9uZXN0XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2V0fSBmcm9tIFwiLi9zZXRcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtYXB9IGZyb20gXCIuL21hcFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGtleXN9IGZyb20gXCIuL2tleXNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB2YWx1ZXN9IGZyb20gXCIuL3ZhbHVlc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGVudHJpZXN9IGZyb20gXCIuL2VudHJpZXNcIjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCJleHBvcnQgdmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwO1xuIiwiaW1wb3J0IG1hcCBmcm9tIFwiLi9tYXBcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwKCksXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUmVzdWx0KCk7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbih2YWx1ZXMsIGtleSkge1xuICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XG4gICAgdmFyIGFycmF5LCBzb3J0S2V5ID0gc29ydEtleXNbZGVwdGggLSAxXTtcbiAgICBpZiAocm9sbHVwICE9IG51bGwgJiYgZGVwdGggPj0ga2V5cy5sZW5ndGgpIGFycmF5ID0gbWFwLmVudHJpZXMoKTtcbiAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xuICAgIHJldHVybiBzb3J0S2V5ICE9IG51bGwgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTsgfSkgOiBhcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXN0ID0ge1xuICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXG4gICAgbWFwOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTsgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTsgfSxcbiAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0S2V5czogZnVuY3Rpb24ob3JkZXIpIHsgc29ydEtleXNba2V5cy5sZW5ndGggLSAxXSA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0VmFsdWVzID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCwga2V5LCB2YWx1ZSkge1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIG1hcCwgcHJlZml4fSBmcm9tIFwiLi9tYXBcIjtcblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiLFxuICAgIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHk6IGZ1bmN0aW9uKGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHRoaXMuY29uc3RydWN0b3IsIHRoaXMsIGNoYW5uZWxzKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2w6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwiKVxuICAgICAgICArICh0aGlzLmggfHwgMCkgKyBcIiwgXCJcbiAgICAgICAgKyAodGhpcy5zIHx8IDApICogMTAwICsgXCIlLCBcIlxuICAgICAgICArICh0aGlzLmwgfHwgMCkgKiAxMDAgKyBcIiVcIlxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJleHBvcnQge2RlZmF1bHQgYXMgY29sb3IsIHJnYiwgaHNsfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGxhYiwgaGNsLCBsY2gsIGdyYXl9IGZyb20gXCIuL2xhYi5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1YmVoZWxpeH0gZnJvbSBcIi4vY3ViZWhlbGl4LmpzXCI7XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcbmltcG9ydCB7Q29sb3IsIHJnYkNvbnZlcnQsIFJnYn0gZnJvbSBcIi4vY29sb3IuanNcIjtcbmltcG9ydCB7ZGVnMnJhZCwgcmFkMmRlZ30gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG4vLyBodHRwczovL29ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBoY2wybGFiKG8pO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCA8IG8ubCAmJiBvLmwgPCAxMDAgPyAwIDogTmFOLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGNoKGwsIGMsIGgsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGwpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBoY2wybGFiKG8pIHtcbiAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGNsMmxhYih0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyaW5nKSB7XG4gIHZhciBpID0gMCwgbiA9IHJpbmcubGVuZ3RoLCBhcmVhID0gcmluZ1tuIC0gMV1bMV0gKiByaW5nWzBdWzBdIC0gcmluZ1tuIC0gMV1bMF0gKiByaW5nWzBdWzFdO1xuICB3aGlsZSAoKytpIDwgbikgYXJlYSArPSByaW5nW2kgLSAxXVsxXSAqIHJpbmdbaV1bMF0gLSByaW5nW2kgLSAxXVswXSAqIHJpbmdbaV1bMV07XG4gIHJldHVybiBhcmVhO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbiIsIi8vIFRPRE8gT3B0aW1pemUgZWRnZSBjYXNlcy5cbi8vIFRPRE8gT3B0aW1pemUgaW5kZXggY2FsY3VsYXRpb24uXG4vLyBUT0RPIE9wdGltaXplIGFyZ3VtZW50cy5cbmV4cG9ydCBmdW5jdGlvbiBibHVyWChzb3VyY2UsIHRhcmdldCwgcikge1xuICB2YXIgbiA9IHNvdXJjZS53aWR0aCxcbiAgICAgIG0gPSBzb3VyY2UuaGVpZ2h0LFxuICAgICAgdyA9IChyIDw8IDEpICsgMTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgc3IgPSAwOyBpIDwgbiArIHI7ICsraSkge1xuICAgICAgaWYgKGkgPCBuKSB7XG4gICAgICAgIHNyICs9IHNvdXJjZS5kYXRhW2kgKyBqICogbl07XG4gICAgICB9XG4gICAgICBpZiAoaSA+PSByKSB7XG4gICAgICAgIGlmIChpID49IHcpIHtcbiAgICAgICAgICBzciAtPSBzb3VyY2UuZGF0YVtpIC0gdyArIGogKiBuXTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuZGF0YVtpIC0gciArIGogKiBuXSA9IHNyIC8gTWF0aC5taW4oaSArIDEsIG4gLSAxICsgdyAtIGksIHcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBUT0RPIE9wdGltaXplIGVkZ2UgY2FzZXMuXG4vLyBUT0RPIE9wdGltaXplIGluZGV4IGNhbGN1bGF0aW9uLlxuLy8gVE9ETyBPcHRpbWl6ZSBhcmd1bWVudHMuXG5leHBvcnQgZnVuY3Rpb24gYmx1clkoc291cmNlLCB0YXJnZXQsIHIpIHtcbiAgdmFyIG4gPSBzb3VyY2Uud2lkdGgsXG4gICAgICBtID0gc291cmNlLmhlaWdodCxcbiAgICAgIHcgPSAociA8PCAxKSArIDE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIHNyID0gMDsgaiA8IG0gKyByOyArK2opIHtcbiAgICAgIGlmIChqIDwgbSkge1xuICAgICAgICBzciArPSBzb3VyY2UuZGF0YVtpICsgaiAqIG5dO1xuICAgICAgfVxuICAgICAgaWYgKGogPj0gcikge1xuICAgICAgICBpZiAoaiA+PSB3KSB7XG4gICAgICAgICAgc3IgLT0gc291cmNlLmRhdGFbaSArIChqIC0gdykgKiBuXTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuZGF0YVtpICsgKGogLSByKSAqIG5dID0gc3IgLyBNYXRoLm1pbihqICsgMSwgbSAtIDEgKyB3IC0gaiwgdyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJpbmcsIGhvbGUpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGhvbGUubGVuZ3RoLCBjO1xuICB3aGlsZSAoKytpIDwgbikgaWYgKGMgPSByaW5nQ29udGFpbnMocmluZywgaG9sZVtpXSkpIHJldHVybiBjO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gcmluZ0NvbnRhaW5zKHJpbmcsIHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSwgY29udGFpbnMgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSByaW5nLmxlbmd0aCwgaiA9IG4gLSAxOyBpIDwgbjsgaiA9IGkrKykge1xuICAgIHZhciBwaSA9IHJpbmdbaV0sIHhpID0gcGlbMF0sIHlpID0gcGlbMV0sIHBqID0gcmluZ1tqXSwgeGogPSBwalswXSwgeWogPSBwalsxXTtcbiAgICBpZiAoc2VnbWVudENvbnRhaW5zKHBpLCBwaiwgcG9pbnQpKSByZXR1cm4gMDtcbiAgICBpZiAoKCh5aSA+IHkpICE9PSAoeWogPiB5KSkgJiYgKCh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSkpKSBjb250YWlucyA9IC1jb250YWlucztcbiAgfVxuICByZXR1cm4gY29udGFpbnM7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRDb250YWlucyhhLCBiLCBjKSB7XG4gIHZhciBpOyByZXR1cm4gY29sbGluZWFyKGEsIGIsIGMpICYmIHdpdGhpbihhW2kgPSArKGFbMF0gPT09IGJbMF0pXSwgY1tpXSwgYltpXSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxpbmVhcihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSA9PT0gKGNbMF0gLSBhWzBdKSAqIChiWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihwLCBxLCByKSB7XG4gIHJldHVybiBwIDw9IHEgJiYgcSA8PSByIHx8IHIgPD0gcSAmJiBxIDw9IHA7XG59XG4iLCJpbXBvcnQge2V4dGVudCwgdGhyZXNob2xkU3R1cmdlcywgdGlja1N0ZXAsIHJhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcblxudmFyIGNhc2VzID0gW1xuICBbXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzAuNSwgMS4wXV0sIFtbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjAsIDAuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dLCBbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDEuNV1dXSxcbiAgW11cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgdGhyZXNob2xkID0gdGhyZXNob2xkU3R1cmdlcyxcbiAgICAgIHNtb290aCA9IHNtb290aExpbmVhcjtcblxuICBmdW5jdGlvbiBjb250b3Vycyh2YWx1ZXMpIHtcbiAgICB2YXIgdHogPSB0aHJlc2hvbGQodmFsdWVzKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIGRvbWFpbiA9IGV4dGVudCh2YWx1ZXMpLCBzdGFydCA9IGRvbWFpblswXSwgc3RvcCA9IGRvbWFpblsxXTtcbiAgICAgIHR6ID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoTWF0aC5mbG9vcihzdGFydCAvIHR6KSAqIHR6LCBNYXRoLmZsb29yKHN0b3AgLyB0eikgKiB0eiwgdHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eiA9IHR6LnNsaWNlKCkuc29ydChhc2NlbmRpbmcpO1xuICAgIH1cblxuICAgIHJldHVybiB0ei5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjb250b3VyKHZhbHVlcywgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQWNjdW11bGF0ZSwgc21vb3RoIGNvbnRvdXIgcmluZ3MsIGFzc2lnbiBob2xlcyB0byBleHRlcmlvciByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL3NoYXBlZmlsZS9ibG9iL3YwLjYuMi9zaHAvcG9seWdvbi5qc1xuICBmdW5jdGlvbiBjb250b3VyKHZhbHVlcywgdmFsdWUpIHtcbiAgICB2YXIgcG9seWdvbnMgPSBbXSxcbiAgICAgICAgaG9sZXMgPSBbXTtcblxuICAgIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGZ1bmN0aW9uKHJpbmcpIHtcbiAgICAgIHNtb290aChyaW5nLCB2YWx1ZXMsIHZhbHVlKTtcbiAgICAgIGlmIChhcmVhKHJpbmcpID4gMCkgcG9seWdvbnMucHVzaChbcmluZ10pO1xuICAgICAgZWxzZSBob2xlcy5wdXNoKHJpbmcpO1xuICAgIH0pO1xuXG4gICAgaG9sZXMuZm9yRWFjaChmdW5jdGlvbihob2xlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb25zLmxlbmd0aCwgcG9seWdvbjsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoY29udGFpbnMoKHBvbHlnb24gPSBwb2x5Z29uc1tpXSlbMF0sIGhvbGUpICE9PSAtMSkge1xuICAgICAgICAgIHBvbHlnb24ucHVzaChob2xlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk11bHRpUG9seWdvblwiLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgY29vcmRpbmF0ZXM6IHBvbHlnb25zXG4gICAgfTtcbiAgfVxuXG4gIC8vIE1hcmNoaW5nIHNxdWFyZXMgd2l0aCBpc29saW5lcyBzdGl0Y2hlZCBpbnRvIHJpbmdzLlxuICAvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdG9wb2pzb24vdG9wb2pzb24tY2xpZW50L2Jsb2IvdjMuMC4wL3NyYy9zdGl0Y2guanNcbiAgZnVuY3Rpb24gaXNvcmluZ3ModmFsdWVzLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnJhZ21lbnRCeVN0YXJ0ID0gbmV3IEFycmF5LFxuICAgICAgICBmcmFnbWVudEJ5RW5kID0gbmV3IEFycmF5LFxuICAgICAgICB4LCB5LCB0MCwgdDEsIHQyLCB0MztcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGZpcnN0IHJvdyAoeSA9IC0xLCB0MiA9IHQzID0gMCkuXG4gICAgeCA9IHkgPSAtMTtcbiAgICB0MSA9IHZhbHVlc1swXSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDAgPSB0MSwgdDEgPSB2YWx1ZXNbeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuICAgIGNhc2VzW3QxIDw8IDBdLmZvckVhY2goc3RpdGNoKTtcblxuICAgIC8vIEdlbmVyYWwgY2FzZSBmb3IgdGhlIGludGVybWVkaWF0ZSByb3dzLlxuICAgIHdoaWxlICgrK3kgPCBkeSAtIDEpIHtcbiAgICAgIHggPSAtMTtcbiAgICAgIHQxID0gdmFsdWVzW3kgKiBkeCArIGR4XSA+PSB2YWx1ZTtcbiAgICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgICBjYXNlc1t0MSA8PCAxIHwgdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgICB0MCA9IHQxLCB0MSA9IHZhbHVlc1t5ICogZHggKyBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgICBjYXNlc1t0MCB8IHQxIDw8IDEgfCB0MiA8PCAyIHwgdDMgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgfVxuICAgICAgY2FzZXNbdDEgfCB0MiA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0aGUgbGFzdCByb3cgKHkgPSBkeSAtIDEsIHQwID0gdDEgPSAwKS5cbiAgICB4ID0gLTE7XG4gICAgdDIgPSB2YWx1ZXNbeSAqIGR4XSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MiA8PCAyXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgZnVuY3Rpb24gc3RpdGNoKGxpbmUpIHtcbiAgICAgIHZhciBzdGFydCA9IFtsaW5lWzBdWzBdICsgeCwgbGluZVswXVsxXSArIHldLFxuICAgICAgICAgIGVuZCA9IFtsaW5lWzFdWzBdICsgeCwgbGluZVsxXVsxXSArIHldLFxuICAgICAgICAgIHN0YXJ0SW5kZXggPSBpbmRleChzdGFydCksXG4gICAgICAgICAgZW5kSW5kZXggPSBpbmRleChlbmQpLFxuICAgICAgICAgIGYsIGc7XG4gICAgICBpZiAoZiA9IGZyYWdtZW50QnlFbmRbc3RhcnRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2cuZW5kXSA9IHtzdGFydDogZi5zdGFydCwgZW5kOiBnLmVuZCwgcmluZzogZi5yaW5nLmNvbmNhdChnLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgZnJhZ21lbnRCeUVuZFtmLmVuZCA9IGVuZEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZiA9IGZyYWdtZW50QnlTdGFydFtlbmRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtnLmVuZF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2YuZW5kXSA9IHtzdGFydDogZy5zdGFydCwgZW5kOiBmLmVuZCwgcmluZzogZy5yaW5nLmNvbmNhdChmLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBmLnJpbmcudW5zaGlmdChzdGFydCk7XG4gICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnQgPSBzdGFydEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdtZW50QnlTdGFydFtzdGFydEluZGV4XSA9IGZyYWdtZW50QnlFbmRbZW5kSW5kZXhdID0ge3N0YXJ0OiBzdGFydEluZGV4LCBlbmQ6IGVuZEluZGV4LCByaW5nOiBbc3RhcnQsIGVuZF19O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4KHBvaW50KSB7XG4gICAgcmV0dXJuIHBvaW50WzBdICogMiArIHBvaW50WzFdICogKGR4ICsgMSkgKiA0O1xuICB9XG5cbiAgZnVuY3Rpb24gc21vb3RoTGluZWFyKHJpbmcsIHZhbHVlcywgdmFsdWUpIHtcbiAgICByaW5nLmZvckVhY2goZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRbMF0sXG4gICAgICAgICAgeSA9IHBvaW50WzFdLFxuICAgICAgICAgIHh0ID0geCB8IDAsXG4gICAgICAgICAgeXQgPSB5IHwgMCxcbiAgICAgICAgICB2MCxcbiAgICAgICAgICB2MSA9IHZhbHVlc1t5dCAqIGR4ICsgeHRdO1xuICAgICAgaWYgKHggPiAwICYmIHggPCBkeCAmJiB4dCA9PT0geCkge1xuICAgICAgICB2MCA9IHZhbHVlc1t5dCAqIGR4ICsgeHQgLSAxXTtcbiAgICAgICAgcG9pbnRbMF0gPSB4ICsgKHZhbHVlIC0gdjApIC8gKHYxIC0gdjApIC0gMC41O1xuICAgICAgfVxuICAgICAgaWYgKHkgPiAwICYmIHkgPCBkeSAmJiB5dCA9PT0geSkge1xuICAgICAgICB2MCA9IHZhbHVlc1soeXQgLSAxKSAqIGR4ICsgeHRdO1xuICAgICAgICBwb2ludFsxXSA9IHkgKyAodmFsdWUgLSB2MCkgLyAodjEgLSB2MCkgLSAwLjU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb250b3Vycy5jb250b3VyID0gY29udG91cjtcblxuICBjb250b3Vycy5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguY2VpbChfWzBdKSwgXzEgPSBNYXRoLmNlaWwoX1sxXSk7XG4gICAgaWYgKCEoXzAgPiAwKSB8fCAhKF8xID4gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgY29udG91cnM7XG4gIH07XG5cbiAgY29udG91cnMudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBjb250b3VycykgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgY29udG91cnMuc21vb3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNtb290aCA9IF8gPyBzbW9vdGhMaW5lYXIgOiBub29wLCBjb250b3VycykgOiBzbW9vdGggPT09IHNtb290aExpbmVhcjtcbiAgfTtcblxuICByZXR1cm4gY29udG91cnM7XG59XG4iLCJpbXBvcnQge21heCwgcmFuZ2UsIHRpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2JsdXJYLCBibHVyWX0gZnJvbSBcIi4vYmx1clwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY29udG91cnMgZnJvbSBcIi4vY29udG91cnNcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdlaWdodCgpIHtcbiAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IGRlZmF1bHRYLFxuICAgICAgeSA9IGRlZmF1bHRZLFxuICAgICAgd2VpZ2h0ID0gZGVmYXVsdFdlaWdodCxcbiAgICAgIGR4ID0gOTYwLFxuICAgICAgZHkgPSA1MDAsXG4gICAgICByID0gMjAsIC8vIGJsdXIgcmFkaXVzXG4gICAgICBrID0gMiwgLy8gbG9nMihncmlkIGNlbGwgc2l6ZSlcbiAgICAgIG8gPSByICogMywgLy8gZ3JpZCBvZmZzZXQsIHRvIHBhZCBmb3IgYmx1clxuICAgICAgbiA9IChkeCArIG8gKiAyKSA+PiBrLCAvLyBncmlkIHdpZHRoXG4gICAgICBtID0gKGR5ICsgbyAqIDIpID4+IGssIC8vIGdyaWQgaGVpZ2h0XG4gICAgICB0aHJlc2hvbGQgPSBjb25zdGFudCgyMCk7XG5cbiAgZnVuY3Rpb24gZGVuc2l0eShkYXRhKSB7XG4gICAgdmFyIHZhbHVlczAgPSBuZXcgRmxvYXQzMkFycmF5KG4gKiBtKSxcbiAgICAgICAgdmFsdWVzMSA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIG0pO1xuXG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGQsIGksIGRhdGEpIHtcbiAgICAgIHZhciB4aSA9ICgreChkLCBpLCBkYXRhKSArIG8pID4+IGssXG4gICAgICAgICAgeWkgPSAoK3koZCwgaSwgZGF0YSkgKyBvKSA+PiBrLFxuICAgICAgICAgIHdpID0gK3dlaWdodChkLCBpLCBkYXRhKTtcbiAgICAgIGlmICh4aSA+PSAwICYmIHhpIDwgbiAmJiB5aSA+PSAwICYmIHlpIDwgbSkge1xuICAgICAgICB2YWx1ZXMwW3hpICsgeWkgKiBuXSArPSB3aTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE8gT3B0aW1pemUuXG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG4gICAgYmx1clgoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMX0sIHIgPj4gayk7XG4gICAgYmx1clkoe3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCB7d2lkdGg6IG4sIGhlaWdodDogbSwgZGF0YTogdmFsdWVzMH0sIHIgPj4gayk7XG5cbiAgICB2YXIgdHogPSB0aHJlc2hvbGQodmFsdWVzMCk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHZhciBzdG9wID0gbWF4KHZhbHVlczApO1xuICAgICAgdHogPSB0aWNrU3RlcCgwLCBzdG9wLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKDAsIE1hdGguZmxvb3Ioc3RvcCAvIHR6KSAqIHR6LCB0eik7XG4gICAgICB0ei5zaGlmdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb250b3VycygpXG4gICAgICAgIC50aHJlc2hvbGRzKHR6KVxuICAgICAgICAuc2l6ZShbbiwgbV0pXG4gICAgICAodmFsdWVzMClcbiAgICAgICAgLm1hcCh0cmFuc2Zvcm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtKGdlb21ldHJ5KSB7XG4gICAgZ2VvbWV0cnkudmFsdWUgKj0gTWF0aC5wb3coMiwgLTIgKiBrKTsgLy8gRGVuc2l0eSBpbiBwb2ludHMgcGVyIHNxdWFyZSBwaXhlbC5cbiAgICBnZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvbHlnb24pO1xuICAgIHJldHVybiBnZW9tZXRyeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvbHlnb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUmluZyhjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2godHJhbnNmb3JtUG9pbnQpO1xuICB9XG5cbiAgLy8gVE9ETyBPcHRpbWl6ZS5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlc1swXSA9IGNvb3JkaW5hdGVzWzBdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gY29vcmRpbmF0ZXNbMV0gKiBNYXRoLnBvdygyLCBrKSAtIG87XG4gIH1cblxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgbyA9IHIgKiAzO1xuICAgIG4gPSAoZHggKyBvICogMikgPj4gaztcbiAgICBtID0gKGR5ICsgbyAqIDIpID4+IGs7XG4gICAgcmV0dXJuIGRlbnNpdHk7XG4gIH1cblxuICBkZW5zaXR5LnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHg7XG4gIH07XG5cbiAgZGVuc2l0eS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB5O1xuICB9O1xuXG4gIGRlbnNpdHkud2VpZ2h0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdlaWdodCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBkZW5zaXR5KSA6IHdlaWdodDtcbiAgfTtcblxuICBkZW5zaXR5LnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgdmFyIF8wID0gTWF0aC5jZWlsKF9bMF0pLCBfMSA9IE1hdGguY2VpbChfWzFdKTtcbiAgICBpZiAoIShfMCA+PSAwKSAmJiAhKF8wID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNpemVcIik7XG4gICAgcmV0dXJuIGR4ID0gXzAsIGR5ID0gXzEsIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkuY2VsbFNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gMSA8PCBrO1xuICAgIGlmICghKChfID0gK18pID49IDEpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNlbGwgc2l6ZVwiKTtcbiAgICByZXR1cm4gayA9IE1hdGguZmxvb3IoTWF0aC5sb2coXykgLyBNYXRoLkxOMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIGRlbnNpdHkudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBkZW5zaXR5KSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICBkZW5zaXR5LmJhbmR3aWR0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQociAqIChyICsgMSkpO1xuICAgIGlmICghKChfID0gK18pID49IDApKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJhbmR3aWR0aFwiKTtcbiAgICByZXR1cm4gciA9IE1hdGgucm91bmQoKE1hdGguc3FydCg0ICogXyAqIF8gKyAxKSAtIDEpIC8gMiksIHJlc2l6ZSgpO1xuICB9O1xuXG4gIHJldHVybiBkZW5zaXR5O1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGNvbnRvdXJzfSBmcm9tIFwiLi9jb250b3Vyc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGNvbnRvdXJEZW5zaXR5fSBmcm9tIFwiLi9kZW5zaXR5XCI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSB8fCAvW1xccy5dLy50ZXN0KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGRpc3BhdGNofSBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZHJhZywge3llc2RyYWd9IGZyb20gXCIuL25vZHJhZy5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBEcmFnRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN1YmplY3QoZCkge1xuICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV2ZW50LngsIHk6IGV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBnZXN0dXJlcyA9IHt9LFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICBhY3RpdmUgPSAwLFxuICAgICAgbW91c2Vkb3dueCxcbiAgICAgIG1vdXNlZG93bnksXG4gICAgICBtb3VzZW1vdmluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGdlc3R1cmUgPSBiZWZvcmVzdGFydChcIm1vdXNlXCIsIGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBtb3VzZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCB0cnVlKTtcbiAgICBub2RyYWcoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIG1vdXNlbW92aW5nID0gZmFsc2U7XG4gICAgbW91c2Vkb3dueCA9IGV2ZW50LmNsaWVudFg7XG4gICAgbW91c2Vkb3dueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsIGR5ID0gZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgIG5vZXZlbnQoKTtcbiAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXNbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgICAgIGdlc3R1cmUoXCJlbmRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBzLCBkeCwgZHksXG4gICAgICAgIHN1Ymxpc3RlbmVycyA9IGxpc3RlbmVycy5jb3B5KCk7XG5cbiAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgoZXZlbnQuc3ViamVjdCA9IHMgPSBzdWJqZWN0LmFwcGx5KHRoYXQsIGFyZ3MpKSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkpIHJldHVybjtcblxuICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkXSwgLS1hY3RpdmU7IC8vIG5vYnJlYWtcbiAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgdHlwZSwgcywgaWQsIG4sIHBbMF0gKyBkeCwgcFsxXSArIGR5LCBwWzBdIC0gcDBbMF0sIHBbMV0gLSBwMFsxXSwgc3VibGlzdGVuZXJzKSwgc3VibGlzdGVuZXJzLmFwcGx5LCBzdWJsaXN0ZW5lcnMsIFt0eXBlLCB0aGF0LCBhcmdzXSk7XG4gICAgfTtcbiAgfVxuXG4gIGRyYWcuZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gIH07XG5cbiAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGFpbmVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBjb250YWluZXI7XG4gIH07XG5cbiAgZHJhZy5zdWJqZWN0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN1YmplY3QgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gIH07XG5cbiAgZHJhZy50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGRyYWcgOiB2YWx1ZTtcbiAgfTtcblxuICBkcmFnLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIGRyYWcpIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gZHJhZztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBkcmFnfSBmcm9tIFwiLi9kcmFnLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZHJhZ0Rpc2FibGUsIHllc2RyYWcgYXMgZHJhZ0VuYWJsZX0gZnJvbSBcIi4vbm9kcmFnLmpzXCI7XG4iLCJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQgZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geWVzZHJhZyh2aWV3LCBub2NsaWNrKSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgaWYgKG5vY2xpY2spIHtcbiAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwiaW1wb3J0IHtldmVudH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9UeXBlKG9iamVjdCkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV0udHJpbSgpLCBudW1iZXIsIG07XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBudWxsO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcInRydWVcIikgdmFsdWUgPSB0cnVlO1xuICAgIGVsc2UgaWYgKHZhbHVlID09PSBcImZhbHNlXCIpIHZhbHVlID0gZmFsc2U7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwiTmFOXCIpIHZhbHVlID0gTmFOO1xuICAgIGVsc2UgaWYgKCFpc05hTihudW1iZXIgPSArdmFsdWUpKSB2YWx1ZSA9IG51bWJlcjtcbiAgICBlbHNlIGlmIChtID0gdmFsdWUubWF0Y2goL14oWy0rXVxcZHsyfSk/XFxkezR9KC1cXGR7Mn0oLVxcZHsyfSk/KT8oVFxcZHsyfTpcXGR7Mn0oOlxcZHsyfShcXC5cXGR7M30pPyk/KFp8Wy0rXVxcZHsyfTpcXGR7Mn0pPyk/JC8pKSB7XG4gICAgICBpZiAoZml4dHogJiYgISFtWzRdICYmICFtWzddKSB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLy0vZywgXCIvXCIpLnJlcGxhY2UoL1QvLCBcIiBcIik7XG4gICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBjb250aW51ZTtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1kc3YvaXNzdWVzLzQ1XG52YXIgZml4dHogPSBuZXcgRGF0ZShcIjIwMTktMDEtMDFUMDA6MDBcIikuZ2V0SG91cnMoKSB8fCBuZXcgRGF0ZShcIjIwMTktMDctMDFUMDA6MDBcIikuZ2V0SG91cnMoKTsiLCJpbXBvcnQgZHN2IGZyb20gXCIuL2Rzdi5qc1wiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Qm9keSA9IGNzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvdyA9IGNzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFZhbHVlID0gY3N2LmZvcm1hdFZhbHVlO1xuIiwidmFyIEVPTCA9IHt9LFxuICAgIEVPRiA9IHt9LFxuICAgIFFVT1RFID0gMzQsXG4gICAgTkVXTElORSA9IDEwLFxuICAgIFJFVFVSTiA9IDEzO1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdIHx8IFxcXCJcXFwiXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgd2lkdGgpIHtcbiAgdmFyIHMgPSB2YWx1ZSArIFwiXCIsIGxlbmd0aCA9IHMubGVuZ3RoO1xuICByZXR1cm4gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKDApICsgcyA6IHM7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciA8IDAgPyBcIi1cIiArIHBhZCgteWVhciwgNilcbiAgICA6IHllYXIgPiA5OTk5ID8gXCIrXCIgKyBwYWQoeWVhciwgNilcbiAgICA6IHBhZCh5ZWFyLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IFwiSW52YWxpZCBEYXRlXCJcbiAgICAgIDogZm9ybWF0WWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMikgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgKG1pbGxpc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIi5cIiArIHBhZChtaWxsaXNlY29uZHMsIDMpICsgXCJaXCJcbiAgICAgIDogc2Vjb25kcyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCI6XCIgKyBwYWQoc2Vjb25kcywgMikgKyBcIlpcIlxuICAgICAgOiBtaW51dGVzIHx8IGhvdXJzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIlpcIlxuICAgICAgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVsaW1pdGVyKSB7XG4gIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5cXHJdXCIpLFxuICAgICAgREVMSU1JVEVSID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciByb3dzID0gW10sIC8vIG91dHB1dCByb3dzXG4gICAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XG4gICAgICAgIG4gPSAwLCAvLyBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIHQsIC8vIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9mID0gTiA8PSAwLCAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPRj9cbiAgICAgICAgZW9sID0gZmFsc2U7IC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgLy8gU3RyaXAgdGhlIHRyYWlsaW5nIG5ld2xpbmUuXG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IE5FV0xJTkUpIC0tTjtcbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gUkVUVVJOKSAtLU47XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChlb2YpIHJldHVybiBFT0Y7XG4gICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDtcblxuICAgICAgLy8gVW5lc2NhcGUgcXVvdGVzLlxuICAgICAgdmFyIGksIGogPSBJLCBjO1xuICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChqKSA9PT0gUVVPVEUpIHtcbiAgICAgICAgd2hpbGUgKEkrKyA8IE4gJiYgdGV4dC5jaGFyQ29kZUF0KEkpICE9PSBRVU9URSB8fCB0ZXh0LmNoYXJDb2RlQXQoKytJKSA9PT0gUVVPVEUpO1xuICAgICAgICBpZiAoKGkgPSBJKSA+PSBOKSBlb2YgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSAtIDEpLnJlcGxhY2UoL1wiXCIvZywgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5kIG5leHQgZGVsaW1pdGVyIG9yIG5ld2xpbmUuXG4gICAgICB3aGlsZSAoSSA8IE4pIHtcbiAgICAgICAgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KGkgPSBJKyspKSA9PT0gTkVXTElORSkgZW9sID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gUkVUVVJOKSB7IGVvbCA9IHRydWU7IGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IE5FV0xJTkUpICsrSTsgfVxuICAgICAgICBlbHNlIGlmIChjICE9PSBERUxJTUlURVIpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqLCBpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGxhc3QgdG9rZW4gYmVmb3JlIEVPRi5cbiAgICAgIHJldHVybiBlb2YgPSB0cnVlLCB0ZXh0LnNsaWNlKGosIE4pO1xuICAgIH1cblxuICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSByb3cucHVzaCh0KSwgdCA9IHRva2VuKCk7XG4gICAgICBpZiAoZiAmJiAocm93ID0gZihyb3csIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgcmV0dXJuIHJvdy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiXG4gICAgICAgIDogdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gZm9ybWF0RGF0ZSh2YWx1ZSlcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHZhbHVlICs9IFwiXCIpID8gXCJcXFwiXCIgKyB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHBhcnNlUm93czogcGFyc2VSb3dzLFxuICAgIGZvcm1hdDogZm9ybWF0LFxuICAgIGZvcm1hdEJvZHk6IGZvcm1hdEJvZHksXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93cyxcbiAgICBmb3JtYXRSb3c6IGZvcm1hdFJvdyxcbiAgICBmb3JtYXRWYWx1ZTogZm9ybWF0VmFsdWVcbiAgfTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBkc3ZGb3JtYXR9IGZyb20gXCIuL2Rzdi5qc1wiO1xuZXhwb3J0IHtjc3ZQYXJzZSwgY3N2UGFyc2VSb3dzLCBjc3ZGb3JtYXQsIGNzdkZvcm1hdEJvZHksIGNzdkZvcm1hdFJvd3MsIGNzdkZvcm1hdFJvdywgY3N2Rm9ybWF0VmFsdWV9IGZyb20gXCIuL2Nzdi5qc1wiO1xuZXhwb3J0IHt0c3ZQYXJzZSwgdHN2UGFyc2VSb3dzLCB0c3ZGb3JtYXQsIHRzdkZvcm1hdEJvZHksIHRzdkZvcm1hdFJvd3MsIHRzdkZvcm1hdFJvdywgdHN2Rm9ybWF0VmFsdWV9IGZyb20gXCIuL3Rzdi5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGF1dG9UeXBlfSBmcm9tIFwiLi9hdXRvVHlwZS5qc1wiO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3YuanNcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Qm9keSA9IHRzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvdyA9IHRzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFZhbHVlID0gdHN2LmZvcm1hdFZhbHVlO1xuIiwidmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbmV4cG9ydCB2YXIgYmFja0luID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9XG5cbiAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luO1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfVxuXG4gIGJhY2tPdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrT3V0O1xufSkob3ZlcnNob290KTtcblxuZXhwb3J0IHZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuIiwidmFyIGIxID0gNCAvIDExLFxuICAgIGIyID0gNiAvIDExLFxuICAgIGIzID0gOCAvIDExLFxuICAgIGI0ID0gMyAvIDQsXG4gICAgYjUgPSA5IC8gMTEsXG4gICAgYjYgPSAxMCAvIDExLFxuICAgIGI3ID0gMTUgLyAxNixcbiAgICBiOCA9IDIxIC8gMjIsXG4gICAgYjkgPSA2MyAvIDY0LFxuICAgIGIwID0gMSAvIGIxIC8gYjE7XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VJbih0KSB7XG4gIHJldHVybiAxIC0gYm91bmNlT3V0KDEgLSB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZU91dCh0KSB7XG4gIHJldHVybiAodCA9ICt0KSA8IGIxID8gYjAgKiB0ICogdCA6IHQgPCBiMyA/IGIwICogKHQgLT0gYjIpICogdCArIGI0IDogdCA8IGI2ID8gYjAgKiAodCAtPSBiNSkgKiB0ICsgYjcgOiBiMCAqICh0IC09IGI4KSAqIHQgKyBiOTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5jZUluT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gMSAtIGJvdW5jZU91dCgxIC0gdCkgOiBib3VuY2VPdXQodCAtIDEpICsgMSkgLyAyO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZUluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZU91dCh0KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCkgOiBNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSAvIDI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBleHBJbih0KSB7XG4gIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBPdXQodCkge1xuICByZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCkgOiAyIC0gTWF0aC5wb3coMiwgMTAgLSAxMCAqIHQpKSAvIDI7XG59XG4iLCJleHBvcnQge1xuICBsaW5lYXIgYXMgZWFzZUxpbmVhclxufSBmcm9tIFwiLi9saW5lYXIuanNcIjtcblxuZXhwb3J0IHtcbiAgcXVhZEluT3V0IGFzIGVhc2VRdWFkLFxuICBxdWFkSW4gYXMgZWFzZVF1YWRJbixcbiAgcXVhZE91dCBhcyBlYXNlUXVhZE91dCxcbiAgcXVhZEluT3V0IGFzIGVhc2VRdWFkSW5PdXRcbn0gZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQge1xuICBjdWJpY0luT3V0IGFzIGVhc2VDdWJpYyxcbiAgY3ViaWNJbiBhcyBlYXNlQ3ViaWNJbixcbiAgY3ViaWNPdXQgYXMgZWFzZUN1YmljT3V0LFxuICBjdWJpY0luT3V0IGFzIGVhc2VDdWJpY0luT3V0XG59IGZyb20gXCIuL2N1YmljLmpzXCI7XG5cbmV4cG9ydCB7XG4gIHBvbHlJbk91dCBhcyBlYXNlUG9seSxcbiAgcG9seUluIGFzIGVhc2VQb2x5SW4sXG4gIHBvbHlPdXQgYXMgZWFzZVBvbHlPdXQsXG4gIHBvbHlJbk91dCBhcyBlYXNlUG9seUluT3V0XG59IGZyb20gXCIuL3BvbHkuanNcIjtcblxuZXhwb3J0IHtcbiAgc2luSW5PdXQgYXMgZWFzZVNpbixcbiAgc2luSW4gYXMgZWFzZVNpbkluLFxuICBzaW5PdXQgYXMgZWFzZVNpbk91dCxcbiAgc2luSW5PdXQgYXMgZWFzZVNpbkluT3V0XG59IGZyb20gXCIuL3Npbi5qc1wiO1xuXG5leHBvcnQge1xuICBleHBJbk91dCBhcyBlYXNlRXhwLFxuICBleHBJbiBhcyBlYXNlRXhwSW4sXG4gIGV4cE91dCBhcyBlYXNlRXhwT3V0LFxuICBleHBJbk91dCBhcyBlYXNlRXhwSW5PdXRcbn0gZnJvbSBcIi4vZXhwLmpzXCI7XG5cbmV4cG9ydCB7XG4gIGNpcmNsZUluT3V0IGFzIGVhc2VDaXJjbGUsXG4gIGNpcmNsZUluIGFzIGVhc2VDaXJjbGVJbixcbiAgY2lyY2xlT3V0IGFzIGVhc2VDaXJjbGVPdXQsXG4gIGNpcmNsZUluT3V0IGFzIGVhc2VDaXJjbGVJbk91dFxufSBmcm9tIFwiLi9jaXJjbGUuanNcIjtcblxuZXhwb3J0IHtcbiAgYm91bmNlT3V0IGFzIGVhc2VCb3VuY2UsXG4gIGJvdW5jZUluIGFzIGVhc2VCb3VuY2VJbixcbiAgYm91bmNlT3V0IGFzIGVhc2VCb3VuY2VPdXQsXG4gIGJvdW5jZUluT3V0IGFzIGVhc2VCb3VuY2VJbk91dFxufSBmcm9tIFwiLi9ib3VuY2UuanNcIjtcblxuZXhwb3J0IHtcbiAgYmFja0luT3V0IGFzIGVhc2VCYWNrLFxuICBiYWNrSW4gYXMgZWFzZUJhY2tJbixcbiAgYmFja091dCBhcyBlYXNlQmFja091dCxcbiAgYmFja0luT3V0IGFzIGVhc2VCYWNrSW5PdXRcbn0gZnJvbSBcIi4vYmFjay5qc1wiO1xuXG5leHBvcnQge1xuICBlbGFzdGljT3V0IGFzIGVhc2VFbGFzdGljLFxuICBlbGFzdGljSW4gYXMgZWFzZUVsYXN0aWNJbixcbiAgZWxhc3RpY091dCBhcyBlYXNlRWxhc3RpY091dCxcbiAgZWxhc3RpY0luT3V0IGFzIGVhc2VFbGFzdGljSW5PdXRcbn0gZnJvbSBcIi4vZWxhc3RpYy5qc1wiO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcih0KSB7XG4gIHJldHVybiArdDtcbn1cbiIsInZhciBleHBvbmVudCA9IDM7XG5cbmV4cG9ydCB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgfVxuXG4gIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluO1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICB9XG5cbiAgcG9seU91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seU91dDtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gIH1cblxuICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbk91dDtcbn0pKGV4cG9uZW50KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBxdWFkSW4odCkge1xuICByZXR1cm4gdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgcmV0dXJuIHQgKiAoMiAtIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhZEluT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgOiAtLXQgKiAoMiAtIHQpICsgMSkgLyAyO1xufVxuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsImZ1bmN0aW9uIHJlc3BvbnNlQmxvYihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQmxvYik7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUFycmF5QnVmZmVyKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQXJyYXlCdWZmZXIpO1xufVxuIiwiaW1wb3J0IHtjc3ZQYXJzZSwgZHN2Rm9ybWF0LCB0c3ZQYXJzZX0gZnJvbSBcImQzLWRzdlwiO1xuaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuXG5mdW5jdGlvbiBkc3ZQYXJzZShwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQsIHJvdykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBwYXJzZShyZXNwb25zZSwgcm93KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHN2KGRlbGltaXRlciwgaW5wdXQsIGluaXQsIHJvdykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICB2YXIgZm9ybWF0ID0gZHN2Rm9ybWF0KGRlbGltaXRlcik7XG4gIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZvcm1hdC5wYXJzZShyZXNwb25zZSwgcm93KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgY3N2ID0gZHN2UGFyc2UoY3N2UGFyc2UpO1xuZXhwb3J0IHZhciB0c3YgPSBkc3ZQYXJzZSh0c3ZQYXJzZSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGltYWdlID0gbmV3IEltYWdlO1xuICAgIGZvciAodmFyIGtleSBpbiBpbml0KSBpbWFnZVtrZXldID0gaW5pdFtrZXldO1xuICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7IHJlc29sdmUoaW1hZ2UpOyB9O1xuICAgIGltYWdlLnNyYyA9IGlucHV0O1xuICB9KTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBibG9ifSBmcm9tIFwiLi9ibG9iLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgYnVmZmVyfSBmcm9tIFwiLi9idWZmZXIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBkc3YsIGNzdiwgdHN2fSBmcm9tIFwiLi9kc3YuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbWFnZX0gZnJvbSBcIi4vaW1hZ2UuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBqc29ufSBmcm9tIFwiLi9qc29uLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGV4dH0gZnJvbSBcIi4vdGV4dC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHhtbCwgaHRtbCwgc3ZnfSBmcm9tIFwiLi94bWwuanNcIjtcbiIsImZ1bmN0aW9uIHJlc3BvbnNlSnNvbihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0IHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA1KSByZXR1cm47XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcblxuZnVuY3Rpb24gcGFyc2VyKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0KSAge1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHJldHVybiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHRleHQsIHR5cGUpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZXIoXCJhcHBsaWNhdGlvbi94bWxcIik7XG5cbmV4cG9ydCB2YXIgaHRtbCA9IHBhcnNlcihcInRleHQvaHRtbFwiKTtcblxuZXhwb3J0IHZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbm9kZXM7XG5cbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBub2RlLFxuICAgICAgICBzeCA9IDAsXG4gICAgICAgIHN5ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgc3ggKz0gbm9kZS54LCBzeSArPSBub2RlLnk7XG4gICAgfVxuXG4gICAgZm9yIChzeCA9IHN4IC8gbiAtIHgsIHN5ID0gc3kgLyBuIC0geSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54IC09IHN4LCBub2RlLnkgLT0gc3k7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZVwiO1xuaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5cbmZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54ICsgZC52eDtcbn1cblxuZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnkgKyBkLnZ5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudChyYWRpdXMgPT0gbnVsbCA/IDEgOiArcmFkaXVzKTtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgdHJlZSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgeGksXG4gICAgICAgIHlpLFxuICAgICAgICByaSxcbiAgICAgICAgcmkyO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihwcmVwYXJlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICByaSA9IHJhZGlpW25vZGUuaW5kZXhdLCByaTIgPSByaSAqIHJpO1xuICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgIHlpID0gbm9kZS55ICsgbm9kZS52eTtcbiAgICAgICAgdHJlZS52aXNpdChhcHBseSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5pbmRleCA+IG5vZGUuaW5kZXgpIHtcbiAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG4gICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgbm9kZS52eSArPSAoeSAqPSBsKSAqIHI7XG4gICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICBmb3IgKHZhciBpID0gcXVhZC5yID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHJhZGlpW25vZGUuaW5kZXhdID0gK3JhZGl1cyhub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBmb3JjZUNlbnRlcn0gZnJvbSBcIi4vY2VudGVyXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VDb2xsaWRlfSBmcm9tIFwiLi9jb2xsaWRlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VMaW5rfSBmcm9tIFwiLi9saW5rXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VNYW55Qm9keX0gZnJvbSBcIi4vbWFueUJvZHlcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBmb3JjZVJhZGlhbH0gZnJvbSBcIi4vcmFkaWFsXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VTaW11bGF0aW9ufSBmcm9tIFwiLi9zaW11bGF0aW9uXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VYfSBmcm9tIFwiLi94XCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9yY2VZfSBmcm9tIFwiLi95XCI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlXCI7XG5pbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcblxuZnVuY3Rpb24gaW5kZXgoZCkge1xuICByZXR1cm4gZC5pbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZChub2RlQnlJZCwgbm9kZUlkKSB7XG4gIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQoMzApLFxuICAgICAgZGlzdGFuY2VzLFxuICAgICAgbm9kZXMsXG4gICAgICBjb3VudCxcbiAgICAgIGJpYXMsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKCk7XG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgIG5vZGVCeUlkID0gbWFwKG5vZGVzLCBpZCksXG4gICAgICAgIGxpbms7XG5cbiAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBsaW5rLmluZGV4ID0gaTtcbiAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnRhcmdldCk7XG4gICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSA9IChjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICB9O1xuXG4gIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gXywgZm9yY2UpIDogaWQ7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVEaXN0YW5jZSgpLCBmb3JjZSkgOiBkaXN0YW5jZTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlXCI7XG5pbXBvcnQge3F1YWR0cmVlfSBmcm9tIFwiZDMtcXVhZHRyZWVcIjtcbmltcG9ydCB7eCwgeX0gZnJvbSBcIi4vc2ltdWxhdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgbm9kZSxcbiAgICAgIGFscGhhLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCgtMzApLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2VNaW4yID0gMSxcbiAgICAgIGRpc3RhbmNlTWF4MiA9IEluZmluaXR5LFxuICAgICAgdGhldGEyID0gMC44MTtcblxuICBmdW5jdGlvbiBmb3JjZShfKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICBmb3IgKGFscGhhID0gXywgaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgdHJlZS52aXNpdChhcHBseSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCBzdHJlbmd0aHNbbm9kZS5pbmRleF0gPSArc3RyZW5ndGgobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gMCwgcSwgYywgd2VpZ2h0ID0gMCwgeCwgeSwgaTtcblxuICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICBmb3IgKHggPSB5ID0gaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBNYXRoLmFicyhxLnZhbHVlKSkpIHtcbiAgICAgICAgICBzdHJlbmd0aCArPSBxLnZhbHVlLCB3ZWlnaHQgKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHF1YWQueCA9IHggLyB3ZWlnaHQ7XG4gICAgICBxdWFkLnkgPSB5IC8gd2VpZ2h0O1xuICAgIH1cblxuICAgIC8vIEZvciBsZWFmIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNvaW5jaWRlbnQgcXVhZHJhbnRzLlxuICAgIGVsc2Uge1xuICAgICAgcSA9IHF1YWQ7XG4gICAgICBxLnggPSBxLmRhdGEueDtcbiAgICAgIHEueSA9IHEuZGF0YS55O1xuICAgICAgZG8gc3RyZW5ndGggKz0gc3RyZW5ndGhzW3EuZGF0YS5pbmRleF07XG4gICAgICB3aGlsZSAocSA9IHEubmV4dCk7XG4gICAgfVxuXG4gICAgcXVhZC52YWx1ZSA9IHN0cmVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgaWYgKCFxdWFkLnZhbHVlKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB4ID0gcXVhZC54IC0gbm9kZS54LFxuICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICB3ID0geDIgLSB4MSxcbiAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgIGlmICh3ICogdyAvIHRoZXRhMiA8IGwpIHtcbiAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICBub2RlLnZ4ICs9IHggKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgICBub2RlLnZ5ICs9IHkgKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICBlbHNlIGlmIChxdWFkLmxlbmd0aCB8fCBsID49IGRpc3RhbmNlTWF4MikgcmV0dXJuO1xuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgfVxuXG4gICAgZG8gaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSkge1xuICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xuICAgICAgbm9kZS52eCArPSB4ICogdztcbiAgICAgIG5vZGUudnkgKz0geSAqIHc7XG4gICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1pbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1pbjIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWluMik7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNYXggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNYXgyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1heDIpO1xuICB9O1xuXG4gIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoZXRhMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQodGhldGEyKTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFkaXVzLCB4LCB5KSB7XG4gIHZhciBub2RlcyxcbiAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIHJhZGl1c2VzO1xuXG4gIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50KCtyYWRpdXMpO1xuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXSxcbiAgICAgICAgICBkeCA9IG5vZGUueCAtIHggfHwgMWUtNixcbiAgICAgICAgICBkeSA9IG5vZGUueSAtIHkgfHwgMWUtNixcbiAgICAgICAgICByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSxcbiAgICAgICAgICBrID0gKHJhZGl1c2VzW2ldIC0gcikgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYSAvIHI7XG4gICAgICBub2RlLnZ4ICs9IGR4ICogaztcbiAgICAgIG5vZGUudnkgKz0gZHkgKiBrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICByYWRpdXNlcyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICByYWRpdXNlc1tpXSA9ICtyYWRpdXMobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHJhZGl1c2VzW2ldKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXywgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuaW1wb3J0IHt0aW1lcn0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3JjZShhbHBoYSk7XG4gICAgICB9KTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS54ID0gbm9kZS5meCwgbm9kZS52eCA9IDA7XG4gICAgICAgIGlmIChub2RlLmZ5ID09IG51bGwpIG5vZGUueSArPSBub2RlLnZ5ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXVsYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICBpZiAobm9kZS5meCAhPSBudWxsKSBub2RlLnggPSBub2RlLmZ4O1xuICAgICAgaWYgKG5vZGUuZnkgIT0gbnVsbCkgbm9kZS55ID0gbm9kZS5meTtcbiAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgdmFyIHJhZGl1cyA9IGluaXRpYWxSYWRpdXMgKiBNYXRoLnNxcnQoaSksIGFuZ2xlID0gaSAqIGluaXRpYWxBbmdsZTtcbiAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcbiAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVGb3JjZShmb3JjZSkge1xuICAgIGlmIChmb3JjZS5pbml0aWFsaXplKSBmb3JjZS5pbml0aWFsaXplKG5vZGVzKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMucmVtb3ZlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeHo7XG5cbiAgaWYgKHR5cGVvZiB4ICE9PSBcImZ1bmN0aW9uXCIpIHggPSBjb25zdGFudCh4ID09IG51bGwgPyAwIDogK3gpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eCArPSAoeHpbaV0gLSBub2RlLngpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHh6ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHh6W2ldID0gK3gobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeDtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeSkge1xuICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB5ejtcblxuICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50KHkgPT0gbnVsbCA/IDAgOiAreSk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgeXogPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeXpbaV0gPSAreShub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBmb3JtYXREZWZhdWx0TG9jYWxlLCBmb3JtYXQsIGZvcm1hdFByZWZpeH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGZvcm1hdExvY2FsZX0gZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZm9ybWF0U3BlY2lmaWVyLCBGb3JtYXRTcGVjaWZpZXJ9IGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHByZWNpc2lvbkZpeGVkfSBmcm9tIFwiLi9wcmVjaXNpb25GaXhlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHByZWNpc2lvblByZWZpeH0gZnJvbSBcIi4vcHJlY2lzaW9uUHJlZml4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcHJlY2lzaW9uUm91bmR9IGZyb20gXCIuL3ByZWNpc2lvblJvdW5kLmpzXCI7XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IGxvY2FsZS5taW51cyArIFwiXCIsXG4gICAgICBuYW4gPSBsb2NhbGUubmFuID09PSB1bmRlZmluZWQgPyBcIk5hTlwiIDogbG9jYWxlLm5hbiArIFwiXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5UHJlZml4IDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lTdWZmaXggOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHNpZ24uIC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMDtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGFmdGVyIGZvcm1hdHRpbmcsIGFuZCBubyBleHBsaWNpdCBwb3NpdGl2ZSBzaWduIGlzIHJlcXVlc3RlZCwgaGlkZSB0aGUgc2lnbi5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwICYmIHNpZ24gIT09IFwiK1wiKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsIi8vIEFkZHMgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB3aXRoIHR3aWNlIHRoZSBub3JtYWwgcHJlY2lzaW9uLlxuLy8gUmVmZXJlbmNlOiBKLiBSLiBTaGV3Y2h1aywgQWRhcHRpdmUgUHJlY2lzaW9uIEZsb2F0aW5nLVBvaW50IEFyaXRobWV0aWMgYW5kXG4vLyBGYXN0IFJvYnVzdCBHZW9tZXRyaWMgUHJlZGljYXRlcywgRGlzY3JldGUgJiBDb21wdXRhdGlvbmFsIEdlb21ldHJ5IDE4KDMpXG4vLyAzMDXigJMzNjMgKDE5OTcpLlxuLy8gQ29kZSBhZGFwdGVkIGZyb20gR2VvZ3JhcGhpY0xpYiBieSBDaGFybGVzIEYuIEYuIEthcm5leSxcbi8vIGh0dHA6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLm5ldC9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQWRkZXI7XG59XG5cbmZ1bmN0aW9uIEFkZGVyKCkge1xuICB0aGlzLnJlc2V0KCk7XG59XG5cbkFkZGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEFkZGVyLFxuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zID0gLy8gcm91bmRlZCB2YWx1ZVxuICAgIHRoaXMudCA9IDA7IC8vIGV4YWN0IGVycm9yXG4gIH0sXG4gIGFkZDogZnVuY3Rpb24oeSkge1xuICAgIGFkZCh0ZW1wLCB5LCB0aGlzLnQpO1xuICAgIGFkZCh0aGlzLCB0ZW1wLnMsIHRoaXMucyk7XG4gICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcbiAgICBlbHNlIHRoaXMucyA9IHRlbXAudDtcbiAgfSxcbiAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucztcbiAgfVxufTtcblxudmFyIHRlbXAgPSBuZXcgQWRkZXI7XG5cbmZ1bmN0aW9uIGFkZChhZGRlciwgYSwgYikge1xuICB2YXIgeCA9IGFkZGVyLnMgPSBhICsgYixcbiAgICAgIGJ2ID0geCAtIGEsXG4gICAgICBhdiA9IHggLSBidjtcbiAgYWRkZXIudCA9IChhIC0gYXYpICsgKGIgLSBidik7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXIuanNcIjtcbmltcG9ydCB7YXRhbjIsIGNvcywgcXVhcnRlclBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcC5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcblxuZXhwb3J0IHZhciBhcmVhUmluZ1N1bSA9IGFkZGVyKCk7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBsYW1iZGEwMCxcbiAgICBwaGkwMCxcbiAgICBsYW1iZGEwLFxuICAgIGNvc1BoaTAsXG4gICAgc2luUGhpMDtcblxuZXhwb3J0IHZhciBhcmVhU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYVJpbmcgPSArYXJlYVJpbmdTdW07XG4gICAgYXJlYVN1bS5hZGQoYXJlYVJpbmcgPCAwID8gdGF1ICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmxpbmVFbmQgPSB0aGlzLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3VtLmFkZCh0YXUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0KCkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgbGFtYmRhMDAgPSBsYW1iZGEsIHBoaTAwID0gcGhpO1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MocGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaSksIHNpblBoaTAgPSBzaW4ocGhpKTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAvLyBTcGhlcmljYWwgZXhjZXNzIEUgZm9yIGEgc3BoZXJpY2FsIHRyaWFuZ2xlIHdpdGggdmVydGljZXM6IHNvdXRoIHBvbGUsXG4gIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgdmFyIGRMYW1iZGEgPSBsYW1iZGEgLSBsYW1iZGEwLFxuICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBrID0gc2luUGhpMCAqIHNpblBoaSxcbiAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyhhZExhbWJkYSksXG4gICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luKGFkTGFtYmRhKTtcbiAgYXJlYVJpbmdTdW0uYWRkKGF0YW4yKHYsIHUpKTtcblxuICAvLyBBZHZhbmNlIHRoZSBwcmV2aW91cyBwb2ludHMuXG4gIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBhcmVhU3VtLnJlc2V0KCk7XG4gIHN0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICByZXR1cm4gYXJlYVN1bSAqIDI7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXIuanNcIjtcbmltcG9ydCB7YXJlYVN0cmVhbSwgYXJlYVJpbmdTdW19IGZyb20gXCIuL2FyZWEuanNcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbS5qc1wiO1xuXG52YXIgbGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSwgLy8gYm91bmRzXG4gICAgbGFtYmRhMiwgLy8gcHJldmlvdXMgbGFtYmRhLWNvb3JkaW5hdGVcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApLCBwaGkwID0gLShwaGkxID0gOTApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJpY2FsKGNhcnRlc2lhbikge1xuICByZXR1cm4gW2F0YW4yKGNhcnRlc2lhblsxXSwgY2FydGVzaWFuWzBdKSwgYXNpbihjYXJ0ZXNpYW5bMl0pXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSwgcGhpID0gc3BoZXJpY2FsWzFdLCBjb3NQaGkgPSBjb3MocGhpKTtcbiAgcmV0dXJuIFtjb3NQaGkgKiBjb3MobGFtYmRhKSwgY29zUGhpICogc2luKGxhbWJkYSksIHNpbihwaGkpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gIHJldHVybiBbYVsxXSAqIGJbMl0gLSBhWzJdICogYlsxXSwgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSwgYVswXSAqIGJbMV0gLSBhWzFdICogYlswXV07XG59XG5cbi8vIFRPRE8gcmV0dXJuIGFcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICByZXR1cm4gW3ZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGtdO1xufVxuXG4vLyBUT0RPIHJldHVybiBkXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShkKSB7XG4gIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBlcHNpbG9uLCBlcHNpbG9uMiwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wLmpzXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbS5qc1wiO1xuXG52YXIgVzAsIFcxLFxuICAgIFgwLCBZMCwgWjAsXG4gICAgWDEsIFkxLCBaMSxcbiAgICBYMiwgWTIsIFoyLFxuICAgIGxhbWJkYTAwLCBwaGkwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICB4MCwgeTAsIHowOyAvLyBwcmV2aW91cyBwb2ludFxuXG52YXIgY2VudHJvaWRTdHJlYW0gPSB7XG4gIHNwaGVyZTogbm9vcCxcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9XG59O1xuXG4vLyBBcml0aG1ldGljIG1lYW4gb2YgQ2FydGVzaWFuIHZlY3RvcnMuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyhsYW1iZGEpLCBjb3NQaGkgKiBzaW4obGFtYmRhKSwgc2luKHBoaSkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgsIHksIHopIHtcbiAgKytXMDtcbiAgWDAgKz0gKHggLSBYMCkgLyBXMDtcbiAgWTAgKz0gKHkgLSBZMCkgLyBXMDtcbiAgWjAgKz0gKHogLSBaMCkgLyBXMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKTtcbiAgeDAgPSBjb3NQaGkgKiBjb3MobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4obGFtYmRhKTtcbiAgejAgPSBzaW4ocGhpKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludDtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zKGxhbWJkYSksXG4gICAgICB5ID0gY29zUGhpICogc2luKGxhbWJkYSksXG4gICAgICB6ID0gc2luKHBoaSksXG4gICAgICB3ID0gYXRhbjIoc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuLy8gU2VlIEouIEUuIEJyb2NrLCBUaGUgSW5lcnRpYSBUZW5zb3IgZm9yIGEgU3BoZXJpY2FsIFRyaWFuZ2xlLFxuLy8gSi4gQXBwbGllZCBNZWNoYW5pY3MgNDIsIDIzOSAoMTk3NSkuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludDtcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbihsYW1iZGEpO1xuICB6MCA9IHNpbihwaGkpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4obGFtYmRhKSxcbiAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgIGN4ID0geTAgKiB6IC0gejAgKiB5LFxuICAgICAgY3kgPSB6MCAqIHggLSB4MCAqIHosXG4gICAgICBjeiA9IHgwICogeSAtIHkwICogeCxcbiAgICAgIG0gPSBzcXJ0KGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXG4gICAgICB3ID0gYXNpbihtKSwgLy8gbGluZSB3ZWlnaHQgPSBhbmdsZVxuICAgICAgdiA9IG0gJiYgLXcgLyBtOyAvLyBhcmVhIHdlaWdodCBtdWx0aXBsaWVyXG4gIFgyICs9IHYgKiBjeDtcbiAgWTIgKz0gdiAqIGN5O1xuICBaMiArPSB2ICogY3o7XG4gIFcxICs9IHc7XG4gIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBXMCA9IFcxID1cbiAgWDAgPSBZMCA9IFowID1cbiAgWDEgPSBZMSA9IFoxID1cbiAgWDIgPSBZMiA9IFoyID0gMDtcbiAgc3RyZWFtKG9iamVjdCwgY2VudHJvaWRTdHJlYW0pO1xuXG4gIHZhciB4ID0gWDIsXG4gICAgICB5ID0gWTIsXG4gICAgICB6ID0gWjIsXG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXG4gIC8vIElmIHRoZSBhcmVhLXdlaWdodGVkIGNjZW50cm9pZCBpcyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBsZW5ndGgtd2VpZ2h0ZWQgY2NlbnRyb2lkLlxuICBpZiAobSA8IGVwc2lsb24yKSB7XG4gICAgeCA9IFgxLCB5ID0gWTEsIHogPSBaMTtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBoYXMgemVybyBsZW5ndGgsIGZhbGwgYmFjayB0byBhcml0aG1ldGljIG1lYW4gb2YgcG9pbnQgdmVjdG9ycy5cbiAgICBpZiAoVzEgPCBlcHNpbG9uKSB4ID0gWDAsIHkgPSBZMCwgeiA9IFowO1xuICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgLy8gSWYgdGhlIGZlYXR1cmUgc3RpbGwgaGFzIGFuIHVuZGVmaW5lZCBjY2VudHJvaWQsIHRoZW4gcmV0dXJuLlxuICAgIGlmIChtIDwgZXBzaWxvbjIpIHJldHVybiBbTmFOLCBOYU5dO1xuICB9XG5cbiAgcmV0dXJuIFthdGFuMih5LCB4KSAqIGRlZ3JlZXMsIGFzaW4oeiAvIHNxcnQobSkpICogZGVncmVlc107XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHthY29zLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuL3JvdGF0aW9uLmpzXCI7XG5cbi8vIEdlbmVyYXRlcyBhIGNpcmNsZSBjZW50ZXJlZCBhdCBbMMKwLCAwwrBdLCB3aXRoIGEgZ2l2ZW4gcmFkaXVzIGFuZCBwcmVjaXNpb24uXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgaWYgKCFkZWx0YSkgcmV0dXJuO1xuICB2YXIgY29zUmFkaXVzID0gY29zKHJhZGl1cyksXG4gICAgICBzaW5SYWRpdXMgPSBzaW4ocmFkaXVzKSxcbiAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgaWYgKHQwID09IG51bGwpIHtcbiAgICB0MCA9IHJhZGl1cyArIGRpcmVjdGlvbiAqIHRhdTtcbiAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xuICB9IGVsc2Uge1xuICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xuICAgIGlmIChkaXJlY3Rpb24gPiAwID8gdDAgPCB0MSA6IHQwID4gdDEpIHQwICs9IGRpcmVjdGlvbiAqIHRhdTtcbiAgfVxuICBmb3IgKHZhciBwb2ludCwgdCA9IHQwOyBkaXJlY3Rpb24gPiAwID8gdCA+IHQxIDogdCA8IHQxOyB0IC09IHN0ZXApIHtcbiAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zKHQpLCAtc2luUmFkaXVzICogc2luKHQpXSk7XG4gICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gIH1cbn1cblxuLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuZnVuY3Rpb24gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgcG9pbnQpIHtcbiAgcG9pbnQgPSBjYXJ0ZXNpYW4ocG9pbnQpLCBwb2ludFswXSAtPSBjb3NSYWRpdXM7XG4gIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICB2YXIgcmFkaXVzID0gYWNvcygtcG9pbnRbMV0pO1xuICByZXR1cm4gKCgtcG9pbnRbMl0gPCAwID8gLXJhZGl1cyA6IHJhZGl1cykgKyB0YXUgLSBlcHNpbG9uKSAlIHRhdTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjZW50ZXIgPSBjb25zdGFudChbMCwgMF0pLFxuICAgICAgcmFkaXVzID0gY29uc3RhbnQoOTApLFxuICAgICAgcHJlY2lzaW9uID0gY29uc3RhbnQoNiksXG4gICAgICByaW5nLFxuICAgICAgcm90YXRlLFxuICAgICAgc3RyZWFtID0ge3BvaW50OiBwb2ludH07XG5cbiAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgIHJpbmcucHVzaCh4ID0gcm90YXRlKHgsIHkpKTtcbiAgICB4WzBdICo9IGRlZ3JlZXMsIHhbMV0gKj0gZGVncmVlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNpcmNsZSgpIHtcbiAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICBwID0gcHJlY2lzaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zO1xuICAgIHJpbmcgPSBbXTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgciwgcCwgMSk7XG4gICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XG4gICAgcmluZyA9IHJvdGF0ZSA9IG51bGw7XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNlbnRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoWytfWzBdLCArX1sxXV0pLCBjaXJjbGUpIDogY2VudGVyO1xuICB9O1xuXG4gIGNpcmNsZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjaXNpb24gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHByZWNpc2lvbjtcbiAgfTtcblxuICByZXR1cm4gY2lyY2xlO1xufVxuIiwiaW1wb3J0IGNsaXAgZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBhdGFuLCBjb3MsIGVwc2lsb24sIGhhbGZQaSwgcGksIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xpcChcbiAgZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICBjbGlwQW50aW1lcmlkaWFuTGluZSxcbiAgY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlLFxuICBbLXBpLCAtaGFsZlBpXVxuKTtcblxuLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm8gaW50ZXJzZWN0aW9uczsgMiAtIHRoZXJlIHdlcmVcbi8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gIHZhciBsYW1iZGEwID0gTmFOLFxuICAgICAgcGhpMCA9IE5hTixcbiAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICByZXR1cm4ge1xuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBjbGVhbiA9IDE7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24obGFtYmRhMSwgcGhpMSkge1xuICAgICAgdmFyIHNpZ24xID0gbGFtYmRhMSA+IDAgPyBwaSA6IC1waSxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkpIDwgZXBzaWxvbikgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwLCBwaGkwID0gKHBoaTAgKyBwaGkxKSAvIDIgPiAwID8gaGFsZlBpIDogLWhhbGZQaSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSkgeyAvLyBsaW5lIGNyb3NzZXMgYW50aW1lcmlkaWFuXG4gICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24pIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uOyAvLyBoYW5kbGUgZGVnZW5lcmFjaWVzXG4gICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24pIGxhbWJkYTEgLT0gc2lnbjEgKiBlcHNpbG9uO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luKGxhbWJkYTAgLSBsYW1iZGExKTtcbiAgcmV0dXJuIGFicyhzaW5MYW1iZGEwTGFtYmRhMSkgPiBlcHNpbG9uXG4gICAgICA/IGF0YW4oKHNpbihwaGkwKSAqIChjb3NQaGkxID0gY29zKHBoaTEpKSAqIHNpbihsYW1iZGExKVxuICAgICAgICAgIC0gc2luKHBoaTEpICogKGNvc1BoaTAgPSBjb3MocGhpMCkpICogc2luKGxhbWJkYTApKVxuICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxuICAgICAgOiAocGhpMCArIHBoaTEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICB2YXIgcGhpO1xuICBpZiAoZnJvbSA9PSBudWxsKSB7XG4gICAgcGhpID0gZGlyZWN0aW9uICogaGFsZlBpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgfSBlbHNlIGlmIChhYnMoZnJvbVswXSAtIHRvWzBdKSA+IGVwc2lsb24pIHtcbiAgICB2YXIgbGFtYmRhID0gZnJvbVswXSA8IHRvWzBdID8gcGkgOiAtcGk7XG4gICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcbiAgICBzdHJlYW0ucG9pbnQoLWxhbWJkYSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICB9XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5LCBtKSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHksIG1dKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkFkZEluUGxhY2UsIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Eb3QsIGNhcnRlc2lhblNjYWxlLCBzcGhlcmljYWx9IGZyb20gXCIuLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7Y2lyY2xlU3RyZWFtfSBmcm9tIFwiLi4vY2lyY2xlLmpzXCI7XG5pbXBvcnQge2FicywgY29zLCBlcHNpbG9uLCBwaSwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBwb2ludEVxdWFsIGZyb20gXCIuLi9wb2ludEVxdWFsLmpzXCI7XG5pbXBvcnQgY2xpcCBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIGNyID0gY29zKHJhZGl1cyksXG4gICAgICBkZWx0YSA9IDYgKiByYWRpYW5zLFxuICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXG4gICAgICBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IGVwc2lsb247IC8vIFRPRE8gb3B0aW1pc2UgZm9yIHRoaXMgY29tbW9uIGNhc2VcblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIGZyb20sIHRvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZpc2libGUobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gY29zKGxhbWJkYSkgKiBjb3MocGhpKSA+IGNyO1xuICB9XG5cbiAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlcyB1c2VkIGZvciBwb2x5Z29uXG4gIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXG4gIC8vIGludGVyc2VjdGlvbnMgMiAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAvLyBzaG91bGQgYmUgcmVqb2luZWQuXG4gIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xuICAgIHZhciBwb2ludDAsIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGMwLCAvLyBjb2RlIGZvciBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MCwgLy8gdmlzaWJpbGl0eSBvZiBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MDAsIC8vIHZpc2liaWxpdHkgb2YgZmlyc3QgcG9pbnRcbiAgICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQxID0gW2xhbWJkYSwgcGhpXSxcbiAgICAgICAgICAgIHBvaW50MixcbiAgICAgICAgICAgIHYgPSB2aXNpYmxlKGxhbWJkYSwgcGhpKSxcbiAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1c1xuICAgICAgICAgICAgICA/IHYgPyAwIDogY29kZShsYW1iZGEsIHBoaSlcbiAgICAgICAgICAgICAgOiB2ID8gY29kZShsYW1iZGEgKyAobGFtYmRhIDwgMCA/IHBpIDogLXBpKSwgcGhpKSA6IDA7XG4gICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgaWYgKCFwb2ludDIgfHwgcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MikgfHwgcG9pbnRFcXVhbChwb2ludDEsIHBvaW50MikpXG4gICAgICAgICAgICBwb2ludDFbMl0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgLy8gb3V0c2lkZSBnb2luZyBpblxuICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0sIDIpO1xuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuICAgICAgICAgIHZhciB0O1xuICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXG4gICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2MCkgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICAvLyBSZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgaWYgdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIGFuZCBsYXN0IHBvaW50cyB3ZXJlIHZpc2libGUuXG4gICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGVhbiB8ICgodjAwICYmIHYwKSA8PCAxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0cyB0aGUgZ3JlYXQgY2lyY2xlIGJldHdlZW4gYSBhbmQgYiB3aXRoIHRoZSBjbGlwIGNpcmNsZS5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcbiAgICAgICAgcGIgPSBjYXJ0ZXNpYW4oYik7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9uIGxpbmUgcCh0KSA9IGMxIG4xICsgYzIgbjIgKyB0IChuMSDiqK8gbjIpLlxuICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXG4gICAgICAgIG4yID0gY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxuICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcblxuICAgIC8vIFR3byBwb2xhciBwb2ludHMuXG4gICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgIHZhciBjMSA9ICBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIG4xeG4yID0gY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSxcbiAgICAgICAgQSA9IGNhcnRlc2lhblNjYWxlKG4xLCBjMSksXG4gICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UoQSwgQik7XG5cbiAgICAvLyBTb2x2ZSB8cCh0KXxeMiA9IDEuXG4gICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcbiAgICAgICAgdXUgPSBjYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgIGlmICh0MiA8IDApIHJldHVybjtcblxuICAgIHZhciB0ID0gc3FydCh0MiksXG4gICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xuICAgIHEgPSBzcGhlcmljYWwocSk7XG5cbiAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAvLyBUd28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICB2YXIgbGFtYmRhMCA9IGFbMF0sXG4gICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICBwaGkwID0gYVsxXSxcbiAgICAgICAgcGhpMSA9IGJbMV0sXG4gICAgICAgIHo7XG5cbiAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XG5cbiAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSkgPCBlcHNpbG9uLFxuICAgICAgICBtZXJpZGlhbiA9IHBvbGFyIHx8IGRlbHRhIDwgZXBzaWxvbjtcblxuICAgIGlmICghcG9sYXIgJiYgcGhpMSA8IHBoaTApIHogPSBwaGkwLCBwaGkwID0gcGhpMSwgcGhpMSA9IHo7XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgaWYgKG1lcmlkaWFuXG4gICAgICAgID8gcG9sYXJcbiAgICAgICAgICA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24gPyBwaGkwIDogcGhpMSlcbiAgICAgICAgICA6IHBoaTAgPD0gcVsxXSAmJiBxWzFdIDw9IHBoaTFcbiAgICAgICAgOiBkZWx0YSA+IHBpIF4gKGxhbWJkYTAgPD0gcVswXSAmJiBxWzBdIDw9IGxhbWJkYTEpKSB7XG4gICAgICB2YXIgcTEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgKyB0KSAvIHV1KTtcbiAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocTEsIEEpO1xuICAgICAgcmV0dXJuIFtxLCBzcGhlcmljYWwocTEpXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmF0ZXMgYSA0LWJpdCB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhdGlvbiBvZiBhIHBvaW50IHJlbGF0aXZlIHRvXG4gIC8vIHRoZSBzbWFsbCBjaXJjbGUncyBib3VuZGluZyBib3guXG4gIGZ1bmN0aW9uIGNvZGUobGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgciA9IHNtYWxsUmFkaXVzID8gcmFkaXVzIDogcGkgLSByYWRpdXMsXG4gICAgICAgIGNvZGUgPSAwO1xuICAgIGlmIChsYW1iZGEgPCAtcikgY29kZSB8PSAxOyAvLyBsZWZ0XG4gICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxuICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgIGVsc2UgaWYgKHBoaSA+IHIpIGNvZGUgfD0gODsgLy8gYWJvdmVcbiAgICByZXR1cm4gY29kZTtcbiAgfVxuXG4gIHJldHVybiBjbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbMCwgLXJhZGl1c10gOiBbLXBpLCByYWRpdXMgLSBwaV0pO1xufVxuIiwiaW1wb3J0IGNsaXBSZWN0YW5nbGUgZnJvbSBcIi4vcmVjdGFuZ2xlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeTAgPSAwLFxuICAgICAgeDEgPSA5NjAsXG4gICAgICB5MSA9IDUwMCxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBjbGlwO1xuXG4gIHJldHVybiBjbGlwID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBjbGlwUmVjdGFuZ2xlKHgwLCB5MCwgeDEsIHkxKShjYWNoZVN0cmVhbSA9IHN0cmVhbSk7XG4gICAgfSxcbiAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0sIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsLCBjbGlwKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlci5qc1wiO1xuaW1wb3J0IGNsaXBSZWpvaW4gZnJvbSBcIi4vcmVqb2luLmpzXCI7XG5pbXBvcnQge2Vwc2lsb24sIGhhbGZQaX0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBwb2x5Z29uQ29udGFpbnMgZnJvbSBcIi4uL3BvbHlnb25Db250YWlucy5qc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvaW50VmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2luaykge1xuICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHN0YXJ0KTtcbiAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgc2VnbWVudHMgPSBwb2x5Z29uID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEsIHBoaSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgcmluZ1NpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIHJpbmdTaW5rLmxpbmVTdGFydCgpO1xuICAgICAgcmluZyA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XG4gICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICByaW5nU2luay5saW5lRW5kKCk7XG5cbiAgICAgIHZhciBjbGVhbiA9IHJpbmdTaW5rLmNsZWFuKCksXG4gICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICBpLCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCwgbSxcbiAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgIHBvaW50O1xuXG4gICAgICByaW5nLnBvcCgpO1xuICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgcmluZyA9IG51bGw7XG5cbiAgICAgIGlmICghbikgcmV0dXJuO1xuXG4gICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgaWYgKGNsZWFuICYgMSkge1xuICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHNpbmsucG9pbnQoKHBvaW50ID0gc2VnbWVudFtpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXG4gICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG5cbiAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcih2YWxpZFNlZ21lbnQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGJbMV0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIHQwID0gMCxcbiAgICAgIHQxID0gMSxcbiAgICAgIGR4ID0gYnggLSBheCxcbiAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgIHI7XG5cbiAgciA9IHgwIC0gYXg7XG4gIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB4MSAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICByID0geTAgLSBheTtcbiAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHkxIC0gYXk7XG4gIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIGlmICh0MCA+IDApIGFbMF0gPSBheCArIHQwICogZHgsIGFbMV0gPSBheSArIHQwICogZHk7XG4gIGlmICh0MSA8IDEpIGJbMF0gPSBheCArIHQxICogZHgsIGJbMV0gPSBheSArIHQxICogZHk7XG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgY2xpcEJ1ZmZlciBmcm9tIFwiLi9idWZmZXIuanNcIjtcbmltcG9ydCBjbGlwTGluZSBmcm9tIFwiLi9saW5lLmpzXCI7XG5pbXBvcnQgY2xpcFJlam9pbiBmcm9tIFwiLi9yZWpvaW4uanNcIjtcbmltcG9ydCB7bWVyZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG52YXIgY2xpcE1heCA9IDFlOSwgY2xpcE1pbiA9IC1jbGlwTWF4O1xuXG4vLyBUT0RPIFVzZSBkMy1wb2x5Z29u4oCZcyBwb2x5Z29uQ29udGFpbnMgaGVyZSBmb3IgdGhlIHJpbmcgY2hlY2s/XG4vLyBUT0RPIEVsaW1pbmF0ZSBkdXBsaWNhdGUgYnVmZmVyaW5nIGluIGNsaXBCdWZmZXIgYW5kIHBvbHlnb24ucHVzaD9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xpcFJlY3RhbmdsZSh4MCwgeTAsIHgxLCB5MSkge1xuXG4gIGZ1bmN0aW9uIHZpc2libGUoeCwgeSkge1xuICAgIHJldHVybiB4MCA8PSB4ICYmIHggPD0geDEgJiYgeTAgPD0geSAmJiB5IDw9IHkxO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgdmFyIGEgPSAwLCBhMSA9IDA7XG4gICAgaWYgKGZyb20gPT0gbnVsbFxuICAgICAgICB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKVxuICAgICAgICB8fCBjb21wYXJlUG9pbnQoZnJvbSwgdG8pIDwgMCBeIGRpcmVjdGlvbiA+IDApIHtcbiAgICAgIGRvIHN0cmVhbS5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuICAgICAgd2hpbGUgKChhID0gKGEgKyBkaXJlY3Rpb24gKyA0KSAlIDQpICE9PSBhMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gYWJzKHBbMF0gLSB4MCkgPCBlcHNpbG9uID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzXG4gICAgICAgIDogYWJzKHBbMF0gLSB4MSkgPCBlcHNpbG9uID8gZGlyZWN0aW9uID4gMCA/IDIgOiAxXG4gICAgICAgIDogYWJzKHBbMV0gLSB5MCkgPCBlcHNpbG9uID8gZGlyZWN0aW9uID4gMCA/IDEgOiAwXG4gICAgICAgIDogZGlyZWN0aW9uID4gMCA/IDMgOiAyOyAvLyBhYnMocFsxXSAtIHkxKSA8IGVwc2lsb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlUG9pbnQoYS54LCBiLngpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZVBvaW50KGEsIGIpIHtcbiAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksXG4gICAgICAgIGNiID0gY29ybmVyKGIsIDEpO1xuICAgIHJldHVybiBjYSAhPT0gY2IgPyBjYSAtIGNiXG4gICAgICAgIDogY2EgPT09IDAgPyBiWzFdIC0gYVsxXVxuICAgICAgICA6IGNhID09PSAxID8gYVswXSAtIGJbMF1cbiAgICAgICAgOiBjYSA9PT0gMiA/IGFbMV0gLSBiWzFdXG4gICAgICAgIDogYlswXSAtIGFbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSxcbiAgICAgICAgYnVmZmVyU3RyZWFtID0gY2xpcEJ1ZmZlcigpLFxuICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgcmluZyxcbiAgICAgICAgeF9fLCB5X18sIHZfXywgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgeF8sIHlfLCB2XywgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgZmlyc3QsXG4gICAgICAgIGNsZWFuO1xuXG4gICAgdmFyIGNsaXBTdHJlYW0gPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IHBvbHlnb25TdGFydCxcbiAgICAgIHBvbHlnb25FbmQ6IHBvbHlnb25FbmRcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgaWYgKHZpc2libGUoeCwgeSkpIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uSW5zaWRlKCkge1xuICAgICAgdmFyIHdpbmRpbmcgPSAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBqID0gMSwgbSA9IHJpbmcubGVuZ3RoLCBwb2ludCA9IHJpbmdbMF0sIGEwLCBhMSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTsgaiA8IG07ICsraikge1xuICAgICAgICAgIGEwID0gYjAsIGExID0gYjEsIHBvaW50ID0gcmluZ1tqXSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTtcbiAgICAgICAgICBpZiAoYTEgPD0geTEpIHsgaWYgKGIxID4geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpID4gKGIxIC0gYTEpICogKHgwIC0gYTApKSArK3dpbmRpbmc7IH1cbiAgICAgICAgICBlbHNlIHsgaWYgKGIxIDw9IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA8IChiMSAtIGExKSAqICh4MCAtIGEwKSkgLS13aW5kaW5nOyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpbmRpbmc7XG4gICAgfVxuXG4gICAgLy8gQnVmZmVyIGdlb21ldHJ5IHdpdGhpbiBhIHBvbHlnb24gYW5kIHRoZW4gY2xpcCBpdCBlbiBtYXNzZS5cbiAgICBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XG4gICAgICBhY3RpdmVTdHJlYW0gPSBidWZmZXJTdHJlYW0sIHNlZ21lbnRzID0gW10sIHBvbHlnb24gPSBbXSwgY2xlYW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbHlnb25FbmQoKSB7XG4gICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXG4gICAgICAgICAgY2xlYW5JbnNpZGUgPSBjbGVhbiAmJiBzdGFydEluc2lkZSxcbiAgICAgICAgICB2aXNpYmxlID0gKHNlZ21lbnRzID0gbWVyZ2Uoc2VnbWVudHMpKS5sZW5ndGg7XG4gICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIGlmIChjbGVhbkluc2lkZSkge1xuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzdHJlYW0pO1xuICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBjbGlwUmVqb2luKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSwgc2VnbWVudHMgPSBwb2x5Z29uID0gcmluZyA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgIHZfID0gZmFsc2U7XG4gICAgICB4XyA9IHlfID0gTmFOO1xuICAgIH1cblxuICAgIC8vIFRPRE8gcmF0aGVyIHRoYW4gc3BlY2lhbC1jYXNlIHBvbHlnb25zLCBzaW1wbHkgaGFuZGxlIHRoZW0gc2VwYXJhdGVseS5cbiAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXG4gICAgLy8gY2xpcHBpbmcgaXNzdWVzLlxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgaWYgKHZfXyAmJiB2XykgYnVmZmVyU3RyZWFtLnJlam9pbigpO1xuICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XG4gICAgICB9XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcbiAgICAgIHZhciB2ID0gdmlzaWJsZSh4LCB5KTtcbiAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goW3gsIHldKTtcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2ICYmIHZfKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBhID0gW3hfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeF8pKSwgeV8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5XykpXSxcbiAgICAgICAgICAgICAgYiA9IFt4ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeCkpLCB5ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeSkpXTtcbiAgICAgICAgICBpZiAoY2xpcExpbmUoYSwgYiwgeDAsIHkwLCB4MSwgeTEpKSB7XG4gICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGFbMF0sIGFbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGJbMF0sIGJbMV0pO1xuICAgICAgICAgICAgaWYgKCF2KSBhY3RpdmVTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB4XyA9IHgsIHlfID0geSwgdl8gPSB2O1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwU3RyZWFtO1xuICB9O1xufVxuIiwiaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWwuanNcIjtcbmltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICB0aGlzLnggPSBwb2ludDtcbiAgdGhpcy56ID0gcG9pbnRzO1xuICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbn1cblxuLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4vLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4vLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBpZiAoIXAwWzJdICYmICFwMVsyXSkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBoYW5kbGUgZGVnZW5lcmF0ZSBjYXNlcyBieSBtb3ZpbmcgdGhlIHBvaW50XG4gICAgICBwMVswXSArPSAyICogZXBzaWxvbjtcbiAgICB9XG5cbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIHNlZ21lbnQsIG51bGwsIHRydWUpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMCwgbnVsbCwgeCwgZmFsc2UpKTtcbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIG51bGwsIHgsIHRydWUpKTtcbiAgfSk7XG5cbiAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGNsaXAuc29ydChjb21wYXJlSW50ZXJzZWN0aW9uKTtcbiAgbGluayhzdWJqZWN0KTtcbiAgbGluayhjbGlwKTtcblxuICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcbiAgfVxuXG4gIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICBwb2ludHMsXG4gICAgICBwb2ludDtcblxuICB3aGlsZSAoMSkge1xuICAgIC8vIEZpbmQgZmlyc3QgdW52aXNpdGVkIGludGVyc2VjdGlvbi5cbiAgICB2YXIgY3VycmVudCA9IHN0YXJ0LFxuICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG4gICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnA7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxpbmsoYXJyYXkpIHtcbiAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgdmFyIG4sXG4gICAgICBpID0gMCxcbiAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgIGI7XG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgIGIucCA9IGE7XG4gICAgYSA9IGI7XG4gIH1cbiAgYS5uID0gYiA9IGFycmF5WzBdO1xuICBiLnAgPSBhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgfVxuXG4gIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcbiAgfTtcblxuICByZXR1cm4gY29tcG9zZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIHBvbHlnb25Db250YWluc30gZnJvbSBcIi4vcG9seWdvbkNvbnRhaW5zLmpzXCI7XG5pbXBvcnQge2RlZmF1bHQgYXMgZGlzdGFuY2V9IGZyb20gXCIuL2Rpc3RhbmNlLmpzXCI7XG5pbXBvcnQge2Vwc2lsb24yLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBjb250YWluc09iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHBvaW50KTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgY29udGFpbnNHZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9pbnQob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0xpbmUoY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cnksIHBvaW50KSB7XG4gIHJldHVybiBnZW9tZXRyeSAmJiBjb250YWluc0dlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKVxuICAgICAgPyBjb250YWluc0dlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgcG9pbnQpXG4gICAgICA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvaW50KGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICByZXR1cm4gZGlzdGFuY2UoY29vcmRpbmF0ZXMsIHBvaW50KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzLCBwb2ludCkge1xuICB2YXIgYW8sIGJvLCBhYjtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBibyA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzW2ldLCBwb2ludCk7XG4gICAgaWYgKGJvID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIGFiID0gZGlzdGFuY2UoY29vcmRpbmF0ZXNbaV0sIGNvb3JkaW5hdGVzW2kgLSAxXSk7XG4gICAgICBpZiAoXG4gICAgICAgIGFiID4gMCAmJlxuICAgICAgICBhbyA8PSBhYiAmJlxuICAgICAgICBibyA8PSBhYiAmJlxuICAgICAgICAoYW8gKyBibyAtIGFiKSAqICgxIC0gTWF0aC5wb3coKGFvIC0gYm8pIC8gYWIsIDIpKSA8IGVwc2lsb24yICogYWJcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFvID0gYm87XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHJldHVybiAhIXBvbHlnb25Db250YWlucyhjb29yZGluYXRlcy5tYXAocmluZ1JhZGlhbnMpLCBwb2ludFJhZGlhbnMocG9pbnQpKTtcbn1cblxuZnVuY3Rpb24gcmluZ1JhZGlhbnMocmluZykge1xuICByZXR1cm4gcmluZyA9IHJpbmcubWFwKHBvaW50UmFkaWFucyksIHJpbmcucG9wKCksIHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBvaW50UmFkaWFucyhwb2ludCkge1xuICByZXR1cm4gW3BvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICByZXR1cm4gKG9iamVjdCAmJiBjb250YWluc09iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpXG4gICAgICA/IGNvbnRhaW5zT2JqZWN0VHlwZVtvYmplY3QudHlwZV1cbiAgICAgIDogY29udGFpbnNHZW9tZXRyeSkob2JqZWN0LCBwb2ludCk7XG59XG4iLCJpbXBvcnQgbGVuZ3RoIGZyb20gXCIuL2xlbmd0aC5qc1wiO1xuXG52YXIgY29vcmRpbmF0ZXMgPSBbbnVsbCwgbnVsbF0sXG4gICAgb2JqZWN0ID0ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGNvb3JkaW5hdGVzWzBdID0gYTtcbiAgY29vcmRpbmF0ZXNbMV0gPSBiO1xuICByZXR1cm4gbGVuZ3RoKG9iamVjdCk7XG59XG4iLCJpbXBvcnQge3JhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7YWJzLCBjZWlsLCBlcHNpbG9ufSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICB2YXIgeSA9IHJhbmdlKHkwLCB5MSAtIGVwc2lsb24sIGR5KS5jb25jYXQoeTEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geS5tYXAoZnVuY3Rpb24oeSkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XG4gIHZhciB4ID0gcmFuZ2UoeDAsIHgxIC0gZXBzaWxvbiwgZHgpLmNvbmNhdCh4MSk7XG4gIHJldHVybiBmdW5jdGlvbih5KSB7IHJldHVybiB4Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gIHZhciB4MSwgeDAsIFgxLCBYMCxcbiAgICAgIHkxLCB5MCwgWTEsIFkwLFxuICAgICAgZHggPSAxMCwgZHkgPSBkeCwgRFggPSA5MCwgRFkgPSAzNjAsXG4gICAgICB4LCB5LCBYLCBZLFxuICAgICAgcHJlY2lzaW9uID0gMi41O1xuXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICByZXR1cm4ge3R5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVzKCkge1xuICAgIHJldHVybiByYW5nZShjZWlsKFgwIC8gRFgpICogRFgsIFgxLCBEWCkubWFwKFgpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSlcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbjsgfSkubWFwKHgpKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uOyB9KS5tYXAoeSkpO1xuICB9XG5cbiAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxpbmVzKCkubWFwKGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7IHJldHVybiB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307IH0pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiUG9seWdvblwiLFxuICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgWChYMCkuY29uY2F0KFxuICAgICAgICBZKFkxKS5zbGljZSgxKSxcbiAgICAgICAgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLFxuICAgICAgICBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpXG4gICAgICBdXG4gICAgfTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWFqb3IoXykuZXh0ZW50TWlub3IoXyk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbWDAsIFkwXSwgW1gxLCBZMV1dO1xuICAgIFgwID0gK19bMF1bMF0sIFgxID0gK19bMV1bMF07XG4gICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG4gICAgaWYgKFkwID4gWTEpIF8gPSBZMCwgWTAgPSBZMSwgWTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLmV4dGVudE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICBpZiAoeDAgPiB4MSkgXyA9IHgwLCB4MCA9IHgxLCB4MSA9IF87XG4gICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gIH07XG5cbiAgZ3JhdGljdWxlLnN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xuICAgIHJldHVybiBncmF0aWN1bGUuc3RlcE1ham9yKF8pLnN0ZXBNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1ham9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtEWCwgRFldO1xuICAgIERYID0gK19bMF0sIERZID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcE1pbm9yID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIGR4ID0gK19bMF0sIGR5ID0gK19bMV07XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByZWNpc2lvbjtcbiAgICBwcmVjaXNpb24gPSArXztcbiAgICB4ID0gZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcbiAgICB5ID0gZ3JhdGljdWxlWSh4MCwgeDEsIHByZWNpc2lvbik7XG4gICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XG4gICAgWSA9IGdyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuICAgIHJldHVybiBncmF0aWN1bGU7XG4gIH07XG5cbiAgcmV0dXJuIGdyYXRpY3VsZVxuICAgICAgLmV4dGVudE1ham9yKFtbLTE4MCwgLTkwICsgZXBzaWxvbl0sIFsxODAsIDkwIC0gZXBzaWxvbl1dKVxuICAgICAgLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbl0sIFsxODAsIDgwICsgZXBzaWxvbl1dKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXRpY3VsZTEwKCkge1xuICByZXR1cm4gZ3JhdGljdWxlKCkoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJleHBvcnQge2RlZmF1bHQgYXMgZ2VvQXJlYX0gZnJvbSBcIi4vYXJlYS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0JvdW5kc30gZnJvbSBcIi4vYm91bmRzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ2VudHJvaWR9IGZyb20gXCIuL2NlbnRyb2lkLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ2lyY2xlfSBmcm9tIFwiLi9jaXJjbGUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9DbGlwQW50aW1lcmlkaWFufSBmcm9tIFwiLi9jbGlwL2FudGltZXJpZGlhbi5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0NsaXBDaXJjbGV9IGZyb20gXCIuL2NsaXAvY2lyY2xlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ2xpcEV4dGVudH0gZnJvbSBcIi4vY2xpcC9leHRlbnQuanNcIjsgLy8gREVQUkVDQVRFRCEgVXNlIGQzLmdlb0lkZW50aXR5KCkuY2xpcEV4dGVudCjigKYpLlxuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0NsaXBSZWN0YW5nbGV9IGZyb20gXCIuL2NsaXAvcmVjdGFuZ2xlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29udGFpbnN9IGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvRGlzdGFuY2V9IGZyb20gXCIuL2Rpc3RhbmNlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvR3JhdGljdWxlLCBncmF0aWN1bGUxMCBhcyBnZW9HcmF0aWN1bGUxMH0gZnJvbSBcIi4vZ3JhdGljdWxlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvSW50ZXJwb2xhdGV9IGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvTGVuZ3RofSBmcm9tIFwiLi9sZW5ndGguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9QYXRofSBmcm9tIFwiLi9wYXRoL2luZGV4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQWxiZXJzfSBmcm9tIFwiLi9wcm9qZWN0aW9uL2FsYmVycy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0FsYmVyc1VzYX0gZnJvbSBcIi4vcHJvamVjdGlvbi9hbGJlcnNVc2EuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9BemltdXRoYWxFcXVhbEFyZWEsIGF6aW11dGhhbEVxdWFsQXJlYVJhdyBhcyBnZW9BemltdXRoYWxFcXVhbEFyZWFSYXd9IGZyb20gXCIuL3Byb2plY3Rpb24vYXppbXV0aGFsRXF1YWxBcmVhLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQsIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3IGFzIGdlb0F6aW11dGhhbEVxdWlkaXN0YW50UmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29uaWNDb25mb3JtYWwsIGNvbmljQ29uZm9ybWFsUmF3IGFzIGdlb0NvbmljQ29uZm9ybWFsUmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL2NvbmljQ29uZm9ybWFsLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29uaWNFcXVhbEFyZWEsIGNvbmljRXF1YWxBcmVhUmF3IGFzIGdlb0NvbmljRXF1YWxBcmVhUmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL2NvbmljRXF1YWxBcmVhLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvQ29uaWNFcXVpZGlzdGFudCwgY29uaWNFcXVpZGlzdGFudFJhdyBhcyBnZW9Db25pY0VxdWlkaXN0YW50UmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9FcXVhbEVhcnRoLCBlcXVhbEVhcnRoUmF3IGFzIGdlb0VxdWFsRWFydGhSYXd9IGZyb20gXCIuL3Byb2plY3Rpb24vZXF1YWxFYXJ0aC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb0VxdWlyZWN0YW5ndWxhciwgZXF1aXJlY3Rhbmd1bGFyUmF3IGFzIGdlb0VxdWlyZWN0YW5ndWxhclJhd30gZnJvbSBcIi4vcHJvamVjdGlvbi9lcXVpcmVjdGFuZ3VsYXIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9Hbm9tb25pYywgZ25vbW9uaWNSYXcgYXMgZ2VvR25vbW9uaWNSYXd9IGZyb20gXCIuL3Byb2plY3Rpb24vZ25vbW9uaWMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9JZGVudGl0eX0gZnJvbSBcIi4vcHJvamVjdGlvbi9pZGVudGl0eS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGdlb1Byb2plY3Rpb24sIHByb2plY3Rpb25NdXRhdG9yIGFzIGdlb1Byb2plY3Rpb25NdXRhdG9yfSBmcm9tIFwiLi9wcm9qZWN0aW9uL2luZGV4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvTWVyY2F0b3IsIG1lcmNhdG9yUmF3IGFzIGdlb01lcmNhdG9yUmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL21lcmNhdG9yLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvTmF0dXJhbEVhcnRoMSwgbmF0dXJhbEVhcnRoMVJhdyBhcyBnZW9OYXR1cmFsRWFydGgxUmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9PcnRob2dyYXBoaWMsIG9ydGhvZ3JhcGhpY1JhdyBhcyBnZW9PcnRob2dyYXBoaWNSYXd9IGZyb20gXCIuL3Byb2plY3Rpb24vb3J0aG9ncmFwaGljLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvU3RlcmVvZ3JhcGhpYywgc3RlcmVvZ3JhcGhpY1JhdyBhcyBnZW9TdGVyZW9ncmFwaGljUmF3fSBmcm9tIFwiLi9wcm9qZWN0aW9uL3N0ZXJlb2dyYXBoaWMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9UcmFuc3ZlcnNlTWVyY2F0b3IsIHRyYW5zdmVyc2VNZXJjYXRvclJhdyBhcyBnZW9UcmFuc3ZlcnNlTWVyY2F0b3JSYXd9IGZyb20gXCIuL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvUm90YXRpb259IGZyb20gXCIuL3JvdGF0aW9uLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgZ2VvU3RyZWFtfSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBnZW9UcmFuc2Zvcm19IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBoYXZlcnNpbiwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcbiAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICBjeTAgPSBjb3MoeTApLFxuICAgICAgc3kwID0gc2luKHkwKSxcbiAgICAgIGN5MSA9IGNvcyh5MSksXG4gICAgICBzeTEgPSBzaW4oeTEpLFxuICAgICAga3gwID0gY3kwICogY29zKHgwKSxcbiAgICAgIGt5MCA9IGN5MCAqIHNpbih4MCksXG4gICAgICBreDEgPSBjeTEgKiBjb3MoeDEpLFxuICAgICAga3kxID0gY3kxICogc2luKHgxKSxcbiAgICAgIGQgPSAyICogYXNpbihzcXJ0KGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgIGsgPSBzaW4oZCk7XG5cbiAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgQiA9IHNpbih0ICo9IGQpIC8gayxcbiAgICAgICAgQSA9IHNpbihkIC0gdCkgLyBrLFxuICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5LCB4KSAqIGRlZ3JlZXMsXG4gICAgICBhdGFuMih6LCBzcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXNcbiAgICBdO1xuICB9IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMsIHkwICogZGVncmVlc107XG4gIH07XG5cbiAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gIHJldHVybiBpbnRlcnBvbGF0ZTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlci5qc1wiO1xuaW1wb3J0IHthYnMsIGF0YW4yLCBjb3MsIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4vbm9vcC5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi9zdHJlYW0uanNcIjtcblxudmFyIGxlbmd0aFN1bSA9IGFkZGVyKCksXG4gICAgbGFtYmRhMCxcbiAgICBzaW5QaGkwLFxuICAgIGNvc1BoaTA7XG5cbnZhciBsZW5ndGhTdHJlYW0gPSB7XG4gIHNwaGVyZTogbm9vcCxcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbGVuZ3RoTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdDtcbiAgbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBsZW5ndGhMaW5lRW5kO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhMaW5lRW5kKCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IG5vb3A7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBsYW1iZGEwID0gbGFtYmRhLCBzaW5QaGkwID0gc2luKHBoaSksIGNvc1BoaTAgPSBjb3MocGhpKTtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwKSxcbiAgICAgIGNvc0RlbHRhID0gY29zKGRlbHRhKSxcbiAgICAgIHNpbkRlbHRhID0gc2luKGRlbHRhKSxcbiAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgIHkgPSBjb3NQaGkwICogc2luUGhpIC0gc2luUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhLFxuICAgICAgeiA9IHNpblBoaTAgKiBzaW5QaGkgKyBjb3NQaGkwICogY29zUGhpICogY29zRGVsdGE7XG4gIGxlbmd0aFN1bS5hZGQoYXRhbjIoc3FydCh4ICogeCArIHkgKiB5KSwgeikpO1xuICBsYW1iZGEwID0gbGFtYmRhLCBzaW5QaGkwID0gc2luUGhpLCBjb3NQaGkwID0gY29zUGhpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QpIHtcbiAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gIHN0cmVhbShvYmplY3QsIGxlbmd0aFN0cmVhbSk7XG4gIHJldHVybiArbGVuZ3RoU3VtO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4uL2FkZGVyLmpzXCI7XG5pbXBvcnQge2Fic30gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBhcmVhUmluZ1N1bSA9IGFkZGVyKCksXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFTdHJlYW0ucG9pbnQgPSBub29wO1xuICAgIGFyZWFTdW0uYWRkKGFicyhhcmVhUmluZ1N1bSkpO1xuICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBhcmVhU3VtIC8gMjtcbiAgICBhcmVhU3VtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGFyZWE7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QoeCwgeSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KHgsIHkpIHtcbiAgYXJlYVJpbmdTdW0uYWRkKHkwICogeCAtIHgwICogeSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KHgwMCwgeTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJlYVN0cmVhbTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbnZhciB4MCA9IEluZmluaXR5LFxuICAgIHkwID0geDAsXG4gICAgeDEgPSAteDAsXG4gICAgeTEgPSB4MTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcCxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm91bmRzID0gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDEgPSB5MSA9IC0oeTAgPSB4MCA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCh4LCB5KSB7XG4gIGlmICh4IDwgeDApIHgwID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gIGlmICh5ID4geTEpIHkxID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYm91bmRzU3RyZWFtO1xuIiwiaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG4vLyBUT0RPIEVuZm9yY2UgcG9zaXRpdmUgYXJlYSBmb3IgZXh0ZXJpb3IsIG5lZ2F0aXZlIGFyZWEgZm9yIGludGVyaW9yP1xuXG52YXIgWDAgPSAwLFxuICAgIFkwID0gMCxcbiAgICBaMCA9IDAsXG4gICAgWDEgPSAwLFxuICAgIFkxID0gMCxcbiAgICBaMSA9IDAsXG4gICAgWDIgPSAwLFxuICAgIFkyID0gMCxcbiAgICBaMiA9IDAsXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjZW50cm9pZCA9IFoyID8gW1gyIC8gWjIsIFkyIC8gWjJdXG4gICAgICAgIDogWjEgPyBbWDEgLyBaMSwgWTEgLyBaMV1cbiAgICAgICAgOiBaMCA/IFtYMCAvIFowLCBZMCAvIFowXVxuICAgICAgICA6IFtOYU4sIE5hTl07XG4gICAgWDAgPSBZMCA9IFowID1cbiAgICBYMSA9IFkxID0gWjEgPVxuICAgIFgyID0gWTIgPSBaMiA9IDA7XG4gICAgcmV0dXJuIGNlbnRyb2lkO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KHgsIHkpIHtcbiAgWDAgKz0geDtcbiAgWTAgKz0geTtcbiAgKytaMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0TGluZSh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludExpbmU7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50TGluZSh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCwgZHkgPSB5IC0geTAsIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgWjEgKz0gejtcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RSaW5nO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCwgeTAwKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0UmluZyh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludFJpbmc7XG4gIGNlbnRyb2lkUG9pbnQoeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50UmluZyh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCxcbiAgICAgIGR5ID0geSAtIHkwLFxuICAgICAgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG5cbiAgeiA9IHkwICogeCAtIHgwICogeTtcbiAgWDIgKz0geiAqICh4MCArIHgpO1xuICBZMiArPSB6ICogKHkwICsgeSk7XG4gIFoyICs9IHogKiAzO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2VudHJvaWRTdHJlYW07XG4iLCJpbXBvcnQge3RhdX0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblBhdGhDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgX3JhZGl1czogNC41LFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCArIHRoaXMuX3JhZGl1cywgeSk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuYXJjKHgsIHksIHRoaXMuX3JhZGl1cywgMCwgdGF1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IG5vb3Bcbn07XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5LmpzXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuLi9zdHJlYW0uanNcIjtcbmltcG9ydCBwYXRoQXJlYSBmcm9tIFwiLi9hcmVhLmpzXCI7XG5pbXBvcnQgcGF0aEJvdW5kcyBmcm9tIFwiLi9ib3VuZHMuanNcIjtcbmltcG9ydCBwYXRoQ2VudHJvaWQgZnJvbSBcIi4vY2VudHJvaWQuanNcIjtcbmltcG9ydCBQYXRoQ29udGV4dCBmcm9tIFwiLi9jb250ZXh0LmpzXCI7XG5pbXBvcnQgcGF0aE1lYXN1cmUgZnJvbSBcIi4vbWVhc3VyZS5qc1wiO1xuaW1wb3J0IFBhdGhTdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2plY3Rpb24sIGNvbnRleHQpIHtcbiAgdmFyIHBvaW50UmFkaXVzID0gNC41LFxuICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgIGNvbnRleHRTdHJlYW07XG5cbiAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICB9XG5cbiAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQXJlYSkpO1xuICAgIHJldHVybiBwYXRoQXJlYS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLm1lYXN1cmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhNZWFzdXJlKSk7XG4gICAgcmV0dXJuIHBhdGhNZWFzdXJlLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQm91bmRzKSk7XG4gICAgcmV0dXJuIHBhdGhCb3VuZHMucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aENlbnRyb2lkKSk7XG4gICAgcmV0dXJuIHBhdGhDZW50cm9pZC5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdGlvblN0cmVhbSA9IF8gPT0gbnVsbCA/IChwcm9qZWN0aW9uID0gbnVsbCwgaWRlbnRpdHkpIDogKHByb2plY3Rpb24gPSBfKS5zdHJlYW0sIHBhdGgpIDogcHJvamVjdGlvbjtcbiAgfTtcblxuICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICBjb250ZXh0U3RyZWFtID0gXyA9PSBudWxsID8gKGNvbnRleHQgPSBudWxsLCBuZXcgUGF0aFN0cmluZykgOiBuZXcgUGF0aENvbnRleHQoY29udGV4dCA9IF8pO1xuICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cyhwb2ludFJhZGl1cyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwb2ludFJhZGl1cztcbiAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihwcm9qZWN0aW9uKS5jb250ZXh0KGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuLi9hZGRlci5qc1wiO1xuaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxudmFyIGxlbmd0aFN1bSA9IGFkZGVyKCksXG4gICAgbGVuZ3RoUmluZyxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQoeDAwLCB5MDApO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IHRydWU7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSArbGVuZ3RoU3VtO1xuICAgIGxlbmd0aFN1bS5yZXNldCgpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QoeCwgeSkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KHgsIHkpIHtcbiAgeDAgLT0geCwgeTAgLT0geTtcbiAgbGVuZ3RoU3VtLmFkZChzcXJ0KHgwICogeDAgKyB5MCAqIHkwKSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsZW5ndGhTdHJlYW07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlKDQuNSksXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgaWYgKChfID0gK18pICE9PSB0aGlzLl9yYWRpdXMpIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXMuX2NpcmNsZSA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fc3RyaW5nLnB1c2goXCJaXCIpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTFwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fY2lyY2xlID09IG51bGwpIHRoaXMuX2NpcmNsZSA9IGNpcmNsZSh0aGlzLl9yYWRpdXMpO1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHRoaXMuX2NpcmNsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3N0cmluZy5qb2luKFwiXCIpO1xuICAgICAgdGhpcy5fc3RyaW5nID0gW107XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNpcmNsZShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbjtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlci5qc1wiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpZ24sIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5mdW5jdGlvbiBsb25naXR1ZGUocG9pbnQpIHtcbiAgaWYgKGFicyhwb2ludFswXSkgPD0gcGkpXG4gICAgcmV0dXJuIHBvaW50WzBdO1xuICBlbHNlXG4gICAgcmV0dXJuIHNpZ24ocG9pbnRbMF0pICogKChhYnMocG9pbnRbMF0pICsgcGkpICUgdGF1IC0gcGkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gbG9uZ2l0dWRlKHBvaW50KSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0ucmVzZXQoKTtcblxuICBpZiAoc2luUGhpID09PSAxKSBwaGkgPSBoYWxmUGkgKyBlcHNpbG9uO1xuICBlbHNlIGlmIChzaW5QaGkgPT09IC0xKSBwaGkgPSAtaGFsZlBpIC0gZXBzaWxvbjtcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb24ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEobSA9IChyaW5nID0gcG9seWdvbltpXSkubGVuZ3RoKSkgY29udGludWU7XG4gICAgdmFyIHJpbmcsXG4gICAgICAgIG0sXG4gICAgICAgIHBvaW50MCA9IHJpbmdbbSAtIDFdLFxuICAgICAgICBsYW1iZGEwID0gbG9uZ2l0dWRlKHBvaW50MCksXG4gICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICBzaW5QaGkwID0gc2luKHBoaTApLFxuICAgICAgICBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtOyArK2osIGxhbWJkYTAgPSBsYW1iZGExLCBzaW5QaGkwID0gc2luUGhpMSwgY29zUGhpMCA9IGNvc1BoaTEsIHBvaW50MCA9IHBvaW50MSkge1xuICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgbGFtYmRhMSA9IGxvbmdpdHVkZShwb2ludDEpLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImltcG9ydCBjb25pY0VxdWFsQXJlYSBmcm9tIFwiLi9jb25pY0VxdWFsQXJlYS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKClcbiAgICAgIC5wYXJhbGxlbHMoWzI5LjUsIDQ1LjVdKVxuICAgICAgLnNjYWxlKDEwNzApXG4gICAgICAudHJhbnNsYXRlKFs0ODAsIDI1MF0pXG4gICAgICAucm90YXRlKFs5NiwgMF0pXG4gICAgICAuY2VudGVyKFstMC42LCAzOC43XSk7XG59XG4iLCJpbXBvcnQge2Vwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgYWxiZXJzIGZyb20gXCIuL2FsYmVycy5qc1wiO1xuaW1wb3J0IGNvbmljRXF1YWxBcmVhIGZyb20gXCIuL2NvbmljRXF1YWxBcmVhLmpzXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0LmpzXCI7XG5cbi8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxuLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG5mdW5jdGlvbiBtdWx0aXBsZXgoc3RyZWFtcykge1xuICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvaW50KHgsIHkpOyB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVTdGFydCgpOyB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lRW5kKCk7IH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25FbmQoKTsgfVxuICB9O1xufVxuXG4vLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxuLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuLy8gc2NhbGUgdG8gMTI4NSBhbmQgYWRqdXN0IHRoZSB0cmFuc2xhdGUgYWNjb3JkaW5nbHkuIFRoZSBzZXQgb2Ygc3RhbmRhcmRcbi8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcbi8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBsb3dlcjQ4ID0gYWxiZXJzKCksIGxvd2VyNDhQb2ludCxcbiAgICAgIGFsYXNrYSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTQsIDBdKS5jZW50ZXIoWy0yLCA1OC41XSkucGFyYWxsZWxzKFs1NSwgNjVdKSwgYWxhc2thUG9pbnQsIC8vIEVQU0c6MzMzOFxuICAgICAgaGF3YWlpID0gY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NywgMF0pLmNlbnRlcihbLTMsIDE5LjldKS5wYXJhbGxlbHMoWzgsIDE4XSksIGhhd2FpaVBvaW50LCAvLyBFU1JJOjEwMjAwN1xuICAgICAgcG9pbnQsIHBvaW50U3RyZWFtID0ge3BvaW50OiBmdW5jdGlvbih4LCB5KSB7IHBvaW50ID0gW3gsIHldOyB9fTtcblxuICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgcmV0dXJuIHBvaW50ID0gbnVsbCxcbiAgICAgICAgKGxvd2VyNDhQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgIHx8IChhbGFza2FQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXG4gICAgICAgIHx8IChoYXdhaWlQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpO1xuICB9XG5cbiAgYWxiZXJzVXNhLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksXG4gICAgICAgIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLFxuICAgICAgICB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLFxuICAgICAgICB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgIHJldHVybiAoeSA+PSAwLjEyMCAmJiB5IDwgMC4yMzQgJiYgeCA+PSAtMC40MjUgJiYgeCA8IC0wLjIxNCA/IGFsYXNrYVxuICAgICAgICA6IHkgPj0gMC4xNjYgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuMjE0ICYmIHggPCAtMC4xMTUgPyBoYXdhaWlcbiAgICAgICAgOiBsb3dlcjQ4KS5pbnZlcnQoY29vcmRpbmF0ZXMpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBtdWx0aXBsZXgoW2xvd2VyNDguc3RyZWFtKGNhY2hlU3RyZWFtID0gc3RyZWFtKSwgYWxhc2thLnN0cmVhbShzdHJlYW0pLCBoYXdhaWkuc3RyZWFtKHN0cmVhbSldKTtcbiAgfTtcblxuICBhbGJlcnNVc2EucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgbG93ZXI0OC5wcmVjaXNpb24oXyksIGFsYXNrYS5wcmVjaXNpb24oXyksIGhhd2FpaS5wcmVjaXNpb24oXyk7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICBsb3dlcjQ4LnNjYWxlKF8pLCBhbGFza2Euc2NhbGUoXyAqIDAuMzUpLCBoYXdhaWkuc2NhbGUoXyk7XG4gICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLCB4ID0gK19bMF0sIHkgPSArX1sxXTtcblxuICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDhcbiAgICAgICAgLnRyYW5zbGF0ZShfKVxuICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQ1NSAqIGssIHkgLSAwLjIzOCAqIGtdLCBbeCArIDAuNDU1ICogaywgeSArIDAuMjM4ICoga11dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIGFsYXNrYVBvaW50ID0gYWxhc2thXG4gICAgICAgIC50cmFuc2xhdGUoW3ggLSAwLjMwNyAqIGssIHkgKyAwLjIwMSAqIGtdKVxuICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQyNSAqIGsgKyBlcHNpbG9uLCB5ICsgMC4xMjAgKiBrICsgZXBzaWxvbl0sIFt4IC0gMC4yMTQgKiBrIC0gZXBzaWxvbiwgeSArIDAuMjM0ICogayAtIGVwc2lsb25dXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4yMDUgKiBrLCB5ICsgMC4yMTIgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC4yMTQgKiBrICsgZXBzaWxvbiwgeSArIDAuMTY2ICogayArIGVwc2lsb25dLCBbeCAtIDAuMTE1ICogayAtIGVwc2lsb24sIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChhbGJlcnNVc2EsIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKGFsYmVyc1VzYSwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKGFsYmVyc1VzYSwgd2lkdGgsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChhbGJlcnNVc2EsIGhlaWdodCwgb2JqZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gYWxiZXJzVXNhO1xuICB9XG5cbiAgcmV0dXJuIGFsYmVyc1VzYS5zY2FsZSgxMDcwKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGN4ID0gY29zKHgpLFxuICAgICAgICBjeSA9IGNvcyh5KSxcbiAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xuICAgIHJldHVybiBbXG4gICAgICBrICogY3kgKiBzaW4oeCksXG4gICAgICBrICogc2luKHkpXG4gICAgXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHogPSBzcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgIHNjID0gc2luKGMpLFxuICAgICAgICBjYyA9IGNvcyhjKTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeCAqIHNjLCB6ICogY2MpLFxuICAgICAgYXNpbih6ICYmIHkgKiBzYyAvIHopXG4gICAgXTtcbiAgfVxufVxuIiwiaW1wb3J0IHthc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XG4gIHJldHVybiBzcXJ0KDIgLyAoMSArIGN4Y3kpKTtcbn0pO1xuXG5hemltdXRoYWxFcXVhbEFyZWFSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhc2luKHogLyAyKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1YWxBcmVhUmF3KVxuICAgICAgLnNjYWxlKDEyNC43NSlcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG4iLCJpbXBvcnQge2Fjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbC5qc1wiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gIHJldHVybiAoYyA9IGFjb3MoYykpICYmIGMgLyBzaW4oYyk7XG59KTtcblxuYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIHo7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDc5LjQxODgpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHtkZWdyZWVzLCBwaSwgcmFkaWFuc30gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7cHJvamVjdGlvbk11dGF0b3J9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XG4gIHZhciBwaGkwID0gMCxcbiAgICAgIHBoaTEgPSBwaSAvIDMsXG4gICAgICBtID0gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSxcbiAgICAgIHAgPSBtKHBoaTAsIHBoaTEpO1xuXG4gIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gbShwaGkwID0gX1swXSAqIHJhZGlhbnMsIHBoaTEgPSBfWzFdICogcmFkaWFucykgOiBbcGhpMCAqIGRlZ3JlZXMsIHBoaTEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICByZXR1cm4gcDtcbn1cbiIsImltcG9ydCB7YWJzLCBhdGFuLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIGxvZywgcGksIHBvdywgc2lnbiwgc2luLCBzcXJ0LCB0YW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWMuanNcIjtcbmltcG9ydCB7bWVyY2F0b3JSYXd9IGZyb20gXCIuL21lcmNhdG9yLmpzXCI7XG5cbmZ1bmN0aW9uIHRhbnkoeSkge1xuICByZXR1cm4gdGFuKChoYWxmUGkgKyB5KSAvIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiBsb2coY3kwIC8gY29zKHkxKSkgLyBsb2codGFueSh5MSkgLyB0YW55KHkwKSksXG4gICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgaWYgKCFuKSByZXR1cm4gbWVyY2F0b3JSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSArIGVwc2lsb24pIHkgPSAtaGFsZlBpICsgZXBzaWxvbjsgfVxuICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSAtIGVwc2lsb24pIHkgPSBoYWxmUGkgLSBlcHNpbG9uOyB9XG4gICAgdmFyIHIgPSBmIC8gcG93KHRhbnkoeSksIG4pO1xuICAgIHJldHVybiBbciAqIHNpbihuICogeCksIGYgLSByICogY29zKG4gKiB4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSksXG4gICAgICBsID0gYXRhbjIoeCwgYWJzKGZ5KSkgKiBzaWduKGZ5KTtcbiAgICBpZiAoZnkgKiBuIDwgMClcbiAgICAgIGwgLT0gcGkgKiBzaWduKHgpICogc2lnbihmeSk7XG4gICAgcmV0dXJuIFtsIC8gbiwgMiAqIGF0YW4ocG93KGYgLyByLCAxIC8gbikpIC0gaGFsZlBpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNDb25mb3JtYWxSYXcpXG4gICAgICAuc2NhbGUoMTA5LjUpXG4gICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbn1cbiIsImltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBwaSwgc2lnbiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtjb25pY1Byb2plY3Rpb259IGZyb20gXCIuL2NvbmljLmpzXCI7XG5pbXBvcnQge2N5bGluZHJpY2FsRXF1YWxBcmVhUmF3fSBmcm9tIFwiLi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNFcXVhbEFyZWFSYXcoeTAsIHkxKSB7XG4gIHZhciBzeTAgPSBzaW4oeTApLCBuID0gKHN5MCArIHNpbih5MSkpIC8gMjtcblxuICAvLyBBcmUgdGhlIHBhcmFsbGVscyBzeW1tZXRyaWNhbCBhcm91bmQgdGhlIEVxdWF0b3I/XG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcoeTApO1xuXG4gIHZhciBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksIHIwID0gc3FydChjKSAvIG47XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIHIgPSBzcXJ0KGMgLSAyICogbiAqIHNpbih5KSkgLyBuO1xuICAgIHJldHVybiBbciAqIHNpbih4ICo9IG4pLCByMCAtIHIgKiBjb3MoeCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHIweSA9IHIwIC0geSxcbiAgICAgICAgbCA9IGF0YW4yKHgsIGFicyhyMHkpKSAqIHNpZ24ocjB5KTtcbiAgICBpZiAocjB5ICogbiA8IDApXG4gICAgICBsIC09IHBpICogc2lnbih4KSAqIHNpZ24ocjB5KTtcbiAgICByZXR1cm4gW2wgLyBuLCBhc2luKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTU1LjQyNClcbiAgICAgIC5jZW50ZXIoWzAsIDMzLjY0NDJdKTtcbn1cbiIsImltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBwaSwgc2lnbiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtjb25pY1Byb2plY3Rpb259IGZyb20gXCIuL2NvbmljLmpzXCI7XG5pbXBvcnQge2VxdWlyZWN0YW5ndWxhclJhd30gZnJvbSBcIi4vZXF1aXJlY3Rhbmd1bGFyLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50UmF3KHkwLCB5MSkge1xuICB2YXIgY3kwID0gY29zKHkwKSxcbiAgICAgIG4gPSB5MCA9PT0geTEgPyBzaW4oeTApIDogKGN5MCAtIGNvcyh5MSkpIC8gKHkxIC0geTApLFxuICAgICAgZyA9IGN5MCAvIG4gKyB5MDtcblxuICBpZiAoYWJzKG4pIDwgZXBzaWxvbikgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgZ3kgPSBnIC0geSwgbnggPSBuICogeDtcbiAgICByZXR1cm4gW2d5ICogc2luKG54KSwgZyAtIGd5ICogY29zKG54KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZ3kgPSBnIC0geSxcbiAgICAgICAgbCA9IGF0YW4yKHgsIGFicyhneSkpICogc2lnbihneSk7XG4gICAgaWYgKGd5ICogbiA8IDApXG4gICAgICBsIC09IHBpICogc2lnbih4KSAqIHNpZ24oZ3kpO1xuICAgIHJldHVybiBbbCAvIG4sIGcgLSBzaWduKG4pICogc3FydCh4ICogeCArIGd5ICogZ3kpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgLmNlbnRlcihbMCwgMTMuOTM4OV0pO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHBoaTApIHtcbiAgdmFyIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhICogY29zUGhpMCwgc2luKHBoaSkgLyBjb3NQaGkwXTtcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbeCAvIGNvc1BoaTAsIGFzaW4oeSAqIGNvc1BoaTApXTtcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge2FicywgYXNpbiwgY29zLCBlcHNpbG9uMiwgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG52YXIgQTEgPSAxLjM0MDI2NCxcbiAgICBBMiA9IC0wLjA4MTEwNixcbiAgICBBMyA9IDAuMDAwODkzLFxuICAgIEE0ID0gMC4wMDM3OTYsXG4gICAgTSA9IHNxcnQoMykgLyAyLFxuICAgIGl0ZXJhdGlvbnMgPSAxMjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsRWFydGhSYXcobGFtYmRhLCBwaGkpIHtcbiAgdmFyIGwgPSBhc2luKE0gKiBzaW4ocGhpKSksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICByZXR1cm4gW1xuICAgIGxhbWJkYSAqIGNvcyhsKSAvIChNICogKEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMikpKSxcbiAgICBsICogKEExICsgQTIgKiBsMiArIGw2ICogKEEzICsgQTQgKiBsMikpXG4gIF07XG59XG5cbmVxdWFsRWFydGhSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbCA9IHksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICBmb3IgKHZhciBpID0gMCwgZGVsdGEsIGZ5LCBmcHk7IGkgPCBpdGVyYXRpb25zOyArK2kpIHtcbiAgICBmeSA9IGwgKiAoQTEgKyBBMiAqIGwyICsgbDYgKiAoQTMgKyBBNCAqIGwyKSkgLSB5O1xuICAgIGZweSA9IEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMik7XG4gICAgbCAtPSBkZWx0YSA9IGZ5IC8gZnB5LCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgICBpZiAoYWJzKGRlbHRhKSA8IGVwc2lsb24yKSBicmVhaztcbiAgfVxuICByZXR1cm4gW1xuICAgIE0gKiB4ICogKEExICsgMyAqIEEyICogbDIgKyBsNiAqICg3ICogQTMgKyA5ICogQTQgKiBsMikpIC8gY29zKGwpLFxuICAgIGFzaW4oc2luKGwpIC8gTSlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVhbEVhcnRoUmF3KVxuICAgICAgLnNjYWxlKDE3Ny4xNTgpO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgcGhpXTtcbn1cblxuZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWlyZWN0YW5ndWxhclJhdylcbiAgICAgIC5zY2FsZSgxNTIuNjMpO1xufVxuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIGdlb1N0cmVhbX0gZnJvbSBcIi4uL3N0cmVhbS5qc1wiO1xuaW1wb3J0IGJvdW5kc1N0cmVhbSBmcm9tIFwiLi4vcGF0aC9ib3VuZHMuanNcIjtcblxuZnVuY3Rpb24gZml0KHByb2plY3Rpb24sIGZpdEJvdW5kcywgb2JqZWN0KSB7XG4gIHZhciBjbGlwID0gcHJvamVjdGlvbi5jbGlwRXh0ZW50ICYmIHByb2plY3Rpb24uY2xpcEV4dGVudCgpO1xuICBwcm9qZWN0aW9uLnNjYWxlKDE1MCkudHJhbnNsYXRlKFswLCAwXSk7XG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChudWxsKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvbi5zdHJlYW0oYm91bmRzU3RyZWFtKSk7XG4gIGZpdEJvdW5kcyhib3VuZHNTdHJlYW0ucmVzdWx0KCkpO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoY2xpcCk7XG4gIHJldHVybiBwcm9qZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgICAgeCA9ICtleHRlbnRbMF1bMF0gKyAodyAtIGsgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsXG4gICAgICAgIHkgPSArZXh0ZW50WzBdWzFdICsgKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCkge1xuICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIFtbMCwgMF0sIHNpemVdLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9ICt3aWR0aCxcbiAgICAgICAgayA9IHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLFxuICAgICAgICB4ID0gKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gLWsgKiBiWzBdWzFdO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIGggPSAraGVpZ2h0LFxuICAgICAgICBrID0gaCAvIChiWzFdWzFdIC0gYlswXVsxXSksXG4gICAgICAgIHggPSAtayAqIGJbMF1bMF0sXG4gICAgICAgIHkgPSAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsLmpzXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ25vbW9uaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5nbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgLmNsaXBBbmdsZSg2MCk7XG59XG4iLCJpbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGUuanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXQuanNcIjtcbmltcG9ydCB7Y29zLCBkZWdyZWVzLCByYWRpYW5zLCBzaW59IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgayA9IDEsIHR4ID0gMCwgdHkgPSAwLCBzeCA9IDEsIHN5ID0gMSwgLy8gc2NhbGUsIHRyYW5zbGF0ZSBhbmQgcmVmbGVjdFxuICAgICAgYWxwaGEgPSAwLCBjYSwgc2EsIC8vIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIC8vIGNsaXAgZXh0ZW50XG4gICAgICBreCA9IDEsIGt5ID0gMSxcbiAgICAgIHRyYW5zZm9ybSA9IHRyYW5zZm9ybWVyKHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICB2YXIgcCA9IHByb2plY3Rpb24oW3gsIHldKVxuICAgICAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHBbMF0sIHBbMV0pO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHksXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGt4ID0gayAqIHN4O1xuICAgIGt5ID0gayAqIHN5O1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbiAocCkge1xuICAgIHZhciB4ID0gcFswXSAqIGt4LCB5ID0gcFsxXSAqIGt5O1xuICAgIGlmIChhbHBoYSkge1xuICAgICAgdmFyIHQgPSB5ICogY2EgLSB4ICogc2E7XG4gICAgICB4ID0geCAqIGNhICsgeSAqIHNhO1xuICAgICAgeSA9IHQ7XG4gICAgfSAgICBcbiAgICByZXR1cm4gW3ggKyB0eCwgeSArIHR5XTtcbiAgfVxuICBwcm9qZWN0aW9uLmludmVydCA9IGZ1bmN0aW9uKHApIHtcbiAgICB2YXIgeCA9IHBbMF0gLSB0eCwgeSA9IHBbMV0gLSB0eTtcbiAgICBpZiAoYWxwaGEpIHtcbiAgICAgIHZhciB0ID0geSAqIGNhICsgeCAqIHNhO1xuICAgICAgeCA9IHggKiBjYSAtIHkgKiBzYTtcbiAgICAgIHkgPSB0O1xuICAgIH1cbiAgICByZXR1cm4gW3ggLyBreCwgeSAvIGt5XTtcbiAgfTtcbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm0ocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKTtcbiAgfTtcbiAgcHJvamVjdGlvbi5wb3N0Y2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgfTtcbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVzZXQoKSkgOiBrO1xuICB9O1xuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0eCA9ICtfWzBdLCB0eSA9ICtfWzFdLCByZXNldCgpKSA6IFt0eCwgdHldO1xuICB9XG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgc2EgPSBzaW4oYWxwaGEpLCBjYSA9IGNvcyhhbHBoYSksIHJlc2V0KCkpIDogYWxwaGEgKiBkZWdyZWVzO1xuICB9O1xuICBwcm9qZWN0aW9uLnJlZmxlY3RYID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN4ID0gXyA/IC0xIDogMSwgcmVzZXQoKSkgOiBzeCA8IDA7XG4gIH07XG4gIHByb2plY3Rpb24ucmVmbGVjdFkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3kgPSBfID8gLTEgOiAxLCByZXNldCgpKSA6IHN5IDwgMDtcbiAgfTtcbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcbiAgcHJvamVjdGlvbi5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0aW9uO1xufVxuIiwiaW1wb3J0IGNsaXBBbnRpbWVyaWRpYW4gZnJvbSBcIi4uL2NsaXAvYW50aW1lcmlkaWFuLmpzXCI7XG5pbXBvcnQgY2xpcENpcmNsZSBmcm9tIFwiLi4vY2xpcC9jaXJjbGUuanNcIjtcbmltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuLi9jbGlwL3JlY3RhbmdsZS5qc1wiO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4uL2NvbXBvc2UuanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7Y29zLCBkZWdyZWVzLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuLi9yb3RhdGlvbi5qc1wiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdC5qc1wiO1xuaW1wb3J0IHJlc2FtcGxlIGZyb20gXCIuL3Jlc2FtcGxlLmpzXCI7XG5cbnZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtZXIoe1xuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciByID0gcm90YXRlKHgsIHkpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBvaW50KHJbMF0sIHJbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGssIGR4LCBkeSwgc3gsIHN5KSB7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh4LCB5KSB7XG4gICAgeCAqPSBzeDsgeSAqPSBzeTtcbiAgICByZXR1cm4gW2R4ICsgayAqIHgsIGR5IC0gayAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsoeCAtIGR4KSAvIGsgKiBzeCwgKGR5IC0geSkgLyBrICogc3ldO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCBkeCwgZHksIHN4LCBzeSwgYWxwaGEpIHtcbiAgdmFyIGNvc0FscGhhID0gY29zKGFscGhhKSxcbiAgICAgIHNpbkFscGhhID0gc2luKGFscGhhKSxcbiAgICAgIGEgPSBjb3NBbHBoYSAqIGssXG4gICAgICBiID0gc2luQWxwaGEgKiBrLFxuICAgICAgYWkgPSBjb3NBbHBoYSAvIGssXG4gICAgICBiaSA9IHNpbkFscGhhIC8gayxcbiAgICAgIGNpID0gKHNpbkFscGhhICogZHkgLSBjb3NBbHBoYSAqIGR4KSAvIGssXG4gICAgICBmaSA9IChzaW5BbHBoYSAqIGR4ICsgY29zQWxwaGEgKiBkeSkgLyBrO1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHggKj0gc3g7IHkgKj0gc3k7XG4gICAgcmV0dXJuIFthICogeCAtIGIgKiB5ICsgZHgsIGR5IC0gYiAqIHggLSBhICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3N4ICogKGFpICogeCAtIGJpICogeSArIGNpKSwgc3kgKiAoZmkgLSBiaSAqIHggLSBhaSAqIHkpXTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHJldHVybiBwcm9qZWN0aW9uTXV0YXRvcihmdW5jdGlvbigpIHsgcmV0dXJuIHByb2plY3Q7IH0pKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgdmFyIHByb2plY3QsXG4gICAgICBrID0gMTUwLCAvLyBzY2FsZVxuICAgICAgeCA9IDQ4MCwgeSA9IDI1MCwgLy8gdHJhbnNsYXRlXG4gICAgICBsYW1iZGEgPSAwLCBwaGkgPSAwLCAvLyBjZW50ZXJcbiAgICAgIGRlbHRhTGFtYmRhID0gMCwgZGVsdGFQaGkgPSAwLCBkZWx0YUdhbW1hID0gMCwgcm90YXRlLCAvLyBwcmUtcm90YXRlXG4gICAgICBhbHBoYSA9IDAsIC8vIHBvc3Qtcm90YXRlIGFuZ2xlXG4gICAgICBzeCA9IDEsIC8vIHJlZmxlY3RYXG4gICAgICBzeSA9IDEsIC8vIHJlZmxlY3RYXG4gICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBwcmUtY2xpcCBhbmdsZVxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxLCBwb3N0Y2xpcCA9IGlkZW50aXR5LCAvLyBwb3N0LWNsaXAgZXh0ZW50XG4gICAgICBkZWx0YTIgPSAwLjUsIC8vIHByZWNpc2lvblxuICAgICAgcHJvamVjdFJlc2FtcGxlLFxuICAgICAgcHJvamVjdFRyYW5zZm9ybSxcbiAgICAgIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0sXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybShwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFucyk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZlcnQocG9pbnQpIHtcbiAgICBwb2ludCA9IHByb2plY3RSb3RhdGVUcmFuc2Zvcm0uaW52ZXJ0KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgcmV0dXJuIHBvaW50ICYmIFtwb2ludFswXSAqIGRlZ3JlZXMsIHBvaW50WzFdICogZGVncmVlc107XG4gIH1cblxuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnModHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkocHJlY2xpcChwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKSkpKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9IF8sIHRoZXRhID0gdW5kZWZpbmVkLCByZXNldCgpKSA6IHByZWNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wb3N0Y2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMpIDogKHRoZXRhID0gbnVsbCwgY2xpcEFudGltZXJpZGlhbiksIHJlc2V0KCkpIDogdGhldGEgKiBkZWdyZWVzO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8gPT0gbnVsbCA/ICh4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIGlkZW50aXR5KSA6IGNsaXBSZWN0YW5nbGUoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVjZW50ZXIoKSkgOiBrO1xuICB9O1xuXG4gIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArX1swXSwgeSA9ICtfWzFdLCByZWNlbnRlcigpKSA6IFt4LCB5XTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgcGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogW2xhbWJkYSAqIGRlZ3JlZXMsIHBoaSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlbHRhTGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhUGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhR2FtbWEgPSBfLmxlbmd0aCA+IDIgPyBfWzJdICUgMzYwICogcmFkaWFucyA6IDAsIHJlY2VudGVyKCkpIDogW2RlbHRhTGFtYmRhICogZGVncmVlcywgZGVsdGFQaGkgKiBkZWdyZWVzLCBkZWx0YUdhbW1hICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5hbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9IF8gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IGFscGhhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJlZmxlY3RYID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN4ID0gXyA/IC0xIDogMSwgcmVjZW50ZXIoKSkgOiBzeCA8IDA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yZWZsZWN0WSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzeSA9IF8gPyAtMSA6IDEsIHJlY2VudGVyKCkpIDogc3kgPCAwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0KGRlbHRhMik7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRXaWR0aCA9IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xuICAgIHZhciBjZW50ZXIgPSBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCAwLCAwLCBzeCwgc3ksIGFscGhhKS5hcHBseShudWxsLCBwcm9qZWN0KGxhbWJkYSwgcGhpKSksXG4gICAgICAgIHRyYW5zZm9ybSA9IChhbHBoYSA/IHNjYWxlVHJhbnNsYXRlUm90YXRlIDogc2NhbGVUcmFuc2xhdGUpKGssIHggLSBjZW50ZXJbMF0sIHkgLSBjZW50ZXJbMV0sIHN4LCBzeSwgYWxwaGEpO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKTtcbiAgICBwcm9qZWN0VHJhbnNmb3JtID0gY29tcG9zZShwcm9qZWN0LCB0cmFuc2Zvcm0pO1xuICAgIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0gPSBjb21wb3NlKHJvdGF0ZSwgcHJvamVjdFRyYW5zZm9ybSk7XG4gICAgcHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyKTtcbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBwcm9qZWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBwcm9qZWN0aW9uLmludmVydCA9IHByb2plY3QuaW52ZXJ0ICYmIGludmVydDtcbiAgICByZXR1cm4gcmVjZW50ZXIoKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgcGksIHRhbiwgdGF1fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHJvdGF0aW9uIGZyb20gXCIuLi9yb3RhdGlvbi5qc1wiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAuc2NhbGUoOTYxIC8gdGF1KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIHJlY2xpcCgpKSA6IHNjYWxlKCk7XG4gIH07XG5cbiAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgfTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIoXyksIHJlY2xpcCgpKSA6IGNlbnRlcigpO1xuICB9O1xuXG4gIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoXyA9PSBudWxsID8geDAgPSB5MCA9IHgxID0geTEgPSBudWxsIDogKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNsaXAoKSB7XG4gICAgdmFyIGsgPSBwaSAqIHNjYWxlKCksXG4gICAgICAgIHQgPSBtKHJvdGF0aW9uKG0ucm90YXRlKCkpLmludmVydChbMCwgMF0pKTtcbiAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsXG4gICAgICAgID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhd1xuICAgICAgICA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXVxuICAgICAgICA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gIH1cblxuICByZXR1cm4gcmVjbGlwKCk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXR1cmFsRWFydGgxUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogKDAuODcwNyAtIDAuMTMxOTc5ICogcGhpMiArIHBoaTQgKiAoLTAuMDEzNzkxICsgcGhpNCAqICgwLjAwMzk3MSAqIHBoaTIgLSAwLjAwMTUyOSAqIHBoaTQpKSksXG4gICAgcGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpXG4gIF07XG59XG5cbm5hdHVyYWxFYXJ0aDFSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgcGhpID0geSwgaSA9IDI1LCBkZWx0YTtcbiAgZG8ge1xuICAgIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gICAgcGhpIC09IGRlbHRhID0gKHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKSAtIHkpIC9cbiAgICAgICAgKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSAqIDMgKyBwaGk0ICogKC0wLjA0NDQ3NSAqIDcgKyAwLjAyODg3NCAqIDkgKiBwaGkyIC0gMC4wMDU5MTYgKiAxMSAqIHBoaTQpKSk7XG4gIH0gd2hpbGUgKGFicyhkZWx0YSkgPiBlcHNpbG9uICYmIC0taSA+IDApO1xuICByZXR1cm4gW1xuICAgIHggLyAoMC44NzA3ICsgKHBoaTIgPSBwaGkgKiBwaGkpICogKC0wLjEzMTk3OSArIHBoaTIgKiAoLTAuMDEzNzkxICsgcGhpMiAqIHBoaTIgKiBwaGkyICogKDAuMDAzOTcxIC0gMC4wMDE1MjkgKiBwaGkyKSkpKSxcbiAgICBwaGlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihuYXR1cmFsRWFydGgxUmF3KVxuICAgICAgLnNjYWxlKDE3NS4yOTUpO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIGVwc2lsb24sIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2Nvcyh5KSAqIHNpbih4KSwgc2luKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uKTtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFufSBmcm9tIFwiLi4vY2FydGVzaWFuLmpzXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm0uanNcIjtcblxudmFyIG1heERlcHRoID0gMTYsIC8vIG1heGltdW0gZGVwdGggb2Ygc3ViZGl2aXNpb25cbiAgICBjb3NNaW5EaXN0YW5jZSA9IGNvcygzMCAqIHJhZGlhbnMpOyAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0LCBkZWx0YTIpIHtcbiAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIDogcmVzYW1wbGVOb25lKHByb2plY3QpO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgcGhpMiA9IGFzaW4oYyAvPSBtKSxcbiAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHgwID0gTmFOO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICBsaW5lRW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICB9O1xufVxuIiwiaW1wb3J0IHthdGFuLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVyZW9ncmFwaGljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gMSArIGNvcyh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luKHgpIC8gaywgc2luKHkpIC8ga107XG59XG5cbnN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhdGFuKHopO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihzdGVyZW9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI1MClcbiAgICAgIC5jbGlwQW5nbGUoMTQyKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgdGFufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHttZXJjYXRvclByb2plY3Rpb259IGZyb20gXCIuL21lcmNhdG9yLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpLCAtbGFtYmRhXTtcbn1cblxudHJhbnN2ZXJzZU1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgcm90YXRlID0gbS5yb3RhdGU7XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgfTtcblxuICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRlKFswLCAwLCA5MF0pXG4gICAgICAuc2NhbGUoMTU5LjE1NSk7XG59XG4iLCJpbXBvcnQgY29tcG9zZSBmcm9tIFwiLi9jb21wb3NlLmpzXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgcGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFthYnMobGFtYmRhKSA+IHBpID8gbGFtYmRhICsgTWF0aC5yb3VuZCgtbGFtYmRhIC8gdGF1KSAqIHRhdSA6IGxhbWJkYSwgcGhpXTtcbn1cblxucm90YXRpb25JZGVudGl0eS5pbnZlcnQgPSByb3RhdGlvbklkZW50aXR5O1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgcmV0dXJuIChkZWx0YUxhbWJkYSAlPSB0YXUpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXG4gICAgOiByb3RhdGlvbklkZW50aXR5KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICB2YXIgY29zRGVsdGFQaGkgPSBjb3MoZGVsdGFQaGkpLFxuICAgICAgc2luRGVsdGFQaGkgPSBzaW4oZGVsdGFQaGkpLFxuICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyhkZWx0YUdhbW1hKSxcbiAgICAgIHNpbkRlbHRhR2FtbWEgPSBzaW4oZGVsdGFHYW1tYSk7XG5cbiAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXG4gICAgXTtcbiAgfVxuXG4gIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhR2FtbWEgLSB5ICogc2luRGVsdGFHYW1tYTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgKyB6ICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpICsgayAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgIF07XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3RhdGUpIHtcbiAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgaWYgKGdlb21ldHJ5ICYmIHN0cmVhbUdlb21ldHJ5VHlwZS5oYXNPd25Qcm9wZXJ0eShnZW9tZXRyeS50eXBlKSkge1xuICAgIHN0cmVhbUdlb21ldHJ5VHlwZVtnZW9tZXRyeS50eXBlXShnZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufVxuXG52YXIgc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgRmVhdHVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH0sXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfVxufTtcblxudmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbS5zcGhlcmUoKTtcbiAgfSxcbiAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcbiAgfSxcbiAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtLCAwKTtcbiAgfSxcbiAgTXVsdGlMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDApO1xuICB9LFxuICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbVBvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0pO1xuICB9LFxuICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gIH0sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyZWFtTGluZShjb29yZGluYXRlcywgc3RyZWFtLCBjbG9zZWQpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCwgY29vcmRpbmF0ZTtcbiAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG4gIHN0cmVhbS5saW5lRW5kKCk7XG59XG5cbmZ1bmN0aW9uIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXMsIHN0cmVhbSkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0sIDEpO1xuICBzdHJlYW0ucG9seWdvbkVuZCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWV0aG9kcykge1xuICByZXR1cm4ge1xuICAgIHN0cmVhbTogdHJhbnNmb3JtZXIobWV0aG9kcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBvcHRpb25hbChmKSB7XG4gIHJldHVybiBmID09IG51bGwgPyBudWxsIDogcmVxdWlyZWQoZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmO1xufVxuIiwiZXhwb3J0IHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcbiAgdmFyIG0gPSBhcnJheS5sZW5ndGgsXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICB0ID0gYXJyYXlbbV07XG4gICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcbiAgICBhcnJheVtpXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbihhLCBiKSB7XG4gIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbn1cblxuZnVuY3Rpb24gbWVhblgoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1lYW5YUmVkdWNlKHgsIGMpIHtcbiAgcmV0dXJuIHggKyBjLng7XG59XG5cbmZ1bmN0aW9uIG1heFkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG59XG5cbmZ1bmN0aW9uIG1heFlSZWR1Y2UoeSwgYykge1xuICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbn1cblxuZnVuY3Rpb24gbGVhZkxlZnQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlblswXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gIHZhciBjaGlsZHJlbjtcbiAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgIHggPSAwO1xuXG4gICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUueCA9IG1lYW5YKGNoaWxkcmVuKTtcbiAgICAgICAgbm9kZS55ID0gbWF4WShjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgIG5vZGUueSA9IDA7XG4gICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcbiAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgIC8vIFNlY29uZCB3YWxrLCBub3JtYWxpemluZyB4ICYgeSB0byB0aGUgZGVzaXJlZCBzaXplLlxuICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIGR5O1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgY2x1c3RlcikgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gY2x1c3Rlcjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG4iLCJmdW5jdGlvbiBjb3VudChub2RlKSB7XG4gIHZhciBzdW0gPSAwLFxuICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKCFpKSBzdW0gPSAxO1xuICBlbHNlIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICBub2RlLnZhbHVlID0gc3VtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGNvdW50KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIG5leHQgPSBbXSwgY2hpbGRyZW4sIGksIG47XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAobm9kZSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhub2RlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgbm9kZXMgPSBbbm9kZV0sIGNoaWxkcmVuLCBpO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgbm9kZV9jb3VudCBmcm9tIFwiLi9jb3VudC5qc1wiO1xuaW1wb3J0IG5vZGVfZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgbm9kZV9lYWNoQmVmb3JlIGZyb20gXCIuL2VhY2hCZWZvcmUuanNcIjtcbmltcG9ydCBub2RlX2VhY2hBZnRlciBmcm9tIFwiLi9lYWNoQWZ0ZXIuanNcIjtcbmltcG9ydCBub2RlX3N1bSBmcm9tIFwiLi9zdW0uanNcIjtcbmltcG9ydCBub2RlX3NvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IG5vZGVfcGF0aCBmcm9tIFwiLi9wYXRoLmpzXCI7XG5pbXBvcnQgbm9kZV9hbmNlc3RvcnMgZnJvbSBcIi4vYW5jZXN0b3JzLmpzXCI7XG5pbXBvcnQgbm9kZV9kZXNjZW5kYW50cyBmcm9tIFwiLi9kZXNjZW5kYW50cy5qc1wiO1xuaW1wb3J0IG5vZGVfbGVhdmVzIGZyb20gXCIuL2xlYXZlcy5qc1wiO1xuaW1wb3J0IG5vZGVfbGlua3MgZnJvbSBcIi4vbGlua3MuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gIHZhciByb290ID0gbmV3IE5vZGUoZGF0YSksXG4gICAgICB2YWx1ZWQgPSArZGF0YS52YWx1ZSAmJiAocm9vdC52YWx1ZSA9IGRhdGEudmFsdWUpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVzID0gW3Jvb3RdLFxuICAgICAgY2hpbGQsXG4gICAgICBjaGlsZHMsXG4gICAgICBpLFxuICAgICAgbjtcblxuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xuICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVfY29weSgpIHtcbiAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcbiAgcmV0dXJuIGQuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNvcHlEYXRhKG5vZGUpIHtcbiAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmRlcHRoID1cbiAgdGhpcy5oZWlnaHQgPSAwO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG59XG5cbk5vZGUucHJvdG90eXBlID0gaGllcmFyY2h5LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE5vZGUsXG4gIGNvdW50OiBub2RlX2NvdW50LFxuICBlYWNoOiBub2RlX2VhY2gsXG4gIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gIGVhY2hCZWZvcmU6IG5vZGVfZWFjaEJlZm9yZSxcbiAgc3VtOiBub2RlX3N1bSxcbiAgc29ydDogbm9kZV9zb3J0LFxuICBwYXRoOiBub2RlX3BhdGgsXG4gIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXG4gIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICBsZWF2ZXM6IG5vZGVfbGVhdmVzLFxuICBsaW5rczogbm9kZV9saW5rcyxcbiAgY29weTogbm9kZV9jb3B5XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3QgPSB0aGlzLCBsaW5rcyA9IFtdO1xuICByb290LmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXG4gICAgICBsaW5rcy5wdXNoKHtzb3VyY2U6IG5vZGUucGFyZW50LCB0YXJnZXQ6IG5vZGV9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlua3M7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XG4gICAgfVxuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIHN1bSA9ICt2YWx1ZShub2RlLmRhdGEpIHx8IDAsXG4gICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAoLS1pID49IDApIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICBub2RlLnZhbHVlID0gc3VtO1xuICB9KTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBjbHVzdGVyfSBmcm9tIFwiLi9jbHVzdGVyLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaGllcmFyY2h5fSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBwYWNrfSBmcm9tIFwiLi9wYWNrL2luZGV4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcGFja1NpYmxpbmdzfSBmcm9tIFwiLi9wYWNrL3NpYmxpbmdzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcGFja0VuY2xvc2V9IGZyb20gXCIuL3BhY2svZW5jbG9zZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBhcnRpdGlvbn0gZnJvbSBcIi4vcGFydGl0aW9uLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3RyYXRpZnl9IGZyb20gXCIuL3N0cmF0aWZ5LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdHJlZX0gZnJvbSBcIi4vdHJlZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRyZWVtYXB9IGZyb20gXCIuL3RyZWVtYXAvaW5kZXguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB0cmVlbWFwQmluYXJ5fSBmcm9tIFwiLi90cmVlbWFwL2JpbmFyeS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRyZWVtYXBEaWNlfSBmcm9tIFwiLi90cmVlbWFwL2RpY2UuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB0cmVlbWFwU2xpY2V9IGZyb20gXCIuL3RyZWVtYXAvc2xpY2UuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyB0cmVlbWFwU2xpY2VEaWNlfSBmcm9tIFwiLi90cmVlbWFwL3NsaWNlRGljZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRyZWVtYXBTcXVhcmlmeX0gZnJvbSBcIi4vdHJlZW1hcC9zcXVhcmlmeS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHRyZWVtYXBSZXNxdWFyaWZ5fSBmcm9tIFwiLi90cmVlbWFwL3Jlc3F1YXJpZnkuanNcIjtcbiIsImltcG9ydCB7c2h1ZmZsZSwgc2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjaXJjbGVzKSB7XG4gIHZhciBpID0gMCwgbiA9IChjaXJjbGVzID0gc2h1ZmZsZShzbGljZS5jYWxsKGNpcmNsZXMpKSkubGVuZ3RoLCBCID0gW10sIHAsIGU7XG5cbiAgd2hpbGUgKGkgPCBuKSB7XG4gICAgcCA9IGNpcmNsZXNbaV07XG4gICAgaWYgKGUgJiYgZW5jbG9zZXNXZWFrKGUsIHApKSArK2k7XG4gICAgZWxzZSBlID0gZW5jbG9zZUJhc2lzKEIgPSBleHRlbmRCYXNpcyhCLCBwKSksIGkgPSAwO1xuICB9XG5cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZEJhc2lzKEIsIHApIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKGVuY2xvc2VzV2Vha0FsbChwLCBCKSkgcmV0dXJuIFtwXTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBlbGVtZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmIChlbmNsb3Nlc05vdChwLCBCW2ldKVxuICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQikpIHtcbiAgICAgIHJldHVybiBbQltpXSwgcF07XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCB0d28gZWxlbWVudHMuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgQi5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgQltqXSksIHApXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQltqXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbal0sIHApLCBCW2ldKVxuICAgICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMzKEJbaV0sIEJbal0sIHApLCBCKSkge1xuICAgICAgICByZXR1cm4gW0JbaV0sIEJbal0sIHBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gc29tZXRoaW5nIGlzIHZlcnkgd3JvbmcuXG4gIHRocm93IG5ldyBFcnJvcjtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNOb3QoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyIDwgMCB8fCBkciAqIGRyIDwgZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2VhayhhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciArIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2Vha0FsbChhLCBCKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmICghZW5jbG9zZXNXZWFrKGEsIEJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMoQikge1xuICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZW5jbG9zZUJhc2lzMShCWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBlbmNsb3NlQmFzaXMyKEJbMF0sIEJbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGVuY2xvc2VCYXNpczMoQlswXSwgQlsxXSwgQlsyXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMShhKSB7XG4gIHJldHVybiB7XG4gICAgeDogYS54LFxuICAgIHk6IGEueSxcbiAgICByOiBhLnJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMihhLCBiKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgyMSA9IHgyIC0geDEsIHkyMSA9IHkyIC0geTEsIHIyMSA9IHIyIC0gcjEsXG4gICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gIHJldHVybiB7XG4gICAgeDogKHgxICsgeDIgKyB4MjEgLyBsICogcjIxKSAvIDIsXG4gICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgcjogKGwgKyByMSArIHIyKSAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMyhhLCBiLCBjKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICBhMiA9IHgxIC0geDIsXG4gICAgICBhMyA9IHgxIC0geDMsXG4gICAgICBiMiA9IHkxIC0geTIsXG4gICAgICBiMyA9IHkxIC0geTMsXG4gICAgICBjMiA9IHIyIC0gcjEsXG4gICAgICBjMyA9IHIzIC0gcjEsXG4gICAgICBkMSA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSxcbiAgICAgIGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXG4gICAgICBkMyA9IGQxIC0geDMgKiB4MyAtIHkzICogeTMgKyByMyAqIHIzLFxuICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIChhYiAqIDIpIC0geDEsXG4gICAgICB4YiA9IChiMyAqIGMyIC0gYjIgKiBjMykgLyBhYixcbiAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIChhYiAqIDIpIC0geTEsXG4gICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgIEEgPSB4YiAqIHhiICsgeWIgKiB5YiAtIDEsXG4gICAgICBCID0gMiAqIChyMSArIHhhICogeGIgKyB5YSAqIHliKSxcbiAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICByID0gLShBID8gKEIgKyBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSkgOiBDIC8gQik7XG4gIHJldHVybiB7XG4gICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICB5OiB5MSArIHlhICsgeWIgKiByLFxuICAgIHI6IHJcbiAgfTtcbn1cbiIsImltcG9ydCB7cGFja0VuY2xvc2V9IGZyb20gXCIuL3NpYmxpbmdzLmpzXCI7XG5pbXBvcnQge29wdGlvbmFsfSBmcm9tIFwiLi4vYWNjZXNzb3JzLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIHJvb3QuciAvIE1hdGgubWluKGR4LCBkeSkpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYWNrO1xufVxuXG5mdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tDaGlsZHJlbihwYWRkaW5nLCBrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICByID0gcGFkZGluZyhub2RlKSAqIGsgfHwgMCxcbiAgICAgICAgICBlO1xuXG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xuICAgICAgZSA9IHBhY2tFbmNsb3NlKGNoaWxkcmVuKTtcbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICBub2RlLnIgPSBlICsgcjtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZS54ID0gcGFyZW50LnggKyBrICogbm9kZS54O1xuICAgICAgbm9kZS55ID0gcGFyZW50LnkgKyBrICogbm9kZS55O1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBlbmNsb3NlIGZyb20gXCIuL2VuY2xvc2UuanNcIjtcblxuZnVuY3Rpb24gcGxhY2UoYiwgYSwgYykge1xuICB2YXIgZHggPSBiLnggLSBhLngsIHgsIGEyLFxuICAgICAgZHkgPSBiLnkgLSBhLnksIHksIGIyLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgaWYgKGQyKSB7XG4gICAgYTIgPSBhLnIgKyBjLnIsIGEyICo9IGEyO1xuICAgIGIyID0gYi5yICsgYy5yLCBiMiAqPSBiMjtcbiAgICBpZiAoYTIgPiBiMikge1xuICAgICAgeCA9IChkMiArIGIyIC0gYTIpIC8gKDIgKiBkMik7XG4gICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIGIyIC8gZDIgLSB4ICogeCkpO1xuICAgICAgYy54ID0gYi54IC0geCAqIGR4IC0geSAqIGR5O1xuICAgICAgYy55ID0gYi55IC0geCAqIGR5ICsgeSAqIGR4O1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gKGQyICsgYTIgLSBiMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYTIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgKyB5ICogZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGMueCA9IGEueCArIGMucjtcbiAgICBjLnkgPSBhLnk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0cyhhLCBiKSB7XG4gIHZhciBkciA9IGEuciArIGIuciAtIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIHNjb3JlKG5vZGUpIHtcbiAgdmFyIGEgPSBub2RlLl8sXG4gICAgICBiID0gbm9kZS5uZXh0Ll8sXG4gICAgICBhYiA9IGEuciArIGIucixcbiAgICAgIGR4ID0gKGEueCAqIGIuciArIGIueCAqIGEucikgLyBhYixcbiAgICAgIGR5ID0gKGEueSAqIGIuciArIGIueSAqIGEucikgLyBhYjtcbiAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBOb2RlKGNpcmNsZSkge1xuICB0aGlzLl8gPSBjaXJjbGU7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMucHJldmlvdXMgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFja0VuY2xvc2UoY2lyY2xlcykge1xuICBpZiAoIShuID0gY2lyY2xlcy5sZW5ndGgpKSByZXR1cm4gMDtcblxuICB2YXIgYSwgYiwgYywgbiwgYWEsIGNhLCBpLCBqLCBrLCBzaiwgc2s7XG5cbiAgLy8gUGxhY2UgdGhlIGZpcnN0IGNpcmNsZS5cbiAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XG4gIGlmICghKG4gPiAxKSkgcmV0dXJuIGEucjtcblxuICAvLyBQbGFjZSB0aGUgc2Vjb25kIGNpcmNsZS5cbiAgYiA9IGNpcmNsZXNbMV0sIGEueCA9IC1iLnIsIGIueCA9IGEuciwgYi55ID0gMDtcbiAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xuXG4gIC8vIFBsYWNlIHRoZSB0aGlyZCBjaXJjbGUuXG4gIHBsYWNlKGIsIGEsIGMgPSBjaXJjbGVzWzJdKTtcblxuICAvLyBJbml0aWFsaXplIHRoZSBmcm9udC1jaGFpbiB1c2luZyB0aGUgZmlyc3QgdGhyZWUgY2lyY2xlcyBhLCBiIGFuZCBjLlxuICBhID0gbmV3IE5vZGUoYSksIGIgPSBuZXcgTm9kZShiKSwgYyA9IG5ldyBOb2RlKGMpO1xuICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcbiAgYi5uZXh0ID0gYS5wcmV2aW91cyA9IGM7XG4gIGMubmV4dCA9IGIucHJldmlvdXMgPSBhO1xuXG4gIC8vIEF0dGVtcHQgdG8gcGxhY2UgZWFjaCByZW1haW5pbmcgY2lyY2xl4oCmXG4gIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcbiAgICBwbGFjZShhLl8sIGIuXywgYyA9IGNpcmNsZXNbaV0pLCBjID0gbmV3IE5vZGUoYyk7XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGluZyBjaXJjbGUgb24gdGhlIGZyb250LWNoYWluLCBpZiBhbnkuXG4gICAgLy8g4oCcQ2xvc2VuZXNz4oCdIGlzIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlIGFsb25nIHRoZSBmcm9udC1jaGFpbi5cbiAgICAvLyDigJxBaGVhZOKAnSBvciDigJxiZWhpbmTigJ0gaXMgbGlrZXdpc2UgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UuXG4gICAgaiA9IGIubmV4dCwgayA9IGEucHJldmlvdXMsIHNqID0gYi5fLnIsIHNrID0gYS5fLnI7XG4gICAgZG8ge1xuICAgICAgaWYgKHNqIDw9IHNrKSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGouXywgYy5fKSkge1xuICAgICAgICAgIGIgPSBqLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2ogKz0gai5fLnIsIGogPSBqLm5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW50ZXJzZWN0cyhrLl8sIGMuXykpIHtcbiAgICAgICAgICBhID0gaywgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICAgIHNrICs9IGsuXy5yLCBrID0gay5wcmV2aW91cztcbiAgICAgIH1cbiAgICB9IHdoaWxlIChqICE9PSBrLm5leHQpO1xuXG4gICAgLy8gU3VjY2VzcyEgSW5zZXJ0IHRoZSBuZXcgY2lyY2xlIGMgYmV0d2VlbiBhIGFuZCBiLlxuICAgIGMucHJldmlvdXMgPSBhLCBjLm5leHQgPSBiLCBhLm5leHQgPSBiLnByZXZpb3VzID0gYiA9IGM7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgcGFpciB0byB0aGUgY2VudHJvaWQuXG4gICAgYWEgPSBzY29yZShhKTtcbiAgICB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSB7XG4gICAgICBpZiAoKGNhID0gc2NvcmUoYykpIDwgYWEpIHtcbiAgICAgICAgYSA9IGMsIGFhID0gY2E7XG4gICAgICB9XG4gICAgfVxuICAgIGIgPSBhLm5leHQ7XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cbiAgYSA9IFtiLl9dLCBjID0gYjsgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikgYS5wdXNoKGMuXyk7IGMgPSBlbmNsb3NlKGEpO1xuXG4gIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGEgPSBjaXJjbGVzW2ldLCBhLnggLT0gYy54LCBhLnkgLT0gYy55O1xuXG4gIHJldHVybiBjLnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgcGFja0VuY2xvc2UoY2lyY2xlcyk7XG4gIHJldHVybiBjaXJjbGVzO1xufVxuIiwiaW1wb3J0IHJvdW5kTm9kZSBmcm9tIFwiLi90cmVlbWFwL3JvdW5kLmpzXCI7XG5pbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vdHJlZW1hcC9kaWNlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IDAsXG4gICAgICByb3VuZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbihyb290KSB7XG4gICAgdmFyIG4gPSByb290LmhlaWdodCArIDE7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IHBhZGRpbmc7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeSAvIG47XG4gICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZShkeSwgbikpO1xuICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUoZHksIG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdHJlZW1hcERpY2Uobm9kZSwgbm9kZS54MCwgZHkgKiAobm9kZS5kZXB0aCArIDEpIC8gbiwgbm9kZS54MSwgZHkgKiAobm9kZS5kZXB0aCArIDIpIC8gbik7XG4gICAgICB9XG4gICAgICB2YXIgeDAgPSBub2RlLngwLFxuICAgICAgICAgIHkwID0gbm9kZS55MCxcbiAgICAgICAgICB4MSA9IG5vZGUueDEgLSBwYWRkaW5nLFxuICAgICAgICAgIHkxID0gbm9kZS55MSAtIHBhZGRpbmc7XG4gICAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBub2RlLngwID0geDA7XG4gICAgICBub2RlLnkwID0geTA7XG4gICAgICBub2RlLngxID0geDE7XG4gICAgICBub2RlLnkxID0geTE7XG4gICAgfTtcbiAgfVxuXG4gIHBhcnRpdGlvbi5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgcGFydGl0aW9uKSA6IHJvdW5kO1xuICB9O1xuXG4gIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhcnRpdGlvbikgOiBbZHgsIGR5XTtcbiAgfTtcblxuICBwYXJ0aXRpb24ucGFkZGluZyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gK3gsIHBhcnRpdGlvbikgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYXJ0aXRpb247XG59XG4iLCJpbXBvcnQge3JlcXVpcmVkfSBmcm9tIFwiLi9hY2Nlc3NvcnMuanNcIjtcbmltcG9ydCB7Tm9kZSwgY29tcHV0ZUhlaWdodH0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4LmpzXCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIiwgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG4gICAgcHJlcm9vdCA9IHtkZXB0aDogLTF9LFxuICAgIGFtYmlndW91cyA9IHt9O1xuXG5mdW5jdGlvbiBkZWZhdWx0SWQoZCkge1xuICByZXR1cm4gZC5pZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcbiAgcmV0dXJuIGQucGFyZW50SWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgaWQgPSBkZWZhdWx0SWQsXG4gICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICBmdW5jdGlvbiBzdHJhdGlmeShkYXRhKSB7XG4gICAgdmFyIGQsXG4gICAgICAgIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgbm9kZUlkLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBub2RlQnlLZXkgPSB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcbiAgICAgIGlmICgobm9kZUlkID0gaWQoZCwgaSwgZGF0YSkpICE9IG51bGwgJiYgKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4ICsgKG5vZGUuaWQgPSBub2RlSWQpO1xuICAgICAgICBub2RlQnlLZXlbbm9kZUtleV0gPSBub2RlS2V5IGluIG5vZGVCeUtleSA/IGFtYmlndW91cyA6IG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBpZiAocm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgcm9vdHNcIik7XG4gICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gbm9kZUJ5S2V5W2tleVByZWZpeCArIG5vZGVJZF07XG4gICAgICAgIGlmICghcGFyZW50KSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGFtYmlndW91cykgdGhyb3cgbmV3IEVycm9yKFwiYW1iaWd1b3VzOiBcIiArIG5vZGVJZCk7XG4gICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBlbHNlIHBhcmVudC5jaGlsZHJlbiA9IFtub2RlXTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJubyByb290XCIpO1xuICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgcm9vdC5wYXJlbnQgPSBudWxsO1xuICAgIGlmIChuID4gMCkgdGhyb3cgbmV3IEVycm9yKFwiY3ljbGVcIik7XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IGlkO1xuICB9O1xuXG4gIHN0cmF0aWZ5LnBhcmVudElkID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xuICB9O1xuXG4gIHJldHVybiBzdHJhdGlmeTtcbn1cbiIsImltcG9ydCB7Tm9kZX0gZnJvbSBcIi4vaGllcmFyY2h5L2luZGV4LmpzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXBhcmF0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgdmFyIHQgPSB0cmVlUm9vdChyb290KTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGxheW91dCB1c2luZyBCdWNoaGVpbSBldCBhbC7igJlzIGFsZ29yaXRobS5cbiAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXG4gICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgLy8gSWYgYSBmaXhlZCB0cmVlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5IGJhc2VkIG9uIHRoZSBleHRlbnQuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGVmdC1tb3N0LCByaWdodC1tb3N0LCBhbmQgZGVwdGgtbW9zdCBub2RlcyBmb3IgZXh0ZW50cy5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBsZWZ0ID0gcm9vdCxcbiAgICAgICAgICByaWdodCA9IHJvb3QsXG4gICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xuICAgICAgICBpZiAobm9kZS5kZXB0aCA+IGJvdHRvbS5kZXB0aCkgYm90dG9tID0gbm9kZTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgdHggPSBzIC0gbGVmdC54LFxuICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXG4gIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gIC8vIEFQUE9SVElPTi4gQWZ0ZXIgc3BhY2luZyBvdXQgdGhlIGNoaWxkcmVuIGJ5IGNhbGxpbmcgRVhFQ1VURSBTSElGVFMsIHRoZVxuICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxuICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBleGVjdXRlU2hpZnRzKHYpO1xuICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnogPSBtaWRwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgIH1cbiAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICB9XG5cbiAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gIGZ1bmN0aW9uIHNlY29uZFdhbGsodikge1xuICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgfVxuXG4gIC8vIFRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uIEhlcmUsIGEgbmV3IHN1YnRyZWUgaXMgY29tYmluZWQgd2l0aCB0aGVcbiAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxuICAvLyB2ZXJ0aWNlcyB1c2VkIGZvciB0aGUgdHJhdmVyc2FscyBhcmUgdmkrLCB2aS0sIHZvLSwgYW5kIHZvKywgd2hlcmUgdGhlXG4gIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcbiAgLy8gY29udG91ciwgd2UgdXNlIHJlc3BlY3RpdmUgdmFyaWFibGVzIHNpKywgc2ktLCBzby0sIGFuZCBzbysuIFdoZW5ldmVyIHR3b1xuICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXG4gIC8vIFNVQlRSRUUgdG8gc2hpZnQgdGhlIHN1YnRyZWUgYW5kIHByZXBhcmUgdGhlIHNoaWZ0cyBvZiBzbWFsbGVyIHN1YnRyZWVzLlxuICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICBpZiAodykge1xuICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgdm9wID0gdixcbiAgICAgICAgICB2aW0gPSB3LFxuICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgc2lwID0gdmlwLm0sXG4gICAgICAgICAgc29wID0gdm9wLm0sXG4gICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgc29tID0gdm9tLm0sXG4gICAgICAgICAgc2hpZnQ7XG4gICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcbiAgICAgICAgdm9wID0gbmV4dFJpZ2h0KHZvcCk7XG4gICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xuICAgICAgICBpZiAoc2hpZnQgPiAwKSB7XG4gICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgc2lwICs9IHNoaWZ0O1xuICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgfVxuICAgICAgICBzaW0gKz0gdmltLm07XG4gICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICBzb3AgKz0gdm9wLm07XG4gICAgICB9XG4gICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICB2b3AudCA9IHZpbTtcbiAgICAgICAgdm9wLm0gKz0gc2ltIC0gc29wO1xuICAgICAgfVxuICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xuICAgICAgICB2b20udCA9IHZpcDtcbiAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICBub2RlLnggKj0gZHg7XG4gICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xuICB9XG5cbiAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCB0cmVlKSA6IHNlcGFyYXRpb247XG4gIH07XG5cbiAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gbnVsbCA6IFtkeCwgZHldKTtcbiAgfTtcblxuICB0cmVlLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xuICB9O1xuXG4gIHJldHVybiB0cmVlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgc3VtLCBzdW1zID0gbmV3IEFycmF5KG4gKyAxKTtcblxuICBmb3IgKHN1bXNbMF0gPSBzdW0gPSBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIHN1bXNbaSArIDFdID0gc3VtICs9IG5vZGVzW2ldLnZhbHVlO1xuICB9XG5cbiAgcGFydGl0aW9uKDAsIG4sIHBhcmVudC52YWx1ZSwgeDAsIHkwLCB4MSwgeTEpO1xuXG4gIGZ1bmN0aW9uIHBhcnRpdGlvbihpLCBqLCB2YWx1ZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBpZiAoaSA+PSBqIC0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIG5vZGUueDAgPSB4MCwgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxLCBub2RlLnkxID0geTE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlT2Zmc2V0ID0gc3Vtc1tpXSxcbiAgICAgICAgdmFsdWVUYXJnZXQgPSAodmFsdWUgLyAyKSArIHZhbHVlT2Zmc2V0LFxuICAgICAgICBrID0gaSArIDEsXG4gICAgICAgIGhpID0gaiAtIDE7XG5cbiAgICB3aGlsZSAoayA8IGhpKSB7XG4gICAgICB2YXIgbWlkID0gayArIGhpID4+PiAxO1xuICAgICAgaWYgKHN1bXNbbWlkXSA8IHZhbHVlVGFyZ2V0KSBrID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuXG4gICAgaWYgKCh2YWx1ZVRhcmdldCAtIHN1bXNbayAtIDFdKSA8IChzdW1zW2tdIC0gdmFsdWVUYXJnZXQpICYmIGkgKyAxIDwgaykgLS1rO1xuXG4gICAgdmFyIHZhbHVlTGVmdCA9IHN1bXNba10gLSB2YWx1ZU9mZnNldCxcbiAgICAgICAgdmFsdWVSaWdodCA9IHZhbHVlIC0gdmFsdWVMZWZ0O1xuXG4gICAgaWYgKCh4MSAtIHgwKSA+ICh5MSAtIHkwKSkge1xuICAgICAgdmFyIHhrID0gKHgwICogdmFsdWVSaWdodCArIHgxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xuICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHhrLCB5MCwgeDEsIHkxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHlrID0gKHkwICogdmFsdWVSaWdodCArIHkxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4MSwgeWspO1xuICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn1cbiIsImltcG9ydCByb3VuZE5vZGUgZnJvbSBcIi4vcm91bmQuanNcIjtcbmltcG9ydCBzcXVhcmlmeSBmcm9tIFwiLi9zcXVhcmlmeS5qc1wiO1xuaW1wb3J0IHtyZXF1aXJlZH0gZnJvbSBcIi4uL2FjY2Vzc29ycy5qc1wiO1xuaW1wb3J0IGNvbnN0YW50LCB7Y29uc3RhbnRaZXJvfSBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB0aWxlID0gc3F1YXJpZnksXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZ1N0YWNrID0gWzBdLFxuICAgICAgcGFkZGluZ0lubmVyID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ1RvcCA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdSaWdodCA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdCb3R0b20gPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nTGVmdCA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiB0cmVlbWFwKHJvb3QpIHtcbiAgICByb290LngwID1cbiAgICByb290LnkwID0gMDtcbiAgICByb290LngxID0gZHg7XG4gICAgcm9vdC55MSA9IGR5O1xuICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUpO1xuICAgIHBhZGRpbmdTdGFjayA9IFswXTtcbiAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKG5vZGUpIHtcbiAgICB2YXIgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoXSxcbiAgICAgICAgeDAgPSBub2RlLngwICsgcCxcbiAgICAgICAgeTAgPSBub2RlLnkwICsgcCxcbiAgICAgICAgeDEgPSBub2RlLngxIC0gcCxcbiAgICAgICAgeTEgPSBub2RlLnkxIC0gcDtcbiAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgIG5vZGUueDAgPSB4MDtcbiAgICBub2RlLnkwID0geTA7XG4gICAgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTEgPSB5MTtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoICsgMV0gPSBwYWRkaW5nSW5uZXIobm9kZSkgLyAyO1xuICAgICAgeDAgKz0gcGFkZGluZ0xlZnQobm9kZSkgLSBwO1xuICAgICAgeTAgKz0gcGFkZGluZ1RvcChub2RlKSAtIHA7XG4gICAgICB4MSAtPSBwYWRkaW5nUmlnaHQobm9kZSkgLSBwO1xuICAgICAgeTEgLT0gcGFkZGluZ0JvdHRvbShub2RlKSAtIHA7XG4gICAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XG4gICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICB0aWxlKG5vZGUsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICB9XG4gIH1cblxuICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCB0cmVlbWFwKSA6IHJvdW5kO1xuICB9O1xuXG4gIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlbWFwKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHRyZWVtYXAudGlsZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWxlID0gcmVxdWlyZWQoeCksIHRyZWVtYXApIDogdGlsZTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdJbm5lcih4KS5wYWRkaW5nT3V0ZXIoeCkgOiB0cmVlbWFwLnBhZGRpbmdJbm5lcigpO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0lubmVyID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ1RvcCh4KS5wYWRkaW5nUmlnaHQoeCkucGFkZGluZ0JvdHRvbSh4KS5wYWRkaW5nTGVmdCh4KSA6IHRyZWVtYXAucGFkZGluZ1RvcCgpO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1RvcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1RvcDtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nUmlnaHQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nUmlnaHQ7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nQm90dG9tID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdCb3R0b20gPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nQm90dG9tO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0xlZnQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nTGVmdDtcbiAgfTtcblxuICByZXR1cm4gdHJlZW1hcDtcbn1cbiIsImltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi9kaWNlLmpzXCI7XG5pbXBvcnQgdHJlZW1hcFNsaWNlIGZyb20gXCIuL3NsaWNlLmpzXCI7XG5pbXBvcnQge3BoaSwgc3F1YXJpZnlSYXRpb30gZnJvbSBcIi4vc3F1YXJpZnkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmICgocm93cyA9IHBhcmVudC5fc3F1YXJpZnkpICYmIChyb3dzLnJhdGlvID09PSByYXRpbykpIHtcbiAgICAgIHZhciByb3dzLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBub2RlcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIG0gPSByb3dzLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgcm93ID0gcm93c1tqXSwgbm9kZXMgPSByb3cuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcbiAgICAgICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHgwICs9ICh4MSAtIHgwKSAqIHJvdy52YWx1ZSAvIHZhbHVlLCB5MSk7XG4gICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cblxuICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiByZXNxdWFyaWZ5O1xufSkocGhpKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gIG5vZGUueTAgPSBNYXRoLnJvdW5kKG5vZGUueTApO1xuICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgZGljZSBmcm9tIFwiLi9kaWNlLmpzXCI7XG5pbXBvcnQgc2xpY2UgZnJvbSBcIi4vc2xpY2UuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAocGFyZW50LmRlcHRoICYgMSA/IHNsaWNlIDogZGljZSkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZS5qc1wiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZS5qc1wiO1xuXG5leHBvcnQgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciByb3dzID0gW10sXG4gICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIHJvdyxcbiAgICAgIG5vZGVWYWx1ZSxcbiAgICAgIGkwID0gMCxcbiAgICAgIGkxID0gMCxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBkeCwgZHksXG4gICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgIHN1bVZhbHVlLFxuICAgICAgbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZSxcbiAgICAgIG5ld1JhdGlvLFxuICAgICAgbWluUmF0aW8sXG4gICAgICBhbHBoYSxcbiAgICAgIGJldGE7XG5cbiAgd2hpbGUgKGkwIDwgbikge1xuICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub24tZW1wdHkgbm9kZS5cbiAgICBkbyBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlOyB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlO1xuICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG5ld1JhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHZhbHVlID8geTAgKz0gZHkgKiBzdW1WYWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gIH1cblxuICByZXR1cm4gcm93cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiBzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7aGNsIGFzIGNvbG9ySGNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gaGNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySGNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySGNsKGVuZCkpLmgpLFxuICAgICAgICBjID0gY29sb3Ioc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LmMgPSBjKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoY2woaHVlKTtcbmV4cG9ydCB2YXIgaGNsTG9uZyA9IGhjbChjb2xvcik7XG4iLCJpbXBvcnQge2hzbCBhcyBjb2xvckhzbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGhzbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaHNsKGh1ZSk7XG5leHBvcnQgdmFyIGhzbExvbmcgPSBoc2woY29sb3IpO1xuIiwiaW1wb3J0IHtodWV9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSBodWUoK2EsICtiKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgeCA9IGkodCk7XG4gICAgcmV0dXJuIHggLSAzNjAgKiBNYXRoLmZsb29yKHggLyAzNjApO1xuICB9O1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlfSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVCYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkfSBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlRGF0ZX0gZnJvbSBcIi4vZGF0ZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlRGlzY3JldGV9IGZyb20gXCIuL2Rpc2NyZXRlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVIdWV9IGZyb20gXCIuL2h1ZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlTnVtYmVyfSBmcm9tIFwiLi9udW1iZXIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZU51bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlT2JqZWN0fSBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiLi9yb3VuZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmV4cG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MsIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnfSBmcm9tIFwiLi90cmFuc2Zvcm0vaW5kZXguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVpvb219IGZyb20gXCIuL3pvb20uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJnYiwgcmdiQmFzaXMgYXMgaW50ZXJwb2xhdGVSZ2JCYXNpcywgcmdiQmFzaXNDbG9zZWQgYXMgaW50ZXJwb2xhdGVSZ2JCYXNpc0Nsb3NlZH0gZnJvbSBcIi4vcmdiLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVIc2wsIGhzbExvbmcgYXMgaW50ZXJwb2xhdGVIc2xMb25nfSBmcm9tIFwiLi9oc2wuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUxhYn0gZnJvbSBcIi4vbGFiLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVIY2wsIGhjbExvbmcgYXMgaW50ZXJwb2xhdGVIY2xMb25nfSBmcm9tIFwiLi9oY2wuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUN1YmVoZWxpeCwgY3ViZWhlbGl4TG9uZyBhcyBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCIuL2N1YmVoZWxpeC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBpZWNld2lzZX0gZnJvbSBcIi4vcGllY2V3aXNlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcXVhbnRpemV9IGZyb20gXCIuL3F1YW50aXplLmpzXCI7XG4iLCJpbXBvcnQge2xhYiBhcyBjb2xvckxhYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IgZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGwgPSBjb2xvcigoc3RhcnQgPSBjb2xvckxhYihzdGFydCkpLmwsIChlbmQgPSBjb2xvckxhYihlbmQpKS5sKSxcbiAgICAgIGEgPSBjb2xvcihzdGFydC5hLCBlbmQuYSksXG4gICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBzdGFydC5sID0gbCh0KTtcbiAgICBzdGFydC5hID0gYSh0KTtcbiAgICBzdGFydC5iID0gYih0KTtcbiAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKCFiKSBiID0gW107XG4gIHZhciBuID0gYSA/IE1hdGgubWluKGIubGVuZ3RoLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgYyA9IGIuc2xpY2UoKSxcbiAgICAgIGk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY1tpXSA9IGFbaV0gKiAoMSAtIHQpICsgYltpXSAqIHQ7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckFycmF5KHgpIHtcbiAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh4KSAmJiAhKHggaW5zdGFuY2VvZiBEYXRhVmlldyk7XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBpZWNld2lzZShpbnRlcnBvbGF0ZSwgdmFsdWVzKSB7XG4gIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGggLSAxLCB2ID0gdmFsdWVzWzBdLCBJID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIElbaV0gPSBpbnRlcnBvbGF0ZSh2LCB2ID0gdmFsdWVzWysraV0pO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqPSBuKSkpO1xuICAgIHJldHVybiBJW2ldKHQgLSBpKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICogKDEgLSB0KSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIHBhdGh9IGZyb20gXCIuL3BhdGguanNcIjtcbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgdGF1ID0gMiAqIHBpLFxuICAgIGVwc2lsb24gPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUgLSBlcHNpbG9uO1xuXG5mdW5jdGlvbiBQYXRoKCkge1xuICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuXyA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiBuZXcgUGF0aDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhdGgsXG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiUVwiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJDXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICgreDIpICsgXCIsXCIgKyAoK3kyKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSk7XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbikgfHwgIXIpIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXG4gICAgZWxzZSB7XG4gICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSAtIE1hdGguYWNvcygobDIxXzIgKyBsMDFfMiAtIGwyMF8yKSAvICgyICogbDIxICogbDAxKSkpIC8gMiksXG4gICAgICAgICAgdDAxID0gbCAvIGwwMSxcbiAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAvLyBJZiB0aGUgc3RhcnQgdGFuZ2VudCBpcyBub3QgY29pbmNpZGVudCB3aXRoICh4MCx5MCksIGxpbmUgdG8uXG4gICAgICBpZiAoTWF0aC5hYnModDAxIC0gMSkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDAsXCIgKyAoKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApKSArIFwiLFwiICsgKHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMSk7XG4gICAgfVxuICB9LFxuICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArciwgY2N3ID0gISFjY3c7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBhLFxuICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgYXJlYSA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gIH1cblxuICByZXR1cm4gYXJlYSAvIDI7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICB4ID0gMCxcbiAgICAgIHkgPSAwLFxuICAgICAgYSxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIGMsXG4gICAgICBrID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEgPSBiO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIGsgKz0gYyA9IGFbMF0gKiBiWzFdIC0gYlswXSAqIGFbMV07XG4gICAgeCArPSAoYVswXSArIGJbMF0pICogYztcbiAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICB9XG5cbiAgcmV0dXJuIGsgKj0gMywgW3ggLyBrLCB5IC8ga107XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICB4MCA9IHBbMF0sIHkwID0gcFsxXSxcbiAgICAgIHgxLCB5MSxcbiAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIHgwID0geDEsIHkwID0geTE7XG4gIH1cblxuICByZXR1cm4gaW5zaWRlO1xufVxuIiwiLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4vLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcbi8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbn1cbiIsImltcG9ydCBjcm9zcyBmcm9tIFwiLi9jcm9zcy5qc1wiO1xuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG59XG5cbi8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbi8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbmZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBpbmRleGVzID0gWzAsIDFdLFxuICAgICAgc2l6ZSA9IDI7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICB3aGlsZSAoc2l6ZSA+IDEgJiYgY3Jvc3MocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLXNpemU7XG4gICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludHMpIHtcbiAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSxcbiAgICAgIG4sXG4gICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNvcnRlZFBvaW50c1tpXSA9IFsrcG9pbnRzW2ldWzBdLCArcG9pbnRzW2ldWzFdLCBpXTtcbiAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gIHZhciB1cHBlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhzb3J0ZWRQb2ludHMpLFxuICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxuICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgIGh1bGwgPSBbXTtcblxuICAvLyBBZGQgdXBwZXIgaHVsbCBpbiByaWdodC10by1sIG9yZGVyLlxuICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcblxuICByZXR1cm4gaHVsbDtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uQXJlYX0gZnJvbSBcIi4vYXJlYS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBvbHlnb25DZW50cm9pZH0gZnJvbSBcIi4vY2VudHJvaWQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uSHVsbH0gZnJvbSBcIi4vaHVsbC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHBvbHlnb25Db250YWluc30gZnJvbSBcIi4vY29udGFpbnMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBwb2x5Z29uTGVuZ3RofSBmcm9tIFwiLi9sZW5ndGguanNcIjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvbHlnb24pIHtcbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIHhhLFxuICAgICAgeWEsXG4gICAgICB4YiA9IGJbMF0sXG4gICAgICB5YiA9IGJbMV0sXG4gICAgICBwZXJpbWV0ZXIgPSAwO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgeGEgPSB4YjtcbiAgICB5YSA9IHliO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIHhiID0gYlswXTtcbiAgICB5YiA9IGJbMV07XG4gICAgeGEgLT0geGI7XG4gICAgeWEgLT0geWI7XG4gICAgcGVyaW1ldGVyICs9IE1hdGguc3FydCh4YSAqIHhhICsgeWEgKiB5YSk7XG4gIH1cblxuICByZXR1cm4gcGVyaW1ldGVyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICB2YXIgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXG4gICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgcmV0dXJuIGFkZCh0aGlzLmNvdmVyKHgsIHkpLCB4LCB5LCBkKTtcbn1cblxuZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm4gdHJlZTsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcbiAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgeHAsXG4gICAgICB5cCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XG4gIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgZG8ge1xuICAgIHBhcmVudCA9IHBhcmVudCA/IHBhcmVudFtpXSA9IG5ldyBBcnJheSg0KSA6IHRyZWUuX3Jvb3QgPSBuZXcgQXJyYXkoNCk7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gIH0gd2hpbGUgKChpID0gYm90dG9tIDw8IDEgfCByaWdodCkgPT09IChqID0gKHlwID49IHltKSA8PCAxIHwgKHhwID49IHhtKSkpO1xuICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgIHh6W2ldID0geDtcbiAgICB5eltpXSA9IHk7XG4gICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgYWJvcnQuXG4gIGlmICh4MCA+IHgxIHx8IHkwID4geTEpIHJldHVybiB0aGlzO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgaWYgKGlzTmFOKHggPSAreCkgfHwgaXNOYU4oeSA9ICt5KSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxO1xuXG4gIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gIC8vIEludGVnZXIgZXh0ZW50IGFyZSBuZWNlc3Nhcnkgc28gdGhhdCBpZiB3ZSBsYXRlciBkb3VibGUgdGhlIGV4dGVudCxcbiAgLy8gdGhlIGV4aXN0aW5nIHF1YWRyYW50IGJvdW5kYXJpZXMgZG9u4oCZdCBjaGFuZ2UgZHVlIHRvIGZsb2F0aW5nIHBvaW50IGVycm9yIVxuICBpZiAoaXNOYU4oeDApKSB7XG4gICAgeDEgPSAoeDAgPSBNYXRoLmZsb29yKHgpKSArIDE7XG4gICAgeTEgPSAoeTAgPSBNYXRoLmZsb29yKHkpKSArIDE7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGRvdWJsZSByZXBlYXRlZGx5IHRvIGNvdmVyLlxuICBlbHNlIHtcbiAgICB2YXIgeiA9IHgxIC0geDAsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGk7XG5cbiAgICB3aGlsZSAoeDAgPiB4IHx8IHggPj0geDEgfHwgeTAgPiB5IHx8IHkgPj0geTEpIHtcbiAgICAgIGkgPSAoeSA8IHkwKSA8PCAxIHwgKHggPCB4MCk7XG4gICAgICBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQsIHogKj0gMjtcbiAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICBjYXNlIDA6IHgxID0geDAgKyB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogeDAgPSB4MSAtIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB4MSA9IHgwICsgeiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHgwID0geDEgLSB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuY292ZXIoK19bMF1bMF0sICtfWzBdWzFdKS5jb3ZlcigrX1sxXVswXSwgK19bMV1bMV0pXG4gICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBxdWFkdHJlZX0gZnJvbSBcIi4vcXVhZHRyZWUuanNcIjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn1cbiIsImltcG9ydCB0cmVlX2FkZCwge2FkZEFsbCBhcyB0cmVlX2FkZEFsbH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgdHJlZV9jb3ZlciBmcm9tIFwiLi9jb3Zlci5qc1wiO1xuaW1wb3J0IHRyZWVfZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgdHJlZV9leHRlbnQgZnJvbSBcIi4vZXh0ZW50LmpzXCI7XG5pbXBvcnQgdHJlZV9maW5kIGZyb20gXCIuL2ZpbmQuanNcIjtcbmltcG9ydCB0cmVlX3JlbW92ZSwge3JlbW92ZUFsbCBhcyB0cmVlX3JlbW92ZUFsbH0gZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJlZV9yb290IGZyb20gXCIuL3Jvb3QuanNcIjtcbmltcG9ydCB0cmVlX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXQgZnJvbSBcIi4vdmlzaXQuanNcIjtcbmltcG9ydCB0cmVlX3Zpc2l0QWZ0ZXIgZnJvbSBcIi4vdmlzaXRBZnRlci5qc1wiO1xuaW1wb3J0IHRyZWVfeCwge2RlZmF1bHRYfSBmcm9tIFwiLi94LmpzXCI7XG5pbXBvcnQgdHJlZV95LCB7ZGVmYXVsdFl9IGZyb20gXCIuL3kuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gdHJlZV9hZGRBbGw7XG50cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xudHJlZVByb3RvLmRhdGEgPSB0cmVlX2RhdGE7XG50cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG50cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbnRyZWVQcm90by5yZW1vdmUgPSB0cmVlX3JlbW92ZTtcbnRyZWVQcm90by5yZW1vdmVBbGwgPSB0cmVlX3JlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHJldGFpbmVyLFxuICAgICAgcHJldmlvdXMsXG4gICAgICBuZXh0LFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcbiAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIHBvaW50IHRvIHJlbW92ZS5cbiAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb2luY2lkZW50IHBvaW50cywgcmVtb3ZlIGp1c3QgdGhlIHBvaW50LlxuICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICYmICFub2RlLmxlbmd0aCkge1xuICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcm9vdDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgbmV4dCA9IFtdLCBxO1xuICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgdmFyIG5vZGUgPSBxLm5vZGU7XG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgIH1cbiAgICBuZXh0LnB1c2gocSk7XG4gIH1cbiAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IGlyd2luSGFsbCBmcm9tIFwiLi9pcndpbkhhbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUJhdGVzKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21CYXRlcyhuKSB7XG4gICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbC5zb3VyY2Uoc291cmNlKShuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsKCkgLyBuO1xuICAgIH07XG4gIH1cblxuICByYW5kb21CYXRlcy5zb3VyY2UgPSBzb3VyY2VSYW5kb21CYXRlcztcblxuICByZXR1cm4gcmFuZG9tQmF0ZXM7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUV4cG9uZW50aWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21FeHBvbmVudGlhbChsYW1iZGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gLU1hdGgubG9nKDEgLSBzb3VyY2UoKSkgLyBsYW1iZGE7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUV4cG9uZW50aWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUV4cG9uZW50aWFsO1xuXG4gIHJldHVybiByYW5kb21FeHBvbmVudGlhbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIHJhbmRvbVVuaWZvcm19IGZyb20gXCIuL3VuaWZvcm1cIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyByYW5kb21Ob3JtYWx9IGZyb20gXCIuL25vcm1hbFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHJhbmRvbUxvZ05vcm1hbH0gZnJvbSBcIi4vbG9nTm9ybWFsXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcmFuZG9tQmF0ZXN9IGZyb20gXCIuL2JhdGVzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcmFuZG9tSXJ3aW5IYWxsfSBmcm9tIFwiLi9pcndpbkhhbGxcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyByYW5kb21FeHBvbmVudGlhbH0gZnJvbSBcIi4vZXhwb25lbnRpYWxcIjtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgbm9ybWFsIGZyb20gXCIuL25vcm1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTG9nTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Mb2dOb3JtYWwoKSB7XG4gICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBNYXRoLmV4cChyYW5kb21Ob3JtYWwoKSk7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUxvZ05vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Mb2dOb3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUxvZ05vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tTm9ybWFsKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Ob3JtYWwobXUsIHNpZ21hKSB7XG4gICAgdmFyIHgsIHI7XG4gICAgbXUgPSBtdSA9PSBudWxsID8gMCA6ICttdTtcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB5O1xuXG4gICAgICAvLyBJZiBhdmFpbGFibGUsIHVzZSB0aGUgc2Vjb25kIHByZXZpb3VzbHktZ2VuZXJhdGVkIHVuaWZvcm0gcmFuZG9tLlxuICAgICAgaWYgKHggIT0gbnVsbCkgeSA9IHgsIHggPSBudWxsO1xuXG4gICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICBlbHNlIGRvIHtcbiAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHkgPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgcmV0dXJuIG11ICsgc2lnbWEgKiB5ICogTWF0aC5zcXJ0KC0yICogTWF0aC5sb2cocikgLyByKTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbU5vcm1hbDtcblxuICByZXR1cm4gcmFuZG9tTm9ybWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Vbmlmb3JtKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Vbmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcbiAgICBtYXggPSBtYXggPT0gbnVsbCA/IDEgOiArbWF4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7XG4gICAgZWxzZSBtYXggLT0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzb3VyY2UoKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tVW5pZm9ybS5zb3VyY2UgPSBzb3VyY2VSYW5kb21Vbmlmb3JtO1xuXG4gIHJldHVybiByYW5kb21Vbmlmb3JtO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiN2ZjOTdmYmVhZWQ0ZmRjMDg2ZmZmZjk5Mzg2Y2IwZjAwMjdmYmY1YjE3NjY2NjY2XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjFiOWU3N2Q5NWYwMjc1NzBiM2U3Mjk4YTY2YTYxZWU2YWIwMmE2NzYxZDY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJhNmNlZTMxZjc4YjRiMmRmOGEzM2EwMmNmYjlhOTllMzFhMWNmZGJmNmZmZjdmMDBjYWIyZDY2YTNkOWFmZmZmOTliMTU5MjhcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImIzZTJjZGZkY2RhY2NiZDVlOGY0Y2FlNGU2ZjVjOWZmZjJhZWYxZTJjY2NjY2NjY1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJlNDFhMWMzNzdlYjg0ZGFmNGE5ODRlYTNmZjdmMDBmZmZmMzNhNjU2MjhmNzgxYmY5OTk5OTlcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjhkZDNjN2ZmZmZiM2JlYmFkYWZiODA3MjgwYjFkM2ZkYjQ2MmIzZGU2OWZjY2RlNWQ5ZDlkOWJjODBiZGNjZWJjNWZmZWQ2ZlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI0ZTc5YTdmMjhlMmNlMTU3NTk3NmI3YjI1OWExNGZlZGM5NDlhZjdhYTFmZjlkYTc5Yzc1NWZiYWIwYWJcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJhZjhkYzNmN2Y3Zjc3ZmJmN2JcIixcbiAgXCI3YjMyOTRjMmE1Y2ZhNmRiYTAwMDg4MzdcIixcbiAgXCI3YjMyOTRjMmE1Y2ZmN2Y3ZjdhNmRiYTAwMDg4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODNhZjhkYzNlN2Q0ZThmN2Y3ZjdkOWYwZDM3ZmJmN2IxYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzdcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIixcbiAgXCI0MDAwNGI3NjJhODM5OTcwYWJjMmE1Y2ZlN2Q0ZThmN2Y3ZjdkOWYwZDNhNmRiYTA1YWFlNjExYjc4MzcwMDQ0MWJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTlhM2M5ZjdmN2Y3YTFkNzZhXCIsXG4gIFwiZDAxYzhiZjFiNmRhYjhlMTg2NGRhYzI2XCIsXG4gIFwiZDAxYzhiZjFiNmRhZjdmN2Y3YjhlMTg2NGRhYzI2XCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZTlhM2M5ZmRlMGVmZjdmN2Y3ZTZmNWQwYTFkNzZhNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxXCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCIsXG4gIFwiOGUwMTUyYzUxYjdkZGU3N2FlZjFiNmRhZmRlMGVmZjdmN2Y3ZTZmNWQwYjhlMTg2N2ZiYzQxNGQ5MjIxMjc2NDE5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmN2Y3Zjc2N2E5Y2ZcIixcbiAgXCJjYTAwMjBmNGE1ODI5MmM1ZGUwNTcxYjBcIixcbiAgXCJjYTAwMjBmNGE1ODJmN2Y3Zjc5MmM1ZGUwNTcxYjBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmN2Y3ZjdkMWU1ZjA2N2E5Y2YyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWNcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmN2Y3ZjdkMWU1ZjA5MmM1ZGU0MzkzYzMyMTY2YWMwNTMwNjFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWY4YTYyZmZmZmZmOTk5OTk5XCIsXG4gIFwiY2EwMDIwZjRhNTgyYmFiYWJhNDA0MDQwXCIsXG4gIFwiY2EwMDIwZjRhNTgyZmZmZmZmYmFiYWJhNDA0MDQwXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZWY4YTYyZmRkYmM3ZmZmZmZmZTBlMGUwOTk5OTk5NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCIsXG4gIFwiNjcwMDFmYjIxODJiZDY2MDRkZjRhNTgyZmRkYmM3ZmZmZmZmZTBlMGUwYmFiYWJhODc4Nzg3NGQ0ZDRkMWExYTFhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxYmZkYlwiLFxuICBcImQ3MTkxY2ZkYWU2MWFiZDllOTJjN2JiNlwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmFiZDllOTJjN2JiNlwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA5MGZmZmZiZmUwZjNmODkxYmZkYjQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA5MGZmZmZiZmUwZjNmOGFiZDllOTc0YWRkMTQ1NzViNDMxMzY5NVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVDYXRlZ29yeTEwfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lQWNjZW50fSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9BY2NlbnQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVEYXJrMn0gZnJvbSBcIi4vY2F0ZWdvcmljYWwvRGFyazIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVQYWlyZWR9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1BhaXJlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNjaGVtZVBhc3RlbDF9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVQYXN0ZWwyfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lU2V0MX0gZnJvbSBcIi4vY2F0ZWdvcmljYWwvU2V0MS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNjaGVtZVNldDJ9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1NldDIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVTZXQzfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9TZXQzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lVGFibGVhdTEwfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9UYWJsZWF1MTAuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJyQkcsIHNjaGVtZSBhcyBzY2hlbWVCckJHfSBmcm9tIFwiLi9kaXZlcmdpbmcvQnJCRy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUFJHbiwgc2NoZW1lIGFzIHNjaGVtZVBSR259IGZyb20gXCIuL2RpdmVyZ2luZy9QUkduLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVQaVlHLCBzY2hlbWUgYXMgc2NoZW1lUGlZR30gZnJvbSBcIi4vZGl2ZXJnaW5nL1BpWUcuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1T3IsIHNjaGVtZSBhcyBzY2hlbWVQdU9yfSBmcm9tIFwiLi9kaXZlcmdpbmcvUHVPci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUmRCdSwgc2NoZW1lIGFzIHNjaGVtZVJkQnV9IGZyb20gXCIuL2RpdmVyZ2luZy9SZEJ1LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVSZEd5LCBzY2hlbWUgYXMgc2NoZW1lUmRHeX0gZnJvbSBcIi4vZGl2ZXJnaW5nL1JkR3kuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJkWWxCdSwgc2NoZW1lIGFzIHNjaGVtZVJkWWxCdX0gZnJvbSBcIi4vZGl2ZXJnaW5nL1JkWWxCdS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUmRZbEduLCBzY2hlbWUgYXMgc2NoZW1lUmRZbEdufSBmcm9tIFwiLi9kaXZlcmdpbmcvUmRZbEduLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVTcGVjdHJhbCwgc2NoZW1lIGFzIHNjaGVtZVNwZWN0cmFsfSBmcm9tIFwiLi9kaXZlcmdpbmcvU3BlY3RyYWwuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJ1R24sIHNjaGVtZSBhcyBzY2hlbWVCdUdufSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0J1R24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJ1UHUsIHNjaGVtZSBhcyBzY2hlbWVCdVB1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUduQnUsIHNjaGVtZSBhcyBzY2hlbWVHbkJ1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0duQnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZU9yUmQsIHNjaGVtZSBhcyBzY2hlbWVPclJkfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL09yUmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1QnVHbiwgc2NoZW1lIGFzIHNjaGVtZVB1QnVHbn0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9QdUJ1R24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1QnUsIHNjaGVtZSBhcyBzY2hlbWVQdUJ1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1UmQsIHNjaGVtZSBhcyBzY2hlbWVQdVJkfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJkUHUsIHNjaGVtZSBhcyBzY2hlbWVSZFB1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsR25CdSwgc2NoZW1lIGFzIHNjaGVtZVlsR25CdX0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsR24sIHNjaGVtZSBhcyBzY2hlbWVZbEdufSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1lsR24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsT3JCciwgc2NoZW1lIGFzIHNjaGVtZVlsT3JCcn0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsT3JSZCwgc2NoZW1lIGFzIHNjaGVtZVlsT3JSZH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJsdWVzLCBzY2hlbWUgYXMgc2NoZW1lQmx1ZXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVHcmVlbnMsIHNjaGVtZSBhcyBzY2hlbWVHcmVlbnN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL0dyZWVucy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlR3JleXMsIHNjaGVtZSBhcyBzY2hlbWVHcmV5c30gZnJvbSBcIi4vc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1cnBsZXMsIHNjaGVtZSBhcyBzY2hlbWVQdXJwbGVzfSBmcm9tIFwiLi9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVSZWRzLCBzY2hlbWUgYXMgc2NoZW1lUmVkc30gZnJvbSBcIi4vc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlT3Jhbmdlcywgc2NoZW1lIGFzIHNjaGVtZU9yYW5nZXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUNpdmlkaXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtbXVsdGkvY2l2aWRpcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9jdWJlaGVsaXguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJhaW5ib3csIHdhcm0gYXMgaW50ZXJwb2xhdGVXYXJtLCBjb29sIGFzIGludGVycG9sYXRlQ29vbH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVTaW5lYm93fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVR1cmJvfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3R1cmJvLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVWaXJpZGlzLCBtYWdtYSBhcyBpbnRlcnBvbGF0ZU1hZ21hLCBpbmZlcm5vIGFzIGludGVycG9sYXRlSW5mZXJubywgcGxhc21hIGFzIGludGVycG9sYXRlUGxhc21hfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanNcIjtcbiIsImltcG9ydCB7aW50ZXJwb2xhdGVSZ2JCYXNpc30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNjaGVtZSkge1xuICByZXR1cm4gaW50ZXJwb2xhdGVSZ2JCYXNpcyhzY2hlbWVbc2NoZW1lLmxlbmd0aCAtIDFdKTtcbn1cbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVmOTk5ZDhjOTJjYTI1ZlwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDIzOGI0NVwiLFxuICBcImVkZjhmYmIyZTJlMjY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDJjYTI1ZjAwNmQyY1wiLFxuICBcImVkZjhmYmNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNTgyNFwiLFxuICBcImY3ZmNmZGU1ZjVmOWNjZWNlNjk5ZDhjOTY2YzJhNDQxYWU3NjIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGVjZjQ5ZWJjZGE4ODU2YTdcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODQxOWRcIixcbiAgXCJlZGY4ZmJiM2NkZTM4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4ODU2YTc4MTBmN2NcIixcbiAgXCJlZGY4ZmJiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ2ZTAxNmJcIixcbiAgXCJmN2ZjZmRlMGVjZjRiZmQzZTY5ZWJjZGE4Yzk2YzY4YzZiYjE4ODQxOWQ4MTBmN2M0ZDAwNGJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZThjOGZkYmI4NGUzNGEzM1wiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWQ3MzAxZlwiLFxuICBcImZlZjBkOWZkY2M4YWZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWUzNGEzM2IzMDAwMFwiLFxuICBcImZlZjBkOWZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZjk5MDAwMFwiLFxuICBcImZmZjdlY2ZlZThjOGZkZDQ5ZWZkYmI4NGZjOGQ1OWVmNjU0OGQ3MzAxZmIzMDAwMDdmMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2U3ZjJhNmJkZGIyYjhjYmVcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YwNTcwYjBcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwNDVhOGQwMjM4NThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlMmYwYTZiZGRiMWM5MDk5XCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMDI4MThhXCIsXG4gIFwiZjZlZmY3YmRjOWUxNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMWM5MDk5MDE2YzU5XCIsXG4gIFwiZjZlZmY3ZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2NDUwXCIsXG4gIFwiZmZmN2ZiZWNlMmYwZDBkMWU2YTZiZGRiNjdhOWNmMzY5MGMwMDI4MThhMDE2YzU5MDE0NjM2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU3ZTFlZmM5OTRjN2RkMWM3N1wiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGNlMTI1NlwiLFxuICBcImYxZWVmNmQ3YjVkOGRmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGRkMWM3Nzk4MDA0M1wiLFxuICBcImYxZWVmNmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1NjkxMDAzZlwiLFxuICBcImY3ZjRmOWU3ZTFlZmQ0YjlkYWM5OTRjN2RmNjViMGU3Mjk4YWNlMTI1Njk4MDA0MzY3MDAxZlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZGUwZGRmYTlmYjVjNTFiOGFcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFhZTAxN2VcIixcbiAgXCJmZWViZTJmYmI0YjlmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFjNTFiOGE3YTAxNzdcIixcbiAgXCJmZWViZTJmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzdcIixcbiAgXCJmZmY3ZjNmZGUwZGRmY2M1YzBmYTlmYjVmNzY4YTFkZDM0OTdhZTAxN2U3YTAxNzc0OTAwNmFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjdmY2I5YWRkZDhlMzFhMzU0XCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MjM4NDQzXCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA2ODM3MDA0NTI5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmY3YmNmZWM0NGZkOTVmMGVcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjljYzRjMDJcIixcbiAgXCJmZmZmZDRmZWQ5OGVmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjlkOTVmMGU5OTM0MDRcIixcbiAgXCJmZmZmZDRmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI4YzJkMDRcIixcbiAgXCJmZmZmZTVmZmY3YmNmZWUzOTFmZWM0NGZmZTk5MjllYzcwMTRjYzRjMDI5OTM0MDQ2NjI1MDZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmZlZGEwZmViMjRjZjAzYjIwXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZTMxYTFjXCIsXG4gIFwiZmZmZmIyZmVjYzVjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZjAzYjIwYmQwMDI2XCIsXG4gIFwiZmZmZmIyZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYjEwMDI2XCIsXG4gIFwiZmZmZmNjZmZlZGEwZmVkOTc2ZmViMjRjZmQ4ZDNjZmM0ZTJhZTMxYTFjYmQwMDI2ODAwMDI2XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKTtcbiAgcmV0dXJuIFwicmdiKFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgtNC41NCAtIHQgKiAoMzUuMzQgLSB0ICogKDIzODEuNzMgLSB0ICogKDY0MDIuNyAtIHQgKiAoNzAyNC43MiAtIHQgKiAyNzEwLjU3KSkpKSkpKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMzIuNDkgKyB0ICogKDE3MC43MyArIHQgKiAoNTIuODIgLSB0ICogKDEzMS40NiAtIHQgKiAoMTc2LjU4IC0gdCAqIDY3LjM3KSkpKSkpKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoODEuMjQgKyB0ICogKDQ0Mi4zNiAtIHQgKiAoMjQ4Mi40MyAtIHQgKiAoNjE2Ny4yNCAtIHQgKiAoNjYxNC45NCAtIHQgKiAyNDc1LjY3KSkpKSkpKVxuICAgICAgKyBcIilcIjtcbn1cbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iLCJpbXBvcnQge2N1YmVoZWxpeH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCB2YXIgd2FybSA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoLTEwMCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbmV4cG9ydCB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGMgPSBjdWJlaGVsaXgoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIGMuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIGMucyA9IDEuNSAtIDEuNSAqIHRzO1xuICBjLmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKTtcbiAgcmV0dXJuIFwicmdiKFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgzNC42MSArIHQgKiAoMTE3Mi4zMyAtIHQgKiAoMTA3OTMuNTYgLSB0ICogKDMzMzAwLjEyIC0gdCAqICgzODM5NC40OSAtIHQgKiAxNDgyNS4wNSkpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDIzLjMxICsgdCAqICg1NTcuMzMgKyB0ICogKDEyMjUuMzMgLSB0ICogKDM1NzQuOTYgLSB0ICogKDEwNzMuNzcgKyB0ICogNzA3LjU2KSkpKSkpKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMjcuMiArIHQgKiAoMzIxMS4xIC0gdCAqICgxNTMyNy45NyAtIHQgKiAoMjc4MTQgLSB0ICogKDIyNTY5LjE4IC0gdCAqIDY4MzguNjYpKSkpKSkpXG4gICAgICArIFwiKVwiO1xufVxuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmZ1bmN0aW9uIHJhbXAocmFuZ2UpIHtcbiAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmFtcChjb2xvcnMoXCI0NDAxNTQ0NDAyNTY0NTA0NTc0NTA1NTk0NjA3NWE0NjA4NWM0NjBhNWQ0NjBiNWU0NzBkNjA0NzBlNjE0NzEwNjM0NzExNjQ0NzEzNjU0ODE0Njc0ODE2Njg0ODE3Njk0ODE4NmE0ODFhNmM0ODFiNmQ0ODFjNmU0ODFkNmY0ODFmNzA0ODIwNzE0ODIxNzM0ODIzNzQ0ODI0NzU0ODI1NzY0ODI2Nzc0ODI4Nzg0ODI5Nzk0NzJhN2E0NzJjN2E0NzJkN2I0NzJlN2M0NzJmN2Q0NjMwN2U0NjMyN2U0NjMzN2Y0NjM0ODA0NTM1ODE0NTM3ODE0NTM4ODI0NDM5ODM0NDNhODM0NDNiODQ0MzNkODQ0MzNlODU0MjNmODU0MjQwODY0MjQxODY0MTQyODc0MTQ0ODc0MDQ1ODg0MDQ2ODgzZjQ3ODgzZjQ4ODkzZTQ5ODkzZTRhODkzZTRjOGEzZDRkOGEzZDRlOGEzYzRmOGEzYzUwOGIzYjUxOGIzYjUyOGIzYTUzOGIzYTU0OGMzOTU1OGMzOTU2OGMzODU4OGMzODU5OGMzNzVhOGMzNzViOGQzNjVjOGQzNjVkOGQzNTVlOGQzNTVmOGQzNDYwOGQzNDYxOGQzMzYyOGQzMzYzOGQzMjY0OGUzMjY1OGUzMTY2OGUzMTY3OGUzMTY4OGUzMDY5OGUzMDZhOGUyZjZiOGUyZjZjOGUyZTZkOGUyZTZlOGUyZTZmOGUyZDcwOGUyZDcxOGUyYzcxOGUyYzcyOGUyYzczOGUyYjc0OGUyYjc1OGUyYTc2OGUyYTc3OGUyYTc4OGUyOTc5OGUyOTdhOGUyOTdiOGUyODdjOGUyODdkOGUyNzdlOGUyNzdmOGUyNzgwOGUyNjgxOGUyNjgyOGUyNjgyOGUyNTgzOGUyNTg0OGUyNTg1OGUyNDg2OGUyNDg3OGUyMzg4OGUyMzg5OGUyMzhhOGQyMjhiOGQyMjhjOGQyMjhkOGQyMThlOGQyMThmOGQyMTkwOGQyMTkxOGMyMDkyOGMyMDkyOGMyMDkzOGMxZjk0OGMxZjk1OGIxZjk2OGIxZjk3OGIxZjk4OGIxZjk5OGExZjlhOGExZTliOGExZTljODkxZTlkODkxZjllODkxZjlmODgxZmEwODgxZmExODgxZmExODcxZmEyODcyMGEzODYyMGE0ODYyMWE1ODUyMWE2ODUyMmE3ODUyMmE4ODQyM2E5ODMyNGFhODMyNWFiODIyNWFjODIyNmFkODEyN2FkODEyOGFlODAyOWFmN2YyYWIwN2YyY2IxN2UyZGIyN2QyZWIzN2MyZmI0N2MzMWI1N2IzMmI2N2EzNGI2NzkzNWI3NzkzN2I4NzgzOGI5NzczYWJhNzYzYmJiNzUzZGJjNzQzZmJjNzM0MGJkNzI0MmJlNzE0NGJmNzA0NmMwNmY0OGMxNmU0YWMxNmQ0Y2MyNmM0ZWMzNmI1MGM0NmE1MmM1Njk1NGM1Njg1NmM2Njc1OGM3NjU1YWM4NjQ1Y2M4NjM1ZWM5NjI2MGNhNjA2M2NiNWY2NWNiNWU2N2NjNWM2OWNkNWI2Y2NkNWE2ZWNlNTg3MGNmNTc3M2QwNTY3NWQwNTQ3N2QxNTM3YWQxNTE3Y2QyNTA3ZmQzNGU4MWQzNGQ4NGQ0NGI4NmQ1NDk4OWQ1NDg4YmQ2NDY4ZWQ2NDU5MGQ3NDM5M2Q3NDE5NWQ4NDA5OGQ4M2U5YmQ5M2M5ZGQ5M2JhMGRhMzlhMmRhMzdhNWRiMzZhOGRiMzRhYWRjMzJhZGRjMzBiMGRkMmZiMmRkMmRiNWRlMmJiOGRlMjliYWRlMjhiZGRmMjZjMGRmMjVjMmRmMjNjNWUwMjFjOGUwMjBjYWUxMWZjZGUxMWRkMGUxMWNkMmUyMWJkNWUyMWFkOGUyMTlkYWUzMTlkZGUzMThkZmUzMThlMmU0MThlNWU0MTllN2U0MTllYWU1MWFlY2U1MWJlZmU1MWNmMWU1MWRmNGU2MWVmNmU2MjBmOGU2MjFmYmU3MjNmZGU3MjVcIikpO1xuXG5leHBvcnQgdmFyIG1hZ21hID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMDkwMjAyMGIwMjAyMGQwMzAzMGYwMzAzMTIwNDA0MTQwNTA0MTYwNjA1MTgwNjA1MWEwNzA2MWMwODA3MWUwOTA3MjAwYTA4MjIwYjA5MjQwYzA5MjYwZDBhMjkwZTBiMmIxMDBiMmQxMTBjMmYxMjBkMzExMzBkMzQxNDBlMzYxNTBlMzgxNjBmM2IxODBmM2QxOTEwM2YxYTEwNDIxYzEwNDQxZDExNDcxZTExNDkyMDExNGIyMTExNGUyMjExNTAyNDEyNTMyNTEyNTUyNzEyNTgyOTExNWEyYTExNWMyYzExNWYyZDExNjEyZjExNjMzMTExNjUzMzEwNjczNDEwNjkzNjEwNmIzODEwNmMzOTBmNmUzYjBmNzAzZDBmNzEzZjBmNzI0MDBmNzQ0MjBmNzU0NDBmNzY0NTEwNzc0NzEwNzg0OTEwNzg0YTEwNzk0YzExN2E0ZTExN2I0ZjEyN2I1MTEyN2M1MjEzN2M1NDEzN2Q1NjE0N2Q1NzE1N2U1OTE1N2U1YTE2N2U1YzE2N2Y1ZDE3N2Y1ZjE4N2Y2MDE4ODA2MjE5ODA2NDFhODA2NTFhODA2NzFiODA2ODFjODE2YTFjODE2YjFkODE2ZDFkODE2ZTFlODE3MDFmODE3MjFmODE3MzIwODE3NTIxODE3NjIxODE3ODIyODE3OTIyODI3YjIzODI3YzIzODI3ZTI0ODI4MDI1ODI4MTI1ODE4MzI2ODE4NDI2ODE4NjI3ODE4ODI3ODE4OTI4ODE4YjI5ODE4YzI5ODE4ZTJhODE5MDJhODE5MTJiODE5MzJiODA5NDJjODA5NjJjODA5ODJkODA5OTJkODA5YjJlN2Y5YzJlN2Y5ZTJmN2ZhMDJmN2ZhMTMwN2VhMzMwN2VhNTMxN2VhNjMxN2RhODMyN2RhYTMzN2RhYjMzN2NhZDM0N2NhZTM0N2JiMDM1N2JiMjM1N2JiMzM2N2FiNTM2N2FiNzM3NzliODM3NzliYTM4NzhiYzM5NzhiZDM5NzdiZjNhNzdjMDNhNzZjMjNiNzVjNDNjNzVjNTNjNzRjNzNkNzNjODNlNzNjYTNlNzJjYzNmNzFjZDQwNzFjZjQwNzBkMDQxNmZkMjQyNmZkMzQzNmVkNTQ0NmRkNjQ1NmNkODQ1NmNkOTQ2NmJkYjQ3NmFkYzQ4NjlkZTQ5NjhkZjRhNjhlMDRjNjdlMjRkNjZlMzRlNjVlNDRmNjRlNTUwNjRlNzUyNjNlODUzNjJlOTU0NjJlYTU2NjFlYjU3NjBlYzU4NjBlZDVhNWZlZTViNWVlZjVkNWVmMDVmNWVmMTYwNWRmMjYyNWRmMjY0NWNmMzY1NWNmNDY3NWNmNDY5NWNmNTZiNWNmNjZjNWNmNjZlNWNmNzcwNWNmNzcyNWNmODc0NWNmODc2NWNmOTc4NWRmOTc5NWRmOTdiNWRmYTdkNWVmYTdmNWVmYTgxNWZmYjgzNWZmYjg1NjBmYjg3NjFmYzg5NjFmYzhhNjJmYzhjNjNmYzhlNjRmYzkwNjVmZDkyNjZmZDk0NjdmZDk2NjhmZDk4NjlmZDlhNmFmZDliNmJmZTlkNmNmZTlmNmRmZWExNmVmZWEzNmZmZWE1NzFmZWE3NzJmZWE5NzNmZWFhNzRmZWFjNzZmZWFlNzdmZWIwNzhmZWIyN2FmZWI0N2JmZWI2N2NmZWI3N2VmZWI5N2ZmZWJiODFmZWJkODJmZWJmODRmZWMxODVmZWMyODdmZWM0ODhmZWM2OGFmZWM4OGNmZWNhOGRmZWNjOGZmZWNkOTBmZWNmOTJmZWQxOTRmZWQzOTVmZWQ1OTdmZWQ3OTlmZWQ4OWFmZGRhOWNmZGRjOWVmZGRlYTBmZGUwYTFmZGUyYTNmZGUzYTVmZGU1YTdmZGU3YTlmZGU5YWFmZGViYWNmY2VjYWVmY2VlYjBmY2YwYjJmY2YyYjRmY2Y0YjZmY2Y2YjhmY2Y3YjlmY2Y5YmJmY2ZiYmRmY2ZkYmZcIikpO1xuXG5leHBvcnQgdmFyIGluZmVybm8gPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwYTAyMDIwYzAyMDIwZTAzMDIxMDA0MDMxMjA0MDMxNDA1MDQxNzA2MDQxOTA3MDUxYjA4MDUxZDA5MDYxZjBhMDcyMjBiMDcyNDBjMDgyNjBkMDgyOTBlMDkyYjEwMDkyZDExMGEzMDEyMGEzMjE0MGIzNDE1MGIzNzE2MGIzOTE4MGMzYzE5MGMzZTFiMGM0MTFjMGM0MzFlMGM0NTFmMGM0ODIxMGM0YTIzMGM0YzI0MGM0ZjI2MGM1MTI4MGI1MzI5MGI1NTJiMGI1NzJkMGI1OTJmMGE1YjMxMGE1YzMyMGE1ZTM0MGE1ZjM2MDk2MTM4MDk2MjM5MDk2MzNiMDk2NDNkMDk2NTNlMDk2NjQwMGE2NzQyMGE2ODQ0MGE2ODQ1MGE2OTQ3MGI2YTQ5MGI2YTRhMGM2YjRjMGM2YjRkMGQ2YzRmMGQ2YzUxMGU2YzUyMGU2ZDU0MGY2ZDU1MGY2ZDU3MTA2ZTU5MTA2ZTVhMTE2ZTVjMTI2ZTVkMTI2ZTVmMTM2ZTYxMTM2ZTYyMTQ2ZTY0MTU2ZTY1MTU2ZTY3MTY2ZTY5MTY2ZTZhMTc2ZTZjMTg2ZTZkMTg2ZTZmMTk2ZTcxMTk2ZTcyMWE2ZTc0MWE2ZTc1MWI2ZTc3MWM2ZDc4MWM2ZDdhMWQ2ZDdjMWQ2ZDdkMWU2ZDdmMWU2YzgwMWY2YzgyMjA2Yzg0MjA2Yjg1MjE2Yjg3MjE2Yjg4MjI2YThhMjI2YThjMjM2OThkMjM2OThmMjQ2OTkwMjU2ODkyMjU2ODkzMjY2Nzk1MjY2Nzk3Mjc2Njk4Mjc2NjlhMjg2NTliMjk2NDlkMjk2NDlmMmE2M2EwMmE2M2EyMmI2MmEzMmM2MWE1MmM2MGE2MmQ2MGE4MmU1ZmE5MmU1ZWFiMmY1ZWFkMzA1ZGFlMzA1Y2IwMzE1YmIxMzI1YWIzMzI1YWI0MzM1OWI2MzQ1OGI3MzU1N2I5MzU1NmJhMzY1NWJjMzc1NGJkMzg1M2JmMzk1MmMwM2E1MWMxM2E1MGMzM2I0ZmM0M2M0ZWM2M2Q0ZGM3M2U0Y2M4M2Y0YmNhNDA0YWNiNDE0OWNjNDI0OGNlNDM0N2NmNDQ0NmQwNDU0NWQyNDY0NGQzNDc0M2Q0NDg0MmQ1NGE0MWQ3NGIzZmQ4NGMzZWQ5NGQzZGRhNGUzY2RiNTAzYmRkNTEzYWRlNTIzOGRmNTMzN2UwNTUzNmUxNTYzNWUyNTczNGUzNTkzM2U0NWEzMWU1NWMzMGU2NWQyZmU3NWUyZWU4NjAyZGU5NjEyYmVhNjMyYWViNjQyOWViNjYyOGVjNjcyNmVkNjkyNWVlNmEyNGVmNmMyM2VmNmUyMWYwNmYyMGYxNzExZmYxNzMxZGYyNzQxY2YzNzYxYmYzNzgxOWY0NzkxOGY1N2IxN2Y1N2QxNWY2N2UxNGY2ODAxM2Y3ODIxMmY3ODQxMGY4ODUwZmY4ODcwZWY4ODkwY2Y5OGIwYmY5OGMwYWY5OGUwOWZhOTAwOGZhOTIwN2ZhOTQwN2ZiOTYwNmZiOTcwNmZiOTkwNmZiOWIwNmZiOWQwN2ZjOWYwN2ZjYTEwOGZjYTMwOWZjYTUwYWZjYTYwY2ZjYTgwZGZjYWEwZmZjYWMxMWZjYWUxMmZjYjAxNGZjYjIxNmZjYjQxOGZiYjYxYWZiYjgxZGZiYmExZmZiYmMyMWZiYmUyM2ZhYzAyNmZhYzIyOGZhYzQyYWZhYzYyZGY5YzcyZmY5YzkzMmY5Y2IzNWY4Y2QzN2Y4Y2YzYWY3ZDEzZGY3ZDM0MGY2ZDU0M2Y2ZDc0NmY1ZDk0OWY1ZGI0Y2Y0ZGQ0ZmY0ZGY1M2Y0ZTE1NmYzZTM1YWYzZTU1ZGYyZTY2MWYyZTg2NWYyZWE2OWYxZWM2ZGYxZWQ3MWYxZWY3NWYxZjE3OWYyZjI3ZGYyZjQ4MmYzZjU4NmYzZjY4YWY0Zjg4ZWY1Zjk5MmY2ZmE5NmY4ZmI5YWY5ZmM5ZGZhZmRhMWZjZmZhNFwiKSk7XG5cbmV4cG9ydCB2YXIgcGxhc21hID0gcmFtcChjb2xvcnMoXCIwZDA4ODcxMDA3ODgxMzA3ODkxNjA3OGExOTA2OGMxYjA2OGQxZDA2OGUyMDA2OGYyMjA2OTAyNDA2OTEyNjA1OTEyODA1OTIyYTA1OTMyYzA1OTQyZTA1OTUyZjA1OTYzMTA1OTczMzA1OTczNTA0OTgzNzA0OTkzODA0OWEzYTA0OWEzYzA0OWIzZTA0OWMzZjA0OWM0MTA0OWQ0MzAzOWU0NDAzOWU0NjAzOWY0ODAzOWY0OTAzYTA0YjAzYTE0YzAyYTE0ZTAyYTI1MDAyYTI1MTAyYTM1MzAyYTM1NTAyYTQ1NjAxYTQ1ODAxYTQ1OTAxYTU1YjAxYTU1YzAxYTY1ZTAxYTY2MDAxYTY2MTAwYTc2MzAwYTc2NDAwYTc2NjAwYTc2NzAwYTg2OTAwYTg2YTAwYTg2YzAwYTg2ZTAwYTg2ZjAwYTg3MTAwYTg3MjAxYTg3NDAxYTg3NTAxYTg3NzAxYTg3ODAxYTg3YTAyYTg3YjAyYTg3ZDAzYTg3ZTAzYTg4MDA0YTg4MTA0YTc4MzA1YTc4NDA1YTc4NjA2YTY4NzA3YTY4ODA4YTY4YTA5YTU4YjBhYTU4ZDBiYTU4ZTBjYTQ4ZjBkYTQ5MTBlYTM5MjBmYTM5NDEwYTI5NTExYTE5NjEzYTE5ODE0YTA5OTE1OWY5YTE2OWY5YzE3OWU5ZDE4OWQ5ZTE5OWRhMDFhOWNhMTFiOWJhMjFkOWFhMzFlOWFhNTFmOTlhNjIwOThhNzIxOTdhODIyOTZhYTIzOTVhYjI0OTRhYzI2OTRhZDI3OTNhZTI4OTJiMDI5OTFiMTJhOTBiMjJiOGZiMzJjOGViNDJlOGRiNTJmOGNiNjMwOGJiNzMxOGFiODMyODliYTMzODhiYjM0ODhiYzM1ODdiZDM3ODZiZTM4ODViZjM5ODRjMDNhODNjMTNiODJjMjNjODFjMzNkODBjNDNlN2ZjNTQwN2VjNjQxN2RjNzQyN2NjODQzN2JjOTQ0N2FjYTQ1N2FjYjQ2NzljYzQ3NzhjYzQ5NzdjZDRhNzZjZTRiNzVjZjRjNzRkMDRkNzNkMTRlNzJkMjRmNzFkMzUxNzFkNDUyNzBkNTUzNmZkNTU0NmVkNjU1NmRkNzU2NmNkODU3NmJkOTU4NmFkYTVhNmFkYTViNjlkYjVjNjhkYzVkNjdkZDVlNjZkZTVmNjVkZTYxNjRkZjYyNjNlMDYzNjNlMTY0NjJlMjY1NjFlMjY2NjBlMzY4NWZlNDY5NWVlNTZhNWRlNTZiNWRlNjZjNWNlNzZlNWJlNzZmNWFlODcwNTllOTcxNThlOTcyNTdlYTc0NTdlYjc1NTZlYjc2NTVlYzc3NTRlZDc5NTNlZDdhNTJlZTdiNTFlZjdjNTFlZjdlNTBmMDdmNGZmMDgwNGVmMTgxNGRmMTgzNGNmMjg0NGJmMzg1NGJmMzg3NGFmNDg4NDlmNDg5NDhmNThiNDdmNThjNDZmNjhkNDVmNjhmNDRmNzkwNDRmNzkxNDNmNzkzNDJmODk0NDFmODk1NDBmOTk3M2ZmOTk4M2VmOTlhM2VmYTliM2RmYTljM2NmYTllM2JmYjlmM2FmYmExMzlmYmEyMzhmY2EzMzhmY2E1MzdmY2E2MzZmY2E4MzVmY2E5MzRmZGFiMzNmZGFjMzNmZGFlMzJmZGFmMzFmZGIxMzBmZGIyMmZmZGI0MmZmZGI1MmVmZWI3MmRmZWI4MmNmZWJhMmNmZWJiMmJmZWJkMmFmZWJlMmFmZWMwMjlmZGMyMjlmZGMzMjhmZGM1MjdmZGM2MjdmZGM4MjdmZGNhMjZmZGNiMjZmY2NkMjVmY2NlMjVmY2QwMjVmY2QyMjVmYmQzMjRmYmQ1MjRmYmQ3MjRmYWQ4MjRmYWRhMjRmOWRjMjRmOWRkMjVmOGRmMjVmOGUxMjVmN2UyMjVmN2U0MjVmNmU2MjZmNmU4MjZmNWU5MjZmNWViMjdmNGVkMjdmM2VlMjdmM2YwMjdmMmYyMjdmMWY0MjZmMWY1MjVmMGY3MjRmMGY5MjFcIikpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZGVlYmY3OWVjYWUxMzE4MmJkXCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MjE3MWI1XCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg1MTljMDgzMDZiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVlMGExZDk5YjMxYTM1NFwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjIzOGI0NVwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmMGYwZjBiZGJkYmQ2MzYzNjNcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY1MjUyNTJcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjUwMDAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlNmNlZmRhZTZiZTY1NTBkXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZDk0NzAxXCIsXG4gIFwiZmVlZGRlZmRiZTg1ZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZTY1NTBkYTYzNjAzXCIsXG4gIFwiZmVlZGRlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxOGMyZDA0XCIsXG4gIFwiZmZmNWViZmVlNmNlZmRkMGEyZmRhZTZiZmQ4ZDNjZjE2OTEzZDk0ODAxYTYzNjAzN2YyNzA0XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmZWRmNWJjYmRkYzc1NmJiMVwiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODZhNTFhM1wiLFxuICBcImYyZjBmN2NiYzllMjllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODc1NmJiMTU0Mjc4ZlwiLFxuICBcImYyZjBmN2RhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzRhMTQ4NlwiLFxuICBcImZjZmJmZGVmZWRmNWRhZGFlYmJjYmRkYzllOWFjODgwN2RiYTZhNTFhMzU0Mjc4ZjNmMDA3ZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgcGFkZGluZ091dGVyID0gK18pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gK18sIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoZG9tYWluKCksIHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHJlc2NhbGUoKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHttYXAsIHNsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGRvbWFpbikge1xuICB2YXIgYSA9IGRvbWFpblswXSwgYiA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyBjbGFtcGVyKGRvbWFpbikgOiBpZGVudGl0eSwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pO1xufVxuIiwiaW1wb3J0IHtpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0SW50ZXJwb2xhdG9yfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQge2xvZ2dpc2h9IGZyb20gXCIuL2xvZ1wiO1xuaW1wb3J0IHtjb3B5fSBmcm9tIFwiLi9zZXF1ZW50aWFsXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAwLjUsXG4gICAgICB4MiA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICBrMTAsXG4gICAgICBrMjEsXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGNsYW1wID0gZmFsc2UsXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAoeCA9IDAuNSArICgoeCA9ICt0cmFuc2Zvcm0oeCkpIC0gdDEpICogKHggPCB0MSA/IGsxMCA6IGsyMSksIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHgpKSA6IHgpKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0MCA9IHRyYW5zZm9ybSh4MCA9ICtfWzBdKSwgdDEgPSB0cmFuc2Zvcm0oeDEgPSArX1sxXSksIHQyID0gdHJhbnNmb3JtKHgyID0gK19bMl0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMC41IC8gKHQxIC0gdDApLCBrMjEgPSB0MSA9PT0gdDIgPyAwIDogMC41IC8gKHQyIC0gdDEpLCBzY2FsZSkgOiBbeDAsIHgxLCB4Ml07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIHQyID0gdCh4MiksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAwLjUgLyAodDEgLSB0MCksIGsyMSA9IHQxID09PSB0MiA/IDAgOiAwLjUgLyAodDIgLSB0MSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXZlcmdpbmcoKSB7XG4gIHZhciBzY2FsZSA9IGxpbmVhcmlzaCh0cmFuc2Zvcm1lcigpKGlkZW50aXR5KSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmcoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdMb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFswLjEsIDEsIDEwXSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdMb2coKSkuYmFzZShzY2FsZS5iYXNlKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nU3ltbG9nKCkge1xuICB2YXIgc2NhbGUgPSBzeW1sb2dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdTeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGRpdmVyZ2luZ1BvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmVyZ2luZ1NxcnQoKSB7XG4gIHJldHVybiBkaXZlcmdpbmdQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZGVudGl0eShkb21haW4pIHtcbiAgdmFyIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHg7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaWRlbnRpdHkoZG9tYWluKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGRvbWFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPyBtYXAuY2FsbChkb21haW4sIG51bWJlcikgOiBbMCwgMV07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJleHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlQmFuZCxcbiAgcG9pbnQgYXMgc2NhbGVQb2ludFxufSBmcm9tIFwiLi9iYW5kXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgc2NhbGVJZGVudGl0eVxufSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlTGluZWFyXG59IGZyb20gXCIuL2xpbmVhclwiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlTG9nXG59IGZyb20gXCIuL2xvZ1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlU3ltbG9nXG59IGZyb20gXCIuL3N5bWxvZ1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlT3JkaW5hbCxcbiAgaW1wbGljaXQgYXMgc2NhbGVJbXBsaWNpdFxufSBmcm9tIFwiLi9vcmRpbmFsXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgc2NhbGVQb3csXG4gIHNxcnQgYXMgc2NhbGVTcXJ0XG59IGZyb20gXCIuL3Bvd1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHNjYWxlUXVhbnRpbGVcbn0gZnJvbSBcIi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBzY2FsZVF1YW50aXplXG59IGZyb20gXCIuL3F1YW50aXplXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgc2NhbGVUaHJlc2hvbGRcbn0gZnJvbSBcIi4vdGhyZXNob2xkXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgc2NhbGVUaW1lXG59IGZyb20gXCIuL3RpbWVcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBzY2FsZVV0Y1xufSBmcm9tIFwiLi91dGNUaW1lXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgc2NhbGVTZXF1ZW50aWFsLFxuICBzZXF1ZW50aWFsTG9nIGFzIHNjYWxlU2VxdWVudGlhbExvZyxcbiAgc2VxdWVudGlhbFBvdyBhcyBzY2FsZVNlcXVlbnRpYWxQb3csXG4gIHNlcXVlbnRpYWxTcXJ0IGFzIHNjYWxlU2VxdWVudGlhbFNxcnQsXG4gIHNlcXVlbnRpYWxTeW1sb2cgYXMgc2NhbGVTZXF1ZW50aWFsU3ltbG9nXG59IGZyb20gXCIuL3NlcXVlbnRpYWxcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBzY2FsZVNlcXVlbnRpYWxRdWFudGlsZVxufSBmcm9tIFwiLi9zZXF1ZW50aWFsUXVhbnRpbGVcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBzY2FsZURpdmVyZ2luZyxcbiAgZGl2ZXJnaW5nTG9nIGFzIHNjYWxlRGl2ZXJnaW5nTG9nLFxuICBkaXZlcmdpbmdQb3cgYXMgc2NhbGVEaXZlcmdpbmdQb3csXG4gIGRpdmVyZ2luZ1NxcnQgYXMgc2NhbGVEaXZlcmdpbmdTcXJ0LFxuICBkaXZlcmdpbmdTeW1sb2cgYXMgc2NhbGVEaXZlcmdpbmdTeW1sb2dcbn0gZnJvbSBcIi4vZGl2ZXJnaW5nXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgdGlja0Zvcm1hdFxufSBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiaW1wb3J0IHt0aWNrc30gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuaW1wb3J0IG5pY2UgZnJvbSBcIi4vbmljZVwiO1xuaW1wb3J0IHtjb3B5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHAoeCkge1xuICByZXR1cm4gTWF0aC5leHAoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxvZ24oeCkge1xuICByZXR1cm4gLU1hdGgubG9nKC14KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXhwbih4KSB7XG4gIHJldHVybiAtTWF0aC5leHAoLXgpO1xufVxuXG5mdW5jdGlvbiBwb3cxMCh4KSB7XG4gIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xufVxuXG5mdW5jdGlvbiBwb3dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IDEwID8gcG93MTBcbiAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcbiAgICAgIDogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5wb3coYmFzZSwgeCk7IH07XG59XG5cbmZ1bmN0aW9uIGxvZ3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcbiAgICAgIDogYmFzZSA9PT0gMTAgJiYgTWF0aC5sb2cxMFxuICAgICAgfHwgYmFzZSA9PT0gMiAmJiBNYXRoLmxvZzJcbiAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3QoZikge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAtZigteCk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dnaXNoKHRyYW5zZm9ybSkge1xuICB2YXIgc2NhbGUgPSB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgYmFzZSA9IDEwLFxuICAgICAgbG9ncyxcbiAgICAgIHBvd3M7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBsb2dzID0gbG9ncChiYXNlKSwgcG93cyA9IHBvd3AoYmFzZSk7XG4gICAgaWYgKGRvbWFpbigpWzBdIDwgMCkge1xuICAgICAgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZ24sIHRyYW5zZm9ybUV4cG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm0odHJhbnNmb3JtTG9nLCB0cmFuc2Zvcm1FeHApO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGJhc2UgPSArXywgcmVzY2FsZSgpKSA6IGJhc2U7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB1ID0gZFswXSxcbiAgICAgICAgdiA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgcjtcblxuICAgIGlmIChyID0gdiA8IHUpIGkgPSB1LCB1ID0gdiwgdiA9IGk7XG5cbiAgICB2YXIgaSA9IGxvZ3ModSksXG4gICAgICAgIGogPSBsb2dzKHYpLFxuICAgICAgICBwLFxuICAgICAgICBrLFxuICAgICAgICB0LFxuICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50LFxuICAgICAgICB6ID0gW107XG5cbiAgICBpZiAoIShiYXNlICUgMSkgJiYgaiAtIGkgPCBuKSB7XG4gICAgICBpID0gTWF0aC5yb3VuZChpKSAtIDEsIGogPSBNYXRoLnJvdW5kKGopICsgMTtcbiAgICAgIGlmICh1ID4gMCkgZm9yICg7IGkgPCBqOyArK2kpIHtcbiAgICAgICAgZm9yIChrID0gMSwgcCA9IHBvd3MoaSk7IGsgPCBiYXNlOyArK2spIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IGJhc2UgLSAxLCBwID0gcG93cyhpKTsgayA+PSAxOyAtLWspIHtcbiAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgaWYgKHQgPCB1KSBjb250aW51ZTtcbiAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gdGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBpbnRlcnZhbCkge1xuICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHgxIDwgeDApIHtcbiAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgfVxuXG4gIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKGRvbWFpbiwgcmFuZ2UpLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7Y29weSwgaWRlbnRpdHksIHRyYW5zZm9ybWVyfSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb3coZXhwb25lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3FydCh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC1NYXRoLnNxcnQoLXgpIDogTWF0aC5zcXJ0KHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXVhcmUoeCkge1xuICByZXR1cm4geCA8IDAgPyAteCAqIHggOiB4ICogeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvd2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSksXG4gICAgICBleHBvbmVudCA9IDE7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICByZXR1cm4gZXhwb25lbnQgPT09IDEgPyB0cmFuc2Zvcm0oaWRlbnRpdHksIGlkZW50aXR5KVxuICAgICAgICA6IGV4cG9uZW50ID09PSAwLjUgPyB0cmFuc2Zvcm0odHJhbnNmb3JtU3FydCwgdHJhbnNmb3JtU3F1YXJlKVxuICAgICAgICA6IHRyYW5zZm9ybSh0cmFuc2Zvcm1Qb3coZXhwb25lbnQpLCB0cmFuc2Zvcm1Qb3coMSAvIGV4cG9uZW50KSk7XG4gIH1cblxuICBzY2FsZS5leHBvbmVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCByZXNjYWxlKCkpIDogZXhwb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvdygpIHtcbiAgdmFyIHNjYWxlID0gcG93aXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgcG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsImltcG9ydCB7YXNjZW5kaW5nLCBiaXNlY3QsIHF1YW50aWxlIGFzIHRocmVzaG9sZH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhbnRpbGUoKSB7XG4gIHZhciBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB0aHJlc2hvbGRzID0gW10sXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gTWF0aC5tYXgoMSwgcmFuZ2UubGVuZ3RoKTtcbiAgICB0aHJlc2hvbGRzID0gbmV3IEFycmF5KG4gLSAxKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGhyZXNob2xkc1tpIC0gMV0gPSB0aHJlc2hvbGQoZG9tYWluLCBpIC8gbik7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHJhbmdlW2Jpc2VjdCh0aHJlc2hvbGRzLCB4KV07XG4gIH1cblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbXG4gICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICBdO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aXplKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdChkb21haW4sIHgsIDAsIG4pXSA6IHVua25vd247XG4gIH1cblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBpID0gLTE7XG4gICAgZG9tYWluID0gbmV3IEFycmF5KG4pO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkb21haW5baV0gPSAoKGkgKyAxKSAqIHgxIC0gKGkgLSBuKSAqIHgwKSAvIChuICsgMSk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHJlc2NhbGUoKSkgOiBbeDAsIHgxXTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gKHJhbmdlID0gc2xpY2UuY2FsbChfKSkubGVuZ3RoIC0gMSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dXG4gICAgICAgIDogaSA8IDEgPyBbeDAsIGRvbWFpblswXV1cbiAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXG4gICAgICAgIDogW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUudGhyZXNob2xkcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aXplKClcbiAgICAgICAgLmRvbWFpbihbeDAsIHgxXSlcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KGxpbmVhcmlzaChzY2FsZSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7bG9nZ2lzaH0gZnJvbSBcIi4vbG9nXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgdDAsXG4gICAgICB0MSxcbiAgICAgIGsxMCxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5LFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IGludGVycG9sYXRvcihrMTAgPT09IDAgPyAwLjUgOiAoeCA9ICh0cmFuc2Zvcm0oeCkgLSB0MCkgKiBrMTAsIGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgeCkpIDogeCkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHQwID0gdHJhbnNmb3JtKHgwID0gK19bMF0pLCB0MSA9IHRyYW5zZm9ybSh4MSA9ICtfWzFdKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDEgLyAodDEgLSB0MCksIHNjYWxlKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB0MCA9IHQoeDApLCB0MSA9IHQoeDEpLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLmludGVycG9sYXRvcihzb3VyY2UuaW50ZXJwb2xhdG9yKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbCgpIHtcbiAgdmFyIHNjYWxlID0gbGluZWFyaXNoKHRyYW5zZm9ybWVyKCkoaWRlbnRpdHkpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWwoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyKCkpLmRvbWFpbihbMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWxMb2coKSkuYmFzZShzY2FsZS5iYXNlKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFN5bWxvZygpKS5jb25zdGFudChzY2FsZS5jb25zdGFudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWxQb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3FydCgpIHtcbiAgcmV0dXJuIHNlcXVlbnRpYWxQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiaW1wb3J0IHthc2NlbmRpbmcsIGJpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbFF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgaWYgKCFpc05hTih4ID0gK3gpKSByZXR1cm4gaW50ZXJwb2xhdG9yKChiaXNlY3QoZG9tYWluLCB4KSAtIDEpIC8gKGRvbWFpbi5sZW5ndGggLSAxKSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfLmxlbmd0aCwgZDsgaSA8IG47ICsraSkgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXF1ZW50aWFsUXVhbnRpbGUoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7Y29weSwgdHJhbnNmb3JtZXJ9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN5bWxvZyhjKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGgubG9nMXAoTWF0aC5hYnMoeCAvIGMpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3ltZXhwKGMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHgpICogTWF0aC5leHBtMShNYXRoLmFicyh4KSkgKiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ltbG9naXNoKHRyYW5zZm9ybSkge1xuICB2YXIgYyA9IDEsIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjKSwgdHJhbnNmb3JtU3ltZXhwKGMpKTtcblxuICBzY2FsZS5jb25zdGFudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TeW1sb2coYyA9ICtfKSwgdHJhbnNmb3JtU3ltZXhwKGMpKSA6IGM7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd24sXG4gICAgICBuID0gMTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2Jpc2VjdChkb21haW4sIHgsIDAsIG4pXSA6IHVua25vd247XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3RpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZU1pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHt0aW1lRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgIGludGVydmFsID0geWVhcjtcbiAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICBzdGVwID0gaVsxXTtcbiAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdDAgPSBkWzBdLFxuICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgIHQ7XG4gICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICA/IGRvbWFpbihuaWNlKGQsIGludGVydmFsKSlcbiAgICAgICAgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7Y2FsZW5kYXJ9IGZyb20gXCIuL3RpbWVcIjtcbmltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7dXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y01pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y01pbGxpc2Vjb25kLCB1dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdChjcmVhdG9yKG5hbWUpLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIGNyZWF0ZX0gZnJvbSBcIi4vY3JlYXRlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3JlYXRvcn0gZnJvbSBcIi4vY3JlYXRvclwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGxvY2FsfSBmcm9tIFwiLi9sb2NhbFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG1hdGNoZXJ9IGZyb20gXCIuL21hdGNoZXJcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtb3VzZX0gZnJvbSBcIi4vbW91c2VcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBuYW1lc3BhY2V9IGZyb20gXCIuL25hbWVzcGFjZVwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIG5hbWVzcGFjZXN9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBjbGllbnRQb2ludH0gZnJvbSBcIi4vcG9pbnRcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzZWxlY3R9IGZyb20gXCIuL3NlbGVjdFwiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNlbGVjdEFsbH0gZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2VsZWN0aW9ufSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzZWxlY3Rvcn0gZnJvbSBcIi4vc2VsZWN0b3JcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzZWxlY3RvckFsbH0gZnJvbSBcIi4vc2VsZWN0b3JBbGxcIjtcbmV4cG9ydCB7c3R5bGVWYWx1ZSBhcyBzdHlsZX0gZnJvbSBcIi4vc2VsZWN0aW9uL3N0eWxlXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdG91Y2h9IGZyb20gXCIuL3RvdWNoXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdG91Y2hlc30gZnJvbSBcIi4vdG91Y2hlc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHdpbmRvd30gZnJvbSBcIi4vd2luZG93XCI7XG5leHBvcnQge2V2ZW50LCBjdXN0b21FdmVudH0gZnJvbSBcIi4vc2VsZWN0aW9uL29uXCI7XG4iLCJ2YXIgbmV4dElkID0gMDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWwoKSB7XG4gIHJldHVybiBuZXcgTG9jYWw7XG59XG5cbmZ1bmN0aW9uIExvY2FsKCkge1xuICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xufVxuXG5Mb2NhbC5wcm90b3R5cGUgPSBsb2NhbC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICB2YXIgZXZlbnQgPSBzb3VyY2VFdmVudCgpO1xuICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHJldHVybiBwb2ludChub2RlLCBldmVudCk7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCIuL3NlbGVjdGlvbi9vblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnJlbnQgPSBldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLmNoYW5nZWRUb3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIHBvaW50KG5vZGUsIHRvdWNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudFwiO1xuaW1wb3J0IHBvaW50IGZyb20gXCIuL3BvaW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIHRvdWNoZXMpIHtcbiAgaWYgKHRvdWNoZXMgPT0gbnVsbCkgdG91Y2hlcyA9IHNvdXJjZUV2ZW50KCkudG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgIHBvaW50c1tpXSA9IHBvaW50KG5vZGUsIHRvdWNoZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50cztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCB7YWJzLCBhY29zLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIG1heCwgbWluLCBwaSwgc2luLCBzcXJ0LCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9IHkzMiAqIHgxMCAtIHgzMiAqIHkxMDtcbiAgaWYgKHQgKiB0IDwgZXBzaWxvbikgcmV0dXJuO1xuICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyB0O1xuICByZXR1cm4gW3gwICsgdCAqIHgxMCwgeTAgKyB0ICogeTEwXTtcbn1cblxuLy8gQ29tcHV0ZSBwZXJwZW5kaWN1bGFyIG9mZnNldCBsaW5lIG9mIGxlbmd0aCByYy5cbi8vIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vQ2lyY2xlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgdmFyIHgwMSA9IHgwIC0geDEsXG4gICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBzcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MTEgPSB4MCArIG94LFxuICAgICAgeTExID0geTAgKyBveSxcbiAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICB5MTAgPSB5MSArIG95LFxuICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgZHggPSB4MTAgLSB4MTEsXG4gICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICByID0gcjEgLSByYyxcbiAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0KG1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSxcbiAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcbiAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgIGR4MCA9IGN4MCAtIHgwMCxcbiAgICAgIGR5MCA9IGN5MCAtIHkwMCxcbiAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgIGR5MSA9IGN5MSAtIHkwMDtcblxuICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG5cbiAgcmV0dXJuIHtcbiAgICBjeDogY3gwLFxuICAgIGN5OiBjeTAsXG4gICAgeDAxOiAtb3gsXG4gICAgeTAxOiAtb3ksXG4gICAgeDExOiBjeDAgKiAocjEgLyByIC0gMSksXG4gICAgeTExOiBjeTAgKiAocjEgLyByIC0gMSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50KDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgcixcbiAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgZGEgPSBhYnMoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTEgPiBhMDtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgaWYgKHIxIDwgcjApIHIgPSByMSwgcjEgPSByMCwgcjAgPSByO1xuXG4gICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICBpZiAoIShyMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbygwLCAwKTtcblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgZWxzZSBpZiAoZGEgPiB0YXUgLSBlcHNpbG9uKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIGNvcyhhMCksIHIxICogc2luKGEwKSk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgaWYgKHIwID4gZXBzaWxvbikge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIGNvcyhhMSksIHIwICogc2luKGExKSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGEwMSA9IGEwLFxuICAgICAgICAgIGExMSA9IGExLFxuICAgICAgICAgIGEwMCA9IGEwLFxuICAgICAgICAgIGExMCA9IGExLFxuICAgICAgICAgIGRhMCA9IGRhLFxuICAgICAgICAgIGRhMSA9IGRhLFxuICAgICAgICAgIGFwID0gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvIDIsXG4gICAgICAgICAgcnAgPSAoYXAgPiBlcHNpbG9uKSAmJiAocGFkUmFkaXVzID8gK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc3FydChyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgIHJjID0gbWluKGFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgcmMxID0gcmMsXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgdDE7XG5cbiAgICAgIC8vIEFwcGx5IHBhZGRpbmc/IE5vdGUgdGhhdCBzaW5jZSByMSDiiaUgcjAsIGRhMSDiiaUgZGEwLlxuICAgICAgaWYgKHJwID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgcDAgPSBhc2luKHJwIC8gcjAgKiBzaW4oYXApKSxcbiAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogc2luKGFwKSk7XG4gICAgICAgIGlmICgoZGEwIC09IHAwICogMikgPiBlcHNpbG9uKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgZWxzZSBkYTAgPSAwLCBhMDAgPSBhMTAgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICBpZiAoKGRhMSAtPSBwMSAqIDIpID4gZXBzaWxvbikgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgIGVsc2UgZGExID0gMCwgYTAxID0gYTExID0gKGEwICsgYTEpIC8gMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHgwMSA9IHIxICogY29zKGEwMSksXG4gICAgICAgICAgeTAxID0gcjEgKiBzaW4oYTAxKSxcbiAgICAgICAgICB4MTAgPSByMCAqIGNvcyhhMTApLFxuICAgICAgICAgIHkxMCA9IHIwICogc2luKGExMCk7XG5cbiAgICAgIC8vIEFwcGx5IHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGlmIChyYyA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHgxMSA9IHIxICogY29zKGExMSksXG4gICAgICAgICAgICB5MTEgPSByMSAqIHNpbihhMTEpLFxuICAgICAgICAgICAgeDAwID0gcjAgKiBjb3MoYTAwKSxcbiAgICAgICAgICAgIHkwMCA9IHIwICogc2luKGEwMCksXG4gICAgICAgICAgICBvYztcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkgJiYgKG9jID0gaW50ZXJzZWN0KHgwMSwgeTAxLCB4MDAsIHkwMCwgeDExLCB5MTEsIHgxMCwgeTEwKSkpIHtcbiAgICAgICAgICB2YXIgYXggPSB4MDEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYnkgPSB5MTEgLSBvY1sxXSxcbiAgICAgICAgICAgICAga2MgPSAxIC8gc2luKGFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIHNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgbGMgPSBzcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBtaW4ocmMsIChyMCAtIGxjKSAvIChrYyAtIDEpKTtcbiAgICAgICAgICByYzEgPSBtaW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XG4gICAgICBpZiAoIShkYTEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzEgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDAwLCB5MDAsIHgwMSwgeTAxLCByMSwgcmMxLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDExLCB5MTEsIHgxMCwgeTEwLCByMSwgcmMxLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5tb3ZlVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMSA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMSwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgIC8vIElzIHRoZXJlIG5vIGlubmVyIHJpbmcsIGFuZCBpdOKAmXMgYSBjaXJjdWxhciBzZWN0b3I/XG4gICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICBpZiAoIShyMCA+IGVwc2lsb24pIHx8ICEoZGEwID4gZXBzaWxvbikpIGNvbnRleHQubGluZVRvKHgxMCwgeTEwKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBpbm5lciByaW5nIChvciBwb2ludCkgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgwMSwgeTAxLCB4MDAsIHkwMCwgcjAsIC1yYzAsIGN3KTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMwIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMTAsIGEwMCwgY3cpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIHBpIC8gMjtcbiAgICByZXR1cm4gW2NvcyhhKSAqIHIsIHNpbihhKSAqIHJdO1xuICB9O1xuXG4gIGFyYy5pbm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBvdXRlclJhZGl1cztcbiAgfTtcblxuICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvcm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogY29ybmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5wYWRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkUmFkaXVzID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJjO1xufVxuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgY3VydmVMaW5lYXIgZnJvbSBcIi4vY3VydmUvbGluZWFyLmpzXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lLmpzXCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4vcG9pbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IHBvaW50WCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHBvaW50WSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gYXJlYShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIGssXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHkweiA9IG5ldyBBcnJheShuKTtcblxuICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICBqID0gaTtcbiAgICAgICAgICBvdXRwdXQuYXJlYVN0YXJ0KCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIGZvciAoayA9IGkgLSAxOyBrID49IGo7IC0taykge1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50KHgweltrXSwgeTB6W2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQuYXJlYUVuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIHtcbiAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgIG91dHB1dC5wb2ludCh4MSA/ICt4MShkLCBpLCBkYXRhKSA6IHgweltpXSwgeTEgPyAreTEoZCwgaSwgZGF0YSkgOiB5MHpbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICByZXR1cm4gbGluZSgpLmRlZmluZWQoZGVmaW5lZCkuY3VydmUoY3VydmUpLmNvbnRleHQoY29udGV4dCk7XG4gIH1cblxuICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgxO1xuICB9O1xuXG4gIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTE7XG4gIH07XG5cbiAgYXJlYS5saW5lWDAgPVxuICBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICB9O1xuXG4gIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MSk7XG4gIH07XG5cbiAgYXJlYS5saW5lWDEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGFyZWEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBhcmVhLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGFyZWEpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJlYTtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWwuanNcIjtcbmltcG9ydCBhcmVhIGZyb20gXCIuL2FyZWEuanNcIjtcbmltcG9ydCB7bGluZVJhZGlhbH0gZnJvbSBcIi4vbGluZVJhZGlhbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBhcmVhKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxuICAgICAgYyA9IGEuY3VydmUsXG4gICAgICB4MCA9IGEubGluZVgwLFxuICAgICAgeDEgPSBhLmxpbmVYMSxcbiAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICB5MSA9IGEubGluZVkxO1xuXG4gIGEuYW5nbGUgPSBhLngsIGRlbGV0ZSBhLng7XG4gIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICBhLmVuZEFuZ2xlID0gYS54MSwgZGVsZXRlIGEueDE7XG4gIGEucmFkaXVzID0gYS55LCBkZWxldGUgYS55O1xuICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gIGEub3V0ZXJSYWRpdXMgPSBhLnkxLCBkZWxldGUgYS55MTtcbiAgYS5saW5lU3RhcnRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MCgpKTsgfSwgZGVsZXRlIGEubGluZVgwO1xuICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICBhLmxpbmVJbm5lclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MCgpKTsgfSwgZGVsZXRlIGEubGluZVkwO1xuICBhLmxpbmVPdXRlclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MSgpKTsgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGE7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9jb250ZXh0LmxpbmVUbygoNSAqIHRoaXMuX3gwICsgdGhpcy5feDEpIC8gNiwgKDUgKiB0aGlzLl95MCArIHRoaXMuX3kxKSAvIDYpOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MCwgeTApIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeDAsIHkwKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IHtCYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgdGhpcy5fYmFzaXMgPSBuZXcgQmFzaXMoY29udGV4dCk7XG4gIHRoaXMuX2JldGEgPSBiZXRhO1xufVxuXG5CdW5kbGUucHJvdG90eXBlID0ge1xuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gICAgdGhpcy5fYmFzaXMubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIGogPSB4Lmxlbmd0aCAtIDE7XG5cbiAgICBpZiAoaiA+IDApIHtcbiAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgeTAgPSB5WzBdLFxuICAgICAgICAgIGR4ID0geFtqXSAtIHgwLFxuICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICB0O1xuXG4gICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgdCA9IGkgLyBqO1xuICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcbiAgICAgICAgICB0aGlzLl9iZXRhICogeFtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeDAgKyB0ICogZHgpLFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB5W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh5MCArIHQgKiBkeSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2FyZGluYWwuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcbiIsImltcG9ydCB7ZXBzaWxvbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7Q2FyZGluYWx9IGZyb20gXCIuL2NhcmRpbmFsLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbENsb3NlZH0gZnJvbSBcIi4vY2FyZGluYWxDbG9zZWQuanNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wLmpzXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tLmpzXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gdGhpcy5feTUgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuIiwiaW1wb3J0IHtDYXJkaW5hbE9wZW59IGZyb20gXCIuL2NhcmRpbmFsT3Blbi5qc1wiO1xuaW1wb3J0IHtwb2ludH0gZnJvbSBcIi4vY2F0bXVsbFJvbS5qc1wiO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJmdW5jdGlvbiBMaW5lYXIoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3AuanNcIjtcblxuZnVuY3Rpb24gTGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhckNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhckNsb3NlZChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbn1cblxuLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgdmFyIGggPSB0aGF0Ll94MSAtIHRoYXQuX3gwO1xuICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG59XG5cbi8vIEFjY29yZGluZyB0byBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19IZXJtaXRlX3NwbGluZSNSZXByZXNlbnRhdGlvbnNcbi8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuZnVuY3Rpb24gcG9pbnQodGhhdCwgdDAsIHQxKSB7XG4gIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgeTAgPSB0aGF0Ll95MCxcbiAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgZHggPSAoeDEgLSB4MCkgLyAzO1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5Nb25vdG9uZVgucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxuICAgIHRoaXMuX3QwID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgdDEgPSBOYU47XG5cbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAoeCA9PT0gdGhpcy5feDEgJiYgeSA9PT0gdGhpcy5feTEpIHJldHVybjsgLy8gSWdub3JlIGNvaW5jaWRlbnQgcG9pbnRzLlxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgcG9pbnQodGhpcywgc2xvcGUyKHRoaXMsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKSwgdDEpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgdGhpcy5fdDAgPSB0MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xufVxuXG4oTW9ub3RvbmVZLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9ub3RvbmVYLnByb3RvdHlwZSkpLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG59O1xuXG5mdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5SZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIE5hdHVyYWwoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTmF0dXJhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgaWYgKG4pIHtcbiAgICAgIHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzBdLCB5WzBdKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHhbMF0sIHlbMF0pO1xuICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeFsxXSwgeVsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgcHkgPSBjb250cm9sUG9pbnRzKHkpO1xuICAgICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMTsgaTEgPCBuOyArK2kwLCArK2kxKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIG4gPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTIvYmV6aWVyLXNwbGluZXMvIGZvciBkZXJpdmF0aW9uLlxuZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XG4gIHZhciBpLFxuICAgICAgbiA9IHgubGVuZ3RoIC0gMSxcbiAgICAgIG0sXG4gICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkobik7XG4gIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyArK2kpIGFbaV0gPSAxLCBiW2ldID0gNCwgcltpXSA9IDQgKiB4W2ldICsgMiAqIHhbaSArIDFdO1xuICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICBhW24gLSAxXSA9IHJbbiAtIDFdIC8gYltuIC0gMV07XG4gIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcbiAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgKytpKSBiW2ldID0gMiAqIHhbaSArIDFdIC0gYVtpICsgMV07XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IGN1cnZlTGluZWFyIGZyb20gXCIuL2xpbmVhci5qc1wiO1xuXG5leHBvcnQgdmFyIGN1cnZlUmFkaWFsTGluZWFyID0gY3VydmVSYWRpYWwoY3VydmVMaW5lYXIpO1xuXG5mdW5jdGlvbiBSYWRpYWwoY3VydmUpIHtcbiAgdGhpcy5fY3VydmUgPSBjdXJ2ZTtcbn1cblxuUmFkaWFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYUVuZCgpO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbihhLCByKSB7XG4gICAgdGhpcy5fY3VydmUucG9pbnQociAqIE1hdGguc2luKGEpLCByICogLU1hdGguY29zKGEpKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VydmVSYWRpYWwoY3VydmUpIHtcblxuICBmdW5jdGlvbiByYWRpYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgUmFkaWFsKGN1cnZlKGNvbnRleHQpKTtcbiAgfVxuXG4gIHJhZGlhbC5fY3VydmUgPSBjdXJ2ZTtcblxuICByZXR1cm4gcmFkaWFsO1xufVxuIiwiZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl90ID0gdDtcbn1cblxuU3RlcC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoMCA8IHRoaXMuX3QgJiYgdGhpcy5fdCA8IDEgJiYgdGhpcy5fcG9pbnQgPT09IDIpIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5feCA9IHgsIHRoaXMuX3kgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBBZnRlcihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICByZXR1cm4gZDtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBhcmN9IGZyb20gXCIuL2FyYy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGFyZWF9IGZyb20gXCIuL2FyZWEuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBsaW5lfSBmcm9tIFwiLi9saW5lLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcGllfSBmcm9tIFwiLi9waWUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBhcmVhUmFkaWFsLCBkZWZhdWx0IGFzIHJhZGlhbEFyZWF9IGZyb20gXCIuL2FyZWFSYWRpYWwuanNcIjsgLy8gTm90ZTogcmFkaWFsQXJlYSBpcyBkZXByZWNhdGVkIVxuZXhwb3J0IHtkZWZhdWx0IGFzIGxpbmVSYWRpYWwsIGRlZmF1bHQgYXMgcmFkaWFsTGluZX0gZnJvbSBcIi4vbGluZVJhZGlhbC5qc1wiOyAvLyBOb3RlOiByYWRpYWxMaW5lIGlzIGRlcHJlY2F0ZWQhXG5leHBvcnQge2RlZmF1bHQgYXMgcG9pbnRSYWRpYWx9IGZyb20gXCIuL3BvaW50UmFkaWFsLmpzXCI7XG5leHBvcnQge2xpbmtIb3Jpem9udGFsLCBsaW5rVmVydGljYWwsIGxpbmtSYWRpYWx9IGZyb20gXCIuL2xpbmsvaW5kZXguanNcIjtcblxuZXhwb3J0IHtkZWZhdWx0IGFzIHN5bWJvbCwgc3ltYm9sc30gZnJvbSBcIi4vc3ltYm9sLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3ltYm9sQ2lyY2xlfSBmcm9tIFwiLi9zeW1ib2wvY2lyY2xlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3ltYm9sQ3Jvc3N9IGZyb20gXCIuL3N5bWJvbC9jcm9zcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN5bWJvbERpYW1vbmR9IGZyb20gXCIuL3N5bWJvbC9kaWFtb25kLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3ltYm9sU3F1YXJlfSBmcm9tIFwiLi9zeW1ib2wvc3F1YXJlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3ltYm9sU3Rhcn0gZnJvbSBcIi4vc3ltYm9sL3N0YXIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzeW1ib2xUcmlhbmdsZX0gZnJvbSBcIi4vc3ltYm9sL3RyaWFuZ2xlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3ltYm9sV3llfSBmcm9tIFwiLi9zeW1ib2wvd3llLmpzXCI7XG5cbmV4cG9ydCB7ZGVmYXVsdCBhcyBjdXJ2ZUJhc2lzQ2xvc2VkfSBmcm9tIFwiLi9jdXJ2ZS9iYXNpc0Nsb3NlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlQmFzaXNPcGVufSBmcm9tIFwiLi9jdXJ2ZS9iYXNpc09wZW4uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBjdXJ2ZUJhc2lzfSBmcm9tIFwiLi9jdXJ2ZS9iYXNpcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlQnVuZGxlfSBmcm9tIFwiLi9jdXJ2ZS9idW5kbGUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBjdXJ2ZUNhcmRpbmFsQ2xvc2VkfSBmcm9tIFwiLi9jdXJ2ZS9jYXJkaW5hbENsb3NlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlQ2FyZGluYWxPcGVufSBmcm9tIFwiLi9jdXJ2ZS9jYXJkaW5hbE9wZW4uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBjdXJ2ZUNhcmRpbmFsfSBmcm9tIFwiLi9jdXJ2ZS9jYXJkaW5hbC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlQ2F0bXVsbFJvbUNsb3NlZH0gZnJvbSBcIi4vY3VydmUvY2F0bXVsbFJvbUNsb3NlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlQ2F0bXVsbFJvbU9wZW59IGZyb20gXCIuL2N1cnZlL2NhdG11bGxSb21PcGVuLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3VydmVDYXRtdWxsUm9tfSBmcm9tIFwiLi9jdXJ2ZS9jYXRtdWxsUm9tLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3VydmVMaW5lYXJDbG9zZWR9IGZyb20gXCIuL2N1cnZlL2xpbmVhckNsb3NlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1cnZlTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmV4cG9ydCB7bW9ub3RvbmVYIGFzIGN1cnZlTW9ub3RvbmVYLCBtb25vdG9uZVkgYXMgY3VydmVNb25vdG9uZVl9IGZyb20gXCIuL2N1cnZlL21vbm90b25lLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3VydmVOYXR1cmFsfSBmcm9tIFwiLi9jdXJ2ZS9uYXR1cmFsLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgY3VydmVTdGVwLCBzdGVwQWZ0ZXIgYXMgY3VydmVTdGVwQWZ0ZXIsIHN0ZXBCZWZvcmUgYXMgY3VydmVTdGVwQmVmb3JlfSBmcm9tIFwiLi9jdXJ2ZS9zdGVwLmpzXCI7XG5cbmV4cG9ydCB7ZGVmYXVsdCBhcyBzdGFja30gZnJvbSBcIi4vc3RhY2suanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzdGFja09mZnNldEV4cGFuZH0gZnJvbSBcIi4vb2Zmc2V0L2V4cGFuZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN0YWNrT2Zmc2V0RGl2ZXJnaW5nfSBmcm9tIFwiLi9vZmZzZXQvZGl2ZXJnaW5nLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3RhY2tPZmZzZXROb25lfSBmcm9tIFwiLi9vZmZzZXQvbm9uZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN0YWNrT2Zmc2V0U2lsaG91ZXR0ZX0gZnJvbSBcIi4vb2Zmc2V0L3NpbGhvdWV0dGUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzdGFja09mZnNldFdpZ2dsZX0gZnJvbSBcIi4vb2Zmc2V0L3dpZ2dsZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN0YWNrT3JkZXJBcHBlYXJhbmNlfSBmcm9tIFwiLi9vcmRlci9hcHBlYXJhbmNlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3RhY2tPcmRlckFzY2VuZGluZ30gZnJvbSBcIi4vb3JkZXIvYXNjZW5kaW5nLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc3RhY2tPcmRlckRlc2NlbmRpbmd9IGZyb20gXCIuL29yZGVyL2Rlc2NlbmRpbmcuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzdGFja09yZGVySW5zaWRlT3V0fSBmcm9tIFwiLi9vcmRlci9pbnNpZGVPdXQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzdGFja09yZGVyTm9uZX0gZnJvbSBcIi4vb3JkZXIvbm9uZS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHN0YWNrT3JkZXJSZXZlcnNlfSBmcm9tIFwiLi9vcmRlci9yZXZlcnNlLmpzXCI7XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXIuanNcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJpbXBvcnQgY3VydmVSYWRpYWwsIHtjdXJ2ZVJhZGlhbExpbmVhcn0gZnJvbSBcIi4vY3VydmUvcmFkaWFsLmpzXCI7XG5pbXBvcnQgbGluZSBmcm9tIFwiLi9saW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lUmFkaWFsKGwpIHtcbiAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuXG4gIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbGluZVJhZGlhbChsaW5lKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpKTtcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuLi9wb2ludC5qc1wiO1xuaW1wb3J0IHBvaW50UmFkaWFsIGZyb20gXCIuLi9wb2ludFJhZGlhbC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgcmV0dXJuIGQuc291cmNlO1xufVxuXG5mdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgcmV0dXJuIGQudGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBsaW5rKGN1cnZlKSB7XG4gIHZhciBzb3VyY2UgPSBsaW5rU291cmNlLFxuICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICB2YXIgYnVmZmVyLCBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0hvcml6b250YWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gIHJldHVybiBsaW5rKGN1cnZlVmVydGljYWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsKTtcbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG4gIHJldHVybiBsO1xufVxuIiwiZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciBzaW4gPSBNYXRoLnNpbjtcbmV4cG9ydCB2YXIgc3FydCA9IE1hdGguc3FydDtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciB0YXUgPSAyICogcGk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNpbih4KSB7XG4gIHJldHVybiB4ID49IDEgPyBoYWxmUGkgOiB4IDw9IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge31cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIGogPSAwLCBkLCBkeSwgeXAsIHluLCBuLCBtID0gc2VyaWVzW29yZGVyWzBdXS5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHlwID0geW4gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChkeSA9IChkID0gc2VyaWVzW29yZGVyW2ldXVtqXSlbMV0gLSBkWzBdKSA+IDApIHtcbiAgICAgICAgZFswXSA9IHlwLCBkWzFdID0geXAgKz0gZHk7XG4gICAgICB9IGVsc2UgaWYgKGR5IDwgMCkge1xuICAgICAgICBkWzFdID0geW4sIGRbMF0gPSB5biArPSBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbMF0gPSAwLCBkWzFdID0gZHk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIG4sIGogPSAwLCBtID0gc2VyaWVzWzBdLmxlbmd0aCwgeTsgaiA8IG07ICsraikge1xuICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIGlmICh5KSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzZXJpZXNbaV1bal1bMV0gLz0geTtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDEsIGosIHMwLCBzMSA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBqID0gMCwgczAgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczAubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICB9XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApIHx8ICEoKG0gPSAoczAgPSBzZXJpZXNbb3JkZXJbMF1dKS5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgeSA9IDAsIGogPSAxLCBzMCwgbSwgbjsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzMSA9IDAsIHMyID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHNpID0gc2VyaWVzW29yZGVyW2ldXSxcbiAgICAgICAgICBzaWowID0gc2lbal1bMV0gfHwgMCxcbiAgICAgICAgICBzaWoxID0gc2lbaiAtIDFdWzFdIHx8IDAsXG4gICAgICAgICAgczMgPSAoc2lqMCAtIHNpajEpIC8gMjtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaTsgKytrKSB7XG4gICAgICAgIHZhciBzayA9IHNlcmllc1tvcmRlcltrXV0sXG4gICAgICAgICAgICBza2owID0gc2tbal1bMV0gfHwgMCxcbiAgICAgICAgICAgIHNrajEgPSBza1tqIC0gMV1bMV0gfHwgMDtcbiAgICAgICAgczMgKz0gc2tqMCAtIHNrajE7XG4gICAgICB9XG4gICAgICBzMSArPSBzaWowLCBzMiArPSBzMyAqIHNpajA7XG4gICAgfVxuICAgIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICAgIGlmIChzMSkgeSAtPSBzMiAvIHMxO1xuICB9XG4gIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIHBlYWtzID0gc2VyaWVzLm1hcChwZWFrKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHBlYWtzW2FdIC0gcGVha3NbYl07IH0pO1xufVxuXG5mdW5jdGlvbiBwZWFrKHNlcmllcykge1xuICB2YXIgaSA9IC0xLCBqID0gMCwgbiA9IHNlcmllcy5sZW5ndGgsIHZpLCB2aiA9IC1JbmZpbml0eTtcbiAgd2hpbGUgKCsraSA8IG4pIGlmICgodmkgPSArc2VyaWVzW2ldWzFdKSA+IHZqKSB2aiA9IHZpLCBqID0gaTtcbiAgcmV0dXJuIGo7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgc3VtcyA9IHNlcmllcy5tYXAoc3VtKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bShzZXJpZXMpIHtcbiAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gIHJldHVybiBzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBhc2NlbmRpbmcoc2VyaWVzKS5yZXZlcnNlKCk7XG59XG4iLCJpbXBvcnQgYXBwZWFyYW5jZSBmcm9tIFwiLi9hcHBlYXJhbmNlLmpzXCI7XG5pbXBvcnQge3N1bX0gZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSksXG4gICAgICBvcmRlciA9IGFwcGVhcmFuY2Uoc2VyaWVzKSxcbiAgICAgIHRvcCA9IDAsXG4gICAgICBib3R0b20gPSAwLFxuICAgICAgdG9wcyA9IFtdLFxuICAgICAgYm90dG9tcyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBqID0gb3JkZXJbaV07XG4gICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICB0b3BzLnB1c2goaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgYm90dG9tcy5wdXNoKGopO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLCBvID0gbmV3IEFycmF5KG4pO1xuICB3aGlsZSAoLS1uID49IDApIG9bbl0gPSBuO1xuICByZXR1cm4gbztcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBub25lKHNlcmllcykucmV2ZXJzZSgpO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUsIE1hdGgubWF4KC10YXUsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbKHkgPSAreSkgKiBNYXRoLmNvcyh4IC09IE1hdGguUEkgLyAyKSwgeSAqIE1hdGguc2luKHgpXTtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBvZmZzZXROb25lIGZyb20gXCIuL29mZnNldC9ub25lLmpzXCI7XG5pbXBvcnQgb3JkZXJOb25lIGZyb20gXCIuL29yZGVyL25vbmUuanNcIjtcblxuZnVuY3Rpb24gc3RhY2tWYWx1ZShkLCBrZXkpIHtcbiAgcmV0dXJuIGRba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gY29uc3RhbnQoW10pLFxuICAgICAgb3JkZXIgPSBvcmRlck5vbmUsXG4gICAgICBvZmZzZXQgPSBvZmZzZXROb25lLFxuICAgICAgdmFsdWUgPSBzdGFja1ZhbHVlO1xuXG4gIGZ1bmN0aW9uIHN0YWNrKGRhdGEpIHtcbiAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGksXG4gICAgICAgIG0gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgc3ogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIG96O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZm9yICh2YXIga2kgPSBreltpXSwgc2kgPSBzeltpXSA9IG5ldyBBcnJheShtKSwgaiA9IDAsIHNpajsgaiA8IG07ICsraikge1xuICAgICAgICBzaVtqXSA9IHNpaiA9IFswLCArdmFsdWUoZGF0YVtqXSwga2ksIGosIGRhdGEpXTtcbiAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgfVxuICAgICAgc2kua2V5ID0ga2k7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgb3ogPSBvcmRlcihzeik7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN6W296W2ldXS5pbmRleCA9IGk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KHN6LCBveik7XG4gICAgcmV0dXJuIHN6O1xuICB9XG5cbiAgc3RhY2sua2V5cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChzbGljZS5jYWxsKF8pKSwgc3RhY2spIDoga2V5cztcbiAgfTtcblxuICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgfTtcblxuICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG9yZGVyTm9uZSA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IG9yZGVyO1xuICB9O1xuXG4gIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvZmZzZXQgPSBfID09IG51bGwgPyBvZmZzZXROb25lIDogXywgc3RhY2spIDogb2Zmc2V0O1xuICB9O1xuXG4gIHJldHVybiBzdGFjaztcbn1cbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjaXJjbGUgZnJvbSBcIi4vc3ltYm9sL2NpcmNsZS5qc1wiO1xuaW1wb3J0IGNyb3NzIGZyb20gXCIuL3N5bWJvbC9jcm9zcy5qc1wiO1xuaW1wb3J0IGRpYW1vbmQgZnJvbSBcIi4vc3ltYm9sL2RpYW1vbmQuanNcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuL3N5bWJvbC9zdGFyLmpzXCI7XG5pbXBvcnQgc3F1YXJlIGZyb20gXCIuL3N5bWJvbC9zcXVhcmUuanNcIjtcbmltcG9ydCB0cmlhbmdsZSBmcm9tIFwiLi9zeW1ib2wvdHJpYW5nbGUuanNcIjtcbmltcG9ydCB3eWUgZnJvbSBcIi4vc3ltYm9sL3d5ZS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmV4cG9ydCB2YXIgc3ltYm9scyA9IFtcbiAgY2lyY2xlLFxuICBjcm9zcyxcbiAgZGlhbW9uZCxcbiAgc3F1YXJlLFxuICBzdGFyLFxuICB0cmlhbmdsZSxcbiAgd3llXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSBjb25zdGFudChjaXJjbGUpLFxuICAgICAgc2l6ZSA9IGNvbnN0YW50KDY0KSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgYnVmZmVyO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgfTtcblxuICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzaXplID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHN5bWJvbCkgOiBzaXplO1xuICB9O1xuXG4gIHN5bWJvbC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIHN5bWJvbDtcbn1cbiIsImltcG9ydCB7cGksIHRhdX0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpKTtcbiAgICBjb250ZXh0Lm1vdmVUbyhyLCAwKTtcbiAgICBjb250ZXh0LmFyYygwLCAwLCByLCAwLCB0YXUpO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIDUpIC8gMjtcbiAgICBjb250ZXh0Lm1vdmVUbygtMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKHIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKDMgKiByLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKHIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKHIsIDMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbygtMyAqIHIsIHIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJ2YXIgdGFuMzAgPSBNYXRoLnNxcnQoMSAvIDMpLFxuICAgIHRhbjMwXzIgPSB0YW4zMCAqIDI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gTWF0aC5zcXJ0KHNpemUgLyB0YW4zMF8yKSxcbiAgICAgICAgeCA9IHkgKiB0YW4zMDtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oeCwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oMCwgeSk7XG4gICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgeCA9IC13IC8gMjtcbiAgICBjb250ZXh0LnJlY3QoeCwgeCwgdywgdyk7XG4gIH1cbn07XG4iLCJpbXBvcnQge3BpLCB0YXV9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbnZhciBrYSA9IDAuODkwODEzMDkxNTI5Mjg1MjI4MTAsXG4gICAga3IgPSBNYXRoLnNpbihwaSAvIDEwKSAvIE1hdGguc2luKDcgKiBwaSAvIDEwKSxcbiAgICBreCA9IE1hdGguc2luKHRhdSAvIDEwKSAqIGtyLFxuICAgIGt5ID0gLU1hdGguY29zKHRhdSAvIDEwKSAqIGtyO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplICoga2EpLFxuICAgICAgICB4ID0ga3ggKiByLFxuICAgICAgICB5ID0ga3kgKiByO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDU7ICsraSkge1xuICAgICAgdmFyIGEgPSB0YXUgKiBpIC8gNSxcbiAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXG4gICAgICAgICAgcyA9IE1hdGguc2luKGEpO1xuICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciBzcXJ0MyA9IE1hdGguc3FydCgzKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSAtTWF0aC5zcXJ0KHNpemUgLyAoc3FydDMgKiAzKSk7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xuICAgIGNvbnRleHQubGluZVRvKC1zcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyhzcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwidmFyIGMgPSAtMC41LFxuICAgIHMgPSBNYXRoLnNxcnQoMykgLyAyLFxuICAgIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKSxcbiAgICBhID0gKGsgLyAyICsgMSkgKiAzO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gYSksXG4gICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgIHkwID0gciAqIGssXG4gICAgICAgIHgxID0geDAsXG4gICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICB4MiA9IC14MSxcbiAgICAgICAgeTIgPSB5MTtcbiAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgIGNvbnRleHQubGluZVRvKHgxLCB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxIC0gcyAqIHkxLCBzICogeDEgKyBjICogeTEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxICsgcyAqIHkxLCBjICogeTEgLSBzICogeDEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgdGltZUZvcm1hdDtcbmV4cG9ydCB2YXIgdGltZVBhcnNlO1xuZXhwb3J0IHZhciB1dGNGb3JtYXQ7XG5leHBvcnQgdmFyIHV0Y1BhcnNlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGF0ZVRpbWU6IFwiJXgsICVYXCIsXG4gIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxuICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICBwZXJpb2RzOiBbXCJBTVwiLCBcIlBNXCJdLFxuICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICB0aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgdGltZVBhcnNlID0gbG9jYWxlLnBhcnNlO1xuICB1dGNGb3JtYXQgPSBsb2NhbGUudXRjRm9ybWF0O1xuICB1dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyB0aW1lRm9ybWF0RGVmYXVsdExvY2FsZSwgdGltZUZvcm1hdCwgdGltZVBhcnNlLCB1dGNGb3JtYXQsIHV0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdGltZUZvcm1hdExvY2FsZX0gZnJvbSBcIi4vbG9jYWxlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaXNvRm9ybWF0fSBmcm9tIFwiLi9pc29Gb3JtYXQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpc29QYXJzZX0gZnJvbSBcIi4vaXNvUGFyc2UuanNcIjtcbiIsImltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmV4cG9ydCB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IHV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRJc287XG4iLCJpbXBvcnQge2lzb1NwZWNpZmllcn0gZnJvbSBcIi4vaXNvRm9ybWF0LmpzXCI7XG5pbXBvcnQge3V0Y1BhcnNlfSBmcm9tIFwiLi9kZWZhdWx0TG9jYWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiB1dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZUlzbztcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld0RhdGUoeSwgbSwgZCkge1xuICByZXR1cm4ge3k6IHksIG06IG0sIGQ6IGQsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0UXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcInFcIjogcGFyc2VRdWFydGVyLFxuICAgIFwiUVwiOiBwYXJzZVVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IHBhcnNlU2Vjb25kcyxcbiAgICBcInVcIjogcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IHBhcnNlV2Vla051bWJlcklTTyxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgWikge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3RGF0ZSgxOTAwLCB1bmRlZmluZWQsIDEpLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcbiAgICAgIGlmIChcInNcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5zICogMTAwMCArIChcIkxcIiBpbiBkID8gZC5MIDogMCkpO1xuXG4gICAgICAvLyBJZiB0aGlzIGlzIHV0Y1BhcnNlLCBuZXZlciB1c2UgdGhlIGxvY2FsIHRpbWV6b25lLlxuICAgICAgaWYgKFogJiYgIShcIlpcIiBpbiBkKSkgZC5aID0gMDtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBJZiB0aGUgbW9udGggd2FzIG5vdCBzcGVjaWZpZWQsIGluaGVyaXQgZnJvbSB0aGUgcXVhcnRlci5cbiAgICAgIGlmIChkLm0gPT09IHVuZGVmaW5lZCkgZC5tID0gXCJxXCIgaW4gZCA/IGQucSA6IDA7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSksIGRheSA9IHdlZWsuZ2V0RGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdGltZU1vbmRheS5jZWlsKHdlZWspIDogdGltZU1vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdGltZURheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0TW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldERhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcInVcIiBpbiBkID8gZC51ICUgNyA6IFwiV1wiIGluIGQgPyAxIDogMDtcbiAgICAgICAgZGF5ID0gXCJaXCIgaW4gZCA/IHV0Y0RhdGUobmV3RGF0ZShkLnksIDAsIDEpKS5nZXRVVENEYXkoKSA6IGxvY2FsRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbG9jYWxEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFF1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRNb250aCgpIC8gMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENRdWFydGVyKGQpIHtcbiAgICByZXR1cm4gMSArIH5+KGQuZ2V0VVRDTW9udGgoKSAvIDMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xuICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIGY7XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciArPSBcIlwiLCBmYWxzZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIHRydWUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VRdWFydGVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQucSA9IG5bMF0gKiAzIC0gMywgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vbnRoTnVtYmVyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhvdXIyNChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWlsbGlzZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWljcm9zZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuTCA9IE1hdGguZmxvb3IoblswXSAvIDEwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLnMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIHRpbWVEYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIGRheSA9PT0gMCA/IDcgOiBkYXk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVTdW5kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHV0Y1RodXJzZGF5KGQpIDogdXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZCh1dGNUaHVyc2RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSArICh1dGNZZWFyKGQpLmdldFVUQ0RheSgpID09PSA0KSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkoZCkge1xuICByZXR1cm4gZC5nZXRVVENEYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91ciwgZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuXG52YXIgaG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCAtIGRhdGUuZ2V0TWludXRlcygpICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgaG91cjtcbmV4cG9ydCB2YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuIiwiZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB0aW1lSW50ZXJ2YWxcbn0gZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB0aW1lTWlsbGlzZWNvbmQsXG4gIG1pbGxpc2Vjb25kcyBhcyB0aW1lTWlsbGlzZWNvbmRzLFxuICBkZWZhdWx0IGFzIHV0Y01pbGxpc2Vjb25kLFxuICBtaWxsaXNlY29uZHMgYXMgdXRjTWlsbGlzZWNvbmRzXG59IGZyb20gXCIuL21pbGxpc2Vjb25kLmpzXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgdGltZVNlY29uZCxcbiAgc2Vjb25kcyBhcyB0aW1lU2Vjb25kcyxcbiAgZGVmYXVsdCBhcyB1dGNTZWNvbmQsXG4gIHNlY29uZHMgYXMgdXRjU2Vjb25kc1xufSBmcm9tIFwiLi9zZWNvbmQuanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB0aW1lTWludXRlLFxuICBtaW51dGVzIGFzIHRpbWVNaW51dGVzXG59IGZyb20gXCIuL21pbnV0ZS5qc1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHRpbWVIb3VyLFxuICBob3VycyBhcyB0aW1lSG91cnNcbn0gZnJvbSBcIi4vaG91ci5qc1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHRpbWVEYXksXG4gIGRheXMgYXMgdGltZURheXNcbn0gZnJvbSBcIi4vZGF5LmpzXCI7XG5cbmV4cG9ydCB7XG4gIHN1bmRheSBhcyB0aW1lV2VlayxcbiAgc3VuZGF5cyBhcyB0aW1lV2Vla3MsXG4gIHN1bmRheSBhcyB0aW1lU3VuZGF5LFxuICBzdW5kYXlzIGFzIHRpbWVTdW5kYXlzLFxuICBtb25kYXkgYXMgdGltZU1vbmRheSxcbiAgbW9uZGF5cyBhcyB0aW1lTW9uZGF5cyxcbiAgdHVlc2RheSBhcyB0aW1lVHVlc2RheSxcbiAgdHVlc2RheXMgYXMgdGltZVR1ZXNkYXlzLFxuICB3ZWRuZXNkYXkgYXMgdGltZVdlZG5lc2RheSxcbiAgd2VkbmVzZGF5cyBhcyB0aW1lV2VkbmVzZGF5cyxcbiAgdGh1cnNkYXkgYXMgdGltZVRodXJzZGF5LFxuICB0aHVyc2RheXMgYXMgdGltZVRodXJzZGF5cyxcbiAgZnJpZGF5IGFzIHRpbWVGcmlkYXksXG4gIGZyaWRheXMgYXMgdGltZUZyaWRheXMsXG4gIHNhdHVyZGF5IGFzIHRpbWVTYXR1cmRheSxcbiAgc2F0dXJkYXlzIGFzIHRpbWVTYXR1cmRheXNcbn0gZnJvbSBcIi4vd2Vlay5qc1wiO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIHRpbWVNb250aCxcbiAgbW9udGhzIGFzIHRpbWVNb250aHNcbn0gZnJvbSBcIi4vbW9udGguanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB0aW1lWWVhcixcbiAgeWVhcnMgYXMgdGltZVllYXJzXG59IGZyb20gXCIuL3llYXIuanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB1dGNNaW51dGUsXG4gIHV0Y01pbnV0ZXMgYXMgdXRjTWludXRlc1xufSBmcm9tIFwiLi91dGNNaW51dGUuanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB1dGNIb3VyLFxuICB1dGNIb3VycyBhcyB1dGNIb3Vyc1xufSBmcm9tIFwiLi91dGNIb3VyLmpzXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgdXRjRGF5LFxuICB1dGNEYXlzIGFzIHV0Y0RheXNcbn0gZnJvbSBcIi4vdXRjRGF5LmpzXCI7XG5cbmV4cG9ydCB7XG4gIHV0Y1N1bmRheSBhcyB1dGNXZWVrLFxuICB1dGNTdW5kYXlzIGFzIHV0Y1dlZWtzLFxuICB1dGNTdW5kYXkgYXMgdXRjU3VuZGF5LFxuICB1dGNTdW5kYXlzIGFzIHV0Y1N1bmRheXMsXG4gIHV0Y01vbmRheSBhcyB1dGNNb25kYXksXG4gIHV0Y01vbmRheXMgYXMgdXRjTW9uZGF5cyxcbiAgdXRjVHVlc2RheSBhcyB1dGNUdWVzZGF5LFxuICB1dGNUdWVzZGF5cyBhcyB1dGNUdWVzZGF5cyxcbiAgdXRjV2VkbmVzZGF5IGFzIHV0Y1dlZG5lc2RheSxcbiAgdXRjV2VkbmVzZGF5cyBhcyB1dGNXZWRuZXNkYXlzLFxuICB1dGNUaHVyc2RheSBhcyB1dGNUaHVyc2RheSxcbiAgdXRjVGh1cnNkYXlzIGFzIHV0Y1RodXJzZGF5cyxcbiAgdXRjRnJpZGF5IGFzIHV0Y0ZyaWRheSxcbiAgdXRjRnJpZGF5cyBhcyB1dGNGcmlkYXlzLFxuICB1dGNTYXR1cmRheSBhcyB1dGNTYXR1cmRheSxcbiAgdXRjU2F0dXJkYXlzIGFzIHV0Y1NhdHVyZGF5c1xufSBmcm9tIFwiLi91dGNXZWVrLmpzXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgdXRjTW9udGgsXG4gIHV0Y01vbnRocyBhcyB1dGNNb250aHNcbn0gZnJvbSBcIi4vdXRjTW9udGguanNcIjtcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyB1dGNZZWFyLFxuICB1dGNZZWFycyBhcyB1dGNZZWFyc1xufSBmcm9tIFwiLi91dGNZZWFyLmpzXCI7XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwID8gbmV3IERhdGUgOiBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBtaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWludXRlO1xuZXhwb3J0IHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXl9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNEYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0RheTtcbmV4cG9ydCB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXJ9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNIb3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01pbnV0ZXMoMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNIb3VyO1xuZXhwb3J0IHZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbnZhciB1dGNNaW51dGUgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y01pbnV0ZTtcbmV4cG9ydCB2YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbC5qc1wiO1xuXG52YXIgdXRjWWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG51dGNZZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjWWVhcjtcbmV4cG9ydCB2YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsLmpzXCI7XG5cbnZhciB5ZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnllYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB5ZWFyO1xuZXhwb3J0IHZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG4iLCJleHBvcnQge1xuICBub3csXG4gIHRpbWVyLFxuICB0aW1lckZsdXNoXG59IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgdGltZW91dFxufSBmcm9tIFwiLi90aW1lb3V0LmpzXCI7XG5cbmV4cG9ydCB7XG4gIGRlZmF1bHQgYXMgaW50ZXJ2YWxcbn0gZnJvbSBcIi4vaW50ZXJ2YWwuanNcIjtcbiIsImltcG9ydCB7VGltZXIsIG5vd30gZnJvbSBcIi4vdGltZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyLCB0b3RhbCA9IGRlbGF5O1xuICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XG4gIHQucmVzdGFydChmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICBlbGFwc2VkICs9IHRvdGFsO1xuICAgIHQucmVzdGFydCh0aWNrLCB0b3RhbCArPSBkZWxheSwgdGltZSk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQge1NDSEVEVUxFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG52YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGk7XG5cbiAgaWYgKHNjaGVkdWxlcykge1xuICAgIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkuc3RhdGUgPiBTQ0hFRFVMRUQgJiYgc2NoZWR1bGUubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oW1tub2RlXV0sIHJvb3QsIG5hbWUsICtpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBcIi4vc2VsZWN0aW9uL2luZGV4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgdHJhbnNpdGlvbn0gZnJvbSBcIi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGFjdGl2ZX0gZnJvbSBcIi4vYWN0aXZlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJydXB0fSBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXkuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0VHdlZW4gZnJvbSBcIi4vdGV4dFR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kLmpzXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgdGV4dFR3ZWVuOiB0cmFuc2l0aW9uX3RleHRUd2VlbixcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQge2ludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJnYiwgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjO1xuICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gaW50ZXJwb2xhdGVOdW1iZXJcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQobm9kZSwgaWQwKTtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQxLCBpLCBncm91cCwge1xuICAgICAgICAgIHRpbWU6IGluaGVyaXQudGltZSArIGluaGVyaXQuZGVsYXkgKyBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgIGR1cmF0aW9uOiBpbmhlcml0LmR1cmF0aW9uLFxuICAgICAgICAgIGVhc2U6IGluaGVyaXQuZWFzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y3JlYXRlQ2VsbH0gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHthdHRhY2hDaXJjbGUsIGRldGFjaENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NyZWF0ZUVkZ2UsIHNldEVkZ2VFbmR9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7YmVhY2hlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUJlYWNoKGJlYWNoKSB7XG4gIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICB4ID0gY2lyY2xlLngsXG4gICAgICB5ID0gY2lyY2xlLmN5LFxuICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgcHJldmlvdXMgPSBiZWFjaC5QLFxuICAgICAgbmV4dCA9IGJlYWNoLk4sXG4gICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gIGRldGFjaEJlYWNoKGJlYWNoKTtcblxuICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICB3aGlsZSAobEFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSBsQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvblxuICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24pIHtcbiAgICBuZXh0ID0gckFyYy5OO1xuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaEJlYWNoKHJBcmMpO1xuICAgIHJBcmMgPSBuZXh0O1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbkFyY3MgPSBkaXNhcHBlYXJpbmcubGVuZ3RoLFxuICAgICAgaUFyYztcbiAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW2lBcmNdO1xuICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xuICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgfVxuXG4gIGxBcmMgPSBkaXNhcHBlYXJpbmdbMF07XG4gIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcblxuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uKSBub2RlID0gbm9kZS5MOyBlbHNlIHtcbiAgICAgIGR4ciA9IHggLSByaWdodEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KTtcbiAgICAgIGlmIChkeHIgPiBlcHNpbG9uKSB7XG4gICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUuUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbikge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxBcmMgPSByQXJjID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxsKHNpdGUpO1xuICB2YXIgbmV3QXJjID0gY3JlYXRlQmVhY2goc2l0ZSk7XG4gIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XG5cbiAgaWYgKGxBcmMgPT09IHJBcmMpIHtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgckFyYyA9IGNyZWF0ZUJlYWNoKGxBcmMuc2l0ZSk7XG4gICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcbiAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXJBcmMpIHsgLy8gJiYgbEFyY1xuICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlbHNlIGxBcmMgIT09IHJBcmNcbiAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgIGF5ID0gbFNpdGVbMV0sXG4gICAgICBieCA9IHNpdGVbMF0gLSBheCxcbiAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgclNpdGUgPSByQXJjLnNpdGUsXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYXgsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXG4gICAgICBoYiA9IGJ4ICogYnggKyBieSAqIGJ5LFxuICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcblxuICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xuICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xufVxuXG5mdW5jdGlvbiBsZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgcmZvY3ggPSBzaXRlWzBdLFxuICAgICAgcmZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuXG4gIHZhciBsQXJjID0gYXJjLlA7XG4gIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICBzaXRlID0gbEFyYy5zaXRlO1xuICB2YXIgbGZvY3ggPSBzaXRlWzBdLFxuICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG5cbiAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgIGFieTIgPSAxIC8gcGJ5MiAtIDEgLyBwbGJ5MixcbiAgICAgIGIgPSBobCAvIHBsYnkyO1xuXG4gIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcbn1cblxuZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciByQXJjID0gYXJjLk47XG4gIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgcmV0dXJuIHNpdGVbMV0gPT09IGRpcmVjdHJpeCA/IHNpdGVbMF0gOiBJbmZpbml0eTtcbn1cbiIsImltcG9ydCB7Y3JlYXRlQm9yZGVyRWRnZX0gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCA9PT0gY2VsbC5zaXRlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBuQ2VsbHMgPSBjZWxscy5sZW5ndGgsXG4gICAgICBpQ2VsbCxcbiAgICAgIGNlbGwsXG4gICAgICBzaXRlLFxuICAgICAgaUhhbGZlZGdlLFxuICAgICAgaGFsZmVkZ2VzLFxuICAgICAgbkhhbGZlZGdlcyxcbiAgICAgIHN0YXJ0LFxuICAgICAgc3RhcnRYLFxuICAgICAgc3RhcnRZLFxuICAgICAgZW5kLFxuICAgICAgZW5kWCxcbiAgICAgIGVuZFksXG4gICAgICBjb3ZlciA9IHRydWU7XG5cbiAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICBoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcztcbiAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UtLSkge1xuICAgICAgICBpZiAoIWVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSkge1xuICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpSGFsZmVkZ2UgPCBuSGFsZmVkZ2VzKSB7XG4gICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGVuZFggLSBzdGFydFgpID4gZXBzaWxvbiB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24gJiYgeTEgLSBlbmRZID4gZXBzaWxvbiA/IFt4MCwgTWF0aC5hYnMoc3RhcnRYIC0geDApIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uICYmIHgxIC0gZW5kWCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiAmJiBlbmRZIC0geTAgPiBlcHNpbG9uID8gW3gxLCBNYXRoLmFicyhzdGFydFggLSB4MSkgPCBlcHNpbG9uID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24gJiYgZW5kWCAtIHgwID4gZXBzaWxvbiA/IFtNYXRoLmFicyhzdGFydFkgLSB5MCkgPCBlcHNpbG9uID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtSZWRCbGFja05vZGV9IGZyb20gXCIuL1JlZEJsYWNrVHJlZVwiO1xuaW1wb3J0IHtjaXJjbGVzLCBlcHNpbG9uMn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG5leHBvcnQgdmFyIGZpcnN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBDaXJjbGUoKSB7XG4gIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgdGhpcy54ID1cbiAgdGhpcy55ID1cbiAgdGhpcy5hcmMgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmN5ID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgIHJBcmMgPSBhcmMuTjtcblxuICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBjU2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgclNpdGUgPSByQXJjLnNpdGU7XG5cbiAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gIHZhciBieCA9IGNTaXRlWzBdLFxuICAgICAgYnkgPSBjU2l0ZVsxXSxcbiAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgIGF5ID0gbFNpdGVbMV0gLSBieSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICBpZiAoZCA+PSAtZXBzaWxvbjIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcbiAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gIGlmIChjaXJjbGUpIHtcbiAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xuICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgY2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XG4gICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7YWRkQmVhY2gsIHJlbW92ZUJlYWNofSBmcm9tIFwiLi9CZWFjaFwiO1xuaW1wb3J0IHtzb3J0Q2VsbEhhbGZlZGdlcywgY2VsbEhhbGZlZGdlU3RhcnQsIGNsaXBDZWxsc30gZnJvbSBcIi4vQ2VsbFwiO1xuaW1wb3J0IHtmaXJzdENpcmNsZX0gZnJvbSBcIi4vQ2lyY2xlXCI7XG5pbXBvcnQge2NsaXBFZGdlc30gZnJvbSBcIi4vRWRnZVwiO1xuaW1wb3J0IFJlZEJsYWNrVHJlZSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcblxuZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgYmVhY2hlcztcbmV4cG9ydCB2YXIgY2VsbHM7XG5leHBvcnQgdmFyIGNpcmNsZXM7XG5leHBvcnQgdmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHtjZWxscywgZWRnZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVkZ2UobGVmdCwgcmlnaHQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFtudWxsLCBudWxsXSxcbiAgICAgIGluZGV4ID0gZWRnZXMucHVzaChlZGdlKSAtIDE7XG4gIGVkZ2UubGVmdCA9IGxlZnQ7XG4gIGVkZ2UucmlnaHQgPSByaWdodDtcbiAgaWYgKHYwKSBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2MCk7XG4gIGlmICh2MSkgc2V0RWRnZUVuZChlZGdlLCByaWdodCwgbGVmdCwgdjEpO1xuICBjZWxsc1tsZWZ0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gIGNlbGxzW3JpZ2h0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gIHJldHVybiBlZGdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbdjAsIHYxXTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2ZXJ0ZXgpIHtcbiAgaWYgKCFlZGdlWzBdICYmICFlZGdlWzFdKSB7XG4gICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICBlZGdlLmxlZnQgPSBsZWZ0O1xuICAgIGVkZ2UucmlnaHQgPSByaWdodDtcbiAgfSBlbHNlIGlmIChlZGdlLmxlZnQgPT09IHJpZ2h0KSB7XG4gICAgZWRnZVsxXSA9IHZlcnRleDtcbiAgfSBlbHNlIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICB9XG59XG5cbi8vIExpYW5n4oCTQmFyc2t5IGxpbmUgY2xpcHBpbmcuXG5mdW5jdGlvbiBjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYSA9IGVkZ2VbMF0sXG4gICAgICBiID0gZWRnZVsxXSxcbiAgICAgIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIHQwID0gMCxcbiAgICAgIHQxID0gMSxcbiAgICAgIGR4ID0gYnggLSBheCxcbiAgICAgIGR5ID0gYnkgLSBheSxcbiAgICAgIHI7XG5cbiAgciA9IHgwIC0gYXg7XG4gIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB4MSAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICByID0geTAgLSBheTtcbiAgaWYgKCFkeSAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHkxIC0gYXk7XG4gIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIGlmICghKHQwID4gMCkgJiYgISh0MSA8IDEpKSByZXR1cm4gdHJ1ZTsgLy8gVE9ETyBCZXR0ZXIgY2hlY2s/XG5cbiAgaWYgKHQwID4gMCkgZWRnZVswXSA9IFtheCArIHQwICogZHgsIGF5ICsgdDAgKiBkeV07XG4gIGlmICh0MSA8IDEpIGVkZ2VbMV0gPSBbYXggKyB0MSAqIGR4LCBheSArIHQxICogZHldO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIHYxID0gZWRnZVsxXTtcbiAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgdjAgPSBlZGdlWzBdLFxuICAgICAgbGVmdCA9IGVkZ2UubGVmdCxcbiAgICAgIHJpZ2h0ID0gZWRnZS5yaWdodCxcbiAgICAgIGx4ID0gbGVmdFswXSxcbiAgICAgIGx5ID0gbGVmdFsxXSxcbiAgICAgIHJ4ID0gcmlnaHRbMF0sXG4gICAgICByeSA9IHJpZ2h0WzFdLFxuICAgICAgZnggPSAobHggKyByeCkgLyAyLFxuICAgICAgZnkgPSAobHkgKyByeSkgLyAyLFxuICAgICAgZm0sXG4gICAgICBmYjtcblxuICBpZiAocnkgPT09IGx5KSB7XG4gICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICBpZiAobHggPiByeCkge1xuICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkwXTtcbiAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTFdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgdjEgPSBbZngsIHkwXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm0gPSAobHggLSByeCkgLyAocnkgLSBseSk7XG4gICAgZmIgPSBmeSAtIGZtICogZng7XG4gICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICBpZiAobHggPiByeCkge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xuICAgICAgICB2MSA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobHkgPCByeSkge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MCwgZm0gKiB4MCArIGZiXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMF0gPj0geDEpIHJldHVybjtcbiAgICAgICAgdjEgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgICAgZWxzZSBpZiAodjBbMF0gPCB4MCkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MCwgZm0gKiB4MCArIGZiXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlZGdlWzBdID0gdjA7XG4gIGVkZ2VbMV0gPSB2MTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIGkgPSBlZGdlcy5sZW5ndGgsXG4gICAgICBlZGdlO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoIWNvbm5lY3RFZGdlKGVkZ2UgPSBlZGdlc1tpXSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICFjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIShNYXRoLmFicyhlZGdlWzBdWzBdIC0gZWRnZVsxXVswXSkgPiBlcHNpbG9uXG4gICAgICAgICAgICB8fCBNYXRoLmFicyhlZGdlWzBdWzFdIC0gZWRnZVsxXVsxXSkgPiBlcHNpbG9uKSkge1xuICAgICAgZGVsZXRlIGVkZ2VzW2ldO1xuICAgIH1cbiAgfVxufVxuIiwiZnVuY3Rpb24gUmVkQmxhY2tUcmVlKCkge1xuICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gIG5vZGUuVSA9IC8vIHBhcmVudCBub2RlXG4gIG5vZGUuQyA9IC8vIGNvbG9yIC0gdHJ1ZSBmb3IgcmVkLCBmYWxzZSBmb3IgYmxhY2tcbiAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gIG5vZGUuUiA9IC8vIHJpZ2h0IG5vZGVcbiAgbm9kZS5QID0gLy8gcHJldmlvdXMgbm9kZVxuICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbn1cblxuUmVkQmxhY2tUcmVlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uKGFmdGVyLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XG5cbiAgICBpZiAoYWZ0ZXIpIHtcbiAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgbm9kZS5OID0gYWZ0ZXIuTjtcbiAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xuICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICBpZiAoYWZ0ZXIuUikge1xuICAgICAgICBhZnRlciA9IGFmdGVyLlI7XG4gICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgIGFmdGVyLkwgPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICBub2RlLlAgPSBudWxsO1xuICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBhZnRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgIHRoaXMuXyA9IG5vZGU7XG4gICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xuICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgYWZ0ZXIgPSBub2RlO1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcbiAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgIGlmIChwYXJlbnQgPT09IGdyYW5kcGEuTCkge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICBpZiAodW5jbGUgJiYgdW5jbGUuQykge1xuICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgYWZ0ZXIgPSBncmFuZHBhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xuICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBncmFuZHBhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICB9XG4gICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcbiAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICBub2RlLk4gPSBub2RlLlAgPSBudWxsO1xuXG4gICAgdmFyIHBhcmVudCA9IG5vZGUuVSxcbiAgICAgICAgc2libGluZyxcbiAgICAgICAgbGVmdCA9IG5vZGUuTCxcbiAgICAgICAgcmlnaHQgPSBub2RlLlIsXG4gICAgICAgIG5leHQsXG4gICAgICAgIHJlZDtcblxuICAgIGlmICghbGVmdCkgbmV4dCA9IHJpZ2h0O1xuICAgIGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7XG4gICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDtcbiAgICAgIGVsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl8gPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChsZWZ0ICYmIHJpZ2h0KSB7XG4gICAgICByZWQgPSBuZXh0LkM7XG4gICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICBuZXh0LkwgPSBsZWZ0O1xuICAgICAgbGVmdC5VID0gbmV4dDtcbiAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICBwYXJlbnQgPSBuZXh0LlU7XG4gICAgICAgIG5leHQuVSA9IG5vZGUuVTtcbiAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgcGFyZW50LkwgPSBub2RlO1xuICAgICAgICBuZXh0LlIgPSByaWdodDtcbiAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZCA9IG5vZGUuQztcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgaWYgKHJlZCkgcmV0dXJuO1xuICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XG5cbiAgICBkbyB7XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5fKSBicmVhaztcbiAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgICAgfHwgKHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykpIHtcbiAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl87XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgaWYgKHNpYmxpbmcuQykge1xuICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xuICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc2libGluZy5MICYmIHNpYmxpbmcuTC5DKVxuICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLkwgfHwgIXNpYmxpbmcuTC5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XG4gICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5VO1xuICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZWRCbGFja1JvdGF0ZUxlZnQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5SLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLlIgPSBxLkw7XG4gIGlmIChwLlIpIHAuUi5VID0gcDtcbiAgcS5MID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVSaWdodCh0cmVlLCBub2RlKSB7XG4gIHZhciBwID0gbm9kZSxcbiAgICAgIHEgPSBub2RlLkwsXG4gICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xuICAgIGVsc2UgcGFyZW50LlIgPSBxO1xuICB9IGVsc2Uge1xuICAgIHRyZWUuXyA9IHE7XG4gIH1cblxuICBxLlUgPSBwYXJlbnQ7XG4gIHAuVSA9IHE7XG4gIHAuTCA9IHEuUjtcbiAgaWYgKHAuTCkgcC5MLlUgPSBwO1xuICBxLlIgPSBwO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZEJsYWNrVHJlZTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IHtkZWZhdWx0IGFzIHZvcm9ub2l9IGZyb20gXCIuL3Zvcm9ub2lcIjtcbiIsImV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuaW1wb3J0IERpYWdyYW0sIHtlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBleHRlbnQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xuICAgIHJldHVybiBuZXcgRGlhZ3JhbShkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICB2YXIgcyA9IFtNYXRoLnJvdW5kKHgoZCwgaSwgZGF0YSkgLyBlcHNpbG9uKSAqIGVwc2lsb24sIE1hdGgucm91bmQoeShkLCBpLCBkYXRhKSAvIGVwc2lsb24pICogZXBzaWxvbl07XG4gICAgICBzLmluZGV4ID0gaTtcbiAgICAgIHMuZGF0YSA9IGQ7XG4gICAgICByZXR1cm4gcztcbiAgICB9KSwgZXh0ZW50KTtcbiAgfVxuXG4gIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkucG9seWdvbnMoKTtcbiAgfTtcblxuICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XG4gIH07XG5cbiAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkudHJpYW5nbGVzKCk7XG4gIH07XG5cbiAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgdm9yb25vaSkgOiB4O1xuICB9O1xuXG4gIHZvcm9ub2kueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHZvcm9ub2kpIDogeTtcbiAgfTtcblxuICB2b3Jvbm9pLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtbZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV1dLCBbZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB2b3Jvbm9pLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbMCwgMF0sIFsrX1swXSwgK19bMV1dXSwgdm9yb25vaSkgOiBleHRlbnQgJiYgW2V4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdXTtcbiAgfTtcblxuICByZXR1cm4gdm9yb25vaTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyB6b29tfSBmcm9tIFwiLi96b29tLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgem9vbVRyYW5zZm9ybSwgaWRlbnRpdHkgYXMgem9vbUlkZW50aXR5fSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbiIsImltcG9ydCB7ZXZlbnR9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxudHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX3pvb20pIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHJldHVybiBub2RlLl9fem9vbTtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVab29tfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7ZXZlbnQsIGN1c3RvbUV2ZW50LCBzZWxlY3QsIG1vdXNlLCB0b3VjaH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtpbnRlcnJ1cHR9IGZyb20gXCJkMy10cmFuc2l0aW9uXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBab29tRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCB7VHJhbnNmb3JtLCBpZGVudGl0eX0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIGUgPSB0aGlzO1xuICBpZiAoZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICBpZiAoZS5oYXNBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpKSB7XG4gICAgICBlID0gZS52aWV3Qm94LmJhc2VWYWw7XG4gICAgICByZXR1cm4gW1tlLngsIGUueV0sIFtlLnggKyBlLndpZHRoLCBlLnkgKyBlLmhlaWdodF1dO1xuICAgIH1cbiAgICByZXR1cm4gW1swLCAwXSwgW2Uud2lkdGguYmFzZVZhbC52YWx1ZSwgZS5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbZS5jbGllbnRXaWR0aCwgZS5jbGllbnRIZWlnaHRdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgcmV0dXJuIHRoaXMuX196b29tIHx8IGlkZW50aXR5O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0V2hlZWxEZWx0YSgpIHtcbiAgcmV0dXJuIC1ldmVudC5kZWx0YVkgKiAoZXZlbnQuZGVsdGFNb2RlID09PSAxID8gMC4wNSA6IGV2ZW50LmRlbHRhTW9kZSA/IDEgOiAwLjAwMik7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkge1xuICB2YXIgZHgwID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVswXSxcbiAgICAgIGR4MSA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMF0sXG4gICAgICBkeTAgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzFdLFxuICAgICAgZHkxID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVsxXTtcbiAgcmV0dXJuIHRyYW5zZm9ybS50cmFuc2xhdGUoXG4gICAgZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLFxuICAgIGR5MSA+IGR5MCA/IChkeTAgKyBkeTEpIC8gMiA6IE1hdGgubWluKDAsIGR5MCkgfHwgTWF0aC5tYXgoMCwgZHkxKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgY29uc3RyYWluID0gZGVmYXVsdENvbnN0cmFpbixcbiAgICAgIHdoZWVsRGVsdGEgPSBkZWZhdWx0V2hlZWxEZWx0YSxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgdG91Y2hzdGFydGluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgdG91Y2hEZWxheSA9IDUwMCxcbiAgICAgIHdoZWVsRGVsYXkgPSAxNTAsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pXG4gICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgIC5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IGNvbGxlY3Rpb24uc2VsZWN0aW9uID8gY29sbGVjdGlvbi5zZWxlY3Rpb24oKSA6IGNvbGxlY3Rpb247XG4gICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgIGlmIChjb2xsZWN0aW9uICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHNjaGVkdWxlKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24uaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0pXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwKSB7XG4gICAgem9vbS5zY2FsZVRvKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gazAgKiBrMTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICB6b29tLnNjYWxlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHApIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcCxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBwKSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcDtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkudHJhbnNsYXRlKHAwWzBdLCBwMFsxXSkuc2NhbGUodC5rKS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyAteC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyAteS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXlcbiAgICAgICksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgaykpO1xuICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgIHZhciB4ID0gcDBbMF0gLSBwMVswXSAqIHRyYW5zZm9ybS5rLCB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybS5rO1xuICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiwgdHJhbnNmb3JtLCBwb2ludCkge1xuICAgIHRyYW5zaXRpb25cbiAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLnN0YXJ0KCk7IH0pXG4gICAgICAgIC5vbihcImludGVycnVwdC56b29tIGVuZC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7IH0pXG4gICAgICAgIC50d2VlbihcInpvb21cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICBnID0gZ2VzdHVyZSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgcCA9IHBvaW50ID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwb2ludCA9PT0gXCJmdW5jdGlvblwiID8gcG9pbnQuYXBwbHkodGhhdCwgYXJncykgOiBwb2ludCxcbiAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KGVbMV1bMF0gLSBlWzBdWzBdLCBlWzFdWzFdIC0gZVswXVsxXSksXG4gICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgYiA9IHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGF0LCBhcmdzKSA6IHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxuICAgICAgICAgICAgZy56b29tKG51bGwsIHQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHJldHVybiAoIWNsZWFuICYmIHRoYXQuX196b29taW5nKSB8fCBuZXcgR2VzdHVyZSh0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgdGhpcy50YXBzID0gMDtcbiAgfVxuXG4gIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB7XG4gICAgICAgIHRoaXMudGhhdC5fX3pvb21pbmcgPSB0aGlzO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGhhdC5fX3pvb21pbmc7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgY3VzdG9tRXZlbnQobmV3IFpvb21FdmVudCh6b29tLCB0eXBlLCB0aGlzLnRoYXQuX196b29tKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB3aGVlbGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCB0LmsgKiBNYXRoLnBvdygyLCB3aGVlbERlbHRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSksXG4gICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgIC8vIElmIHRoZXJlIHdlcmUgcmVjZW50IHdoZWVsIGV2ZW50cywgcmVzZXQgdGhlIHdoZWVsIGlkbGUgdGltZW91dC5cbiAgICBpZiAoZy53aGVlbCkge1xuICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICBnLm1vdXNlWzFdID0gdC5pbnZlcnQoZy5tb3VzZVswXSA9IHApO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgIGVsc2Uge1xuICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbm9ldmVudCgpO1xuICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG5cbiAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzLCB0cnVlKSxcbiAgICAgICAgdiA9IHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICBwID0gbW91c2UodGhpcyksXG4gICAgICAgIHgwID0gZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTAgPSBldmVudC5jbGllbnRZO1xuXG4gICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgIG5vZXZlbnQoKTtcbiAgICAgIGlmICghZy5tb3ZlZCkge1xuICAgICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0geDAsIGR5ID0gZXZlbnQuY2xpZW50WSAtIHkwO1xuICAgICAgICBnLm1vdmVkID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IG1vdXNlKGcudGhhdCksIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcbiAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgZy5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgcDAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuXG4gICAgbm9ldmVudCgpO1xuICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCk7XG4gICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCxcbiAgICAgICAgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzLCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPT09IG4pLFxuICAgICAgICBzdGFydGVkLCBpLCB0LCBwO1xuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcbiAgICAgIHAgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApLCB0LmlkZW50aWZpZXJdO1xuICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwLCBzdGFydGVkID0gdHJ1ZSwgZy50YXBzID0gMSArICEhdG91Y2hzdGFydGluZztcbiAgICAgIGVsc2UgaWYgKCFnLnRvdWNoMSAmJiBnLnRvdWNoMFsyXSAhPT0gcFsyXSkgZy50b3VjaDEgPSBwLCBnLnRhcHMgPSAwO1xuICAgIH1cblxuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuXG4gICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIGlmIChnLnRhcHMgPCAyKSB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdCwgcCwgbDtcblxuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAodG91Y2hzdGFydGluZykgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICBnLnRhcHMgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMVswXSA9IHA7XG4gICAgfVxuICAgIHQgPSBnLnRoYXQuX196b29tO1xuICAgIGlmIChnLnRvdWNoMSkge1xuICAgICAgdmFyIHAwID0gZy50b3VjaDBbMF0sIGwwID0gZy50b3VjaDBbMV0sXG4gICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcbiAgICAgICAgICBkcCA9IChkcCA9IHAxWzBdIC0gcDBbMF0pICogZHAgKyAoZHAgPSBwMVsxXSAtIHAwWzFdKSAqIGRwLFxuICAgICAgICAgIGRsID0gKGRsID0gbDFbMF0gLSBsMFswXSkgKiBkbCArIChkbCA9IGwxWzFdIC0gbDBbMV0pICogZGw7XG4gICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcbiAgICAgIHAgPSBbKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMl07XG4gICAgICBsID0gWyhsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDJdO1xuICAgIH1cbiAgICBlbHNlIGlmIChnLnRvdWNoMCkgcCA9IGcudG91Y2gwWzBdLCBsID0gZy50b3VjaDBbMV07XG4gICAgZWxzZSByZXR1cm47XG4gICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xuXG4gICAgbm9wcm9wYWdhdGlvbigpO1xuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gxO1xuICAgIH1cbiAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgaWYgKGcudG91Y2gwKSBnLnRvdWNoMFsxXSA9IHRoaXMuX196b29tLmludmVydChnLnRvdWNoMFswXSk7XG4gICAgZWxzZSB7XG4gICAgICBnLmVuZCgpO1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYSBkYmx0YXAsIHJlcm91dGUgdG8gdGhlIChvcHRpb25hbCkgZGJsY2xpY2suem9vbSBoYW5kbGVyLlxuICAgICAgaWYgKGcudGFwcyA9PT0gMikge1xuICAgICAgICB2YXIgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgem9vbS53aGVlbERlbHRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdoZWVsRGVsdGEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgem9vbSkgOiB3aGVlbERlbHRhO1xuICB9O1xuXG4gIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICB6b29tLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gIH07XG5cbiAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZUV4dGVudFswXSA9ICtfWzBdLCBzY2FsZUV4dGVudFsxXSA9ICtfWzFdLCB6b29tKSA6IFtzY2FsZUV4dGVudFswXSwgc2NhbGVFeHRlbnRbMV1dO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZUV4dGVudFswXVswXSA9ICtfWzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMF0gPSArX1sxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdID0gK19bMF1bMV0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbdHJhbnNsYXRlRXh0ZW50WzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV1dLCBbdHJhbnNsYXRlRXh0ZW50WzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB6b29tLmNvbnN0cmFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb25zdHJhaW4gPSBfLCB6b29tKSA6IGNvbnN0cmFpbjtcbiAgfTtcblxuICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XG4gIH07XG5cbiAgem9vbS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHpvb20pIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgem9vbS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gIH07XG5cbiAgem9vbS5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCB6b29tKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59XG4iLCJleHBvcnQgdmFyIG5hbWUgPSBcImQzXCI7XG5leHBvcnQgdmFyIHZlcnNpb24gPSBcIjUuMTIuMFwiO1xuZXhwb3J0IHZhciBkZXNjcmlwdGlvbiA9IFwiRGF0YS1Ecml2ZW4gRG9jdW1lbnRzXCI7XG5leHBvcnQgdmFyIGtleXdvcmRzID0gW1wiZG9tXCIsXCJ2aXN1YWxpemF0aW9uXCIsXCJzdmdcIixcImFuaW1hdGlvblwiLFwiY2FudmFzXCJdO1xuZXhwb3J0IHZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9kM2pzLm9yZ1wiO1xuZXhwb3J0IHZhciBsaWNlbnNlID0gXCJCU0QtMy1DbGF1c2VcIjtcbmV4cG9ydCB2YXIgYXV0aG9yID0ge1wibmFtZVwiOlwiTWlrZSBCb3N0b2NrXCIsXCJ1cmxcIjpcImh0dHBzOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9O1xuZXhwb3J0IHZhciBtYWluID0gXCJkaXN0L2QzLm5vZGUuanNcIjtcbmV4cG9ydCB2YXIgdW5wa2cgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIGpzZGVsaXZyID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBtb2R1bGUgPSBcImluZGV4LmpzXCI7XG5leHBvcnQgdmFyIHJlcG9zaXRvcnkgPSB7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLmdpdFwifTtcbmV4cG9ydCB2YXIgZmlsZXMgPSBbXCJkaXN0LyoqLyouanNcIixcImluZGV4LmpzXCJdO1xuZXhwb3J0IHZhciBzY3JpcHRzID0ge1wicHJldGVzdFwiOlwicmltcmFmIGRpc3QgJiYgbWtkaXIgZGlzdCAmJiBqc29uMm1vZHVsZSBwYWNrYWdlLmpzb24gPiBkaXN0L3BhY2thZ2UuanMgJiYgcm9sbHVwIC1jXCIsXCJ0ZXN0XCI6XCJ0YXBlICd0ZXN0LyoqLyotdGVzdC5qcydcIixcInByZXB1Ymxpc2hPbmx5XCI6XCJ5YXJuIHRlc3RcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInJpbXJhZlwiOlwiMlwiLFwicm9sbHVwXCI6XCIxXCIsXCJyb2xsdXAtcGx1Z2luLWFzY2lpXCI6XCIwLjBcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCIzXCIsXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiOlwiNVwiLFwidGFwZVwiOlwiNFwifTtcbmV4cG9ydCB2YXIgZGVwZW5kZW5jaWVzID0ge1wiZDMtYXJyYXlcIjpcIjFcIixcImQzLWF4aXNcIjpcIjFcIixcImQzLWJydXNoXCI6XCIxXCIsXCJkMy1jaG9yZFwiOlwiMVwiLFwiZDMtY29sbGVjdGlvblwiOlwiMVwiLFwiZDMtY29sb3JcIjpcIjFcIixcImQzLWNvbnRvdXJcIjpcIjFcIixcImQzLWRpc3BhdGNoXCI6XCIxXCIsXCJkMy1kcmFnXCI6XCIxXCIsXCJkMy1kc3ZcIjpcIjFcIixcImQzLWVhc2VcIjpcIjFcIixcImQzLWZldGNoXCI6XCIxXCIsXCJkMy1mb3JjZVwiOlwiMVwiLFwiZDMtZm9ybWF0XCI6XCIxXCIsXCJkMy1nZW9cIjpcIjFcIixcImQzLWhpZXJhcmNoeVwiOlwiMVwiLFwiZDMtaW50ZXJwb2xhdGVcIjpcIjFcIixcImQzLXBhdGhcIjpcIjFcIixcImQzLXBvbHlnb25cIjpcIjFcIixcImQzLXF1YWR0cmVlXCI6XCIxXCIsXCJkMy1yYW5kb21cIjpcIjFcIixcImQzLXNjYWxlXCI6XCIyXCIsXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjpcIjFcIixcImQzLXNlbGVjdGlvblwiOlwiMVwiLFwiZDMtc2hhcGVcIjpcIjFcIixcImQzLXRpbWVcIjpcIjFcIixcImQzLXRpbWUtZm9ybWF0XCI6XCIyXCIsXCJkMy10aW1lclwiOlwiMVwiLFwiZDMtdHJhbnNpdGlvblwiOlwiMVwiLFwiZDMtdm9yb25vaVwiOlwiMVwiLFwiZDMtem9vbVwiOlwiMVwifTtcbiIsImV4cG9ydCB7dmVyc2lvbn0gZnJvbSBcIi4vZGlzdC9wYWNrYWdlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtYXJyYXlcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1heGlzXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtYnJ1c2hcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1jaG9yZFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1jb2xvclwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNvbnRvdXJcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWRyYWdcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1kc3ZcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1lYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtZmV0Y2hcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1mb3JjZVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWZvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWdlb1wiO1xuZXhwb3J0ICogZnJvbSBcImQzLWhpZXJhcmNoeVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtcGF0aFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXBvbHlnb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXJhbmRvbVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXNjYWxlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2NhbGUtY2hyb21hdGljXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2hhcGVcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy10aW1lXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy10aW1lclwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy12b3Jvbm9pXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtem9vbVwiO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMgQ2hyaXMgUGV0dGl0dFxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gIHtcbiAgZ3JhcGhsaWI6IHJlcXVpcmUoXCIuL2xpYi9ncmFwaGxpYlwiKSxcbiAgZGFncmU6IHJlcXVpcmUoXCIuL2xpYi9kYWdyZVwiKSxcbiAgaW50ZXJzZWN0OiByZXF1aXJlKFwiLi9saWIvaW50ZXJzZWN0XCIpLFxuICByZW5kZXI6IHJlcXVpcmUoXCIuL2xpYi9yZW5kZXJcIiksXG4gIHV0aWw6IHJlcXVpcmUoXCIuL2xpYi91dGlsXCIpLFxuICB2ZXJzaW9uOiByZXF1aXJlKFwiLi9saWIvdmVyc2lvblwiKVxufTtcbiIsInZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiZGVmYXVsdFwiOiBub3JtYWwsXG4gIFwibm9ybWFsXCI6IG5vcm1hbCxcbiAgXCJ2ZWVcIjogdmVlLFxuICBcInVuZGlyZWN0ZWRcIjogdW5kaXJlY3RlZFxufTtcblxuZnVuY3Rpb24gbm9ybWFsKHBhcmVudCwgaWQsIGVkZ2UsIHR5cGUpIHtcbiAgdmFyIG1hcmtlciA9IHBhcmVudC5hcHBlbmQoXCJtYXJrZXJcIilcbiAgICAuYXR0cihcImlkXCIsIGlkKVxuICAgIC5hdHRyKFwidmlld0JveFwiLCBcIjAgMCAxMCAxMFwiKVxuICAgIC5hdHRyKFwicmVmWFwiLCA5KVxuICAgIC5hdHRyKFwicmVmWVwiLCA1KVxuICAgIC5hdHRyKFwibWFya2VyVW5pdHNcIiwgXCJzdHJva2VXaWR0aFwiKVxuICAgIC5hdHRyKFwibWFya2VyV2lkdGhcIiwgOClcbiAgICAuYXR0cihcIm1hcmtlckhlaWdodFwiLCA2KVxuICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKTtcblxuICB2YXIgcGF0aCA9IG1hcmtlci5hcHBlbmQoXCJwYXRoXCIpXG4gICAgLmF0dHIoXCJkXCIsIFwiTSAwIDAgTCAxMCA1IEwgMCAxMCB6XCIpXG4gICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDEpXG4gICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsMFwiKTtcbiAgdXRpbC5hcHBseVN0eWxlKHBhdGgsIGVkZ2VbdHlwZSArIFwiU3R5bGVcIl0pO1xuICBpZiAoZWRnZVt0eXBlICsgXCJDbGFzc1wiXSkge1xuICAgIHBhdGguYXR0cihcImNsYXNzXCIsIGVkZ2VbdHlwZSArIFwiQ2xhc3NcIl0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZlZShwYXJlbnQsIGlkLCBlZGdlLCB0eXBlKSB7XG4gIHZhciBtYXJrZXIgPSBwYXJlbnQuYXBwZW5kKFwibWFya2VyXCIpXG4gICAgLmF0dHIoXCJpZFwiLCBpZClcbiAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTAgMTBcIilcbiAgICAuYXR0cihcInJlZlhcIiwgOSlcbiAgICAuYXR0cihcInJlZllcIiwgNSlcbiAgICAuYXR0cihcIm1hcmtlclVuaXRzXCIsIFwic3Ryb2tlV2lkdGhcIilcbiAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIDgpXG4gICAgLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNilcbiAgICAuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIik7XG5cbiAgdmFyIHBhdGggPSBtYXJrZXIuYXBwZW5kKFwicGF0aFwiKVxuICAgIC5hdHRyKFwiZFwiLCBcIk0gMCAwIEwgMTAgNSBMIDAgMTAgTCA0IDUgelwiKVxuICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAxKVxuICAgIC5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCIxLDBcIik7XG4gIHV0aWwuYXBwbHlTdHlsZShwYXRoLCBlZGdlW3R5cGUgKyBcIlN0eWxlXCJdKTtcbiAgaWYgKGVkZ2VbdHlwZSArIFwiQ2xhc3NcIl0pIHtcbiAgICBwYXRoLmF0dHIoXCJjbGFzc1wiLCBlZGdlW3R5cGUgKyBcIkNsYXNzXCJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmRpcmVjdGVkKHBhcmVudCwgaWQsIGVkZ2UsIHR5cGUpIHtcbiAgdmFyIG1hcmtlciA9IHBhcmVudC5hcHBlbmQoXCJtYXJrZXJcIilcbiAgICAuYXR0cihcImlkXCIsIGlkKVxuICAgIC5hdHRyKFwidmlld0JveFwiLCBcIjAgMCAxMCAxMFwiKVxuICAgIC5hdHRyKFwicmVmWFwiLCA5KVxuICAgIC5hdHRyKFwicmVmWVwiLCA1KVxuICAgIC5hdHRyKFwibWFya2VyVW5pdHNcIiwgXCJzdHJva2VXaWR0aFwiKVxuICAgIC5hdHRyKFwibWFya2VyV2lkdGhcIiwgOClcbiAgICAuYXR0cihcIm1hcmtlckhlaWdodFwiLCA2KVxuICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKTtcblxuICB2YXIgcGF0aCA9IG1hcmtlci5hcHBlbmQoXCJwYXRoXCIpXG4gICAgLmF0dHIoXCJkXCIsIFwiTSAwIDUgTCAxMCA1XCIpXG4gICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDEpXG4gICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsMFwiKTtcbiAgdXRpbC5hcHBseVN0eWxlKHBhdGgsIGVkZ2VbdHlwZSArIFwiU3R5bGVcIl0pO1xuICBpZiAoZWRnZVt0eXBlICsgXCJDbGFzc1wiXSkge1xuICAgIHBhdGguYXR0cihcImNsYXNzXCIsIGVkZ2VbdHlwZSArIFwiQ2xhc3NcIl0pO1xuICB9XG59XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgZDMgPSByZXF1aXJlKFwiLi9kM1wiKTtcbnZhciBhZGRMYWJlbCA9IHJlcXVpcmUoXCIuL2xhYmVsL2FkZC1sYWJlbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVDbHVzdGVycztcblxuZnVuY3Rpb24gY3JlYXRlQ2x1c3RlcnMoc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBjbHVzdGVycyA9IGcubm9kZXMoKS5maWx0ZXIoZnVuY3Rpb24odikgeyByZXR1cm4gdXRpbC5pc1N1YmdyYXBoKGcsIHYpOyB9KTtcbiAgdmFyIHN2Z0NsdXN0ZXJzID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcImcuY2x1c3RlclwiKVxuICAgIC5kYXRhKGNsdXN0ZXJzLCBmdW5jdGlvbih2KSB7IHJldHVybiB2OyB9KTtcblxuICBzdmdDbHVzdGVycy5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICBzdmdDbHVzdGVycy5lbnRlcigpLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcImNsYXNzXCIsIFwiY2x1c3RlclwiKVxuICAgIC5hdHRyKFwiaWRcIixmdW5jdGlvbih2KXtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgcmV0dXJuIG5vZGUuaWQ7XG4gICAgfSlcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuICBcbiAgc3ZnQ2x1c3RlcnMgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiZy5jbHVzdGVyXCIpO1xuXG4gIHV0aWwuYXBwbHlUcmFuc2l0aW9uKHN2Z0NsdXN0ZXJzLCBnKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG5cbiAgc3ZnQ2x1c3RlcnMuZWFjaChmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgdmFyIHRoaXNHcm91cCA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwicmVjdFwiKTtcbiAgICB2YXIgbGFiZWxHcm91cCA9IHRoaXNHcm91cC5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpO1xuICAgIGFkZExhYmVsKGxhYmVsR3JvdXAsIG5vZGUsIG5vZGUuY2x1c3RlckxhYmVsUG9zKTtcbiAgfSk7XG5cbiAgc3ZnQ2x1c3RlcnMuc2VsZWN0QWxsKFwicmVjdFwiKS5lYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZShjKTtcbiAgICB2YXIgZG9tQ2x1c3RlciA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICB1dGlsLmFwcGx5U3R5bGUoZG9tQ2x1c3Rlciwgbm9kZS5zdHlsZSk7XG4gIH0pO1xuXG4gIHZhciBleGl0U2VsZWN0aW9uO1xuXG4gIGlmIChzdmdDbHVzdGVycy5leGl0KSB7XG4gICAgZXhpdFNlbGVjdGlvbiA9IHN2Z0NsdXN0ZXJzLmV4aXQoKTtcbiAgfSBlbHNlIHtcbiAgICBleGl0U2VsZWN0aW9uID0gc3ZnQ2x1c3RlcnMuc2VsZWN0QWxsKG51bGwpOyAvLyBlbXB0eSBzZWxlY3Rpb25cbiAgfVxuXG4gIHV0aWwuYXBwbHlUcmFuc2l0aW9uKGV4aXRTZWxlY3Rpb24sIGcpXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuICAgIC5yZW1vdmUoKTtcblxuICByZXR1cm4gc3ZnQ2x1c3RlcnM7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG52YXIgYWRkTGFiZWwgPSByZXF1aXJlKFwiLi9sYWJlbC9hZGQtbGFiZWxcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgZDMgPSByZXF1aXJlKFwiLi9kM1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFZGdlTGFiZWxzO1xuXG5mdW5jdGlvbiBjcmVhdGVFZGdlTGFiZWxzKHNlbGVjdGlvbiwgZykge1xuICB2YXIgc3ZnRWRnZUxhYmVscyA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCJnLmVkZ2VMYWJlbFwiKVxuICAgIC5kYXRhKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkgeyByZXR1cm4gdXRpbC5lZGdlVG9JZChlKTsgfSlcbiAgICAuY2xhc3NlZChcInVwZGF0ZVwiLCB0cnVlKTtcblxuICBzdmdFZGdlTGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcbiAgc3ZnRWRnZUxhYmVscy5lbnRlcigpLmFwcGVuZChcImdcIilcbiAgICAuY2xhc3NlZChcImVkZ2VMYWJlbFwiLCB0cnVlKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMCk7XG5cbiAgc3ZnRWRnZUxhYmVscyA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCJnLmVkZ2VMYWJlbFwiKTtcblxuICBzdmdFZGdlTGFiZWxzLmVhY2goZnVuY3Rpb24oZSkge1xuICAgIHZhciByb290ID0gZDMuc2VsZWN0KHRoaXMpO1xuICAgIHJvb3Quc2VsZWN0KFwiLmxhYmVsXCIpLnJlbW92ZSgpO1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIHZhciBsYWJlbCA9IGFkZExhYmVsKHJvb3QsIGcuZWRnZShlKSwgMCwgMCkuY2xhc3NlZChcImxhYmVsXCIsIHRydWUpO1xuICAgIHZhciBiYm94ID0gbGFiZWwubm9kZSgpLmdldEJCb3goKTtcblxuICAgIGlmIChlZGdlLmxhYmVsSWQpIHsgbGFiZWwuYXR0cihcImlkXCIsIGVkZ2UubGFiZWxJZCk7IH1cbiAgICBpZiAoIV8uaGFzKGVkZ2UsIFwid2lkdGhcIikpIHsgZWRnZS53aWR0aCA9IGJib3gud2lkdGg7IH1cbiAgICBpZiAoIV8uaGFzKGVkZ2UsIFwiaGVpZ2h0XCIpKSB7IGVkZ2UuaGVpZ2h0ID0gYmJveC5oZWlnaHQ7IH1cbiAgfSk7XG5cbiAgdmFyIGV4aXRTZWxlY3Rpb247XG5cbiAgaWYgKHN2Z0VkZ2VMYWJlbHMuZXhpdCkge1xuICAgIGV4aXRTZWxlY3Rpb24gPSBzdmdFZGdlTGFiZWxzLmV4aXQoKTtcbiAgfSBlbHNlIHtcbiAgICBleGl0U2VsZWN0aW9uID0gc3ZnRWRnZUxhYmVscy5zZWxlY3RBbGwobnVsbCk7IC8vIGVtcHR5IHNlbGVjdGlvblxuICB9XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oZXhpdFNlbGVjdGlvbiwgZylcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG4gICAgLnJlbW92ZSgpO1xuXG4gIHJldHVybiBzdmdFZGdlTGFiZWxzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIGludGVyc2VjdE5vZGUgPSByZXF1aXJlKFwiLi9pbnRlcnNlY3QvaW50ZXJzZWN0LW5vZGVcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgZDMgPSByZXF1aXJlKFwiLi9kM1wiKTtcbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlRWRnZVBhdGhzO1xuXG5mdW5jdGlvbiBjcmVhdGVFZGdlUGF0aHMoc2VsZWN0aW9uLCBnLCBhcnJvd3MpIHtcbiAgdmFyIHByZXZpb3VzUGF0aHMgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiZy5lZGdlUGF0aFwiKVxuICAgIC5kYXRhKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkgeyByZXR1cm4gdXRpbC5lZGdlVG9JZChlKTsgfSlcbiAgICAuY2xhc3NlZChcInVwZGF0ZVwiLCB0cnVlKTtcblxuICB2YXIgbmV3UGF0aHMgPSBlbnRlcihwcmV2aW91c1BhdGhzLCBnKTtcbiAgZXhpdChwcmV2aW91c1BhdGhzLCBnKTtcblxuICB2YXIgc3ZnUGF0aHMgPSBwcmV2aW91c1BhdGhzLm1lcmdlICE9PSB1bmRlZmluZWQgPyBwcmV2aW91c1BhdGhzLm1lcmdlKG5ld1BhdGhzKSA6IHByZXZpb3VzUGF0aHM7XG4gIHV0aWwuYXBwbHlUcmFuc2l0aW9uKHN2Z1BhdGhzLCBnKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG5cbiAgLy8gU2F2ZSBET00gZWxlbWVudCBpbiB0aGUgcGF0aCBncm91cCwgYW5kIHNldCBJRCBhbmQgY2xhc3NcbiAgc3ZnUGF0aHMuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgdmFyIGRvbUVkZ2UgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgZWRnZS5lbGVtID0gdGhpcztcblxuICAgIGlmIChlZGdlLmlkKSB7XG4gICAgICBkb21FZGdlLmF0dHIoXCJpZFwiLCBlZGdlLmlkKTtcbiAgICB9XG5cbiAgICB1dGlsLmFwcGx5Q2xhc3MoZG9tRWRnZSwgZWRnZVtcImNsYXNzXCJdLFxuICAgICAgKGRvbUVkZ2UuY2xhc3NlZChcInVwZGF0ZVwiKSA/IFwidXBkYXRlIFwiIDogXCJcIikgKyBcImVkZ2VQYXRoXCIpO1xuICB9KTtcblxuICBzdmdQYXRocy5zZWxlY3RBbGwoXCJwYXRoLnBhdGhcIilcbiAgICAuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICAgIGVkZ2UuYXJyb3doZWFkSWQgPSBfLnVuaXF1ZUlkKFwiYXJyb3doZWFkXCIpO1xuXG4gICAgICB2YXIgZG9tRWRnZSA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFwidXJsKFwiICsgbWFrZUZyYWdtZW50UmVmKGxvY2F0aW9uLmhyZWYsIGVkZ2UuYXJyb3doZWFkSWQpICsgXCIpXCI7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJub25lXCIpO1xuXG4gICAgICB1dGlsLmFwcGx5VHJhbnNpdGlvbihkb21FZGdlLCBnKVxuICAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZSkgeyByZXR1cm4gY2FsY1BvaW50cyhnLCBlKTsgfSk7XG5cbiAgICAgIHV0aWwuYXBwbHlTdHlsZShkb21FZGdlLCBlZGdlLnN0eWxlKTtcbiAgICB9KTtcblxuICBzdmdQYXRocy5zZWxlY3RBbGwoXCJkZWZzICpcIikucmVtb3ZlKCk7XG4gIHN2Z1BhdGhzLnNlbGVjdEFsbChcImRlZnNcIilcbiAgICAuZWFjaChmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICAgIHZhciBhcnJvd2hlYWQgPSBhcnJvd3NbZWRnZS5hcnJvd2hlYWRdO1xuICAgICAgYXJyb3doZWFkKGQzLnNlbGVjdCh0aGlzKSwgZWRnZS5hcnJvd2hlYWRJZCwgZWRnZSwgXCJhcnJvd2hlYWRcIik7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHN2Z1BhdGhzO1xufVxuXG5mdW5jdGlvbiBtYWtlRnJhZ21lbnRSZWYodXJsLCBmcmFnbWVudElkKSB7XG4gIHZhciBiYXNlVXJsID0gdXJsLnNwbGl0KFwiI1wiKVswXTtcbiAgcmV0dXJuIGJhc2VVcmwgKyBcIiNcIiArIGZyYWdtZW50SWQ7XG59XG5cbmZ1bmN0aW9uIGNhbGNQb2ludHMoZywgZSkge1xuICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgdmFyIHRhaWwgPSBnLm5vZGUoZS52KTtcbiAgdmFyIGhlYWQgPSBnLm5vZGUoZS53KTtcbiAgdmFyIHBvaW50cyA9IGVkZ2UucG9pbnRzLnNsaWNlKDEsIGVkZ2UucG9pbnRzLmxlbmd0aCAtIDEpO1xuICBwb2ludHMudW5zaGlmdChpbnRlcnNlY3ROb2RlKHRhaWwsIHBvaW50c1swXSkpO1xuICBwb2ludHMucHVzaChpbnRlcnNlY3ROb2RlKGhlYWQsIHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0pKTtcblxuICByZXR1cm4gY3JlYXRlTGluZShlZGdlLCBwb2ludHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5lKGVkZ2UsIHBvaW50cykge1xuICB2YXIgbGluZSA9IChkMy5saW5lIHx8IGQzLnN2Zy5saW5lKSgpXG4gICAgLngoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgIC55KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG4gIFxuICAobGluZS5jdXJ2ZSB8fCBsaW5lLmludGVycG9sYXRlKShlZGdlLmN1cnZlKTtcblxuICByZXR1cm4gbGluZShwb2ludHMpO1xufVxuXG5mdW5jdGlvbiBnZXRDb29yZHMoZWxlbSkge1xuICB2YXIgYmJveCA9IGVsZW0uZ2V0QkJveCgpO1xuICB2YXIgbWF0cml4ID0gZWxlbS5vd25lclNWR0VsZW1lbnQuZ2V0U2NyZWVuQ1RNKClcbiAgICAuaW52ZXJzZSgpXG4gICAgLm11bHRpcGx5KGVsZW0uZ2V0U2NyZWVuQ1RNKCkpXG4gICAgLnRyYW5zbGF0ZShiYm94LndpZHRoIC8gMiwgYmJveC5oZWlnaHQgLyAyKTtcbiAgcmV0dXJuIHsgeDogbWF0cml4LmUsIHk6IG1hdHJpeC5mIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyKHN2Z1BhdGhzLCBnKSB7XG4gIHZhciBzdmdQYXRoc0VudGVyID0gc3ZnUGF0aHMuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcImVkZ2VQYXRoXCIpXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcbiAgc3ZnUGF0aHNFbnRlci5hcHBlbmQoXCJwYXRoXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInBhdGhcIilcbiAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgICB2YXIgc291cmNlRWxlbSA9IGcubm9kZShlLnYpLmVsZW07XG4gICAgICB2YXIgcG9pbnRzID0gXy5yYW5nZShlZGdlLnBvaW50cy5sZW5ndGgpLm1hcChmdW5jdGlvbigpIHsgcmV0dXJuIGdldENvb3Jkcyhzb3VyY2VFbGVtKTsgfSk7XG4gICAgICByZXR1cm4gY3JlYXRlTGluZShlZGdlLCBwb2ludHMpO1xuICAgIH0pO1xuICBzdmdQYXRoc0VudGVyLmFwcGVuZChcImRlZnNcIik7XG4gIHJldHVybiBzdmdQYXRoc0VudGVyO1xufVxuXG5mdW5jdGlvbiBleGl0KHN2Z1BhdGhzLCBnKSB7XG4gIHZhciBzdmdQYXRoRXhpdCA9IHN2Z1BhdGhzLmV4aXQoKTtcbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oc3ZnUGF0aEV4aXQsIGcpXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKVxuICAgIC5yZW1vdmUoKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcbnZhciBhZGRMYWJlbCA9IHJlcXVpcmUoXCIuL2xhYmVsL2FkZC1sYWJlbFwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBkMyA9IHJlcXVpcmUoXCIuL2QzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU5vZGVzO1xuXG5mdW5jdGlvbiBjcmVhdGVOb2RlcyhzZWxlY3Rpb24sIGcsIHNoYXBlcykge1xuICB2YXIgc2ltcGxlTm9kZXMgPSBnLm5vZGVzKCkuZmlsdGVyKGZ1bmN0aW9uKHYpIHsgcmV0dXJuICF1dGlsLmlzU3ViZ3JhcGgoZywgdik7IH0pO1xuICB2YXIgc3ZnTm9kZXMgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiZy5ub2RlXCIpXG4gICAgLmRhdGEoc2ltcGxlTm9kZXMsIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHY7IH0pXG4gICAgLmNsYXNzZWQoXCJ1cGRhdGVcIiwgdHJ1ZSk7XG5cbiAgc3ZnTm9kZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gIHN2Z05vZGVzLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcblxuICBzdmdOb2RlcyA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCJnLm5vZGVcIik7IFxuXG4gIHN2Z05vZGVzLmVhY2goZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIHZhciB0aGlzR3JvdXAgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgdXRpbC5hcHBseUNsYXNzKHRoaXNHcm91cCwgbm9kZVtcImNsYXNzXCJdLFxuICAgICAgKHRoaXNHcm91cC5jbGFzc2VkKFwidXBkYXRlXCIpID8gXCJ1cGRhdGUgXCIgOiBcIlwiKSArIFwibm9kZVwiKTtcblxuICAgIHRoaXNHcm91cC5zZWxlY3QoXCJnLmxhYmVsXCIpLnJlbW92ZSgpO1xuICAgIHZhciBsYWJlbEdyb3VwID0gdGhpc0dyb3VwLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwibGFiZWxcIik7XG4gICAgdmFyIGxhYmVsRG9tID0gYWRkTGFiZWwobGFiZWxHcm91cCwgbm9kZSk7XG4gICAgdmFyIHNoYXBlID0gc2hhcGVzW25vZGUuc2hhcGVdO1xuICAgIHZhciBiYm94ID0gXy5waWNrKGxhYmVsRG9tLm5vZGUoKS5nZXRCQm94KCksIFwid2lkdGhcIiwgXCJoZWlnaHRcIik7XG5cbiAgICBub2RlLmVsZW0gPSB0aGlzO1xuXG4gICAgaWYgKG5vZGUuaWQpIHsgdGhpc0dyb3VwLmF0dHIoXCJpZFwiLCBub2RlLmlkKTsgfVxuICAgIGlmIChub2RlLmxhYmVsSWQpIHsgbGFiZWxHcm91cC5hdHRyKFwiaWRcIiwgbm9kZS5sYWJlbElkKTsgfVxuXG4gICAgaWYgKF8uaGFzKG5vZGUsIFwid2lkdGhcIikpIHsgYmJveC53aWR0aCA9IG5vZGUud2lkdGg7IH1cbiAgICBpZiAoXy5oYXMobm9kZSwgXCJoZWlnaHRcIikpIHsgYmJveC5oZWlnaHQgPSBub2RlLmhlaWdodDsgfVxuXG4gICAgYmJveC53aWR0aCArPSBub2RlLnBhZGRpbmdMZWZ0ICsgbm9kZS5wYWRkaW5nUmlnaHQ7XG4gICAgYmJveC5oZWlnaHQgKz0gbm9kZS5wYWRkaW5nVG9wICsgbm9kZS5wYWRkaW5nQm90dG9tO1xuICAgIGxhYmVsR3JvdXAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArXG4gICAgICAoKG5vZGUucGFkZGluZ0xlZnQgLSBub2RlLnBhZGRpbmdSaWdodCkgLyAyKSArIFwiLFwiICtcbiAgICAgICgobm9kZS5wYWRkaW5nVG9wIC0gbm9kZS5wYWRkaW5nQm90dG9tKSAvIDIpICsgXCIpXCIpO1xuXG4gICAgdmFyIHJvb3QgPSBkMy5zZWxlY3QodGhpcyk7XG4gICAgcm9vdC5zZWxlY3QoXCIubGFiZWwtY29udGFpbmVyXCIpLnJlbW92ZSgpO1xuICAgIHZhciBzaGFwZVN2ZyA9IHNoYXBlKHJvb3QsIGJib3gsIG5vZGUpLmNsYXNzZWQoXCJsYWJlbC1jb250YWluZXJcIiwgdHJ1ZSk7XG4gICAgdXRpbC5hcHBseVN0eWxlKHNoYXBlU3ZnLCBub2RlLnN0eWxlKTtcblxuICAgIHZhciBzaGFwZUJCb3ggPSBzaGFwZVN2Zy5ub2RlKCkuZ2V0QkJveCgpO1xuICAgIG5vZGUud2lkdGggPSBzaGFwZUJCb3gud2lkdGg7XG4gICAgbm9kZS5oZWlnaHQgPSBzaGFwZUJCb3guaGVpZ2h0O1xuICB9KTtcblxuICB2YXIgZXhpdFNlbGVjdGlvbjtcblxuICBpZiAoc3ZnTm9kZXMuZXhpdCkge1xuICAgIGV4aXRTZWxlY3Rpb24gPSBzdmdOb2Rlcy5leGl0KCk7XG4gIH0gZWxzZSB7XG4gICAgZXhpdFNlbGVjdGlvbiA9IHN2Z05vZGVzLnNlbGVjdEFsbChudWxsKTsgLy8gZW1wdHkgc2VsZWN0aW9uXG4gIH1cblxuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihleGl0U2VsZWN0aW9uLCBnKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcbiAgICAucmVtb3ZlKCk7XG5cbiAgcmV0dXJuIHN2Z05vZGVzO1xufVxuIiwiLy8gU3R1YiB0byBnZXQgRDMgZWl0aGVyIHZpYSBOUE0gb3IgZnJvbSB0aGUgZ2xvYmFsIG9iamVjdFxudmFyIGQzO1xuXG5pZiAoIWQzKSB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGQzID0gcmVxdWlyZShcImQzXCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgIH1cbiAgfVxufVxuXG5pZiAoIWQzKSB7XG4gIGQzID0gd2luZG93LmQzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGQzO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgZGFncmU7XG5cbmlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIHRyeSB7XG4gICAgZGFncmUgPSByZXF1aXJlKFwiZGFncmVcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gIH1cbn1cblxuaWYgKCFkYWdyZSkge1xuICBkYWdyZSA9IHdpbmRvdy5kYWdyZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYWdyZTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cblxudmFyIGdyYXBobGliO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGdyYXBobGliID0gcmVxdWlyZShcImdyYXBobGliXCIpO1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICB9XG59XG5cbmlmICghZ3JhcGhsaWIpIHtcbiAgZ3JhcGhsaWIgPSB3aW5kb3cuZ3JhcGhsaWI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ3JhcGhsaWI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgbm9kZTogcmVxdWlyZShcIi4vaW50ZXJzZWN0LW5vZGVcIiksXG4gIGNpcmNsZTogcmVxdWlyZShcIi4vaW50ZXJzZWN0LWNpcmNsZVwiKSxcbiAgZWxsaXBzZTogcmVxdWlyZShcIi4vaW50ZXJzZWN0LWVsbGlwc2VcIiksXG4gIHBvbHlnb246IHJlcXVpcmUoXCIuL2ludGVyc2VjdC1wb2x5Z29uXCIpLFxuICByZWN0OiByZXF1aXJlKFwiLi9pbnRlcnNlY3QtcmVjdFwiKVxufTtcbiIsInZhciBpbnRlcnNlY3RFbGxpcHNlID0gcmVxdWlyZShcIi4vaW50ZXJzZWN0LWVsbGlwc2VcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0Q2lyY2xlO1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RDaXJjbGUobm9kZSwgcngsIHBvaW50KSB7XG4gIHJldHVybiBpbnRlcnNlY3RFbGxpcHNlKG5vZGUsIHJ4LCByeCwgcG9pbnQpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBpbnRlcnNlY3RFbGxpcHNlO1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RFbGxpcHNlKG5vZGUsIHJ4LCByeSwgcG9pbnQpIHtcbiAgLy8gRm9ybXVsYWUgZnJvbTogaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9FbGxpcHNlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuXG4gIHZhciBjeCA9IG5vZGUueDtcbiAgdmFyIGN5ID0gbm9kZS55O1xuXG4gIHZhciBweCA9IGN4IC0gcG9pbnQueDtcbiAgdmFyIHB5ID0gY3kgLSBwb2ludC55O1xuXG4gIHZhciBkZXQgPSBNYXRoLnNxcnQocnggKiByeCAqIHB5ICogcHkgKyByeSAqIHJ5ICogcHggKiBweCk7XG5cbiAgdmFyIGR4ID0gTWF0aC5hYnMocnggKiByeSAqIHB4IC8gZGV0KTtcbiAgaWYgKHBvaW50LnggPCBjeCkge1xuICAgIGR4ID0gLWR4O1xuICB9XG4gIHZhciBkeSA9IE1hdGguYWJzKHJ4ICogcnkgKiBweSAvIGRldCk7XG4gIGlmIChwb2ludC55IDwgY3kpIHtcbiAgICBkeSA9IC1keTtcbiAgfVxuXG4gIHJldHVybiB7eDogY3ggKyBkeCwgeTogY3kgKyBkeX07XG59XG5cbiIsIm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0TGluZTtcblxuLypcbiAqIFJldHVybnMgdGhlIHBvaW50IGF0IHdoaWNoIHR3byBsaW5lcywgcCBhbmQgcSwgaW50ZXJzZWN0IG9yIHJldHVybnNcbiAqIHVuZGVmaW5lZCBpZiB0aGV5IGRvIG5vdCBpbnRlcnNlY3QuXG4gKi9cbmZ1bmN0aW9uIGludGVyc2VjdExpbmUocDEsIHAyLCBxMSwgcTIpIHtcbiAgLy8gQWxnb3JpdGhtIGZyb20gSi4gQXZybywgKGVkLikgR3JhcGhpY3MgR2VtcywgTm8gMiwgTW9yZ2FuIEthdWZtYW5uLCAxOTk0LFxuICAvLyBwNyBhbmQgcDQ3My5cblxuICB2YXIgYTEsIGEyLCBiMSwgYjIsIGMxLCBjMjtcbiAgdmFyIHIxLCByMiAsIHIzLCByNDtcbiAgdmFyIGRlbm9tLCBvZmZzZXQsIG51bTtcbiAgdmFyIHgsIHk7XG5cbiAgLy8gQ29tcHV0ZSBhMSwgYjEsIGMxLCB3aGVyZSBsaW5lIGpvaW5pbmcgcG9pbnRzIDEgYW5kIDIgaXMgRih4LHkpID0gYTEgeCArXG4gIC8vIGIxIHkgKyBjMSA9IDAuXG4gIGExID0gcDIueSAtIHAxLnk7XG4gIGIxID0gcDEueCAtIHAyLng7XG4gIGMxID0gKHAyLnggKiBwMS55KSAtIChwMS54ICogcDIueSk7XG5cbiAgLy8gQ29tcHV0ZSByMyBhbmQgcjQuXG4gIHIzID0gKChhMSAqIHExLngpICsgKGIxICogcTEueSkgKyBjMSk7XG4gIHI0ID0gKChhMSAqIHEyLngpICsgKGIxICogcTIueSkgKyBjMSk7XG5cbiAgLy8gQ2hlY2sgc2lnbnMgb2YgcjMgYW5kIHI0LiBJZiBib3RoIHBvaW50IDMgYW5kIHBvaW50IDQgbGllIG9uXG4gIC8vIHNhbWUgc2lkZSBvZiBsaW5lIDEsIHRoZSBsaW5lIHNlZ21lbnRzIGRvIG5vdCBpbnRlcnNlY3QuXG4gIGlmICgocjMgIT09IDApICYmIChyNCAhPT0gMCkgJiYgc2FtZVNpZ24ocjMsIHI0KSkge1xuICAgIHJldHVybiAvKkRPTlRfSU5URVJTRUNUKi87XG4gIH1cblxuICAvLyBDb21wdXRlIGEyLCBiMiwgYzIgd2hlcmUgbGluZSBqb2luaW5nIHBvaW50cyAzIGFuZCA0IGlzIEcoeCx5KSA9IGEyIHggKyBiMiB5ICsgYzIgPSAwXG4gIGEyID0gcTIueSAtIHExLnk7XG4gIGIyID0gcTEueCAtIHEyLng7XG4gIGMyID0gKHEyLnggKiBxMS55KSAtIChxMS54ICogcTIueSk7XG5cbiAgLy8gQ29tcHV0ZSByMSBhbmQgcjJcbiAgcjEgPSAoYTIgKiBwMS54KSArIChiMiAqIHAxLnkpICsgYzI7XG4gIHIyID0gKGEyICogcDIueCkgKyAoYjIgKiBwMi55KSArIGMyO1xuXG4gIC8vIENoZWNrIHNpZ25zIG9mIHIxIGFuZCByMi4gSWYgYm90aCBwb2ludCAxIGFuZCBwb2ludCAyIGxpZVxuICAvLyBvbiBzYW1lIHNpZGUgb2Ygc2Vjb25kIGxpbmUgc2VnbWVudCwgdGhlIGxpbmUgc2VnbWVudHMgZG9cbiAgLy8gbm90IGludGVyc2VjdC5cbiAgaWYgKChyMSAhPT0gMCkgJiYgKHIyICE9PSAwKSAmJiAoc2FtZVNpZ24ocjEsIHIyKSkpIHtcbiAgICByZXR1cm4gLypET05UX0lOVEVSU0VDVCovO1xuICB9XG5cbiAgLy8gTGluZSBzZWdtZW50cyBpbnRlcnNlY3Q6IGNvbXB1dGUgaW50ZXJzZWN0aW9uIHBvaW50LlxuICBkZW5vbSA9IChhMSAqIGIyKSAtIChhMiAqIGIxKTtcbiAgaWYgKGRlbm9tID09PSAwKSB7XG4gICAgcmV0dXJuIC8qQ09MTElORUFSKi87XG4gIH1cblxuICBvZmZzZXQgPSBNYXRoLmFicyhkZW5vbSAvIDIpO1xuXG4gIC8vIFRoZSBkZW5vbS8yIGlzIHRvIGdldCByb3VuZGluZyBpbnN0ZWFkIG9mIHRydW5jYXRpbmcuIEl0XG4gIC8vIGlzIGFkZGVkIG9yIHN1YnRyYWN0ZWQgdG8gdGhlIG51bWVyYXRvciwgZGVwZW5kaW5nIHVwb24gdGhlXG4gIC8vIHNpZ24gb2YgdGhlIG51bWVyYXRvci5cbiAgbnVtID0gKGIxICogYzIpIC0gKGIyICogYzEpO1xuICB4ID0gKG51bSA8IDApID8gKChudW0gLSBvZmZzZXQpIC8gZGVub20pIDogKChudW0gKyBvZmZzZXQpIC8gZGVub20pO1xuXG4gIG51bSA9IChhMiAqIGMxKSAtIChhMSAqIGMyKTtcbiAgeSA9IChudW0gPCAwKSA/ICgobnVtIC0gb2Zmc2V0KSAvIGRlbm9tKSA6ICgobnVtICsgb2Zmc2V0KSAvIGRlbm9tKTtcblxuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG59XG5cbmZ1bmN0aW9uIHNhbWVTaWduKHIxLCByMikge1xuICByZXR1cm4gcjEgKiByMiA+IDA7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdE5vZGU7XG5cbmZ1bmN0aW9uIGludGVyc2VjdE5vZGUobm9kZSwgcG9pbnQpIHtcbiAgcmV0dXJuIG5vZGUuaW50ZXJzZWN0KHBvaW50KTtcbn1cbiIsIi8qIGVzbGludCBcIm5vLWNvbnNvbGVcIjogb2ZmICovXG5cbnZhciBpbnRlcnNlY3RMaW5lID0gcmVxdWlyZShcIi4vaW50ZXJzZWN0LWxpbmVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0UG9seWdvbjtcblxuLypcbiAqIFJldHVybnMgdGhlIHBvaW50ICh7eCwgeX0pIGF0IHdoaWNoIHRoZSBwb2ludCBhcmd1bWVudCBpbnRlcnNlY3RzIHdpdGggdGhlXG4gKiBub2RlIGFyZ3VtZW50IGFzc3VtaW5nIHRoYXQgaXQgaGFzIHRoZSBzaGFwZSBzcGVjaWZpZWQgYnkgcG9seWdvbi5cbiAqL1xuZnVuY3Rpb24gaW50ZXJzZWN0UG9seWdvbihub2RlLCBwb2x5UG9pbnRzLCBwb2ludCkge1xuICB2YXIgeDEgPSBub2RlLng7XG4gIHZhciB5MSA9IG5vZGUueTtcblxuICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdO1xuXG4gIHZhciBtaW5YID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICB2YXIgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgcG9seVBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgbWluWCA9IE1hdGgubWluKG1pblgsIGVudHJ5LngpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBlbnRyeS55KTtcbiAgfSk7XG5cbiAgdmFyIGxlZnQgPSB4MSAtIG5vZGUud2lkdGggLyAyIC0gbWluWDtcbiAgdmFyIHRvcCA9ICB5MSAtIG5vZGUuaGVpZ2h0IC8gMiAtIG1pblk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2x5UG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHAxID0gcG9seVBvaW50c1tpXTtcbiAgICB2YXIgcDIgPSBwb2x5UG9pbnRzW2kgPCBwb2x5UG9pbnRzLmxlbmd0aCAtIDEgPyBpICsgMSA6IDBdO1xuICAgIHZhciBpbnRlcnNlY3QgPSBpbnRlcnNlY3RMaW5lKG5vZGUsIHBvaW50LFxuICAgICAge3g6IGxlZnQgKyBwMS54LCB5OiB0b3AgKyBwMS55fSwge3g6IGxlZnQgKyBwMi54LCB5OiB0b3AgKyBwMi55fSk7XG4gICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKGludGVyc2VjdCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpbnRlcnNlY3Rpb25zLmxlbmd0aCkge1xuICAgIGNvbnNvbGUubG9nKFwiTk8gSU5URVJTRUNUSU9OIEZPVU5ELCBSRVRVUk4gTk9ERSBDRU5URVJcIiwgbm9kZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBpZiAoaW50ZXJzZWN0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgLy8gTW9yZSBpbnRlcnNlY3Rpb25zLCBmaW5kIHRoZSBvbmUgbmVhcmVzdCB0byBlZGdlIGVuZCBwb2ludFxuICAgIGludGVyc2VjdGlvbnMuc29ydChmdW5jdGlvbihwLCBxKSB7XG4gICAgICB2YXIgcGR4ID0gcC54IC0gcG9pbnQueDtcbiAgICAgIHZhciBwZHkgPSBwLnkgLSBwb2ludC55O1xuICAgICAgdmFyIGRpc3RwID0gTWF0aC5zcXJ0KHBkeCAqIHBkeCArIHBkeSAqIHBkeSk7XG5cbiAgICAgIHZhciBxZHggPSBxLnggLSBwb2ludC54O1xuICAgICAgdmFyIHFkeSA9IHEueSAtIHBvaW50Lnk7XG4gICAgICB2YXIgZGlzdHEgPSBNYXRoLnNxcnQocWR4ICogcWR4ICsgcWR5ICogcWR5KTtcblxuICAgICAgcmV0dXJuIChkaXN0cCA8IGRpc3RxKSA/IC0xIDogKGRpc3RwID09PSBkaXN0cSA/IDAgOiAxKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaW50ZXJzZWN0aW9uc1swXTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0UmVjdDtcblxuZnVuY3Rpb24gaW50ZXJzZWN0UmVjdChub2RlLCBwb2ludCkge1xuICB2YXIgeCA9IG5vZGUueDtcbiAgdmFyIHkgPSBub2RlLnk7XG5cbiAgLy8gUmVjdGFuZ2xlIGludGVyc2VjdGlvbiBhbGdvcml0aG0gZnJvbTpcbiAgLy8gaHR0cDovL21hdGguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzEwODExMy9maW5kLWVkZ2UtYmV0d2Vlbi10d28tYm94ZXNcbiAgdmFyIGR4ID0gcG9pbnQueCAtIHg7XG4gIHZhciBkeSA9IHBvaW50LnkgLSB5O1xuICB2YXIgdyA9IG5vZGUud2lkdGggLyAyO1xuICB2YXIgaCA9IG5vZGUuaGVpZ2h0IC8gMjtcblxuICB2YXIgc3gsIHN5O1xuICBpZiAoTWF0aC5hYnMoZHkpICogdyA+IE1hdGguYWJzKGR4KSAqIGgpIHtcbiAgICAvLyBJbnRlcnNlY3Rpb24gaXMgdG9wIG9yIGJvdHRvbSBvZiByZWN0LlxuICAgIGlmIChkeSA8IDApIHtcbiAgICAgIGggPSAtaDtcbiAgICB9XG4gICAgc3ggPSBkeSA9PT0gMCA/IDAgOiBoICogZHggLyBkeTtcbiAgICBzeSA9IGg7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW50ZXJzZWN0aW9uIGlzIGxlZnQgb3IgcmlnaHQgb2YgcmVjdC5cbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICB3ID0gLXc7XG4gICAgfVxuICAgIHN4ID0gdztcbiAgICBzeSA9IGR4ID09PSAwID8gMCA6IHcgKiBkeSAvIGR4O1xuICB9XG5cbiAgcmV0dXJuIHt4OiB4ICsgc3gsIHk6IHkgKyBzeX07XG59XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZEh0bWxMYWJlbDtcblxuZnVuY3Rpb24gYWRkSHRtbExhYmVsKHJvb3QsIG5vZGUpIHtcbiAgdmFyIGZvID0gcm9vdFxuICAgIC5hcHBlbmQoXCJmb3JlaWduT2JqZWN0XCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBcIjEwMDAwMFwiKTtcblxuICB2YXIgZGl2ID0gZm9cbiAgICAuYXBwZW5kKFwieGh0bWw6ZGl2XCIpO1xuICBkaXYuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKTtcblxuICB2YXIgbGFiZWwgPSBub2RlLmxhYmVsO1xuICBzd2l0Y2godHlwZW9mIGxhYmVsKSB7XG4gIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgIGRpdi5pbnNlcnQobGFiZWwpO1xuICAgIGJyZWFrO1xuICBjYXNlIFwib2JqZWN0XCI6XG4gICAgLy8gQ3VycmVudGx5IHdlIGFzc3VtZSB0aGlzIGlzIGEgRE9NIG9iamVjdC5cbiAgICBkaXYuaW5zZXJ0KGZ1bmN0aW9uKCkgeyByZXR1cm4gbGFiZWw7IH0pO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OiBkaXYuaHRtbChsYWJlbCk7XG4gIH1cblxuICB1dGlsLmFwcGx5U3R5bGUoZGl2LCBub2RlLmxhYmVsU3R5bGUpO1xuICBkaXYuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xuICAvLyBGaXggZm9yIGZpcmVmb3hcbiAgZGl2LnN0eWxlKFwid2hpdGUtc3BhY2VcIiwgXCJub3dyYXBcIik7XG5cbiAgdmFyIGNsaWVudCA9IGRpdi5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGZvXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBjbGllbnQud2lkdGgpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgY2xpZW50LmhlaWdodCk7IFxuXG4gIHJldHVybiBmbztcbn1cbiIsInZhciBhZGRUZXh0TGFiZWwgPSByZXF1aXJlKFwiLi9hZGQtdGV4dC1sYWJlbFwiKTtcbnZhciBhZGRIdG1sTGFiZWwgPSByZXF1aXJlKFwiLi9hZGQtaHRtbC1sYWJlbFwiKTtcbnZhciBhZGRTVkdMYWJlbCAgPSByZXF1aXJlKFwiLi9hZGQtc3ZnLWxhYmVsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZExhYmVsO1xuXG5mdW5jdGlvbiBhZGRMYWJlbChyb290LCBub2RlLCBsb2NhdGlvbikge1xuICB2YXIgbGFiZWwgPSBub2RlLmxhYmVsO1xuICB2YXIgbGFiZWxTdmcgPSByb290LmFwcGVuZChcImdcIik7XG5cbiAgLy8gQWxsb3cgdGhlIGxhYmVsIHRvIGJlIGEgc3RyaW5nLCBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIERPTSBlbGVtZW50LCBvclxuICAvLyBhIERPTSBlbGVtZW50IGl0c2VsZi5cbiAgaWYgKG5vZGUubGFiZWxUeXBlID09PSBcInN2Z1wiKSB7XG4gICAgYWRkU1ZHTGFiZWwobGFiZWxTdmcsIG5vZGUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBsYWJlbCAhPT0gXCJzdHJpbmdcIiB8fCBub2RlLmxhYmVsVHlwZSA9PT0gXCJodG1sXCIpIHtcbiAgICBhZGRIdG1sTGFiZWwobGFiZWxTdmcsIG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGFkZFRleHRMYWJlbChsYWJlbFN2Zywgbm9kZSk7XG4gIH1cblxuICB2YXIgbGFiZWxCQm94ID0gbGFiZWxTdmcubm9kZSgpLmdldEJCb3goKTtcbiAgdmFyIHk7XG4gIHN3aXRjaChsb2NhdGlvbikge1xuICBjYXNlIFwidG9wXCI6XG4gICAgeSA9ICgtbm9kZS5oZWlnaHQgLyAyKTtcbiAgICBicmVhaztcbiAgY2FzZSBcImJvdHRvbVwiOlxuICAgIHkgPSAobm9kZS5oZWlnaHQgLyAyKSAtIGxhYmVsQkJveC5oZWlnaHQ7XG4gICAgYnJlYWs7XG4gIGRlZmF1bHQ6XG4gICAgeSA9ICgtbGFiZWxCQm94LmhlaWdodCAvIDIpO1xuICB9XG4gIGxhYmVsU3ZnLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZShcIiArICgtbGFiZWxCQm94LndpZHRoIC8gMikgKyBcIixcIiArIHkgKyBcIilcIik7XG5cbiAgcmV0dXJuIGxhYmVsU3ZnO1xufVxuIiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZGRTVkdMYWJlbDtcblxuZnVuY3Rpb24gYWRkU1ZHTGFiZWwocm9vdCwgbm9kZSkge1xuICB2YXIgZG9tTm9kZSA9IHJvb3Q7XG5cbiAgZG9tTm9kZS5ub2RlKCkuYXBwZW5kQ2hpbGQobm9kZS5sYWJlbCk7XG5cbiAgdXRpbC5hcHBseVN0eWxlKGRvbU5vZGUsIG5vZGUubGFiZWxTdHlsZSk7XG5cbiAgcmV0dXJuIGRvbU5vZGU7XG59XG4iLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFRleHRMYWJlbDtcblxuLypcbiAqIEF0dGFjaGVzIGEgdGV4dCBsYWJlbCB0byB0aGUgc3BlY2lmaWVkIHJvb3QuIEhhbmRsZXMgZXNjYXBlIHNlcXVlbmNlcy5cbiAqL1xuZnVuY3Rpb24gYWRkVGV4dExhYmVsKHJvb3QsIG5vZGUpIHtcbiAgdmFyIGRvbU5vZGUgPSByb290LmFwcGVuZChcInRleHRcIik7XG5cbiAgdmFyIGxpbmVzID0gcHJvY2Vzc0VzY2FwZVNlcXVlbmNlcyhub2RlLmxhYmVsKS5zcGxpdChcIlxcblwiKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGRvbU5vZGUuYXBwZW5kKFwidHNwYW5cIilcbiAgICAgIC5hdHRyKFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIilcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIxZW1cIilcbiAgICAgIC5hdHRyKFwieFwiLCBcIjFcIilcbiAgICAgIC50ZXh0KGxpbmVzW2ldKTtcbiAgfVxuXG4gIHV0aWwuYXBwbHlTdHlsZShkb21Ob2RlLCBub2RlLmxhYmVsU3R5bGUpO1xuXG4gIHJldHVybiBkb21Ob2RlO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzRXNjYXBlU2VxdWVuY2VzKHRleHQpIHtcbiAgdmFyIG5ld1RleHQgPSBcIlwiO1xuICB2YXIgZXNjYXBlZCA9IGZhbHNlO1xuICB2YXIgY2g7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7ICsraSkge1xuICAgIGNoID0gdGV4dFtpXTtcbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgc3dpdGNoKGNoKSB7XG4gICAgICBjYXNlIFwiblwiOiBuZXdUZXh0ICs9IFwiXFxuXCI7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogbmV3VGV4dCArPSBjaDtcbiAgICAgIH1cbiAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNoID09PSBcIlxcXFxcIikge1xuICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1RleHQgKz0gY2g7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdUZXh0O1xufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgbG9kYXNoO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGxvZGFzaCA9IHtcbiAgICAgIGRlZmF1bHRzOiByZXF1aXJlKFwibG9kYXNoL2RlZmF1bHRzXCIpLFxuICAgICAgZWFjaDogcmVxdWlyZShcImxvZGFzaC9lYWNoXCIpLFxuICAgICAgaXNGdW5jdGlvbjogcmVxdWlyZShcImxvZGFzaC9pc0Z1bmN0aW9uXCIpLFxuICAgICAgaXNQbGFpbk9iamVjdDogcmVxdWlyZShcImxvZGFzaC9pc1BsYWluT2JqZWN0XCIpLFxuICAgICAgcGljazogcmVxdWlyZShcImxvZGFzaC9waWNrXCIpLFxuICAgICAgaGFzOiByZXF1aXJlKFwibG9kYXNoL2hhc1wiKSxcbiAgICAgIHJhbmdlOiByZXF1aXJlKFwibG9kYXNoL3JhbmdlXCIpLFxuICAgICAgdW5pcXVlSWQ6IHJlcXVpcmUoXCJsb2Rhc2gvdW5pcXVlSWRcIilcbiAgICB9O1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICB9XG59XG5cbmlmICghbG9kYXNoKSB7XG4gIGxvZGFzaCA9IHdpbmRvdy5fO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgZDMgPSByZXF1aXJlKFwiLi9kM1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb3NpdGlvbkNsdXN0ZXJzO1xuXG5mdW5jdGlvbiBwb3NpdGlvbkNsdXN0ZXJzKHNlbGVjdGlvbiwgZykge1xuICB2YXIgY3JlYXRlZCA9IHNlbGVjdGlvbi5maWx0ZXIoZnVuY3Rpb24oKSB7IHJldHVybiAhZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJ1cGRhdGVcIik7IH0pO1xuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgbm9kZS54ICsgXCIsXCIgKyBub2RlLnkgKyBcIilcIjtcbiAgfVxuXG4gIGNyZWF0ZWQuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGUpO1xuXG4gIHV0aWwuYXBwbHlUcmFuc2l0aW9uKHNlbGVjdGlvbiwgZylcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNsYXRlKTtcblxuICB1dGlsLmFwcGx5VHJhbnNpdGlvbihjcmVhdGVkLnNlbGVjdEFsbChcInJlY3RcIiksIGcpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbih2KSB7IHJldHVybiBnLm5vZGUodikud2lkdGg7IH0pXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpLmhlaWdodDsgfSlcbiAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24odikge1xuICAgICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgICByZXR1cm4gLW5vZGUud2lkdGggLyAyO1xuICAgIH0pXG4gICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKHYpIHtcbiAgICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgICAgcmV0dXJuIC1ub2RlLmhlaWdodCAvIDI7XG4gICAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xudmFyIGQzID0gcmVxdWlyZShcIi4vZDNcIik7XG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb3NpdGlvbkVkZ2VMYWJlbHM7XG5cbmZ1bmN0aW9uIHBvc2l0aW9uRWRnZUxhYmVscyhzZWxlY3Rpb24sIGcpIHtcbiAgdmFyIGNyZWF0ZWQgPSBzZWxlY3Rpb24uZmlsdGVyKGZ1bmN0aW9uKCkgeyByZXR1cm4gIWQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwidXBkYXRlXCIpOyB9KTtcblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIHJldHVybiBfLmhhcyhlZGdlLCBcInhcIikgPyBcInRyYW5zbGF0ZShcIiArIGVkZ2UueCArIFwiLFwiICsgZWRnZS55ICsgXCIpXCIgOiBcIlwiO1xuICB9XG5cbiAgY3JlYXRlZC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zbGF0ZSk7XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oc2VsZWN0aW9uLCBnKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGUpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBkMyA9IHJlcXVpcmUoXCIuL2QzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvc2l0aW9uTm9kZXM7XG5cbmZ1bmN0aW9uIHBvc2l0aW9uTm9kZXMoc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBjcmVhdGVkID0gc2VsZWN0aW9uLmZpbHRlcihmdW5jdGlvbigpIHsgcmV0dXJuICFkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcInVwZGF0ZVwiKTsgfSk7XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBub2RlLnggKyBcIixcIiArIG5vZGUueSArIFwiKVwiO1xuICB9XG5cbiAgY3JlYXRlZC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zbGF0ZSk7XG5cbiAgdXRpbC5hcHBseVRyYW5zaXRpb24oc2VsZWN0aW9uLCBnKVxuICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2xhdGUpO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG52YXIgZDMgPSByZXF1aXJlKFwiLi9kM1wiKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKFwiLi9kYWdyZVwiKS5sYXlvdXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVuZGVyO1xuXG4vLyBUaGlzIGRlc2lnbiBpcyBiYXNlZCBvbiBodHRwOi8vYm9zdC5vY2tzLm9yZy9taWtlL2NoYXJ0Ly5cbmZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIGNyZWF0ZU5vZGVzID0gcmVxdWlyZShcIi4vY3JlYXRlLW5vZGVzXCIpO1xuICB2YXIgY3JlYXRlQ2x1c3RlcnMgPSByZXF1aXJlKFwiLi9jcmVhdGUtY2x1c3RlcnNcIik7XG4gIHZhciBjcmVhdGVFZGdlTGFiZWxzID0gcmVxdWlyZShcIi4vY3JlYXRlLWVkZ2UtbGFiZWxzXCIpO1xuICB2YXIgY3JlYXRlRWRnZVBhdGhzID0gcmVxdWlyZShcIi4vY3JlYXRlLWVkZ2UtcGF0aHNcIik7XG4gIHZhciBwb3NpdGlvbk5vZGVzID0gcmVxdWlyZShcIi4vcG9zaXRpb24tbm9kZXNcIik7XG4gIHZhciBwb3NpdGlvbkVkZ2VMYWJlbHMgPSByZXF1aXJlKFwiLi9wb3NpdGlvbi1lZGdlLWxhYmVsc1wiKTtcbiAgdmFyIHBvc2l0aW9uQ2x1c3RlcnMgPSByZXF1aXJlKFwiLi9wb3NpdGlvbi1jbHVzdGVyc1wiKTtcbiAgdmFyIHNoYXBlcyA9IHJlcXVpcmUoXCIuL3NoYXBlc1wiKTtcbiAgdmFyIGFycm93cyA9IHJlcXVpcmUoXCIuL2Fycm93c1wiKTtcblxuICB2YXIgZm4gPSBmdW5jdGlvbihzdmcsIGcpIHtcbiAgICBwcmVQcm9jZXNzR3JhcGgoZyk7XG5cbiAgICB2YXIgb3V0cHV0R3JvdXAgPSBjcmVhdGVPclNlbGVjdEdyb3VwKHN2ZywgXCJvdXRwdXRcIik7XG4gICAgdmFyIGNsdXN0ZXJzR3JvdXAgPSBjcmVhdGVPclNlbGVjdEdyb3VwKG91dHB1dEdyb3VwLCBcImNsdXN0ZXJzXCIpO1xuICAgIHZhciBlZGdlUGF0aHNHcm91cCA9IGNyZWF0ZU9yU2VsZWN0R3JvdXAob3V0cHV0R3JvdXAsIFwiZWRnZVBhdGhzXCIpO1xuICAgIHZhciBlZGdlTGFiZWxzID0gY3JlYXRlRWRnZUxhYmVscyhjcmVhdGVPclNlbGVjdEdyb3VwKG91dHB1dEdyb3VwLCBcImVkZ2VMYWJlbHNcIiksIGcpO1xuICAgIHZhciBub2RlcyA9IGNyZWF0ZU5vZGVzKGNyZWF0ZU9yU2VsZWN0R3JvdXAob3V0cHV0R3JvdXAsIFwibm9kZXNcIiksIGcsIHNoYXBlcyk7XG5cbiAgICBsYXlvdXQoZyk7XG5cbiAgICBwb3NpdGlvbk5vZGVzKG5vZGVzLCBnKTtcbiAgICBwb3NpdGlvbkVkZ2VMYWJlbHMoZWRnZUxhYmVscywgZyk7XG4gICAgY3JlYXRlRWRnZVBhdGhzKGVkZ2VQYXRoc0dyb3VwLCBnLCBhcnJvd3MpO1xuXG4gICAgdmFyIGNsdXN0ZXJzID0gY3JlYXRlQ2x1c3RlcnMoY2x1c3RlcnNHcm91cCwgZyk7XG4gICAgcG9zaXRpb25DbHVzdGVycyhjbHVzdGVycywgZyk7XG5cbiAgICBwb3N0UHJvY2Vzc0dyYXBoKGcpO1xuICB9O1xuXG4gIGZuLmNyZWF0ZU5vZGVzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjcmVhdGVOb2RlcztcbiAgICBjcmVhdGVOb2RlcyA9IHZhbHVlO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICBmbi5jcmVhdGVDbHVzdGVycyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY3JlYXRlQ2x1c3RlcnM7XG4gICAgY3JlYXRlQ2x1c3RlcnMgPSB2YWx1ZTtcbiAgICByZXR1cm4gZm47XG4gIH07XG5cbiAgZm4uY3JlYXRlRWRnZUxhYmVscyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY3JlYXRlRWRnZUxhYmVscztcbiAgICBjcmVhdGVFZGdlTGFiZWxzID0gdmFsdWU7XG4gICAgcmV0dXJuIGZuO1xuICB9O1xuXG4gIGZuLmNyZWF0ZUVkZ2VQYXRocyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY3JlYXRlRWRnZVBhdGhzO1xuICAgIGNyZWF0ZUVkZ2VQYXRocyA9IHZhbHVlO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICBmbi5zaGFwZXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNoYXBlcztcbiAgICBzaGFwZXMgPSB2YWx1ZTtcbiAgICByZXR1cm4gZm47XG4gIH07XG5cbiAgZm4uYXJyb3dzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBhcnJvd3M7XG4gICAgYXJyb3dzID0gdmFsdWU7XG4gICAgcmV0dXJuIGZuO1xuICB9O1xuXG4gIHJldHVybiBmbjtcbn1cblxudmFyIE5PREVfREVGQVVMVF9BVFRSUyA9IHtcbiAgcGFkZGluZ0xlZnQ6IDEwLFxuICBwYWRkaW5nUmlnaHQ6IDEwLFxuICBwYWRkaW5nVG9wOiAxMCxcbiAgcGFkZGluZ0JvdHRvbTogMTAsXG4gIHJ4OiAwLFxuICByeTogMCxcbiAgc2hhcGU6IFwicmVjdFwiXG59O1xuXG52YXIgRURHRV9ERUZBVUxUX0FUVFJTID0ge1xuICBhcnJvd2hlYWQ6IFwibm9ybWFsXCIsXG4gIGN1cnZlOiBkMy5jdXJ2ZUxpbmVhclxufTtcblxuZnVuY3Rpb24gcHJlUHJvY2Vzc0dyYXBoKGcpIHtcbiAgZy5ub2RlcygpLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIGlmICghXy5oYXMobm9kZSwgXCJsYWJlbFwiKSAmJiAhZy5jaGlsZHJlbih2KS5sZW5ndGgpIHsgbm9kZS5sYWJlbCA9IHY7IH1cblxuICAgIGlmIChfLmhhcyhub2RlLCBcInBhZGRpbmdYXCIpKSB7XG4gICAgICBfLmRlZmF1bHRzKG5vZGUsIHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IG5vZGUucGFkZGluZ1gsXG4gICAgICAgIHBhZGRpbmdSaWdodDogbm9kZS5wYWRkaW5nWFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKF8uaGFzKG5vZGUsIFwicGFkZGluZ1lcIikpIHtcbiAgICAgIF8uZGVmYXVsdHMobm9kZSwge1xuICAgICAgICBwYWRkaW5nVG9wOiBub2RlLnBhZGRpbmdZLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBub2RlLnBhZGRpbmdZXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMobm9kZSwgXCJwYWRkaW5nXCIpKSB7XG4gICAgICBfLmRlZmF1bHRzKG5vZGUsIHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IG5vZGUucGFkZGluZyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBub2RlLnBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdUb3A6IG5vZGUucGFkZGluZyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogbm9kZS5wYWRkaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfLmRlZmF1bHRzKG5vZGUsIE5PREVfREVGQVVMVF9BVFRSUyk7XG5cbiAgICBfLmVhY2goW1wicGFkZGluZ0xlZnRcIiwgXCJwYWRkaW5nUmlnaHRcIiwgXCJwYWRkaW5nVG9wXCIsIFwicGFkZGluZ0JvdHRvbVwiXSwgZnVuY3Rpb24oaykge1xuICAgICAgbm9kZVtrXSA9IE51bWJlcihub2RlW2tdKTtcbiAgICB9KTtcblxuICAgIC8vIFNhdmUgZGltZW5zaW9ucyBmb3IgcmVzdG9yZSBkdXJpbmcgcG9zdC1wcm9jZXNzaW5nXG4gICAgaWYgKF8uaGFzKG5vZGUsIFwid2lkdGhcIikpIHsgbm9kZS5fcHJldldpZHRoID0gbm9kZS53aWR0aDsgfVxuICAgIGlmIChfLmhhcyhub2RlLCBcImhlaWdodFwiKSkgeyBub2RlLl9wcmV2SGVpZ2h0ID0gbm9kZS5oZWlnaHQ7IH1cbiAgfSk7XG5cbiAgZy5lZGdlcygpLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGlmICghXy5oYXMoZWRnZSwgXCJsYWJlbFwiKSkgeyBlZGdlLmxhYmVsID0gXCJcIjsgfVxuICAgIF8uZGVmYXVsdHMoZWRnZSwgRURHRV9ERUZBVUxUX0FUVFJTKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBvc3RQcm9jZXNzR3JhcGgoZykge1xuICBfLmVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG5cbiAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGRpbWVuc2lvbnNcbiAgICBpZiAoXy5oYXMobm9kZSwgXCJfcHJldldpZHRoXCIpKSB7XG4gICAgICBub2RlLndpZHRoID0gbm9kZS5fcHJldldpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgbm9kZS53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAoXy5oYXMobm9kZSwgXCJfcHJldkhlaWdodFwiKSkge1xuICAgICAgbm9kZS5oZWlnaHQgPSBub2RlLl9wcmV2SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgbm9kZS5oZWlnaHQ7XG4gICAgfVxuXG4gICAgZGVsZXRlIG5vZGUuX3ByZXZXaWR0aDtcbiAgICBkZWxldGUgbm9kZS5fcHJldkhlaWdodDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9yU2VsZWN0R3JvdXAocm9vdCwgbmFtZSkge1xuICB2YXIgc2VsZWN0aW9uID0gcm9vdC5zZWxlY3QoXCJnLlwiICsgbmFtZSk7XG4gIGlmIChzZWxlY3Rpb24uZW1wdHkoKSkge1xuICAgIHNlbGVjdGlvbiA9IHJvb3QuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgbmFtZSk7XG4gIH1cbiAgcmV0dXJuIHNlbGVjdGlvbjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaW50ZXJzZWN0UmVjdCA9IHJlcXVpcmUoXCIuL2ludGVyc2VjdC9pbnRlcnNlY3QtcmVjdFwiKTtcbnZhciBpbnRlcnNlY3RFbGxpcHNlID0gcmVxdWlyZShcIi4vaW50ZXJzZWN0L2ludGVyc2VjdC1lbGxpcHNlXCIpO1xudmFyIGludGVyc2VjdENpcmNsZSA9IHJlcXVpcmUoXCIuL2ludGVyc2VjdC9pbnRlcnNlY3QtY2lyY2xlXCIpO1xudmFyIGludGVyc2VjdFBvbHlnb24gPSByZXF1aXJlKFwiLi9pbnRlcnNlY3QvaW50ZXJzZWN0LXBvbHlnb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWN0OiByZWN0LFxuICBlbGxpcHNlOiBlbGxpcHNlLFxuICBjaXJjbGU6IGNpcmNsZSxcbiAgZGlhbW9uZDogZGlhbW9uZFxufTtcblxuZnVuY3Rpb24gcmVjdChwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgdmFyIHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcInJlY3RcIiwgXCI6Zmlyc3QtY2hpbGRcIilcbiAgICAuYXR0cihcInJ4XCIsIG5vZGUucngpXG4gICAgLmF0dHIoXCJyeVwiLCBub2RlLnJ5KVxuICAgIC5hdHRyKFwieFwiLCAtYmJveC53aWR0aCAvIDIpXG4gICAgLmF0dHIoXCJ5XCIsIC1iYm94LmhlaWdodCAvIDIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBiYm94LndpZHRoKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGJib3guaGVpZ2h0KTtcblxuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuXG4gIHJldHVybiBzaGFwZVN2Zztcbn1cblxuZnVuY3Rpb24gZWxsaXBzZShwYXJlbnQsIGJib3gsIG5vZGUpIHtcbiAgdmFyIHJ4ID0gYmJveC53aWR0aCAvIDI7XG4gIHZhciByeSA9IGJib3guaGVpZ2h0IC8gMjtcbiAgdmFyIHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImVsbGlwc2VcIiwgXCI6Zmlyc3QtY2hpbGRcIilcbiAgICAuYXR0cihcInhcIiwgLWJib3gud2lkdGggLyAyKVxuICAgIC5hdHRyKFwieVwiLCAtYmJveC5oZWlnaHQgLyAyKVxuICAgIC5hdHRyKFwicnhcIiwgcngpXG4gICAgLmF0dHIoXCJyeVwiLCByeSk7XG5cbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RFbGxpcHNlKG5vZGUsIHJ4LCByeSwgcG9pbnQpO1xuICB9O1xuXG4gIHJldHVybiBzaGFwZVN2Zztcbn1cblxuZnVuY3Rpb24gY2lyY2xlKHBhcmVudCwgYmJveCwgbm9kZSkge1xuICB2YXIgciA9IE1hdGgubWF4KGJib3gud2lkdGgsIGJib3guaGVpZ2h0KSAvIDI7XG4gIHZhciBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJjaXJjbGVcIiwgXCI6Zmlyc3QtY2hpbGRcIilcbiAgICAuYXR0cihcInhcIiwgLWJib3gud2lkdGggLyAyKVxuICAgIC5hdHRyKFwieVwiLCAtYmJveC5oZWlnaHQgLyAyKVxuICAgIC5hdHRyKFwiclwiLCByKTtcblxuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdENpcmNsZShub2RlLCByLCBwb2ludCk7XG4gIH07XG5cbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuXG4vLyBDaXJjdW1zY3JpYmUgYW4gZWxsaXBzZSBmb3IgdGhlIGJvdW5kaW5nIGJveCB3aXRoIGEgZGlhbW9uZCBzaGFwZS4gSSBkZXJpdmVkXG4vLyB0aGUgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBkaWFtb25kIHNoYXBlIGZyb206XG4vLyBodHRwOi8vbWF0aGZvcnVtLm9yZy9rYi9tZXNzYWdlLmpzcGE/bWVzc2FnZUlEPTM3NTAyMzZcbmZ1bmN0aW9uIGRpYW1vbmQocGFyZW50LCBiYm94LCBub2RlKSB7XG4gIHZhciB3ID0gKGJib3gud2lkdGggKiBNYXRoLlNRUlQyKSAvIDI7XG4gIHZhciBoID0gKGJib3guaGVpZ2h0ICogTWF0aC5TUVJUMikgLyAyO1xuICB2YXIgcG9pbnRzID0gW1xuICAgIHsgeDogIDAsIHk6IC1oIH0sXG4gICAgeyB4OiAtdywgeTogIDAgfSxcbiAgICB7IHg6ICAwLCB5OiAgaCB9LFxuICAgIHsgeDogIHcsIHk6ICAwIH1cbiAgXTtcbiAgdmFyIHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcInBvbHlnb25cIiwgXCI6Zmlyc3QtY2hpbGRcIilcbiAgICAuYXR0cihcInBvaW50c1wiLCBwb2ludHMubWFwKGZ1bmN0aW9uKHApIHsgcmV0dXJuIHAueCArIFwiLFwiICsgcC55OyB9KS5qb2luKFwiIFwiKSk7XG5cbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFBvbHlnb24obm9kZSwgcG9pbnRzLCBwKTtcbiAgfTtcblxuICByZXR1cm4gc2hhcGVTdmc7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcblxuLy8gUHVibGljIHV0aWxpdHkgZnVuY3Rpb25zXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdWJncmFwaDogaXNTdWJncmFwaCxcbiAgZWRnZVRvSWQ6IGVkZ2VUb0lkLFxuICBhcHBseVN0eWxlOiBhcHBseVN0eWxlLFxuICBhcHBseUNsYXNzOiBhcHBseUNsYXNzLFxuICBhcHBseVRyYW5zaXRpb246IGFwcGx5VHJhbnNpdGlvblxufTtcblxuLypcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIG5vZGUgaW4gdGhlIGdyYXBoIGlzIGEgc3ViZ3JhcGggbm9kZS4gQVxuICogc3ViZ3JhcGggbm9kZSBpcyBvbmUgdGhhdCBjb250YWlucyBvdGhlciBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gaXNTdWJncmFwaChnLCB2KSB7XG4gIHJldHVybiAhIWcuY2hpbGRyZW4odikubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBlZGdlVG9JZChlKSB7XG4gIHJldHVybiBlc2NhcGVJZChlLnYpICsgXCI6XCIgKyBlc2NhcGVJZChlLncpICsgXCI6XCIgKyBlc2NhcGVJZChlLm5hbWUpO1xufVxuXG52YXIgSURfREVMSU0gPSAvOi9nO1xuZnVuY3Rpb24gZXNjYXBlSWQoc3RyKSB7XG4gIHJldHVybiBzdHIgPyBTdHJpbmcoc3RyKS5yZXBsYWNlKElEX0RFTElNLCBcIlxcXFw6XCIpIDogXCJcIjtcbn1cblxuZnVuY3Rpb24gYXBwbHlTdHlsZShkb20sIHN0eWxlRm4pIHtcbiAgaWYgKHN0eWxlRm4pIHtcbiAgICBkb20uYXR0cihcInN0eWxlXCIsIHN0eWxlRm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5Q2xhc3MoZG9tLCBjbGFzc0ZuLCBvdGhlckNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzRm4pIHtcbiAgICBkb21cbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgY2xhc3NGbilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgb3RoZXJDbGFzc2VzICsgXCIgXCIgKyBkb20uYXR0cihcImNsYXNzXCIpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zaXRpb24oc2VsZWN0aW9uLCBnKSB7XG4gIHZhciBncmFwaCA9IGcuZ3JhcGgoKTtcblxuICBpZiAoXy5pc1BsYWluT2JqZWN0KGdyYXBoKSkge1xuICAgIHZhciB0cmFuc2l0aW9uID0gZ3JhcGgudHJhbnNpdGlvbjtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHRyYW5zaXRpb24pKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbihzZWxlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb247XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiMC42LjRcIjtcbiIsImV4cG9ydCB2YXIgbmFtZSA9IFwiZDNcIjtcbmV4cG9ydCB2YXIgdmVyc2lvbiA9IFwiNS4xNi4wXCI7XG5leHBvcnQgdmFyIGRlc2NyaXB0aW9uID0gXCJEYXRhLURyaXZlbiBEb2N1bWVudHNcIjtcbmV4cG9ydCB2YXIga2V5d29yZHMgPSBbXCJkb21cIixcInZpc3VhbGl6YXRpb25cIixcInN2Z1wiLFwiYW5pbWF0aW9uXCIsXCJjYW52YXNcIl07XG5leHBvcnQgdmFyIGhvbWVwYWdlID0gXCJodHRwczovL2QzanMub3JnXCI7XG5leHBvcnQgdmFyIGxpY2Vuc2UgPSBcIkJTRC0zLUNsYXVzZVwiO1xuZXhwb3J0IHZhciBhdXRob3IgPSB7XCJuYW1lXCI6XCJNaWtlIEJvc3RvY2tcIixcInVybFwiOlwiaHR0cHM6Ly9ib3N0Lm9ja3Mub3JnL21pa2VcIn07XG5leHBvcnQgdmFyIG1haW4gPSBcImRpc3QvZDMubm9kZS5qc1wiO1xuZXhwb3J0IHZhciB1bnBrZyA9IFwiZGlzdC9kMy5taW4uanNcIjtcbmV4cG9ydCB2YXIganNkZWxpdnIgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIG1vZHVsZSA9IFwiaW5kZXguanNcIjtcbmV4cG9ydCB2YXIgcmVwb3NpdG9yeSA9IHtcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZDMvZDMuZ2l0XCJ9O1xuZXhwb3J0IHZhciBmaWxlcyA9IFtcImRpc3QvKiovKi5qc1wiLFwiaW5kZXguanNcIl07XG5leHBvcnQgdmFyIHNjcmlwdHMgPSB7XCJwcmV0ZXN0XCI6XCJyaW1yYWYgZGlzdCAmJiBta2RpciBkaXN0ICYmIGpzb24ybW9kdWxlIHBhY2thZ2UuanNvbiA+IGRpc3QvcGFja2FnZS5qcyAmJiByb2xsdXAgLWNcIixcInRlc3RcIjpcInRhcGUgJ3Rlc3QvKiovKi10ZXN0LmpzJ1wiLFwicHJlcHVibGlzaE9ubHlcIjpcInlhcm4gdGVzdFwiLFwicG9zdHB1Ymxpc2hcIjpcImdpdCBwdXNoICYmIGdpdCBwdXNoIC0tdGFncyAmJiBjZCAuLi9kMy5naXRodWIuY29tICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL2Rpc3QvZDMuanMgZDMudjUuanMgJiYgY3AgLi4vZDMvZGlzdC9kMy5taW4uanMgZDMudjUubWluLmpzICYmIGdpdCBhZGQgZDMudjUuanMgZDMudjUubWluLmpzICYmIGdpdCBjb21taXQgLW0gXFxcImQzICR7bnBtX3BhY2thZ2VfdmVyc2lvbn1cXFwiICYmIGdpdCBwdXNoICYmIGNkIC0gJiYgY2QgLi4vZDMtYm93ZXIgJiYgZ2l0IHB1bGwgJiYgY3AgLi4vZDMvTElDRU5TRSAuLi9kMy9SRUFETUUubWQgLi4vZDMvZGlzdC9kMy5qcyAuLi9kMy9kaXN0L2QzLm1pbi5qcyAuICYmIGdpdCBhZGQgLS0gTElDRU5TRSBSRUFETUUubWQgZDMuanMgZDMubWluLmpzICYmIGdpdCBjb21taXQgLW0gXFxcIiR7bnBtX3BhY2thZ2VfdmVyc2lvbn1cXFwiICYmIGdpdCB0YWcgLWFtIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiB2JHtucG1fcGFja2FnZV92ZXJzaW9ufSAmJiBnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLSAmJiB6aXAgLWogZGlzdC9kMy56aXAgLS0gTElDRU5TRSBSRUFETUUubWQgQVBJLm1kIENIQU5HRVMubWQgZGlzdC9kMy5qcyBkaXN0L2QzLm1pbi5qc1wifTtcbmV4cG9ydCB2YXIgZGV2RGVwZW5kZW5jaWVzID0ge1wianNvbjJtb2R1bGVcIjpcIjAuMFwiLFwicmltcmFmXCI6XCIyXCIsXCJyb2xsdXBcIjpcIjFcIixcInJvbGx1cC1wbHVnaW4tYXNjaWlcIjpcIjAuMFwiLFwicm9sbHVwLXBsdWdpbi1ub2RlLXJlc29sdmVcIjpcIjNcIixcInJvbGx1cC1wbHVnaW4tdGVyc2VyXCI6XCI1XCIsXCJ0YXBlXCI6XCI0XCJ9O1xuZXhwb3J0IHZhciBkZXBlbmRlbmNpZXMgPSB7XCJkMy1hcnJheVwiOlwiMVwiLFwiZDMtYXhpc1wiOlwiMVwiLFwiZDMtYnJ1c2hcIjpcIjFcIixcImQzLWNob3JkXCI6XCIxXCIsXCJkMy1jb2xsZWN0aW9uXCI6XCIxXCIsXCJkMy1jb2xvclwiOlwiMVwiLFwiZDMtY29udG91clwiOlwiMVwiLFwiZDMtZGlzcGF0Y2hcIjpcIjFcIixcImQzLWRyYWdcIjpcIjFcIixcImQzLWRzdlwiOlwiMVwiLFwiZDMtZWFzZVwiOlwiMVwiLFwiZDMtZmV0Y2hcIjpcIjFcIixcImQzLWZvcmNlXCI6XCIxXCIsXCJkMy1mb3JtYXRcIjpcIjFcIixcImQzLWdlb1wiOlwiMVwiLFwiZDMtaGllcmFyY2h5XCI6XCIxXCIsXCJkMy1pbnRlcnBvbGF0ZVwiOlwiMVwiLFwiZDMtcGF0aFwiOlwiMVwiLFwiZDMtcG9seWdvblwiOlwiMVwiLFwiZDMtcXVhZHRyZWVcIjpcIjFcIixcImQzLXJhbmRvbVwiOlwiMVwiLFwiZDMtc2NhbGVcIjpcIjJcIixcImQzLXNjYWxlLWNocm9tYXRpY1wiOlwiMVwiLFwiZDMtc2VsZWN0aW9uXCI6XCIxXCIsXCJkMy1zaGFwZVwiOlwiMVwiLFwiZDMtdGltZVwiOlwiMVwiLFwiZDMtdGltZS1mb3JtYXRcIjpcIjJcIixcImQzLXRpbWVyXCI6XCIxXCIsXCJkMy10cmFuc2l0aW9uXCI6XCIxXCIsXCJkMy12b3Jvbm9pXCI6XCIxXCIsXCJkMy16b29tXCI6XCIxXCJ9O1xuIiwiZXhwb3J0IHt2ZXJzaW9ufSBmcm9tIFwiLi9kaXN0L3BhY2thZ2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1hcnJheVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWF4aXNcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1icnVzaFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNob3JkXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtY29sbGVjdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNvbG9yXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtY29udG91clwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtZHJhZ1wiO1xuZXhwb3J0ICogZnJvbSBcImQzLWRzdlwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWVhc2VcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1mZXRjaFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWZvcmNlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtZm9ybWF0XCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtZ2VvXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtaGllcmFyY2h5XCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1wYXRoXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtcG9seWdvblwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtcmFuZG9tXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2NhbGVcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1zaGFwZVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXRpbWVcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy10aW1lLWZvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXRpbWVyXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXZvcm9ub2lcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy16b29tXCI7XG4iLCIvKlxuQ29weXJpZ2h0IChjKSAyMDEyLTIwMTQgQ2hyaXMgUGV0dGl0dFxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ3JhcGhsaWI6IHJlcXVpcmUoXCIuL2xpYi9ncmFwaGxpYlwiKSxcblxuICBsYXlvdXQ6IHJlcXVpcmUoXCIuL2xpYi9sYXlvdXRcIiksXG4gIGRlYnVnOiByZXF1aXJlKFwiLi9saWIvZGVidWdcIiksXG4gIHV0aWw6IHtcbiAgICB0aW1lOiByZXF1aXJlKFwiLi9saWIvdXRpbFwiKS50aW1lLFxuICAgIG5vdGltZTogcmVxdWlyZShcIi4vbGliL3V0aWxcIikubm90aW1lXG4gIH0sXG4gIHZlcnNpb246IHJlcXVpcmUoXCIuL2xpYi92ZXJzaW9uXCIpXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIGdyZWVkeUZBUyA9IHJlcXVpcmUoXCIuL2dyZWVkeS1mYXNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydW46IHJ1bixcbiAgdW5kbzogdW5kb1xufTtcblxuZnVuY3Rpb24gcnVuKGcpIHtcbiAgdmFyIGZhcyA9IChnLmdyYXBoKCkuYWN5Y2xpY2VyID09PSBcImdyZWVkeVwiXG4gICAgPyBncmVlZHlGQVMoZywgd2VpZ2h0Rm4oZykpXG4gICAgOiBkZnNGQVMoZykpO1xuICBfLmZvckVhY2goZmFzLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGxhYmVsID0gZy5lZGdlKGUpO1xuICAgIGcucmVtb3ZlRWRnZShlKTtcbiAgICBsYWJlbC5mb3J3YXJkTmFtZSA9IGUubmFtZTtcbiAgICBsYWJlbC5yZXZlcnNlZCA9IHRydWU7XG4gICAgZy5zZXRFZGdlKGUudywgZS52LCBsYWJlbCwgXy51bmlxdWVJZChcInJldlwiKSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHdlaWdodEZuKGcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIGcuZWRnZShlKS53ZWlnaHQ7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZnNGQVMoZykge1xuICB2YXIgZmFzID0gW107XG4gIHZhciBzdGFjayA9IHt9O1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuXG4gIGZ1bmN0aW9uIGRmcyh2KSB7XG4gICAgaWYgKF8uaGFzKHZpc2l0ZWQsIHYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuICAgIHN0YWNrW3ZdID0gdHJ1ZTtcbiAgICBfLmZvckVhY2goZy5vdXRFZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKF8uaGFzKHN0YWNrLCBlLncpKSB7XG4gICAgICAgIGZhcy5wdXNoKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGZzKGUudyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZGVsZXRlIHN0YWNrW3ZdO1xuICB9XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZGZzKTtcbiAgcmV0dXJuIGZhcztcbn1cblxuZnVuY3Rpb24gdW5kbyhnKSB7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgbGFiZWwgPSBnLmVkZ2UoZSk7XG4gICAgaWYgKGxhYmVsLnJldmVyc2VkKSB7XG4gICAgICBnLnJlbW92ZUVkZ2UoZSk7XG5cbiAgICAgIHZhciBmb3J3YXJkTmFtZSA9IGxhYmVsLmZvcndhcmROYW1lO1xuICAgICAgZGVsZXRlIGxhYmVsLnJldmVyc2VkO1xuICAgICAgZGVsZXRlIGxhYmVsLmZvcndhcmROYW1lO1xuICAgICAgZy5zZXRFZGdlKGUudywgZS52LCBsYWJlbCwgZm9yd2FyZE5hbWUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZGRCb3JkZXJTZWdtZW50cztcblxuZnVuY3Rpb24gYWRkQm9yZGVyU2VnbWVudHMoZykge1xuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBjaGlsZHJlbiA9IGcuY2hpbGRyZW4odik7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuLCBkZnMpO1xuICAgIH1cblxuICAgIGlmIChfLmhhcyhub2RlLCBcIm1pblJhbmtcIikpIHtcbiAgICAgIG5vZGUuYm9yZGVyTGVmdCA9IFtdO1xuICAgICAgbm9kZS5ib3JkZXJSaWdodCA9IFtdO1xuICAgICAgZm9yICh2YXIgcmFuayA9IG5vZGUubWluUmFuaywgbWF4UmFuayA9IG5vZGUubWF4UmFuayArIDE7XG4gICAgICAgIHJhbmsgPCBtYXhSYW5rO1xuICAgICAgICArK3JhbmspIHtcbiAgICAgICAgYWRkQm9yZGVyTm9kZShnLCBcImJvcmRlckxlZnRcIiwgXCJfYmxcIiwgdiwgbm9kZSwgcmFuayk7XG4gICAgICAgIGFkZEJvcmRlck5vZGUoZywgXCJib3JkZXJSaWdodFwiLCBcIl9iclwiLCB2LCBub2RlLCByYW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfLmZvckVhY2goZy5jaGlsZHJlbigpLCBkZnMpO1xufVxuXG5mdW5jdGlvbiBhZGRCb3JkZXJOb2RlKGcsIHByb3AsIHByZWZpeCwgc2csIHNnTm9kZSwgcmFuaykge1xuICB2YXIgbGFiZWwgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAsIHJhbms6IHJhbmssIGJvcmRlclR5cGU6IHByb3AgfTtcbiAgdmFyIHByZXYgPSBzZ05vZGVbcHJvcF1bcmFuayAtIDFdO1xuICB2YXIgY3VyciA9IHV0aWwuYWRkRHVtbXlOb2RlKGcsIFwiYm9yZGVyXCIsIGxhYmVsLCBwcmVmaXgpO1xuICBzZ05vZGVbcHJvcF1bcmFua10gPSBjdXJyO1xuICBnLnNldFBhcmVudChjdXJyLCBzZyk7XG4gIGlmIChwcmV2KSB7XG4gICAgZy5zZXRFZGdlKHByZXYsIGN1cnIsIHsgd2VpZ2h0OiAxIH0pO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGp1c3Q6IGFkanVzdCxcbiAgdW5kbzogdW5kb1xufTtcblxuZnVuY3Rpb24gYWRqdXN0KGcpIHtcbiAgdmFyIHJhbmtEaXIgPSBnLmdyYXBoKCkucmFua2Rpci50b0xvd2VyQ2FzZSgpO1xuICBpZiAocmFua0RpciA9PT0gXCJsclwiIHx8IHJhbmtEaXIgPT09IFwicmxcIikge1xuICAgIHN3YXBXaWR0aEhlaWdodChnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmRvKGcpIHtcbiAgdmFyIHJhbmtEaXIgPSBnLmdyYXBoKCkucmFua2Rpci50b0xvd2VyQ2FzZSgpO1xuICBpZiAocmFua0RpciA9PT0gXCJidFwiIHx8IHJhbmtEaXIgPT09IFwicmxcIikge1xuICAgIHJldmVyc2VZKGcpO1xuICB9XG5cbiAgaWYgKHJhbmtEaXIgPT09IFwibHJcIiB8fCByYW5rRGlyID09PSBcInJsXCIpIHtcbiAgICBzd2FwWFkoZyk7XG4gICAgc3dhcFdpZHRoSGVpZ2h0KGcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN3YXBXaWR0aEhlaWdodChnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgc3dhcFdpZHRoSGVpZ2h0T25lKGcubm9kZSh2KSk7IH0pO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7IHN3YXBXaWR0aEhlaWdodE9uZShnLmVkZ2UoZSkpOyB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcFdpZHRoSGVpZ2h0T25lKGF0dHJzKSB7XG4gIHZhciB3ID0gYXR0cnMud2lkdGg7XG4gIGF0dHJzLndpZHRoID0gYXR0cnMuaGVpZ2h0O1xuICBhdHRycy5oZWlnaHQgPSB3O1xufVxuXG5mdW5jdGlvbiByZXZlcnNlWShnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgcmV2ZXJzZVlPbmUoZy5ub2RlKHYpKTsgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIF8uZm9yRWFjaChlZGdlLnBvaW50cywgcmV2ZXJzZVlPbmUpO1xuICAgIGlmIChfLmhhcyhlZGdlLCBcInlcIikpIHtcbiAgICAgIHJldmVyc2VZT25lKGVkZ2UpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VZT25lKGF0dHJzKSB7XG4gIGF0dHJzLnkgPSAtYXR0cnMueTtcbn1cblxuZnVuY3Rpb24gc3dhcFhZKGcpIHtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikgeyBzd2FwWFlPbmUoZy5ub2RlKHYpKTsgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIF8uZm9yRWFjaChlZGdlLnBvaW50cywgc3dhcFhZT25lKTtcbiAgICBpZiAoXy5oYXMoZWRnZSwgXCJ4XCIpKSB7XG4gICAgICBzd2FwWFlPbmUoZWRnZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcFhZT25lKGF0dHJzKSB7XG4gIHZhciB4ID0gYXR0cnMueDtcbiAgYXR0cnMueCA9IGF0dHJzLnk7XG4gIGF0dHJzLnkgPSB4O1xufVxuIiwiLypcbiAqIFNpbXBsZSBkb3VibHkgbGlua2VkIGxpc3QgaW1wbGVtZW50YXRpb24gZGVyaXZlZCBmcm9tIENvcm1lbiwgZXQgYWwuLFxuICogXCJJbnRyb2R1Y3Rpb24gdG8gQWxnb3JpdGhtc1wiLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdDtcblxuZnVuY3Rpb24gTGlzdCgpIHtcbiAgdmFyIHNlbnRpbmVsID0ge307XG4gIHNlbnRpbmVsLl9uZXh0ID0gc2VudGluZWwuX3ByZXYgPSBzZW50aW5lbDtcbiAgdGhpcy5fc2VudGluZWwgPSBzZW50aW5lbDtcbn1cblxuTGlzdC5wcm90b3R5cGUuZGVxdWV1ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VudGluZWwgPSB0aGlzLl9zZW50aW5lbDtcbiAgdmFyIGVudHJ5ID0gc2VudGluZWwuX3ByZXY7XG4gIGlmIChlbnRyeSAhPT0gc2VudGluZWwpIHtcbiAgICB1bmxpbmsoZW50cnkpO1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxuTGlzdC5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uKGVudHJ5KSB7XG4gIHZhciBzZW50aW5lbCA9IHRoaXMuX3NlbnRpbmVsO1xuICBpZiAoZW50cnkuX3ByZXYgJiYgZW50cnkuX25leHQpIHtcbiAgICB1bmxpbmsoZW50cnkpO1xuICB9XG4gIGVudHJ5Ll9uZXh0ID0gc2VudGluZWwuX25leHQ7XG4gIHNlbnRpbmVsLl9uZXh0Ll9wcmV2ID0gZW50cnk7XG4gIHNlbnRpbmVsLl9uZXh0ID0gZW50cnk7XG4gIGVudHJ5Ll9wcmV2ID0gc2VudGluZWw7XG59O1xuXG5MaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RycyA9IFtdO1xuICB2YXIgc2VudGluZWwgPSB0aGlzLl9zZW50aW5lbDtcbiAgdmFyIGN1cnIgPSBzZW50aW5lbC5fcHJldjtcbiAgd2hpbGUgKGN1cnIgIT09IHNlbnRpbmVsKSB7XG4gICAgc3Rycy5wdXNoKEpTT04uc3RyaW5naWZ5KGN1cnIsIGZpbHRlck91dExpbmtzKSk7XG4gICAgY3VyciA9IGN1cnIuX3ByZXY7XG4gIH1cbiAgcmV0dXJuIFwiW1wiICsgc3Rycy5qb2luKFwiLCBcIikgKyBcIl1cIjtcbn07XG5cbmZ1bmN0aW9uIHVubGluayhlbnRyeSkge1xuICBlbnRyeS5fcHJldi5fbmV4dCA9IGVudHJ5Ll9uZXh0O1xuICBlbnRyeS5fbmV4dC5fcHJldiA9IGVudHJ5Ll9wcmV2O1xuICBkZWxldGUgZW50cnkuX25leHQ7XG4gIGRlbGV0ZSBlbnRyeS5fcHJldjtcbn1cblxuZnVuY3Rpb24gZmlsdGVyT3V0TGlua3Moaywgdikge1xuICBpZiAoayAhPT0gXCJfbmV4dFwiICYmIGsgIT09IFwiX3ByZXZcIikge1xuICAgIHJldHVybiB2O1xuICB9XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuL2dyYXBobGliXCIpLkdyYXBoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVidWdPcmRlcmluZzogZGVidWdPcmRlcmluZ1xufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGRlYnVnT3JkZXJpbmcoZykge1xuICB2YXIgbGF5ZXJNYXRyaXggPSB1dGlsLmJ1aWxkTGF5ZXJNYXRyaXgoZyk7XG5cbiAgdmFyIGggPSBuZXcgR3JhcGgoeyBjb21wb3VuZDogdHJ1ZSwgbXVsdGlncmFwaDogdHJ1ZSB9KS5zZXRHcmFwaCh7fSk7XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIGguc2V0Tm9kZSh2LCB7IGxhYmVsOiB2IH0pO1xuICAgIGguc2V0UGFyZW50KHYsIFwibGF5ZXJcIiArIGcubm9kZSh2KS5yYW5rKTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIGguc2V0RWRnZShlLnYsIGUudywge30sIGUubmFtZSk7XG4gIH0pO1xuXG4gIF8uZm9yRWFjaChsYXllck1hdHJpeCwgZnVuY3Rpb24obGF5ZXIsIGkpIHtcbiAgICB2YXIgbGF5ZXJWID0gXCJsYXllclwiICsgaTtcbiAgICBoLnNldE5vZGUobGF5ZXJWLCB7IHJhbms6IFwic2FtZVwiIH0pO1xuICAgIF8ucmVkdWNlKGxheWVyLCBmdW5jdGlvbih1LCB2KSB7XG4gICAgICBoLnNldEVkZ2UodSwgdiwgeyBzdHlsZTogXCJpbnZpc1wiIH0pO1xuICAgICAgcmV0dXJuIHY7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBoO1xufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgZ3JhcGhsaWI7XG5cbmlmICh0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIHRyeSB7XG4gICAgZ3JhcGhsaWIgPSByZXF1aXJlKFwiZ3JhcGhsaWJcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gIH1cbn1cblxuaWYgKCFncmFwaGxpYikge1xuICBncmFwaGxpYiA9IHdpbmRvdy5ncmFwaGxpYjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBncmFwaGxpYjtcbiIsInZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIEdyYXBoID0gcmVxdWlyZShcIi4vZ3JhcGhsaWJcIikuR3JhcGg7XG52YXIgTGlzdCA9IHJlcXVpcmUoXCIuL2RhdGEvbGlzdFwiKTtcblxuLypcbiAqIEEgZ3JlZWR5IGhldXJpc3RpYyBmb3IgZmluZGluZyBhIGZlZWRiYWNrIGFyYyBzZXQgZm9yIGEgZ3JhcGguIEEgZmVlZGJhY2tcbiAqIGFyYyBzZXQgaXMgYSBzZXQgb2YgZWRnZXMgdGhhdCBjYW4gYmUgcmVtb3ZlZCB0byBtYWtlIGEgZ3JhcGggYWN5Y2xpYy5cbiAqIFRoZSBhbGdvcml0aG0gY29tZXMgZnJvbTogUC4gRWFkZXMsIFguIExpbiwgYW5kIFcuIEYuIFNteXRoLCBcIkEgZmFzdCBhbmRcbiAqIGVmZmVjdGl2ZSBoZXVyaXN0aWMgZm9yIHRoZSBmZWVkYmFjayBhcmMgc2V0IHByb2JsZW0uXCIgVGhpcyBpbXBsZW1lbnRhdGlvblxuICogYWRqdXN0cyB0aGF0IGZyb20gdGhlIHBhcGVyIHRvIGFsbG93IGZvciB3ZWlnaHRlZCBlZGdlcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBncmVlZHlGQVM7XG5cbnZhciBERUZBVUxUX1dFSUdIVF9GTiA9IF8uY29uc3RhbnQoMSk7XG5cbmZ1bmN0aW9uIGdyZWVkeUZBUyhnLCB3ZWlnaHRGbikge1xuICBpZiAoZy5ub2RlQ291bnQoKSA8PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBzdGF0ZSA9IGJ1aWxkU3RhdGUoZywgd2VpZ2h0Rm4gfHwgREVGQVVMVF9XRUlHSFRfRk4pO1xuICB2YXIgcmVzdWx0cyA9IGRvR3JlZWR5RkFTKHN0YXRlLmdyYXBoLCBzdGF0ZS5idWNrZXRzLCBzdGF0ZS56ZXJvSWR4KTtcblxuICAvLyBFeHBhbmQgbXVsdGktZWRnZXNcbiAgcmV0dXJuIF8uZmxhdHRlbihfLm1hcChyZXN1bHRzLCBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGcub3V0RWRnZXMoZS52LCBlLncpO1xuICB9KSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGRvR3JlZWR5RkFTKGcsIGJ1Y2tldHMsIHplcm9JZHgpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIHNvdXJjZXMgPSBidWNrZXRzW2J1Y2tldHMubGVuZ3RoIC0gMV07XG4gIHZhciBzaW5rcyA9IGJ1Y2tldHNbMF07XG5cbiAgdmFyIGVudHJ5O1xuICB3aGlsZSAoZy5ub2RlQ291bnQoKSkge1xuICAgIHdoaWxlICgoZW50cnkgPSBzaW5rcy5kZXF1ZXVlKCkpKSAgIHsgcmVtb3ZlTm9kZShnLCBidWNrZXRzLCB6ZXJvSWR4LCBlbnRyeSk7IH1cbiAgICB3aGlsZSAoKGVudHJ5ID0gc291cmNlcy5kZXF1ZXVlKCkpKSB7IHJlbW92ZU5vZGUoZywgYnVja2V0cywgemVyb0lkeCwgZW50cnkpOyB9XG4gICAgaWYgKGcubm9kZUNvdW50KCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSBidWNrZXRzLmxlbmd0aCAtIDI7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgZW50cnkgPSBidWNrZXRzW2ldLmRlcXVldWUoKTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHJlbW92ZU5vZGUoZywgYnVja2V0cywgemVyb0lkeCwgZW50cnksIHRydWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKGcsIGJ1Y2tldHMsIHplcm9JZHgsIGVudHJ5LCBjb2xsZWN0UHJlZGVjZXNzb3JzKSB7XG4gIHZhciByZXN1bHRzID0gY29sbGVjdFByZWRlY2Vzc29ycyA/IFtdIDogdW5kZWZpbmVkO1xuXG4gIF8uZm9yRWFjaChnLmluRWRnZXMoZW50cnkudiksIGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICB2YXIgd2VpZ2h0ID0gZy5lZGdlKGVkZ2UpO1xuICAgIHZhciB1RW50cnkgPSBnLm5vZGUoZWRnZS52KTtcblxuICAgIGlmIChjb2xsZWN0UHJlZGVjZXNzb3JzKSB7XG4gICAgICByZXN1bHRzLnB1c2goeyB2OiBlZGdlLnYsIHc6IGVkZ2UudyB9KTtcbiAgICB9XG5cbiAgICB1RW50cnkub3V0IC09IHdlaWdodDtcbiAgICBhc3NpZ25CdWNrZXQoYnVja2V0cywgemVyb0lkeCwgdUVudHJ5KTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGcub3V0RWRnZXMoZW50cnkudiksIGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICB2YXIgd2VpZ2h0ID0gZy5lZGdlKGVkZ2UpO1xuICAgIHZhciB3ID0gZWRnZS53O1xuICAgIHZhciB3RW50cnkgPSBnLm5vZGUodyk7XG4gICAgd0VudHJ5W1wiaW5cIl0gLT0gd2VpZ2h0O1xuICAgIGFzc2lnbkJ1Y2tldChidWNrZXRzLCB6ZXJvSWR4LCB3RW50cnkpO1xuICB9KTtcblxuICBnLnJlbW92ZU5vZGUoZW50cnkudik7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkU3RhdGUoZywgd2VpZ2h0Rm4pIHtcbiAgdmFyIGZhc0dyYXBoID0gbmV3IEdyYXBoKCk7XG4gIHZhciBtYXhJbiA9IDA7XG4gIHZhciBtYXhPdXQgPSAwO1xuXG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICBmYXNHcmFwaC5zZXROb2RlKHYsIHsgdjogdiwgXCJpblwiOiAwLCBvdXQ6IDAgfSk7XG4gIH0pO1xuXG4gIC8vIEFnZ3JlZ2F0ZSB3ZWlnaHRzIG9uIG5vZGVzLCBidXQgYWxzbyBzdW0gdGhlIHdlaWdodHMgYWNyb3NzIG11bHRpLWVkZ2VzXG4gIC8vIGludG8gYSBzaW5nbGUgZWRnZSBmb3IgdGhlIGZhc0dyYXBoLlxuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHByZXZXZWlnaHQgPSBmYXNHcmFwaC5lZGdlKGUudiwgZS53KSB8fCAwO1xuICAgIHZhciB3ZWlnaHQgPSB3ZWlnaHRGbihlKTtcbiAgICB2YXIgZWRnZVdlaWdodCA9IHByZXZXZWlnaHQgKyB3ZWlnaHQ7XG4gICAgZmFzR3JhcGguc2V0RWRnZShlLnYsIGUudywgZWRnZVdlaWdodCk7XG4gICAgbWF4T3V0ID0gTWF0aC5tYXgobWF4T3V0LCBmYXNHcmFwaC5ub2RlKGUudikub3V0ICs9IHdlaWdodCk7XG4gICAgbWF4SW4gID0gTWF0aC5tYXgobWF4SW4sICBmYXNHcmFwaC5ub2RlKGUudylbXCJpblwiXSAgKz0gd2VpZ2h0KTtcbiAgfSk7XG5cbiAgdmFyIGJ1Y2tldHMgPSBfLnJhbmdlKG1heE91dCArIG1heEluICsgMykubWFwKGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IExpc3QoKTsgfSk7XG4gIHZhciB6ZXJvSWR4ID0gbWF4SW4gKyAxO1xuXG4gIF8uZm9yRWFjaChmYXNHcmFwaC5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgYXNzaWduQnVja2V0KGJ1Y2tldHMsIHplcm9JZHgsIGZhc0dyYXBoLm5vZGUodikpO1xuICB9KTtcblxuICByZXR1cm4geyBncmFwaDogZmFzR3JhcGgsIGJ1Y2tldHM6IGJ1Y2tldHMsIHplcm9JZHg6IHplcm9JZHggfTtcbn1cblxuZnVuY3Rpb24gYXNzaWduQnVja2V0KGJ1Y2tldHMsIHplcm9JZHgsIGVudHJ5KSB7XG4gIGlmICghZW50cnkub3V0KSB7XG4gICAgYnVja2V0c1swXS5lbnF1ZXVlKGVudHJ5KTtcbiAgfSBlbHNlIGlmICghZW50cnlbXCJpblwiXSkge1xuICAgIGJ1Y2tldHNbYnVja2V0cy5sZW5ndGggLSAxXS5lbnF1ZXVlKGVudHJ5KTtcbiAgfSBlbHNlIHtcbiAgICBidWNrZXRzW2VudHJ5Lm91dCAtIGVudHJ5W1wiaW5cIl0gKyB6ZXJvSWR4XS5lbnF1ZXVlKGVudHJ5KTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIGFjeWNsaWMgPSByZXF1aXJlKFwiLi9hY3ljbGljXCIpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZVwiKTtcbnZhciByYW5rID0gcmVxdWlyZShcIi4vcmFua1wiKTtcbnZhciBub3JtYWxpemVSYW5rcyA9IHJlcXVpcmUoXCIuL3V0aWxcIikubm9ybWFsaXplUmFua3M7XG52YXIgcGFyZW50RHVtbXlDaGFpbnMgPSByZXF1aXJlKFwiLi9wYXJlbnQtZHVtbXktY2hhaW5zXCIpO1xudmFyIHJlbW92ZUVtcHR5UmFua3MgPSByZXF1aXJlKFwiLi91dGlsXCIpLnJlbW92ZUVtcHR5UmFua3M7XG52YXIgbmVzdGluZ0dyYXBoID0gcmVxdWlyZShcIi4vbmVzdGluZy1ncmFwaFwiKTtcbnZhciBhZGRCb3JkZXJTZWdtZW50cyA9IHJlcXVpcmUoXCIuL2FkZC1ib3JkZXItc2VnbWVudHNcIik7XG52YXIgY29vcmRpbmF0ZVN5c3RlbSA9IHJlcXVpcmUoXCIuL2Nvb3JkaW5hdGUtc3lzdGVtXCIpO1xudmFyIG9yZGVyID0gcmVxdWlyZShcIi4vb3JkZXJcIik7XG52YXIgcG9zaXRpb24gPSByZXF1aXJlKFwiLi9wb3NpdGlvblwiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuL2dyYXBobGliXCIpLkdyYXBoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxheW91dDtcblxuZnVuY3Rpb24gbGF5b3V0KGcsIG9wdHMpIHtcbiAgdmFyIHRpbWUgPSBvcHRzICYmIG9wdHMuZGVidWdUaW1pbmcgPyB1dGlsLnRpbWUgOiB1dGlsLm5vdGltZTtcbiAgdGltZShcImxheW91dFwiLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGF5b3V0R3JhcGggPSBcbiAgICAgIHRpbWUoXCIgIGJ1aWxkTGF5b3V0R3JhcGhcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBidWlsZExheW91dEdyYXBoKGcpOyB9KTtcbiAgICB0aW1lKFwiICBydW5MYXlvdXRcIiwgICAgICAgIGZ1bmN0aW9uKCkgeyBydW5MYXlvdXQobGF5b3V0R3JhcGgsIHRpbWUpOyB9KTtcbiAgICB0aW1lKFwiICB1cGRhdGVJbnB1dEdyYXBoXCIsIGZ1bmN0aW9uKCkgeyB1cGRhdGVJbnB1dEdyYXBoKGcsIGxheW91dEdyYXBoKTsgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBydW5MYXlvdXQoZywgdGltZSkge1xuICB0aW1lKFwiICAgIG1ha2VTcGFjZUZvckVkZ2VMYWJlbHNcIiwgZnVuY3Rpb24oKSB7IG1ha2VTcGFjZUZvckVkZ2VMYWJlbHMoZyk7IH0pO1xuICB0aW1lKFwiICAgIHJlbW92ZVNlbGZFZGdlc1wiLCAgICAgICAgZnVuY3Rpb24oKSB7IHJlbW92ZVNlbGZFZGdlcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgYWN5Y2xpY1wiLCAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHsgYWN5Y2xpYy5ydW4oZyk7IH0pO1xuICB0aW1lKFwiICAgIG5lc3RpbmdHcmFwaC5ydW5cIiwgICAgICAgZnVuY3Rpb24oKSB7IG5lc3RpbmdHcmFwaC5ydW4oZyk7IH0pO1xuICB0aW1lKFwiICAgIHJhbmtcIiwgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJhbmsodXRpbC5hc05vbkNvbXBvdW5kR3JhcGgoZykpOyB9KTtcbiAgdGltZShcIiAgICBpbmplY3RFZGdlTGFiZWxQcm94aWVzXCIsIGZ1bmN0aW9uKCkgeyBpbmplY3RFZGdlTGFiZWxQcm94aWVzKGcpOyB9KTtcbiAgdGltZShcIiAgICByZW1vdmVFbXB0eVJhbmtzXCIsICAgICAgIGZ1bmN0aW9uKCkgeyByZW1vdmVFbXB0eVJhbmtzKGcpOyB9KTtcbiAgdGltZShcIiAgICBuZXN0aW5nR3JhcGguY2xlYW51cFwiLCAgIGZ1bmN0aW9uKCkgeyBuZXN0aW5nR3JhcGguY2xlYW51cChnKTsgfSk7XG4gIHRpbWUoXCIgICAgbm9ybWFsaXplUmFua3NcIiwgICAgICAgICBmdW5jdGlvbigpIHsgbm9ybWFsaXplUmFua3MoZyk7IH0pO1xuICB0aW1lKFwiICAgIGFzc2lnblJhbmtNaW5NYXhcIiwgICAgICAgZnVuY3Rpb24oKSB7IGFzc2lnblJhbmtNaW5NYXgoZyk7IH0pO1xuICB0aW1lKFwiICAgIHJlbW92ZUVkZ2VMYWJlbFByb3hpZXNcIiwgZnVuY3Rpb24oKSB7IHJlbW92ZUVkZ2VMYWJlbFByb3hpZXMoZyk7IH0pO1xuICB0aW1lKFwiICAgIG5vcm1hbGl6ZS5ydW5cIiwgICAgICAgICAgZnVuY3Rpb24oKSB7IG5vcm1hbGl6ZS5ydW4oZyk7IH0pO1xuICB0aW1lKFwiICAgIHBhcmVudER1bW15Q2hhaW5zXCIsICAgICAgZnVuY3Rpb24oKSB7IHBhcmVudER1bW15Q2hhaW5zKGcpOyB9KTtcbiAgdGltZShcIiAgICBhZGRCb3JkZXJTZWdtZW50c1wiLCAgICAgIGZ1bmN0aW9uKCkgeyBhZGRCb3JkZXJTZWdtZW50cyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgb3JkZXJcIiwgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHsgb3JkZXIoZyk7IH0pO1xuICB0aW1lKFwiICAgIGluc2VydFNlbGZFZGdlc1wiLCAgICAgICAgZnVuY3Rpb24oKSB7IGluc2VydFNlbGZFZGdlcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgYWRqdXN0Q29vcmRpbmF0ZVN5c3RlbVwiLCBmdW5jdGlvbigpIHsgY29vcmRpbmF0ZVN5c3RlbS5hZGp1c3QoZyk7IH0pO1xuICB0aW1lKFwiICAgIHBvc2l0aW9uXCIsICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHBvc2l0aW9uKGcpOyB9KTtcbiAgdGltZShcIiAgICBwb3NpdGlvblNlbGZFZGdlc1wiLCAgICAgIGZ1bmN0aW9uKCkgeyBwb3NpdGlvblNlbGZFZGdlcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgcmVtb3ZlQm9yZGVyTm9kZXNcIiwgICAgICBmdW5jdGlvbigpIHsgcmVtb3ZlQm9yZGVyTm9kZXMoZyk7IH0pO1xuICB0aW1lKFwiICAgIG5vcm1hbGl6ZS51bmRvXCIsICAgICAgICAgZnVuY3Rpb24oKSB7IG5vcm1hbGl6ZS51bmRvKGcpOyB9KTtcbiAgdGltZShcIiAgICBmaXh1cEVkZ2VMYWJlbENvb3Jkc1wiLCAgIGZ1bmN0aW9uKCkgeyBmaXh1cEVkZ2VMYWJlbENvb3JkcyhnKTsgfSk7XG4gIHRpbWUoXCIgICAgdW5kb0Nvb3JkaW5hdGVTeXN0ZW1cIiwgICBmdW5jdGlvbigpIHsgY29vcmRpbmF0ZVN5c3RlbS51bmRvKGcpOyB9KTtcbiAgdGltZShcIiAgICB0cmFuc2xhdGVHcmFwaFwiLCAgICAgICAgIGZ1bmN0aW9uKCkgeyB0cmFuc2xhdGVHcmFwaChnKTsgfSk7XG4gIHRpbWUoXCIgICAgYXNzaWduTm9kZUludGVyc2VjdHNcIiwgICBmdW5jdGlvbigpIHsgYXNzaWduTm9kZUludGVyc2VjdHMoZyk7IH0pO1xuICB0aW1lKFwiICAgIHJldmVyc2VQb2ludHNcIiwgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldmVyc2VQb2ludHNGb3JSZXZlcnNlZEVkZ2VzKGcpOyB9KTtcbiAgdGltZShcIiAgICBhY3ljbGljLnVuZG9cIiwgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBhY3ljbGljLnVuZG8oZyk7IH0pO1xufVxuXG4vKlxuICogQ29waWVzIGZpbmFsIGxheW91dCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBsYXlvdXQgZ3JhcGggYmFjayB0byB0aGUgaW5wdXRcbiAqIGdyYXBoLiBUaGlzIHByb2Nlc3Mgb25seSBjb3BpZXMgd2hpdGVsaXN0ZWQgYXR0cmlidXRlcyBmcm9tIHRoZSBsYXlvdXQgZ3JhcGhcbiAqIHRvIHRoZSBpbnB1dCBncmFwaCwgc28gaXQgc2VydmVzIGFzIGEgZ29vZCBwbGFjZSB0byBkZXRlcm1pbmUgd2hhdFxuICogYXR0cmlidXRlcyBjYW4gaW5mbHVlbmNlIGxheW91dC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlSW5wdXRHcmFwaChpbnB1dEdyYXBoLCBsYXlvdXRHcmFwaCkge1xuICBfLmZvckVhY2goaW5wdXRHcmFwaC5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIGlucHV0TGFiZWwgPSBpbnB1dEdyYXBoLm5vZGUodik7XG4gICAgdmFyIGxheW91dExhYmVsID0gbGF5b3V0R3JhcGgubm9kZSh2KTtcblxuICAgIGlmIChpbnB1dExhYmVsKSB7XG4gICAgICBpbnB1dExhYmVsLnggPSBsYXlvdXRMYWJlbC54O1xuICAgICAgaW5wdXRMYWJlbC55ID0gbGF5b3V0TGFiZWwueTtcblxuICAgICAgaWYgKGxheW91dEdyYXBoLmNoaWxkcmVuKHYpLmxlbmd0aCkge1xuICAgICAgICBpbnB1dExhYmVsLndpZHRoID0gbGF5b3V0TGFiZWwud2lkdGg7XG4gICAgICAgIGlucHV0TGFiZWwuaGVpZ2h0ID0gbGF5b3V0TGFiZWwuaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGlucHV0R3JhcGguZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBpbnB1dExhYmVsID0gaW5wdXRHcmFwaC5lZGdlKGUpO1xuICAgIHZhciBsYXlvdXRMYWJlbCA9IGxheW91dEdyYXBoLmVkZ2UoZSk7XG5cbiAgICBpbnB1dExhYmVsLnBvaW50cyA9IGxheW91dExhYmVsLnBvaW50cztcbiAgICBpZiAoXy5oYXMobGF5b3V0TGFiZWwsIFwieFwiKSkge1xuICAgICAgaW5wdXRMYWJlbC54ID0gbGF5b3V0TGFiZWwueDtcbiAgICAgIGlucHV0TGFiZWwueSA9IGxheW91dExhYmVsLnk7XG4gICAgfVxuICB9KTtcblxuICBpbnB1dEdyYXBoLmdyYXBoKCkud2lkdGggPSBsYXlvdXRHcmFwaC5ncmFwaCgpLndpZHRoO1xuICBpbnB1dEdyYXBoLmdyYXBoKCkuaGVpZ2h0ID0gbGF5b3V0R3JhcGguZ3JhcGgoKS5oZWlnaHQ7XG59XG5cbnZhciBncmFwaE51bUF0dHJzID0gW1wibm9kZXNlcFwiLCBcImVkZ2VzZXBcIiwgXCJyYW5rc2VwXCIsIFwibWFyZ2lueFwiLCBcIm1hcmdpbnlcIl07XG52YXIgZ3JhcGhEZWZhdWx0cyA9IHsgcmFua3NlcDogNTAsIGVkZ2VzZXA6IDIwLCBub2Rlc2VwOiA1MCwgcmFua2RpcjogXCJ0YlwiIH07XG52YXIgZ3JhcGhBdHRycyA9IFtcImFjeWNsaWNlclwiLCBcInJhbmtlclwiLCBcInJhbmtkaXJcIiwgXCJhbGlnblwiXTtcbnZhciBub2RlTnVtQXR0cnMgPSBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXTtcbnZhciBub2RlRGVmYXVsdHMgPSB7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbnZhciBlZGdlTnVtQXR0cnMgPSBbXCJtaW5sZW5cIiwgXCJ3ZWlnaHRcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiLCBcImxhYmVsb2Zmc2V0XCJdO1xudmFyIGVkZ2VEZWZhdWx0cyA9IHtcbiAgbWlubGVuOiAxLCB3ZWlnaHQ6IDEsIHdpZHRoOiAwLCBoZWlnaHQ6IDAsXG4gIGxhYmVsb2Zmc2V0OiAxMCwgbGFiZWxwb3M6IFwiclwiXG59O1xudmFyIGVkZ2VBdHRycyA9IFtcImxhYmVscG9zXCJdO1xuXG4vKlxuICogQ29uc3RydWN0cyBhIG5ldyBncmFwaCBmcm9tIHRoZSBpbnB1dCBncmFwaCwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGxheW91dC5cbiAqIFRoaXMgcHJvY2VzcyBjb3BpZXMgb25seSB3aGl0ZWxpc3RlZCBhdHRyaWJ1dGVzIGZyb20gdGhlIGlucHV0IGdyYXBoIHRvIHRoZVxuICogbGF5b3V0IGdyYXBoLiBUaHVzIHRoaXMgZnVuY3Rpb24gc2VydmVzIGFzIGEgZ29vZCBwbGFjZSB0byBkZXRlcm1pbmUgd2hhdFxuICogYXR0cmlidXRlcyBjYW4gaW5mbHVlbmNlIGxheW91dC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMYXlvdXRHcmFwaChpbnB1dEdyYXBoKSB7XG4gIHZhciBnID0gbmV3IEdyYXBoKHsgbXVsdGlncmFwaDogdHJ1ZSwgY29tcG91bmQ6IHRydWUgfSk7XG4gIHZhciBncmFwaCA9IGNhbm9uaWNhbGl6ZShpbnB1dEdyYXBoLmdyYXBoKCkpO1xuXG4gIGcuc2V0R3JhcGgoXy5tZXJnZSh7fSxcbiAgICBncmFwaERlZmF1bHRzLFxuICAgIHNlbGVjdE51bWJlckF0dHJzKGdyYXBoLCBncmFwaE51bUF0dHJzKSxcbiAgICBfLnBpY2soZ3JhcGgsIGdyYXBoQXR0cnMpKSk7XG5cbiAgXy5mb3JFYWNoKGlucHV0R3JhcGgubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gY2Fub25pY2FsaXplKGlucHV0R3JhcGgubm9kZSh2KSk7XG4gICAgZy5zZXROb2RlKHYsIF8uZGVmYXVsdHMoc2VsZWN0TnVtYmVyQXR0cnMobm9kZSwgbm9kZU51bUF0dHJzKSwgbm9kZURlZmF1bHRzKSk7XG4gICAgZy5zZXRQYXJlbnQodiwgaW5wdXRHcmFwaC5wYXJlbnQodikpO1xuICB9KTtcblxuICBfLmZvckVhY2goaW5wdXRHcmFwaC5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2UgPSBjYW5vbmljYWxpemUoaW5wdXRHcmFwaC5lZGdlKGUpKTtcbiAgICBnLnNldEVkZ2UoZSwgXy5tZXJnZSh7fSxcbiAgICAgIGVkZ2VEZWZhdWx0cyxcbiAgICAgIHNlbGVjdE51bWJlckF0dHJzKGVkZ2UsIGVkZ2VOdW1BdHRycyksXG4gICAgICBfLnBpY2soZWRnZSwgZWRnZUF0dHJzKSkpO1xuICB9KTtcblxuICByZXR1cm4gZztcbn1cblxuLypcbiAqIFRoaXMgaWRlYSBjb21lcyBmcm9tIHRoZSBHYW5zbmVyIHBhcGVyOiB0byBhY2NvdW50IGZvciBlZGdlIGxhYmVscyBpbiBvdXJcbiAqIGxheW91dCB3ZSBzcGxpdCBlYWNoIHJhbmsgaW4gaGFsZiBieSBkb3VibGluZyBtaW5sZW4gYW5kIGhhbHZpbmcgcmFua3NlcC5cbiAqIFRoZW4gd2UgY2FuIHBsYWNlIGxhYmVscyBhdCB0aGVzZSBtaWQtcG9pbnRzIGJldHdlZW4gbm9kZXMuXG4gKlxuICogV2UgYWxzbyBhZGQgc29tZSBtaW5pbWFsIHBhZGRpbmcgdG8gdGhlIHdpZHRoIHRvIHB1c2ggdGhlIGxhYmVsIGZvciB0aGUgZWRnZVxuICogYXdheSBmcm9tIHRoZSBlZGdlIGl0c2VsZiBhIGJpdC5cbiAqL1xuZnVuY3Rpb24gbWFrZVNwYWNlRm9yRWRnZUxhYmVscyhnKSB7XG4gIHZhciBncmFwaCA9IGcuZ3JhcGgoKTtcbiAgZ3JhcGgucmFua3NlcCAvPSAyO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgZWRnZS5taW5sZW4gKj0gMjtcbiAgICBpZiAoZWRnZS5sYWJlbHBvcy50b0xvd2VyQ2FzZSgpICE9PSBcImNcIikge1xuICAgICAgaWYgKGdyYXBoLnJhbmtkaXIgPT09IFwiVEJcIiB8fCBncmFwaC5yYW5rZGlyID09PSBcIkJUXCIpIHtcbiAgICAgICAgZWRnZS53aWR0aCArPSBlZGdlLmxhYmVsb2Zmc2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZS5oZWlnaHQgKz0gZWRnZS5sYWJlbG9mZnNldDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKlxuICogQ3JlYXRlcyB0ZW1wb3JhcnkgZHVtbXkgbm9kZXMgdGhhdCBjYXB0dXJlIHRoZSByYW5rIGluIHdoaWNoIGVhY2ggZWRnZSdzXG4gKiBsYWJlbCBpcyBnb2luZyB0bywgaWYgaXQgaGFzIG9uZSBvZiBub24temVybyB3aWR0aCBhbmQgaGVpZ2h0LiBXZSBkbyB0aGlzXG4gKiBzbyB0aGF0IHdlIGNhbiBzYWZlbHkgcmVtb3ZlIGVtcHR5IHJhbmtzIHdoaWxlIHByZXNlcnZpbmcgYmFsYW5jZSBmb3IgdGhlXG4gKiBsYWJlbCdzIHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBpbmplY3RFZGdlTGFiZWxQcm94aWVzKGcpIHtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGlmIChlZGdlLndpZHRoICYmIGVkZ2UuaGVpZ2h0KSB7XG4gICAgICB2YXIgdiA9IGcubm9kZShlLnYpO1xuICAgICAgdmFyIHcgPSBnLm5vZGUoZS53KTtcbiAgICAgIHZhciBsYWJlbCA9IHsgcmFuazogKHcucmFuayAtIHYucmFuaykgLyAyICsgdi5yYW5rLCBlOiBlIH07XG4gICAgICB1dGlsLmFkZER1bW15Tm9kZShnLCBcImVkZ2UtcHJveHlcIiwgbGFiZWwsIFwiX2VwXCIpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnblJhbmtNaW5NYXgoZykge1xuICB2YXIgbWF4UmFuayA9IDA7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICBpZiAobm9kZS5ib3JkZXJUb3ApIHtcbiAgICAgIG5vZGUubWluUmFuayA9IGcubm9kZShub2RlLmJvcmRlclRvcCkucmFuaztcbiAgICAgIG5vZGUubWF4UmFuayA9IGcubm9kZShub2RlLmJvcmRlckJvdHRvbSkucmFuaztcbiAgICAgIG1heFJhbmsgPSBfLm1heChtYXhSYW5rLCBub2RlLm1heFJhbmspO1xuICAgIH1cbiAgfSk7XG4gIGcuZ3JhcGgoKS5tYXhSYW5rID0gbWF4UmFuaztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWRnZUxhYmVsUHJveGllcyhnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICBpZiAobm9kZS5kdW1teSA9PT0gXCJlZGdlLXByb3h5XCIpIHtcbiAgICAgIGcuZWRnZShub2RlLmUpLmxhYmVsUmFuayA9IG5vZGUucmFuaztcbiAgICAgIGcucmVtb3ZlTm9kZSh2KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVHcmFwaChnKSB7XG4gIHZhciBtaW5YID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICB2YXIgbWF4WCA9IDA7XG4gIHZhciBtaW5ZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICB2YXIgbWF4WSA9IDA7XG4gIHZhciBncmFwaExhYmVsID0gZy5ncmFwaCgpO1xuICB2YXIgbWFyZ2luWCA9IGdyYXBoTGFiZWwubWFyZ2lueCB8fCAwO1xuICB2YXIgbWFyZ2luWSA9IGdyYXBoTGFiZWwubWFyZ2lueSB8fCAwO1xuXG4gIGZ1bmN0aW9uIGdldEV4dHJlbWVzKGF0dHJzKSB7XG4gICAgdmFyIHggPSBhdHRycy54O1xuICAgIHZhciB5ID0gYXR0cnMueTtcbiAgICB2YXIgdyA9IGF0dHJzLndpZHRoO1xuICAgIHZhciBoID0gYXR0cnMuaGVpZ2h0O1xuICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB4IC0gdyAvIDIpO1xuICAgIG1heFggPSBNYXRoLm1heChtYXhYLCB4ICsgdyAvIDIpO1xuICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5IC0gaCAvIDIpO1xuICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCB5ICsgaCAvIDIpO1xuICB9XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikgeyBnZXRFeHRyZW1lcyhnLm5vZGUodikpOyB9KTtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlID0gZy5lZGdlKGUpO1xuICAgIGlmIChfLmhhcyhlZGdlLCBcInhcIikpIHtcbiAgICAgIGdldEV4dHJlbWVzKGVkZ2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgbWluWCAtPSBtYXJnaW5YO1xuICBtaW5ZIC09IG1hcmdpblk7XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIG5vZGUueCAtPSBtaW5YO1xuICAgIG5vZGUueSAtPSBtaW5ZO1xuICB9KTtcblxuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgXy5mb3JFYWNoKGVkZ2UucG9pbnRzLCBmdW5jdGlvbihwKSB7XG4gICAgICBwLnggLT0gbWluWDtcbiAgICAgIHAueSAtPSBtaW5ZO1xuICAgIH0pO1xuICAgIGlmIChfLmhhcyhlZGdlLCBcInhcIikpIHsgZWRnZS54IC09IG1pblg7IH1cbiAgICBpZiAoXy5oYXMoZWRnZSwgXCJ5XCIpKSB7IGVkZ2UueSAtPSBtaW5ZOyB9XG4gIH0pO1xuXG4gIGdyYXBoTGFiZWwud2lkdGggPSBtYXhYIC0gbWluWCArIG1hcmdpblg7XG4gIGdyYXBoTGFiZWwuaGVpZ2h0ID0gbWF4WSAtIG1pblkgKyBtYXJnaW5ZO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25Ob2RlSW50ZXJzZWN0cyhnKSB7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICB2YXIgbm9kZVYgPSBnLm5vZGUoZS52KTtcbiAgICB2YXIgbm9kZVcgPSBnLm5vZGUoZS53KTtcbiAgICB2YXIgcDEsIHAyO1xuICAgIGlmICghZWRnZS5wb2ludHMpIHtcbiAgICAgIGVkZ2UucG9pbnRzID0gW107XG4gICAgICBwMSA9IG5vZGVXO1xuICAgICAgcDIgPSBub2RlVjtcbiAgICB9IGVsc2Uge1xuICAgICAgcDEgPSBlZGdlLnBvaW50c1swXTtcbiAgICAgIHAyID0gZWRnZS5wb2ludHNbZWRnZS5wb2ludHMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGVkZ2UucG9pbnRzLnVuc2hpZnQodXRpbC5pbnRlcnNlY3RSZWN0KG5vZGVWLCBwMSkpO1xuICAgIGVkZ2UucG9pbnRzLnB1c2godXRpbC5pbnRlcnNlY3RSZWN0KG5vZGVXLCBwMikpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZml4dXBFZGdlTGFiZWxDb29yZHMoZykge1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVkZ2UgPSBnLmVkZ2UoZSk7XG4gICAgaWYgKF8uaGFzKGVkZ2UsIFwieFwiKSkge1xuICAgICAgaWYgKGVkZ2UubGFiZWxwb3MgPT09IFwibFwiIHx8IGVkZ2UubGFiZWxwb3MgPT09IFwiclwiKSB7XG4gICAgICAgIGVkZ2Uud2lkdGggLT0gZWRnZS5sYWJlbG9mZnNldDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZWRnZS5sYWJlbHBvcykge1xuICAgICAgY2FzZSBcImxcIjogZWRnZS54IC09IGVkZ2Uud2lkdGggLyAyICsgZWRnZS5sYWJlbG9mZnNldDsgYnJlYWs7XG4gICAgICBjYXNlIFwiclwiOiBlZGdlLnggKz0gZWRnZS53aWR0aCAvIDIgKyBlZGdlLmxhYmVsb2Zmc2V0OyBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlUG9pbnRzRm9yUmV2ZXJzZWRFZGdlcyhnKSB7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICBpZiAoZWRnZS5yZXZlcnNlZCkge1xuICAgICAgZWRnZS5wb2ludHMucmV2ZXJzZSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUJvcmRlck5vZGVzKGcpIHtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIGlmIChnLmNoaWxkcmVuKHYpLmxlbmd0aCkge1xuICAgICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgICB2YXIgdCA9IGcubm9kZShub2RlLmJvcmRlclRvcCk7XG4gICAgICB2YXIgYiA9IGcubm9kZShub2RlLmJvcmRlckJvdHRvbSk7XG4gICAgICB2YXIgbCA9IGcubm9kZShfLmxhc3Qobm9kZS5ib3JkZXJMZWZ0KSk7XG4gICAgICB2YXIgciA9IGcubm9kZShfLmxhc3Qobm9kZS5ib3JkZXJSaWdodCkpO1xuXG4gICAgICBub2RlLndpZHRoID0gTWF0aC5hYnMoci54IC0gbC54KTtcbiAgICAgIG5vZGUuaGVpZ2h0ID0gTWF0aC5hYnMoYi55IC0gdC55KTtcbiAgICAgIG5vZGUueCA9IGwueCArIG5vZGUud2lkdGggLyAyO1xuICAgICAgbm9kZS55ID0gdC55ICsgbm9kZS5oZWlnaHQgLyAyO1xuICAgIH1cbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIGlmIChnLm5vZGUodikuZHVtbXkgPT09IFwiYm9yZGVyXCIpIHtcbiAgICAgIGcucmVtb3ZlTm9kZSh2KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTZWxmRWRnZXMoZykge1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUudiA9PT0gZS53KSB7XG4gICAgICB2YXIgbm9kZSA9IGcubm9kZShlLnYpO1xuICAgICAgaWYgKCFub2RlLnNlbGZFZGdlcykge1xuICAgICAgICBub2RlLnNlbGZFZGdlcyA9IFtdO1xuICAgICAgfVxuICAgICAgbm9kZS5zZWxmRWRnZXMucHVzaCh7IGU6IGUsIGxhYmVsOiBnLmVkZ2UoZSkgfSk7XG4gICAgICBnLnJlbW92ZUVkZ2UoZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U2VsZkVkZ2VzKGcpIHtcbiAgdmFyIGxheWVycyA9IHV0aWwuYnVpbGRMYXllck1hdHJpeChnKTtcbiAgXy5mb3JFYWNoKGxheWVycywgZnVuY3Rpb24obGF5ZXIpIHtcbiAgICB2YXIgb3JkZXJTaGlmdCA9IDA7XG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2LCBpKSB7XG4gICAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICAgIG5vZGUub3JkZXIgPSBpICsgb3JkZXJTaGlmdDtcbiAgICAgIF8uZm9yRWFjaChub2RlLnNlbGZFZGdlcywgZnVuY3Rpb24oc2VsZkVkZ2UpIHtcbiAgICAgICAgdXRpbC5hZGREdW1teU5vZGUoZywgXCJzZWxmZWRnZVwiLCB7XG4gICAgICAgICAgd2lkdGg6IHNlbGZFZGdlLmxhYmVsLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogc2VsZkVkZ2UubGFiZWwuaGVpZ2h0LFxuICAgICAgICAgIHJhbms6IG5vZGUucmFuayxcbiAgICAgICAgICBvcmRlcjogaSArICgrK29yZGVyU2hpZnQpLFxuICAgICAgICAgIGU6IHNlbGZFZGdlLmUsXG4gICAgICAgICAgbGFiZWw6IHNlbGZFZGdlLmxhYmVsXG4gICAgICAgIH0sIFwiX3NlXCIpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgbm9kZS5zZWxmRWRnZXM7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3NpdGlvblNlbGZFZGdlcyhnKSB7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgICBpZiAobm9kZS5kdW1teSA9PT0gXCJzZWxmZWRnZVwiKSB7XG4gICAgICB2YXIgc2VsZk5vZGUgPSBnLm5vZGUobm9kZS5lLnYpO1xuICAgICAgdmFyIHggPSBzZWxmTm9kZS54ICsgc2VsZk5vZGUud2lkdGggLyAyO1xuICAgICAgdmFyIHkgPSBzZWxmTm9kZS55O1xuICAgICAgdmFyIGR4ID0gbm9kZS54IC0geDtcbiAgICAgIHZhciBkeSA9IHNlbGZOb2RlLmhlaWdodCAvIDI7XG4gICAgICBnLnNldEVkZ2Uobm9kZS5lLCBub2RlLmxhYmVsKTtcbiAgICAgIGcucmVtb3ZlTm9kZSh2KTtcbiAgICAgIG5vZGUubGFiZWwucG9pbnRzID0gW1xuICAgICAgICB7IHg6IHggKyAyICogZHggLyAzLCB5OiB5IC0gZHkgfSxcbiAgICAgICAgeyB4OiB4ICsgNSAqIGR4IC8gNiwgeTogeSAtIGR5IH0sXG4gICAgICAgIHsgeDogeCArICAgICBkeCAgICAsIHk6IHkgfSxcbiAgICAgICAgeyB4OiB4ICsgNSAqIGR4IC8gNiwgeTogeSArIGR5IH0sXG4gICAgICAgIHsgeDogeCArIDIgKiBkeCAvIDMsIHk6IHkgKyBkeSB9XG4gICAgICBdO1xuICAgICAgbm9kZS5sYWJlbC54ID0gbm9kZS54O1xuICAgICAgbm9kZS5sYWJlbC55ID0gbm9kZS55O1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdE51bWJlckF0dHJzKG9iaiwgYXR0cnMpIHtcbiAgcmV0dXJuIF8ubWFwVmFsdWVzKF8ucGljayhvYmosIGF0dHJzKSwgTnVtYmVyKTtcbn1cblxuZnVuY3Rpb24gY2Fub25pY2FsaXplKGF0dHJzKSB7XG4gIHZhciBuZXdBdHRycyA9IHt9O1xuICBfLmZvckVhY2goYXR0cnMsIGZ1bmN0aW9uKHYsIGspIHtcbiAgICBuZXdBdHRyc1trLnRvTG93ZXJDYXNlKCldID0gdjtcbiAgfSk7XG4gIHJldHVybiBuZXdBdHRycztcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cblxudmFyIGxvZGFzaDtcblxuaWYgKHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgdHJ5IHtcbiAgICBsb2Rhc2ggPSB7XG4gICAgICBjbG9uZURlZXA6IHJlcXVpcmUoXCJsb2Rhc2gvY2xvbmVEZWVwXCIpLFxuICAgICAgY29uc3RhbnQ6IHJlcXVpcmUoXCJsb2Rhc2gvY29uc3RhbnRcIiksXG4gICAgICBkZWZhdWx0czogcmVxdWlyZShcImxvZGFzaC9kZWZhdWx0c1wiKSxcbiAgICAgIGVhY2g6IHJlcXVpcmUoXCJsb2Rhc2gvZWFjaFwiKSxcbiAgICAgIGZpbHRlcjogcmVxdWlyZShcImxvZGFzaC9maWx0ZXJcIiksXG4gICAgICBmaW5kOiByZXF1aXJlKFwibG9kYXNoL2ZpbmRcIiksXG4gICAgICBmbGF0dGVuOiByZXF1aXJlKFwibG9kYXNoL2ZsYXR0ZW5cIiksXG4gICAgICBmb3JFYWNoOiByZXF1aXJlKFwibG9kYXNoL2ZvckVhY2hcIiksXG4gICAgICBmb3JJbjogcmVxdWlyZShcImxvZGFzaC9mb3JJblwiKSxcbiAgICAgIGhhczogIHJlcXVpcmUoXCJsb2Rhc2gvaGFzXCIpLFxuICAgICAgaXNVbmRlZmluZWQ6IHJlcXVpcmUoXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiksXG4gICAgICBsYXN0OiByZXF1aXJlKFwibG9kYXNoL2xhc3RcIiksXG4gICAgICBtYXA6IHJlcXVpcmUoXCJsb2Rhc2gvbWFwXCIpLFxuICAgICAgbWFwVmFsdWVzOiByZXF1aXJlKFwibG9kYXNoL21hcFZhbHVlc1wiKSxcbiAgICAgIG1heDogcmVxdWlyZShcImxvZGFzaC9tYXhcIiksXG4gICAgICBtZXJnZTogcmVxdWlyZShcImxvZGFzaC9tZXJnZVwiKSxcbiAgICAgIG1pbjogcmVxdWlyZShcImxvZGFzaC9taW5cIiksXG4gICAgICBtaW5CeTogcmVxdWlyZShcImxvZGFzaC9taW5CeVwiKSxcbiAgICAgIG5vdzogcmVxdWlyZShcImxvZGFzaC9ub3dcIiksXG4gICAgICBwaWNrOiByZXF1aXJlKFwibG9kYXNoL3BpY2tcIiksXG4gICAgICByYW5nZTogcmVxdWlyZShcImxvZGFzaC9yYW5nZVwiKSxcbiAgICAgIHJlZHVjZTogcmVxdWlyZShcImxvZGFzaC9yZWR1Y2VcIiksXG4gICAgICBzb3J0Qnk6IHJlcXVpcmUoXCJsb2Rhc2gvc29ydEJ5XCIpLFxuICAgICAgdW5pcXVlSWQ6IHJlcXVpcmUoXCJsb2Rhc2gvdW5pcXVlSWRcIiksXG4gICAgICB2YWx1ZXM6IHJlcXVpcmUoXCJsb2Rhc2gvdmFsdWVzXCIpLFxuICAgICAgemlwT2JqZWN0OiByZXF1aXJlKFwibG9kYXNoL3ppcE9iamVjdFwiKSxcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICB9XG59XG5cbmlmICghbG9kYXNoKSB7XG4gIGxvZGFzaCA9IHdpbmRvdy5fO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsInZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVuOiBydW4sXG4gIGNsZWFudXA6IGNsZWFudXBcbn07XG5cbi8qXG4gKiBBIG5lc3RpbmcgZ3JhcGggY3JlYXRlcyBkdW1teSBub2RlcyBmb3IgdGhlIHRvcHMgYW5kIGJvdHRvbXMgb2Ygc3ViZ3JhcGhzLFxuICogYWRkcyBhcHByb3ByaWF0ZSBlZGdlcyB0byBlbnN1cmUgdGhhdCBhbGwgY2x1c3RlciBub2RlcyBhcmUgcGxhY2VkIGJldHdlZW5cbiAqIHRoZXNlIGJvdW5kcmllcywgYW5kIGVuc3VyZXMgdGhhdCB0aGUgZ3JhcGggaXMgY29ubmVjdGVkLlxuICpcbiAqIEluIGFkZGl0aW9uIHdlIGVuc3VyZSwgdGhyb3VnaCB0aGUgdXNlIG9mIHRoZSBtaW5sZW4gcHJvcGVydHksIHRoYXQgbm9kZXNcbiAqIGFuZCBzdWJncmFwaCBib3JkZXIgbm9kZXMgdG8gbm90IGVuZCB1cCBvbiB0aGUgc2FtZSByYW5rLlxuICpcbiAqIFByZWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gSW5wdXQgZ3JhcGggaXMgYSBEQUdcbiAqICAgIDIuIE5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXMgYSBtaW5sZW4gYXR0cmlidXRlXG4gKlxuICogUG9zdGNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gSW5wdXQgZ3JhcGggaXMgY29ubmVjdGVkLlxuICogICAgMi4gRHVtbXkgbm9kZXMgYXJlIGFkZGVkIGZvciB0aGUgdG9wcyBhbmQgYm90dG9tcyBvZiBzdWJncmFwaHMuXG4gKiAgICAzLiBUaGUgbWlubGVuIGF0dHJpYnV0ZSBmb3Igbm9kZXMgaXMgYWRqdXN0ZWQgdG8gZW5zdXJlIG5vZGVzIGRvIG5vdFxuICogICAgICAgZ2V0IHBsYWNlZCBvbiB0aGUgc2FtZSByYW5rIGFzIHN1YmdyYXBoIGJvcmRlciBub2Rlcy5cbiAqXG4gKiBUaGUgbmVzdGluZyBncmFwaCBpZGVhIGNvbWVzIGZyb20gU2FuZGVyLCBcIkxheW91dCBvZiBDb21wb3VuZCBEaXJlY3RlZFxuICogR3JhcGhzLlwiXG4gKi9cbmZ1bmN0aW9uIHJ1bihnKSB7XG4gIHZhciByb290ID0gdXRpbC5hZGREdW1teU5vZGUoZywgXCJyb290XCIsIHt9LCBcIl9yb290XCIpO1xuICB2YXIgZGVwdGhzID0gdHJlZURlcHRocyhnKTtcbiAgdmFyIGhlaWdodCA9IF8ubWF4KF8udmFsdWVzKGRlcHRocykpIC0gMTsgLy8gTm90ZTogZGVwdGhzIGlzIGFuIE9iamVjdCBub3QgYW4gYXJyYXlcbiAgdmFyIG5vZGVTZXAgPSAyICogaGVpZ2h0ICsgMTtcblxuICBnLmdyYXBoKCkubmVzdGluZ1Jvb3QgPSByb290O1xuXG4gIC8vIE11bHRpcGx5IG1pbmxlbiBieSBub2RlU2VwIHRvIGFsaWduIG5vZGVzIG9uIG5vbi1ib3JkZXIgcmFua3MuXG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHsgZy5lZGdlKGUpLm1pbmxlbiAqPSBub2RlU2VwOyB9KTtcblxuICAvLyBDYWxjdWxhdGUgYSB3ZWlnaHQgdGhhdCBpcyBzdWZmaWNpZW50IHRvIGtlZXAgc3ViZ3JhcGhzIHZlcnRpY2FsbHkgY29tcGFjdFxuICB2YXIgd2VpZ2h0ID0gc3VtV2VpZ2h0cyhnKSArIDE7XG5cbiAgLy8gQ3JlYXRlIGJvcmRlciBub2RlcyBhbmQgbGluayB0aGVtIHVwXG4gIF8uZm9yRWFjaChnLmNoaWxkcmVuKCksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIGNoaWxkKTtcbiAgfSk7XG5cbiAgLy8gU2F2ZSB0aGUgbXVsdGlwbGllciBmb3Igbm9kZSBsYXllcnMgZm9yIGxhdGVyIHJlbW92YWwgb2YgZW1wdHkgYm9yZGVyXG4gIC8vIGxheWVycy5cbiAgZy5ncmFwaCgpLm5vZGVSYW5rRmFjdG9yID0gbm9kZVNlcDtcbn1cblxuZnVuY3Rpb24gZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gZy5jaGlsZHJlbih2KTtcbiAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAodiAhPT0gcm9vdCkge1xuICAgICAgZy5zZXRFZGdlKHJvb3QsIHYsIHsgd2VpZ2h0OiAwLCBtaW5sZW46IG5vZGVTZXAgfSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0b3AgPSB1dGlsLmFkZEJvcmRlck5vZGUoZywgXCJfYnRcIik7XG4gIHZhciBib3R0b20gPSB1dGlsLmFkZEJvcmRlck5vZGUoZywgXCJfYmJcIik7XG4gIHZhciBsYWJlbCA9IGcubm9kZSh2KTtcblxuICBnLnNldFBhcmVudCh0b3AsIHYpO1xuICBsYWJlbC5ib3JkZXJUb3AgPSB0b3A7XG4gIGcuc2V0UGFyZW50KGJvdHRvbSwgdik7XG4gIGxhYmVsLmJvcmRlckJvdHRvbSA9IGJvdHRvbTtcblxuICBfLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgZGZzKGcsIHJvb3QsIG5vZGVTZXAsIHdlaWdodCwgaGVpZ2h0LCBkZXB0aHMsIGNoaWxkKTtcblxuICAgIHZhciBjaGlsZE5vZGUgPSBnLm5vZGUoY2hpbGQpO1xuICAgIHZhciBjaGlsZFRvcCA9IGNoaWxkTm9kZS5ib3JkZXJUb3AgPyBjaGlsZE5vZGUuYm9yZGVyVG9wIDogY2hpbGQ7XG4gICAgdmFyIGNoaWxkQm90dG9tID0gY2hpbGROb2RlLmJvcmRlckJvdHRvbSA/IGNoaWxkTm9kZS5ib3JkZXJCb3R0b20gOiBjaGlsZDtcbiAgICB2YXIgdGhpc1dlaWdodCA9IGNoaWxkTm9kZS5ib3JkZXJUb3AgPyB3ZWlnaHQgOiAyICogd2VpZ2h0O1xuICAgIHZhciBtaW5sZW4gPSBjaGlsZFRvcCAhPT0gY2hpbGRCb3R0b20gPyAxIDogaGVpZ2h0IC0gZGVwdGhzW3ZdICsgMTtcblxuICAgIGcuc2V0RWRnZSh0b3AsIGNoaWxkVG9wLCB7XG4gICAgICB3ZWlnaHQ6IHRoaXNXZWlnaHQsXG4gICAgICBtaW5sZW46IG1pbmxlbixcbiAgICAgIG5lc3RpbmdFZGdlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBnLnNldEVkZ2UoY2hpbGRCb3R0b20sIGJvdHRvbSwge1xuICAgICAgd2VpZ2h0OiB0aGlzV2VpZ2h0LFxuICAgICAgbWlubGVuOiBtaW5sZW4sXG4gICAgICBuZXN0aW5nRWRnZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAoIWcucGFyZW50KHYpKSB7XG4gICAgZy5zZXRFZGdlKHJvb3QsIHRvcCwgeyB3ZWlnaHQ6IDAsIG1pbmxlbjogaGVpZ2h0ICsgZGVwdGhzW3ZdIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyZWVEZXB0aHMoZykge1xuICB2YXIgZGVwdGhzID0ge307XG4gIGZ1bmN0aW9uIGRmcyh2LCBkZXB0aCkge1xuICAgIHZhciBjaGlsZHJlbiA9IGcuY2hpbGRyZW4odik7XG4gICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgXy5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBkZnMoY2hpbGQsIGRlcHRoICsgMSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZGVwdGhzW3ZdID0gZGVwdGg7XG4gIH1cbiAgXy5mb3JFYWNoKGcuY2hpbGRyZW4oKSwgZnVuY3Rpb24odikgeyBkZnModiwgMSk7IH0pO1xuICByZXR1cm4gZGVwdGhzO1xufVxuXG5mdW5jdGlvbiBzdW1XZWlnaHRzKGcpIHtcbiAgcmV0dXJuIF8ucmVkdWNlKGcuZWRnZXMoKSwgZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgcmV0dXJuIGFjYyArIGcuZWRnZShlKS53ZWlnaHQ7XG4gIH0sIDApO1xufVxuXG5mdW5jdGlvbiBjbGVhbnVwKGcpIHtcbiAgdmFyIGdyYXBoTGFiZWwgPSBnLmdyYXBoKCk7XG4gIGcucmVtb3ZlTm9kZShncmFwaExhYmVsLm5lc3RpbmdSb290KTtcbiAgZGVsZXRlIGdyYXBoTGFiZWwubmVzdGluZ1Jvb3Q7XG4gIF8uZm9yRWFjaChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZSA9IGcuZWRnZShlKTtcbiAgICBpZiAoZWRnZS5uZXN0aW5nRWRnZSkge1xuICAgICAgZy5yZW1vdmVFZGdlKGUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydW46IHJ1bixcbiAgdW5kbzogdW5kb1xufTtcblxuLypcbiAqIEJyZWFrcyBhbnkgbG9uZyBlZGdlcyBpbiB0aGUgZ3JhcGggaW50byBzaG9ydCBzZWdtZW50cyB0aGF0IHNwYW4gMSBsYXllclxuICogZWFjaC4gVGhpcyBvcGVyYXRpb24gaXMgdW5kb2FibGUgd2l0aCB0aGUgZGVub3JtYWxpemUgZnVuY3Rpb24uXG4gKlxuICogUHJlLWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gVGhlIGlucHV0IGdyYXBoIGlzIGEgREFHLlxuICogICAgMi4gRWFjaCBub2RlIGluIHRoZSBncmFwaCBoYXMgYSBcInJhbmtcIiBwcm9wZXJ0eS5cbiAqXG4gKiBQb3N0LWNvbmRpdGlvbjpcbiAqXG4gKiAgICAxLiBBbGwgZWRnZXMgaW4gdGhlIGdyYXBoIGhhdmUgYSBsZW5ndGggb2YgMS5cbiAqICAgIDIuIER1bW15IG5vZGVzIGFyZSBhZGRlZCB3aGVyZSBlZGdlcyBoYXZlIGJlZW4gc3BsaXQgaW50byBzZWdtZW50cy5cbiAqICAgIDMuIFRoZSBncmFwaCBpcyBhdWdtZW50ZWQgd2l0aCBhIFwiZHVtbXlDaGFpbnNcIiBhdHRyaWJ1dGUgd2hpY2ggY29udGFpbnNcbiAqICAgICAgIHRoZSBmaXJzdCBkdW1teSBpbiBlYWNoIGNoYWluIG9mIGR1bW15IG5vZGVzIHByb2R1Y2VkLlxuICovXG5mdW5jdGlvbiBydW4oZykge1xuICBnLmdyYXBoKCkuZHVtbXlDaGFpbnMgPSBbXTtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZWRnZSkgeyBub3JtYWxpemVFZGdlKGcsIGVkZ2UpOyB9KTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRWRnZShnLCBlKSB7XG4gIHZhciB2ID0gZS52O1xuICB2YXIgdlJhbmsgPSBnLm5vZGUodikucmFuaztcbiAgdmFyIHcgPSBlLnc7XG4gIHZhciB3UmFuayA9IGcubm9kZSh3KS5yYW5rO1xuICB2YXIgbmFtZSA9IGUubmFtZTtcbiAgdmFyIGVkZ2VMYWJlbCA9IGcuZWRnZShlKTtcbiAgdmFyIGxhYmVsUmFuayA9IGVkZ2VMYWJlbC5sYWJlbFJhbms7XG5cbiAgaWYgKHdSYW5rID09PSB2UmFuayArIDEpIHJldHVybjtcblxuICBnLnJlbW92ZUVkZ2UoZSk7XG5cbiAgdmFyIGR1bW15LCBhdHRycywgaTtcbiAgZm9yIChpID0gMCwgKyt2UmFuazsgdlJhbmsgPCB3UmFuazsgKytpLCArK3ZSYW5rKSB7XG4gICAgZWRnZUxhYmVsLnBvaW50cyA9IFtdO1xuICAgIGF0dHJzID0ge1xuICAgICAgd2lkdGg6IDAsIGhlaWdodDogMCxcbiAgICAgIGVkZ2VMYWJlbDogZWRnZUxhYmVsLCBlZGdlT2JqOiBlLFxuICAgICAgcmFuazogdlJhbmtcbiAgICB9O1xuICAgIGR1bW15ID0gdXRpbC5hZGREdW1teU5vZGUoZywgXCJlZGdlXCIsIGF0dHJzLCBcIl9kXCIpO1xuICAgIGlmICh2UmFuayA9PT0gbGFiZWxSYW5rKSB7XG4gICAgICBhdHRycy53aWR0aCA9IGVkZ2VMYWJlbC53aWR0aDtcbiAgICAgIGF0dHJzLmhlaWdodCA9IGVkZ2VMYWJlbC5oZWlnaHQ7XG4gICAgICBhdHRycy5kdW1teSA9IFwiZWRnZS1sYWJlbFwiO1xuICAgICAgYXR0cnMubGFiZWxwb3MgPSBlZGdlTGFiZWwubGFiZWxwb3M7XG4gICAgfVxuICAgIGcuc2V0RWRnZSh2LCBkdW1teSwgeyB3ZWlnaHQ6IGVkZ2VMYWJlbC53ZWlnaHQgfSwgbmFtZSk7XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIGcuZ3JhcGgoKS5kdW1teUNoYWlucy5wdXNoKGR1bW15KTtcbiAgICB9XG4gICAgdiA9IGR1bW15O1xuICB9XG5cbiAgZy5zZXRFZGdlKHYsIHcsIHsgd2VpZ2h0OiBlZGdlTGFiZWwud2VpZ2h0IH0sIG5hbWUpO1xufVxuXG5mdW5jdGlvbiB1bmRvKGcpIHtcbiAgXy5mb3JFYWNoKGcuZ3JhcGgoKS5kdW1teUNoYWlucywgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIHZhciBvcmlnTGFiZWwgPSBub2RlLmVkZ2VMYWJlbDtcbiAgICB2YXIgdztcbiAgICBnLnNldEVkZ2Uobm9kZS5lZGdlT2JqLCBvcmlnTGFiZWwpO1xuICAgIHdoaWxlIChub2RlLmR1bW15KSB7XG4gICAgICB3ID0gZy5zdWNjZXNzb3JzKHYpWzBdO1xuICAgICAgZy5yZW1vdmVOb2RlKHYpO1xuICAgICAgb3JpZ0xhYmVsLnBvaW50cy5wdXNoKHsgeDogbm9kZS54LCB5OiBub2RlLnkgfSk7XG4gICAgICBpZiAobm9kZS5kdW1teSA9PT0gXCJlZGdlLWxhYmVsXCIpIHtcbiAgICAgICAgb3JpZ0xhYmVsLnggPSBub2RlLng7XG4gICAgICAgIG9yaWdMYWJlbC55ID0gbm9kZS55O1xuICAgICAgICBvcmlnTGFiZWwud2lkdGggPSBub2RlLndpZHRoO1xuICAgICAgICBvcmlnTGFiZWwuaGVpZ2h0ID0gbm9kZS5oZWlnaHQ7XG4gICAgICB9XG4gICAgICB2ID0gdztcbiAgICAgIG5vZGUgPSBnLm5vZGUodik7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZGRTdWJncmFwaENvbnN0cmFpbnRzO1xuXG5mdW5jdGlvbiBhZGRTdWJncmFwaENvbnN0cmFpbnRzKGcsIGNnLCB2cykge1xuICB2YXIgcHJldiA9IHt9LFxuICAgIHJvb3RQcmV2O1xuXG4gIF8uZm9yRWFjaCh2cywgZnVuY3Rpb24odikge1xuICAgIHZhciBjaGlsZCA9IGcucGFyZW50KHYpLFxuICAgICAgcGFyZW50LFxuICAgICAgcHJldkNoaWxkO1xuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgcGFyZW50ID0gZy5wYXJlbnQoY2hpbGQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwcmV2Q2hpbGQgPSBwcmV2W3BhcmVudF07XG4gICAgICAgIHByZXZbcGFyZW50XSA9IGNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldkNoaWxkID0gcm9vdFByZXY7XG4gICAgICAgIHJvb3RQcmV2ID0gY2hpbGQ7XG4gICAgICB9XG4gICAgICBpZiAocHJldkNoaWxkICYmIHByZXZDaGlsZCAhPT0gY2hpbGQpIHtcbiAgICAgICAgY2cuc2V0RWRnZShwcmV2Q2hpbGQsIGNoaWxkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2hpbGQgPSBwYXJlbnQ7XG4gICAgfVxuICB9KTtcblxuICAvKlxuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBjaGlsZHJlbiA9IHYgPyBnLmNoaWxkcmVuKHYpIDogZy5jaGlsZHJlbigpO1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHZhciBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgc3ViZ3JhcGhzID0gW107XG4gICAgICBfLmVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZE1pbiA9IGRmcyhjaGlsZCk7XG4gICAgICAgIGlmIChnLmNoaWxkcmVuKGNoaWxkKS5sZW5ndGgpIHtcbiAgICAgICAgICBzdWJncmFwaHMucHVzaCh7IHY6IGNoaWxkLCBvcmRlcjogY2hpbGRNaW4gfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGlsZE1pbik7XG4gICAgICB9KTtcbiAgICAgIF8ucmVkdWNlKF8uc29ydEJ5KHN1YmdyYXBocywgXCJvcmRlclwiKSwgZnVuY3Rpb24ocHJldiwgY3Vycikge1xuICAgICAgICBjZy5zZXRFZGdlKHByZXYudiwgY3Vyci52KTtcbiAgICAgICAgcmV0dXJuIGN1cnI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIHJldHVybiBnLm5vZGUodikub3JkZXI7XG4gIH1cbiAgZGZzKHVuZGVmaW5lZCk7XG4gICovXG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFyeWNlbnRlcjtcblxuZnVuY3Rpb24gYmFyeWNlbnRlcihnLCBtb3ZhYmxlKSB7XG4gIHJldHVybiBfLm1hcChtb3ZhYmxlLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIGluViA9IGcuaW5FZGdlcyh2KTtcbiAgICBpZiAoIWluVi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7IHY6IHYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJlc3VsdCA9IF8ucmVkdWNlKGluViwgZnVuY3Rpb24oYWNjLCBlKSB7XG4gICAgICAgIHZhciBlZGdlID0gZy5lZGdlKGUpLFxuICAgICAgICAgIG5vZGVVID0gZy5ub2RlKGUudik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VtOiBhY2Muc3VtICsgKGVkZ2Uud2VpZ2h0ICogbm9kZVUub3JkZXIpLFxuICAgICAgICAgIHdlaWdodDogYWNjLndlaWdodCArIGVkZ2Uud2VpZ2h0XG4gICAgICAgIH07XG4gICAgICB9LCB7IHN1bTogMCwgd2VpZ2h0OiAwIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2OiB2LFxuICAgICAgICBiYXJ5Y2VudGVyOiByZXN1bHQuc3VtIC8gcmVzdWx0LndlaWdodCxcbiAgICAgICAgd2VpZ2h0OiByZXN1bHQud2VpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuLi9ncmFwaGxpYlwiKS5HcmFwaDtcblxubW9kdWxlLmV4cG9ydHMgPSBidWlsZExheWVyR3JhcGg7XG5cbi8qXG4gKiBDb25zdHJ1Y3RzIGEgZ3JhcGggdGhhdCBjYW4gYmUgdXNlZCB0byBzb3J0IGEgbGF5ZXIgb2Ygbm9kZXMuIFRoZSBncmFwaCB3aWxsXG4gKiBjb250YWluIGFsbCBiYXNlIGFuZCBzdWJncmFwaCBub2RlcyBmcm9tIHRoZSByZXF1ZXN0IGxheWVyIGluIHRoZWlyIG9yaWdpbmFsXG4gKiBoaWVyYXJjaHkgYW5kIGFueSBlZGdlcyB0aGF0IGFyZSBpbmNpZGVudCBvbiB0aGVzZSBub2RlcyBhbmQgYXJlIG9mIHRoZSB0eXBlXG4gKiByZXF1ZXN0ZWQgYnkgdGhlIFwicmVsYXRpb25zaGlwXCIgcGFyYW1ldGVyLlxuICpcbiAqIE5vZGVzIGZyb20gdGhlIHJlcXVlc3RlZCByYW5rIHRoYXQgZG8gbm90IGhhdmUgcGFyZW50cyBhcmUgYXNzaWduZWQgYSByb290XG4gKiBub2RlIGluIHRoZSBvdXRwdXQgZ3JhcGgsIHdoaWNoIGlzIHNldCBpbiB0aGUgcm9vdCBncmFwaCBhdHRyaWJ1dGUuIFRoaXNcbiAqIG1ha2VzIGl0IGVhc3kgdG8gd2FsayB0aGUgaGllcmFyY2h5IG9mIG1vdmFibGUgbm9kZXMgZHVyaW5nIG9yZGVyaW5nLlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIElucHV0IGdyYXBoIGlzIGEgREFHXG4gKiAgICAyLiBCYXNlIG5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXZlIGEgcmFuayBhdHRyaWJ1dGVcbiAqICAgIDMuIFN1YmdyYXBoIG5vZGVzIGluIHRoZSBpbnB1dCBncmFwaCBoYXMgbWluUmFuayBhbmQgbWF4UmFuayBhdHRyaWJ1dGVzXG4gKiAgICA0LiBFZGdlcyBoYXZlIGFuIGFzc2lnbmVkIHdlaWdodFxuICpcbiAqIFBvc3QtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBPdXRwdXQgZ3JhcGggaGFzIGFsbCBub2RlcyBpbiB0aGUgbW92YWJsZSByYW5rIHdpdGggcHJlc2VydmVkXG4gKiAgICAgICBoaWVyYXJjaHkuXG4gKiAgICAyLiBSb290IG5vZGVzIGluIHRoZSBtb3ZhYmxlIGxheWVyIGFyZSBtYWRlIGNoaWxkcmVuIG9mIHRoZSBub2RlXG4gKiAgICAgICBpbmRpY2F0ZWQgYnkgdGhlIHJvb3QgYXR0cmlidXRlIG9mIHRoZSBncmFwaC5cbiAqICAgIDMuIE5vbi1tb3ZhYmxlIG5vZGVzIGluY2lkZW50IG9uIG1vdmFibGUgbm9kZXMsIHNlbGVjdGVkIGJ5IHRoZVxuICogICAgICAgcmVsYXRpb25zaGlwIHBhcmFtZXRlciwgYXJlIGluY2x1ZGVkIGluIHRoZSBncmFwaCAod2l0aG91dCBoaWVyYXJjaHkpLlxuICogICAgNC4gRWRnZXMgaW5jaWRlbnQgb24gbW92YWJsZSBub2Rlcywgc2VsZWN0ZWQgYnkgdGhlIHJlbGF0aW9uc2hpcFxuICogICAgICAgcGFyYW1ldGVyLCBhcmUgYWRkZWQgdG8gdGhlIG91dHB1dCBncmFwaC5cbiAqICAgIDUuIFRoZSB3ZWlnaHRzIGZvciBjb3BpZWQgZWRnZXMgYXJlIGFnZ3JlZ2F0ZWQgYXMgbmVlZCwgc2luY2UgdGhlIG91dHB1dFxuICogICAgICAgZ3JhcGggaXMgbm90IGEgbXVsdGktZ3JhcGguXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTGF5ZXJHcmFwaChnLCByYW5rLCByZWxhdGlvbnNoaXApIHtcbiAgdmFyIHJvb3QgPSBjcmVhdGVSb290Tm9kZShnKSxcbiAgICByZXN1bHQgPSBuZXcgR3JhcGgoeyBjb21wb3VuZDogdHJ1ZSB9KS5zZXRHcmFwaCh7IHJvb3Q6IHJvb3QgfSlcbiAgICAgIC5zZXREZWZhdWx0Tm9kZUxhYmVsKGZ1bmN0aW9uKHYpIHsgcmV0dXJuIGcubm9kZSh2KTsgfSk7XG5cbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpLFxuICAgICAgcGFyZW50ID0gZy5wYXJlbnQodik7XG5cbiAgICBpZiAobm9kZS5yYW5rID09PSByYW5rIHx8IG5vZGUubWluUmFuayA8PSByYW5rICYmIHJhbmsgPD0gbm9kZS5tYXhSYW5rKSB7XG4gICAgICByZXN1bHQuc2V0Tm9kZSh2KTtcbiAgICAgIHJlc3VsdC5zZXRQYXJlbnQodiwgcGFyZW50IHx8IHJvb3QpO1xuXG4gICAgICAvLyBUaGlzIGFzc3VtZXMgd2UgaGF2ZSBvbmx5IHNob3J0IGVkZ2VzIVxuICAgICAgXy5mb3JFYWNoKGdbcmVsYXRpb25zaGlwXSh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgdSA9IGUudiA9PT0gdiA/IGUudyA6IGUudixcbiAgICAgICAgICBlZGdlID0gcmVzdWx0LmVkZ2UodSwgdiksXG4gICAgICAgICAgd2VpZ2h0ID0gIV8uaXNVbmRlZmluZWQoZWRnZSkgPyBlZGdlLndlaWdodCA6IDA7XG4gICAgICAgIHJlc3VsdC5zZXRFZGdlKHUsIHYsIHsgd2VpZ2h0OiBnLmVkZ2UoZSkud2VpZ2h0ICsgd2VpZ2h0IH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChfLmhhcyhub2RlLCBcIm1pblJhbmtcIikpIHtcbiAgICAgICAgcmVzdWx0LnNldE5vZGUodiwge1xuICAgICAgICAgIGJvcmRlckxlZnQ6IG5vZGUuYm9yZGVyTGVmdFtyYW5rXSxcbiAgICAgICAgICBib3JkZXJSaWdodDogbm9kZS5ib3JkZXJSaWdodFtyYW5rXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3ROb2RlKGcpIHtcbiAgdmFyIHY7XG4gIHdoaWxlIChnLmhhc05vZGUoKHYgPSBfLnVuaXF1ZUlkKFwiX3Jvb3RcIikpKSk7XG4gIHJldHVybiB2O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcm9zc0NvdW50O1xuXG4vKlxuICogQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgbGF5ZXJpbmcgKGFuIGFycmF5IG9mIGxheWVycywgZWFjaCB3aXRoIGFuIGFycmF5IG9mXG4gKiBvcmRlcmVyZCBub2RlcykgYW5kIGEgZ3JhcGggYW5kIHJldHVybnMgYSB3ZWlnaHRlZCBjcm9zc2luZyBjb3VudC5cbiAqXG4gKiBQcmUtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBJbnB1dCBncmFwaCBtdXN0IGJlIHNpbXBsZSAobm90IGEgbXVsdGlncmFwaCksIGRpcmVjdGVkLCBhbmQgaW5jbHVkZVxuICogICAgICAgb25seSBzaW1wbGUgZWRnZXMuXG4gKiAgICAyLiBFZGdlcyBpbiB0aGUgaW5wdXQgZ3JhcGggbXVzdCBoYXZlIGFzc2lnbmVkIHdlaWdodHMuXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIFRoZSBncmFwaCBhbmQgbGF5ZXJpbmcgbWF0cml4IGFyZSBsZWZ0IHVuY2hhbmdlZC5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBpcyBkZXJpdmVkIGZyb20gQmFydGgsIGV0IGFsLiwgXCJCaWxheWVyIENyb3NzIENvdW50aW5nLlwiXG4gKi9cbmZ1bmN0aW9uIGNyb3NzQ291bnQoZywgbGF5ZXJpbmcpIHtcbiAgdmFyIGNjID0gMDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBsYXllcmluZy5sZW5ndGg7ICsraSkge1xuICAgIGNjICs9IHR3b0xheWVyQ3Jvc3NDb3VudChnLCBsYXllcmluZ1tpLTFdLCBsYXllcmluZ1tpXSk7XG4gIH1cbiAgcmV0dXJuIGNjO1xufVxuXG5mdW5jdGlvbiB0d29MYXllckNyb3NzQ291bnQoZywgbm9ydGhMYXllciwgc291dGhMYXllcikge1xuICAvLyBTb3J0IGFsbCBvZiB0aGUgZWRnZXMgYmV0d2VlbiB0aGUgbm9ydGggYW5kIHNvdXRoIGxheWVycyBieSB0aGVpciBwb3NpdGlvblxuICAvLyBpbiB0aGUgbm9ydGggbGF5ZXIgYW5kIHRoZW4gdGhlIHNvdXRoLiBNYXAgdGhlc2UgZWRnZXMgdG8gdGhlIHBvc2l0aW9uIG9mXG4gIC8vIHRoZWlyIGhlYWQgaW4gdGhlIHNvdXRoIGxheWVyLlxuICB2YXIgc291dGhQb3MgPSBfLnppcE9iamVjdChzb3V0aExheWVyLFxuICAgIF8ubWFwKHNvdXRoTGF5ZXIsIGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBpOyB9KSk7XG4gIHZhciBzb3V0aEVudHJpZXMgPSBfLmZsYXR0ZW4oXy5tYXAobm9ydGhMYXllciwgZnVuY3Rpb24odikge1xuICAgIHJldHVybiBfLnNvcnRCeShfLm1hcChnLm91dEVkZ2VzKHYpLCBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4geyBwb3M6IHNvdXRoUG9zW2Uud10sIHdlaWdodDogZy5lZGdlKGUpLndlaWdodCB9O1xuICAgIH0pLCBcInBvc1wiKTtcbiAgfSksIHRydWUpO1xuXG4gIC8vIEJ1aWxkIHRoZSBhY2N1bXVsYXRvciB0cmVlXG4gIHZhciBmaXJzdEluZGV4ID0gMTtcbiAgd2hpbGUgKGZpcnN0SW5kZXggPCBzb3V0aExheWVyLmxlbmd0aCkgZmlyc3RJbmRleCA8PD0gMTtcbiAgdmFyIHRyZWVTaXplID0gMiAqIGZpcnN0SW5kZXggLSAxO1xuICBmaXJzdEluZGV4IC09IDE7XG4gIHZhciB0cmVlID0gXy5tYXAobmV3IEFycmF5KHRyZWVTaXplKSwgZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9KTtcblxuICAvLyBDYWxjdWxhdGUgdGhlIHdlaWdodGVkIGNyb3NzaW5nc1xuICB2YXIgY2MgPSAwO1xuICBfLmZvckVhY2goc291dGhFbnRyaWVzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICB2YXIgaW5kZXggPSBlbnRyeS5wb3MgKyBmaXJzdEluZGV4O1xuICAgIHRyZWVbaW5kZXhdICs9IGVudHJ5LndlaWdodDtcbiAgICB2YXIgd2VpZ2h0U3VtID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgICBpZiAoaW5kZXggJSAyKSB7XG4gICAgICAgIHdlaWdodFN1bSArPSB0cmVlW2luZGV4ICsgMV07XG4gICAgICB9XG4gICAgICBpbmRleCA9IChpbmRleCAtIDEpID4+IDE7XG4gICAgICB0cmVlW2luZGV4XSArPSBlbnRyeS53ZWlnaHQ7XG4gICAgfVxuICAgIGNjICs9IGVudHJ5LndlaWdodCAqIHdlaWdodFN1bTtcbiAgfSkpO1xuXG4gIHJldHVybiBjYztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgaW5pdE9yZGVyID0gcmVxdWlyZShcIi4vaW5pdC1vcmRlclwiKTtcbnZhciBjcm9zc0NvdW50ID0gcmVxdWlyZShcIi4vY3Jvc3MtY291bnRcIik7XG52YXIgc29ydFN1YmdyYXBoID0gcmVxdWlyZShcIi4vc29ydC1zdWJncmFwaFwiKTtcbnZhciBidWlsZExheWVyR3JhcGggPSByZXF1aXJlKFwiLi9idWlsZC1sYXllci1ncmFwaFwiKTtcbnZhciBhZGRTdWJncmFwaENvbnN0cmFpbnRzID0gcmVxdWlyZShcIi4vYWRkLXN1YmdyYXBoLWNvbnN0cmFpbnRzXCIpO1xudmFyIEdyYXBoID0gcmVxdWlyZShcIi4uL2dyYXBobGliXCIpLkdyYXBoO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBvcmRlcjtcblxuLypcbiAqIEFwcGxpZXMgaGV1cmlzdGljcyB0byBtaW5pbWl6ZSBlZGdlIGNyb3NzaW5ncyBpbiB0aGUgZ3JhcGggYW5kIHNldHMgdGhlIGJlc3RcbiAqIG9yZGVyIHNvbHV0aW9uIGFzIGFuIG9yZGVyIGF0dHJpYnV0ZSBvbiBlYWNoIG5vZGUuXG4gKlxuICogUHJlLWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gR3JhcGggbXVzdCBiZSBEQUdcbiAqICAgIDIuIEdyYXBoIG5vZGVzIG11c3QgYmUgb2JqZWN0cyB3aXRoIGEgXCJyYW5rXCIgYXR0cmlidXRlXG4gKiAgICAzLiBHcmFwaCBlZGdlcyBtdXN0IGhhdmUgdGhlIFwid2VpZ2h0XCIgYXR0cmlidXRlXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEdyYXBoIG5vZGVzIHdpbGwgaGF2ZSBhbiBcIm9yZGVyXCIgYXR0cmlidXRlIGJhc2VkIG9uIHRoZSByZXN1bHRzIG9mIHRoZVxuICogICAgICAgYWxnb3JpdGhtLlxuICovXG5mdW5jdGlvbiBvcmRlcihnKSB7XG4gIHZhciBtYXhSYW5rID0gdXRpbC5tYXhSYW5rKGcpLFxuICAgIGRvd25MYXllckdyYXBocyA9IGJ1aWxkTGF5ZXJHcmFwaHMoZywgXy5yYW5nZSgxLCBtYXhSYW5rICsgMSksIFwiaW5FZGdlc1wiKSxcbiAgICB1cExheWVyR3JhcGhzID0gYnVpbGRMYXllckdyYXBocyhnLCBfLnJhbmdlKG1heFJhbmsgLSAxLCAtMSwgLTEpLCBcIm91dEVkZ2VzXCIpO1xuXG4gIHZhciBsYXllcmluZyA9IGluaXRPcmRlcihnKTtcbiAgYXNzaWduT3JkZXIoZywgbGF5ZXJpbmcpO1xuXG4gIHZhciBiZXN0Q0MgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgYmVzdDtcblxuICBmb3IgKHZhciBpID0gMCwgbGFzdEJlc3QgPSAwOyBsYXN0QmVzdCA8IDQ7ICsraSwgKytsYXN0QmVzdCkge1xuICAgIHN3ZWVwTGF5ZXJHcmFwaHMoaSAlIDIgPyBkb3duTGF5ZXJHcmFwaHMgOiB1cExheWVyR3JhcGhzLCBpICUgNCA+PSAyKTtcblxuICAgIGxheWVyaW5nID0gdXRpbC5idWlsZExheWVyTWF0cml4KGcpO1xuICAgIHZhciBjYyA9IGNyb3NzQ291bnQoZywgbGF5ZXJpbmcpO1xuICAgIGlmIChjYyA8IGJlc3RDQykge1xuICAgICAgbGFzdEJlc3QgPSAwO1xuICAgICAgYmVzdCA9IF8uY2xvbmVEZWVwKGxheWVyaW5nKTtcbiAgICAgIGJlc3RDQyA9IGNjO1xuICAgIH1cbiAgfVxuXG4gIGFzc2lnbk9yZGVyKGcsIGJlc3QpO1xufVxuXG5mdW5jdGlvbiBidWlsZExheWVyR3JhcGhzKGcsIHJhbmtzLCByZWxhdGlvbnNoaXApIHtcbiAgcmV0dXJuIF8ubWFwKHJhbmtzLCBmdW5jdGlvbihyYW5rKSB7XG4gICAgcmV0dXJuIGJ1aWxkTGF5ZXJHcmFwaChnLCByYW5rLCByZWxhdGlvbnNoaXApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dlZXBMYXllckdyYXBocyhsYXllckdyYXBocywgYmlhc1JpZ2h0KSB7XG4gIHZhciBjZyA9IG5ldyBHcmFwaCgpO1xuICBfLmZvckVhY2gobGF5ZXJHcmFwaHMsIGZ1bmN0aW9uKGxnKSB7XG4gICAgdmFyIHJvb3QgPSBsZy5ncmFwaCgpLnJvb3Q7XG4gICAgdmFyIHNvcnRlZCA9IHNvcnRTdWJncmFwaChsZywgcm9vdCwgY2csIGJpYXNSaWdodCk7XG4gICAgXy5mb3JFYWNoKHNvcnRlZC52cywgZnVuY3Rpb24odiwgaSkge1xuICAgICAgbGcubm9kZSh2KS5vcmRlciA9IGk7XG4gICAgfSk7XG4gICAgYWRkU3ViZ3JhcGhDb25zdHJhaW50cyhsZywgY2csIHNvcnRlZC52cyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25PcmRlcihnLCBsYXllcmluZykge1xuICBfLmZvckVhY2gobGF5ZXJpbmcsIGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2LCBpKSB7XG4gICAgICBnLm5vZGUodikub3JkZXIgPSBpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdE9yZGVyO1xuXG4vKlxuICogQXNzaWducyBhbiBpbml0aWFsIG9yZGVyIHZhbHVlIGZvciBlYWNoIG5vZGUgYnkgcGVyZm9ybWluZyBhIERGUyBzZWFyY2hcbiAqIHN0YXJ0aW5nIGZyb20gbm9kZXMgaW4gdGhlIGZpcnN0IHJhbmsuIE5vZGVzIGFyZSBhc3NpZ25lZCBhbiBvcmRlciBpbiB0aGVpclxuICogcmFuayBhcyB0aGV5IGFyZSBmaXJzdCB2aXNpdGVkLlxuICpcbiAqIFRoaXMgYXBwcm9hY2ggY29tZXMgZnJvbSBHYW5zbmVyLCBldCBhbC4sIFwiQSBUZWNobmlxdWUgZm9yIERyYXdpbmcgRGlyZWN0ZWRcbiAqIEdyYXBocy5cIlxuICpcbiAqIFJldHVybnMgYSBsYXllcmluZyBtYXRyaXggd2l0aCBhbiBhcnJheSBwZXIgbGF5ZXIgYW5kIGVhY2ggbGF5ZXIgc29ydGVkIGJ5XG4gKiB0aGUgb3JkZXIgb2YgaXRzIG5vZGVzLlxuICovXG5mdW5jdGlvbiBpbml0T3JkZXIoZykge1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuICB2YXIgc2ltcGxlTm9kZXMgPSBfLmZpbHRlcihnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gIWcuY2hpbGRyZW4odikubGVuZ3RoO1xuICB9KTtcbiAgdmFyIG1heFJhbmsgPSBfLm1heChfLm1hcChzaW1wbGVOb2RlcywgZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpLnJhbms7IH0pKTtcbiAgdmFyIGxheWVycyA9IF8ubWFwKF8ucmFuZ2UobWF4UmFuayArIDEpLCBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9KTtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIGlmIChfLmhhcyh2aXNpdGVkLCB2KSkgcmV0dXJuO1xuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIGxheWVyc1tub2RlLnJhbmtdLnB1c2godik7XG4gICAgXy5mb3JFYWNoKGcuc3VjY2Vzc29ycyh2KSwgZGZzKTtcbiAgfVxuXG4gIHZhciBvcmRlcmVkVnMgPSBfLnNvcnRCeShzaW1wbGVOb2RlcywgZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpLnJhbms7IH0pO1xuICBfLmZvckVhY2gob3JkZXJlZFZzLCBkZnMpO1xuXG4gIHJldHVybiBsYXllcnM7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVDb25mbGljdHM7XG5cbi8qXG4gKiBHaXZlbiBhIGxpc3Qgb2YgZW50cmllcyBvZiB0aGUgZm9ybSB7diwgYmFyeWNlbnRlciwgd2VpZ2h0fSBhbmQgYVxuICogY29uc3RyYWludCBncmFwaCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmVzb2x2ZSBhbnkgY29uZmxpY3RzIGJldHdlZW4gdGhlXG4gKiBjb25zdHJhaW50IGdyYXBoIGFuZCB0aGUgYmFyeWNlbnRlcnMgZm9yIHRoZSBlbnRyaWVzLiBJZiB0aGUgYmFyeWNlbnRlcnMgZm9yXG4gKiBhbiBlbnRyeSB3b3VsZCB2aW9sYXRlIGEgY29uc3RyYWludCBpbiB0aGUgY29uc3RyYWludCBncmFwaCB0aGVuIHdlIGNvYWxlc2NlXG4gKiB0aGUgbm9kZXMgaW4gdGhlIGNvbmZsaWN0IGludG8gYSBuZXcgbm9kZSB0aGF0IHJlc3BlY3RzIHRoZSBjb250cmFpbnQgYW5kXG4gKiBhZ2dyZWdhdGVzIGJhcnljZW50ZXIgYW5kIHdlaWdodCBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHRoZSBkZXNjcmlwdGlvbiBpbiBGb3JzdGVyLCBcIkEgRmFzdCBhbmRcbiAqIFNpbXBsZSBIdWVyaXN0aWMgZm9yIENvbnN0cmFpbmVkIFR3by1MZXZlbCBDcm9zc2luZyBSZWR1Y3Rpb24sXCIgdGhvdWdodCBpdFxuICogZGlmZmVycyBpbiBzb21lIHNwZWNpZmljIGRldGFpbHMuXG4gKlxuICogUHJlLWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gRWFjaCBlbnRyeSBoYXMgdGhlIGZvcm0ge3YsIGJhcnljZW50ZXIsIHdlaWdodH0sIG9yIGlmIHRoZSBub2RlIGhhc1xuICogICAgICAgbm8gYmFyeWNlbnRlciwgdGhlbiB7dn0uXG4gKlxuICogUmV0dXJuczpcbiAqXG4gKiAgICBBIG5ldyBsaXN0IG9mIGVudHJpZXMgb2YgdGhlIGZvcm0ge3ZzLCBpLCBiYXJ5Y2VudGVyLCB3ZWlnaHR9LiBUaGUgbGlzdFxuICogICAgYHZzYCBtYXkgZWl0aGVyIGJlIGEgc2luZ2xldG9uIG9yIGl0IG1heSBiZSBhbiBhZ2dyZWdhdGlvbiBvZiBub2Rlc1xuICogICAgb3JkZXJlZCBzdWNoIHRoYXQgdGhleSBkbyBub3QgdmlvbGF0ZSBjb25zdHJhaW50cyBmcm9tIHRoZSBjb25zdHJhaW50XG4gKiAgICBncmFwaC4gVGhlIHByb3BlcnR5IGBpYCBpcyB0aGUgbG93ZXN0IG9yaWdpbmFsIGluZGV4IG9mIGFueSBvZiB0aGVcbiAqICAgIGVsZW1lbnRzIGluIGB2c2AuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDb25mbGljdHMoZW50cmllcywgY2cpIHtcbiAgdmFyIG1hcHBlZEVudHJpZXMgPSB7fTtcbiAgXy5mb3JFYWNoKGVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5LCBpKSB7XG4gICAgdmFyIHRtcCA9IG1hcHBlZEVudHJpZXNbZW50cnkudl0gPSB7XG4gICAgICBpbmRlZ3JlZTogMCxcbiAgICAgIFwiaW5cIjogW10sXG4gICAgICBvdXQ6IFtdLFxuICAgICAgdnM6IFtlbnRyeS52XSxcbiAgICAgIGk6IGlcbiAgICB9O1xuICAgIGlmICghXy5pc1VuZGVmaW5lZChlbnRyeS5iYXJ5Y2VudGVyKSkge1xuICAgICAgdG1wLmJhcnljZW50ZXIgPSBlbnRyeS5iYXJ5Y2VudGVyO1xuICAgICAgdG1wLndlaWdodCA9IGVudHJ5LndlaWdodDtcbiAgICB9XG4gIH0pO1xuXG4gIF8uZm9yRWFjaChjZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVudHJ5ViA9IG1hcHBlZEVudHJpZXNbZS52XTtcbiAgICB2YXIgZW50cnlXID0gbWFwcGVkRW50cmllc1tlLnddO1xuICAgIGlmICghXy5pc1VuZGVmaW5lZChlbnRyeVYpICYmICFfLmlzVW5kZWZpbmVkKGVudHJ5VykpIHtcbiAgICAgIGVudHJ5Vy5pbmRlZ3JlZSsrO1xuICAgICAgZW50cnlWLm91dC5wdXNoKG1hcHBlZEVudHJpZXNbZS53XSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgc291cmNlU2V0ID0gXy5maWx0ZXIobWFwcGVkRW50cmllcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICByZXR1cm4gIWVudHJ5LmluZGVncmVlO1xuICB9KTtcblxuICByZXR1cm4gZG9SZXNvbHZlQ29uZmxpY3RzKHNvdXJjZVNldCk7XG59XG5cbmZ1bmN0aW9uIGRvUmVzb2x2ZUNvbmZsaWN0cyhzb3VyY2VTZXQpIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcblxuICBmdW5jdGlvbiBoYW5kbGVJbih2RW50cnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odUVudHJ5KSB7XG4gICAgICBpZiAodUVudHJ5Lm1lcmdlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZCh1RW50cnkuYmFyeWNlbnRlcikgfHxcbiAgICAgICAgICBfLmlzVW5kZWZpbmVkKHZFbnRyeS5iYXJ5Y2VudGVyKSB8fFxuICAgICAgICAgIHVFbnRyeS5iYXJ5Y2VudGVyID49IHZFbnRyeS5iYXJ5Y2VudGVyKSB7XG4gICAgICAgIG1lcmdlRW50cmllcyh2RW50cnksIHVFbnRyeSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU91dCh2RW50cnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24od0VudHJ5KSB7XG4gICAgICB3RW50cnlbXCJpblwiXS5wdXNoKHZFbnRyeSk7XG4gICAgICBpZiAoLS13RW50cnkuaW5kZWdyZWUgPT09IDApIHtcbiAgICAgICAgc291cmNlU2V0LnB1c2god0VudHJ5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgd2hpbGUgKHNvdXJjZVNldC5sZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBzb3VyY2VTZXQucG9wKCk7XG4gICAgZW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICBfLmZvckVhY2goZW50cnlbXCJpblwiXS5yZXZlcnNlKCksIGhhbmRsZUluKGVudHJ5KSk7XG4gICAgXy5mb3JFYWNoKGVudHJ5Lm91dCwgaGFuZGxlT3V0KGVudHJ5KSk7XG4gIH1cblxuICByZXR1cm4gXy5tYXAoXy5maWx0ZXIoZW50cmllcywgZnVuY3Rpb24oZW50cnkpIHsgcmV0dXJuICFlbnRyeS5tZXJnZWQ7IH0pLFxuICAgIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICByZXR1cm4gXy5waWNrKGVudHJ5LCBbXCJ2c1wiLCBcImlcIiwgXCJiYXJ5Y2VudGVyXCIsIFwid2VpZ2h0XCJdKTtcbiAgICB9KTtcblxufVxuXG5mdW5jdGlvbiBtZXJnZUVudHJpZXModGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIHN1bSA9IDA7XG4gIHZhciB3ZWlnaHQgPSAwO1xuXG4gIGlmICh0YXJnZXQud2VpZ2h0KSB7XG4gICAgc3VtICs9IHRhcmdldC5iYXJ5Y2VudGVyICogdGFyZ2V0LndlaWdodDtcbiAgICB3ZWlnaHQgKz0gdGFyZ2V0LndlaWdodDtcbiAgfVxuXG4gIGlmIChzb3VyY2Uud2VpZ2h0KSB7XG4gICAgc3VtICs9IHNvdXJjZS5iYXJ5Y2VudGVyICogc291cmNlLndlaWdodDtcbiAgICB3ZWlnaHQgKz0gc291cmNlLndlaWdodDtcbiAgfVxuXG4gIHRhcmdldC52cyA9IHNvdXJjZS52cy5jb25jYXQodGFyZ2V0LnZzKTtcbiAgdGFyZ2V0LmJhcnljZW50ZXIgPSBzdW0gLyB3ZWlnaHQ7XG4gIHRhcmdldC53ZWlnaHQgPSB3ZWlnaHQ7XG4gIHRhcmdldC5pID0gTWF0aC5taW4oc291cmNlLmksIHRhcmdldC5pKTtcbiAgc291cmNlLm1lcmdlZCA9IHRydWU7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgYmFyeWNlbnRlciA9IHJlcXVpcmUoXCIuL2JhcnljZW50ZXJcIik7XG52YXIgcmVzb2x2ZUNvbmZsaWN0cyA9IHJlcXVpcmUoXCIuL3Jlc29sdmUtY29uZmxpY3RzXCIpO1xudmFyIHNvcnQgPSByZXF1aXJlKFwiLi9zb3J0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRTdWJncmFwaDtcblxuZnVuY3Rpb24gc29ydFN1YmdyYXBoKGcsIHYsIGNnLCBiaWFzUmlnaHQpIHtcbiAgdmFyIG1vdmFibGUgPSBnLmNoaWxkcmVuKHYpO1xuICB2YXIgbm9kZSA9IGcubm9kZSh2KTtcbiAgdmFyIGJsID0gbm9kZSA/IG5vZGUuYm9yZGVyTGVmdCA6IHVuZGVmaW5lZDtcbiAgdmFyIGJyID0gbm9kZSA/IG5vZGUuYm9yZGVyUmlnaHQ6IHVuZGVmaW5lZDtcbiAgdmFyIHN1YmdyYXBocyA9IHt9O1xuXG4gIGlmIChibCkge1xuICAgIG1vdmFibGUgPSBfLmZpbHRlcihtb3ZhYmxlLCBmdW5jdGlvbih3KSB7XG4gICAgICByZXR1cm4gdyAhPT0gYmwgJiYgdyAhPT0gYnI7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYmFyeWNlbnRlcnMgPSBiYXJ5Y2VudGVyKGcsIG1vdmFibGUpO1xuICBfLmZvckVhY2goYmFyeWNlbnRlcnMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgaWYgKGcuY2hpbGRyZW4oZW50cnkudikubGVuZ3RoKSB7XG4gICAgICB2YXIgc3ViZ3JhcGhSZXN1bHQgPSBzb3J0U3ViZ3JhcGgoZywgZW50cnkudiwgY2csIGJpYXNSaWdodCk7XG4gICAgICBzdWJncmFwaHNbZW50cnkudl0gPSBzdWJncmFwaFJlc3VsdDtcbiAgICAgIGlmIChfLmhhcyhzdWJncmFwaFJlc3VsdCwgXCJiYXJ5Y2VudGVyXCIpKSB7XG4gICAgICAgIG1lcmdlQmFyeWNlbnRlcnMoZW50cnksIHN1YmdyYXBoUmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBlbnRyaWVzID0gcmVzb2x2ZUNvbmZsaWN0cyhiYXJ5Y2VudGVycywgY2cpO1xuICBleHBhbmRTdWJncmFwaHMoZW50cmllcywgc3ViZ3JhcGhzKTtcblxuICB2YXIgcmVzdWx0ID0gc29ydChlbnRyaWVzLCBiaWFzUmlnaHQpO1xuXG4gIGlmIChibCkge1xuICAgIHJlc3VsdC52cyA9IF8uZmxhdHRlbihbYmwsIHJlc3VsdC52cywgYnJdLCB0cnVlKTtcbiAgICBpZiAoZy5wcmVkZWNlc3NvcnMoYmwpLmxlbmd0aCkge1xuICAgICAgdmFyIGJsUHJlZCA9IGcubm9kZShnLnByZWRlY2Vzc29ycyhibClbMF0pLFxuICAgICAgICBiclByZWQgPSBnLm5vZGUoZy5wcmVkZWNlc3NvcnMoYnIpWzBdKTtcbiAgICAgIGlmICghXy5oYXMocmVzdWx0LCBcImJhcnljZW50ZXJcIikpIHtcbiAgICAgICAgcmVzdWx0LmJhcnljZW50ZXIgPSAwO1xuICAgICAgICByZXN1bHQud2VpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5iYXJ5Y2VudGVyID0gKHJlc3VsdC5iYXJ5Y2VudGVyICogcmVzdWx0LndlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBibFByZWQub3JkZXIgKyBiclByZWQub3JkZXIpIC8gKHJlc3VsdC53ZWlnaHQgKyAyKTtcbiAgICAgIHJlc3VsdC53ZWlnaHQgKz0gMjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHBhbmRTdWJncmFwaHMoZW50cmllcywgc3ViZ3JhcGhzKSB7XG4gIF8uZm9yRWFjaChlbnRyaWVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIGVudHJ5LnZzID0gXy5mbGF0dGVuKGVudHJ5LnZzLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoc3ViZ3JhcGhzW3ZdKSB7XG4gICAgICAgIHJldHVybiBzdWJncmFwaHNbdl0udnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9KSwgdHJ1ZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtZXJnZUJhcnljZW50ZXJzKHRhcmdldCwgb3RoZXIpIHtcbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHRhcmdldC5iYXJ5Y2VudGVyKSkge1xuICAgIHRhcmdldC5iYXJ5Y2VudGVyID0gKHRhcmdldC5iYXJ5Y2VudGVyICogdGFyZ2V0LndlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIuYmFyeWNlbnRlciAqIG90aGVyLndlaWdodCkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRhcmdldC53ZWlnaHQgKyBvdGhlci53ZWlnaHQpO1xuICAgIHRhcmdldC53ZWlnaHQgKz0gb3RoZXIud2VpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5iYXJ5Y2VudGVyID0gb3RoZXIuYmFyeWNlbnRlcjtcbiAgICB0YXJnZXQud2VpZ2h0ID0gb3RoZXIud2VpZ2h0O1xuICB9XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnQ7XG5cbmZ1bmN0aW9uIHNvcnQoZW50cmllcywgYmlhc1JpZ2h0KSB7XG4gIHZhciBwYXJ0cyA9IHV0aWwucGFydGl0aW9uKGVudHJpZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgcmV0dXJuIF8uaGFzKGVudHJ5LCBcImJhcnljZW50ZXJcIik7XG4gIH0pO1xuICB2YXIgc29ydGFibGUgPSBwYXJ0cy5saHMsXG4gICAgdW5zb3J0YWJsZSA9IF8uc29ydEJ5KHBhcnRzLnJocywgZnVuY3Rpb24oZW50cnkpIHsgcmV0dXJuIC1lbnRyeS5pOyB9KSxcbiAgICB2cyA9IFtdLFxuICAgIHN1bSA9IDAsXG4gICAgd2VpZ2h0ID0gMCxcbiAgICB2c0luZGV4ID0gMDtcblxuICBzb3J0YWJsZS5zb3J0KGNvbXBhcmVXaXRoQmlhcyghIWJpYXNSaWdodCkpO1xuXG4gIHZzSW5kZXggPSBjb25zdW1lVW5zb3J0YWJsZSh2cywgdW5zb3J0YWJsZSwgdnNJbmRleCk7XG5cbiAgXy5mb3JFYWNoKHNvcnRhYmxlLCBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2c0luZGV4ICs9IGVudHJ5LnZzLmxlbmd0aDtcbiAgICB2cy5wdXNoKGVudHJ5LnZzKTtcbiAgICBzdW0gKz0gZW50cnkuYmFyeWNlbnRlciAqIGVudHJ5LndlaWdodDtcbiAgICB3ZWlnaHQgKz0gZW50cnkud2VpZ2h0O1xuICAgIHZzSW5kZXggPSBjb25zdW1lVW5zb3J0YWJsZSh2cywgdW5zb3J0YWJsZSwgdnNJbmRleCk7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSB7IHZzOiBfLmZsYXR0ZW4odnMsIHRydWUpIH07XG4gIGlmICh3ZWlnaHQpIHtcbiAgICByZXN1bHQuYmFyeWNlbnRlciA9IHN1bSAvIHdlaWdodDtcbiAgICByZXN1bHQud2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVVbnNvcnRhYmxlKHZzLCB1bnNvcnRhYmxlLCBpbmRleCkge1xuICB2YXIgbGFzdDtcbiAgd2hpbGUgKHVuc29ydGFibGUubGVuZ3RoICYmIChsYXN0ID0gXy5sYXN0KHVuc29ydGFibGUpKS5pIDw9IGluZGV4KSB7XG4gICAgdW5zb3J0YWJsZS5wb3AoKTtcbiAgICB2cy5wdXNoKGxhc3QudnMpO1xuICAgIGluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBjb21wYXJlV2l0aEJpYXMoYmlhcykge1xuICByZXR1cm4gZnVuY3Rpb24oZW50cnlWLCBlbnRyeVcpIHtcbiAgICBpZiAoZW50cnlWLmJhcnljZW50ZXIgPCBlbnRyeVcuYmFyeWNlbnRlcikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoZW50cnlWLmJhcnljZW50ZXIgPiBlbnRyeVcuYmFyeWNlbnRlcikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuICFiaWFzID8gZW50cnlWLmkgLSBlbnRyeVcuaSA6IGVudHJ5Vy5pIC0gZW50cnlWLmk7XG4gIH07XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnREdW1teUNoYWlucztcblxuZnVuY3Rpb24gcGFyZW50RHVtbXlDaGFpbnMoZykge1xuICB2YXIgcG9zdG9yZGVyTnVtcyA9IHBvc3RvcmRlcihnKTtcblxuICBfLmZvckVhY2goZy5ncmFwaCgpLmR1bW15Q2hhaW5zLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgdmFyIGVkZ2VPYmogPSBub2RlLmVkZ2VPYmo7XG4gICAgdmFyIHBhdGhEYXRhID0gZmluZFBhdGgoZywgcG9zdG9yZGVyTnVtcywgZWRnZU9iai52LCBlZGdlT2JqLncpO1xuICAgIHZhciBwYXRoID0gcGF0aERhdGEucGF0aDtcbiAgICB2YXIgbGNhID0gcGF0aERhdGEubGNhO1xuICAgIHZhciBwYXRoSWR4ID0gMDtcbiAgICB2YXIgcGF0aFYgPSBwYXRoW3BhdGhJZHhdO1xuICAgIHZhciBhc2NlbmRpbmcgPSB0cnVlO1xuXG4gICAgd2hpbGUgKHYgIT09IGVkZ2VPYmoudykge1xuICAgICAgbm9kZSA9IGcubm9kZSh2KTtcblxuICAgICAgaWYgKGFzY2VuZGluZykge1xuICAgICAgICB3aGlsZSAoKHBhdGhWID0gcGF0aFtwYXRoSWR4XSkgIT09IGxjYSAmJlxuICAgICAgICAgICAgICAgZy5ub2RlKHBhdGhWKS5tYXhSYW5rIDwgbm9kZS5yYW5rKSB7XG4gICAgICAgICAgcGF0aElkeCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGhWID09PSBsY2EpIHtcbiAgICAgICAgICBhc2NlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWFzY2VuZGluZykge1xuICAgICAgICB3aGlsZSAocGF0aElkeCA8IHBhdGgubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgICAgZy5ub2RlKHBhdGhWID0gcGF0aFtwYXRoSWR4ICsgMV0pLm1pblJhbmsgPD0gbm9kZS5yYW5rKSB7XG4gICAgICAgICAgcGF0aElkeCsrO1xuICAgICAgICB9XG4gICAgICAgIHBhdGhWID0gcGF0aFtwYXRoSWR4XTtcbiAgICAgIH1cblxuICAgICAgZy5zZXRQYXJlbnQodiwgcGF0aFYpO1xuICAgICAgdiA9IGcuc3VjY2Vzc29ycyh2KVswXTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBGaW5kIGEgcGF0aCBmcm9tIHYgdG8gdyB0aHJvdWdoIHRoZSBsb3dlc3QgY29tbW9uIGFuY2VzdG9yIChMQ0EpLiBSZXR1cm4gdGhlXG4vLyBmdWxsIHBhdGggYW5kIHRoZSBMQ0EuXG5mdW5jdGlvbiBmaW5kUGF0aChnLCBwb3N0b3JkZXJOdW1zLCB2LCB3KSB7XG4gIHZhciB2UGF0aCA9IFtdO1xuICB2YXIgd1BhdGggPSBbXTtcbiAgdmFyIGxvdyA9IE1hdGgubWluKHBvc3RvcmRlck51bXNbdl0ubG93LCBwb3N0b3JkZXJOdW1zW3ddLmxvdyk7XG4gIHZhciBsaW0gPSBNYXRoLm1heChwb3N0b3JkZXJOdW1zW3ZdLmxpbSwgcG9zdG9yZGVyTnVtc1t3XS5saW0pO1xuICB2YXIgcGFyZW50O1xuICB2YXIgbGNhO1xuXG4gIC8vIFRyYXZlcnNlIHVwIGZyb20gdiB0byBmaW5kIHRoZSBMQ0FcbiAgcGFyZW50ID0gdjtcbiAgZG8ge1xuICAgIHBhcmVudCA9IGcucGFyZW50KHBhcmVudCk7XG4gICAgdlBhdGgucHVzaChwYXJlbnQpO1xuICB9IHdoaWxlIChwYXJlbnQgJiZcbiAgICAgICAgICAgKHBvc3RvcmRlck51bXNbcGFyZW50XS5sb3cgPiBsb3cgfHwgbGltID4gcG9zdG9yZGVyTnVtc1twYXJlbnRdLmxpbSkpO1xuICBsY2EgPSBwYXJlbnQ7XG5cbiAgLy8gVHJhdmVyc2UgZnJvbSB3IHRvIExDQVxuICBwYXJlbnQgPSB3O1xuICB3aGlsZSAoKHBhcmVudCA9IGcucGFyZW50KHBhcmVudCkpICE9PSBsY2EpIHtcbiAgICB3UGF0aC5wdXNoKHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4geyBwYXRoOiB2UGF0aC5jb25jYXQod1BhdGgucmV2ZXJzZSgpKSwgbGNhOiBsY2EgfTtcbn1cblxuZnVuY3Rpb24gcG9zdG9yZGVyKGcpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB2YXIgbGltID0gMDtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBsb3cgPSBsaW07XG4gICAgXy5mb3JFYWNoKGcuY2hpbGRyZW4odiksIGRmcyk7XG4gICAgcmVzdWx0W3ZdID0geyBsb3c6IGxvdywgbGltOiBsaW0rKyB9O1xuICB9XG4gIF8uZm9yRWFjaChnLmNoaWxkcmVuKCksIGRmcyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgR3JhcGggPSByZXF1aXJlKFwiLi4vZ3JhcGhsaWJcIikuR3JhcGg7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuXG4vKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgY29vcmRpbmF0ZSBhc3NpZ25tZW50IGJhc2VkIG9uIEJyYW5kZXMgYW5kIEvDtnBmLCBcIkZhc3RcbiAqIGFuZCBTaW1wbGUgSG9yaXpvbnRhbCBDb29yZGluYXRlIEFzc2lnbm1lbnQuXCJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zaXRpb25YOiBwb3NpdGlvblgsXG4gIGZpbmRUeXBlMUNvbmZsaWN0czogZmluZFR5cGUxQ29uZmxpY3RzLFxuICBmaW5kVHlwZTJDb25mbGljdHM6IGZpbmRUeXBlMkNvbmZsaWN0cyxcbiAgYWRkQ29uZmxpY3Q6IGFkZENvbmZsaWN0LFxuICBoYXNDb25mbGljdDogaGFzQ29uZmxpY3QsXG4gIHZlcnRpY2FsQWxpZ25tZW50OiB2ZXJ0aWNhbEFsaWdubWVudCxcbiAgaG9yaXpvbnRhbENvbXBhY3Rpb246IGhvcml6b250YWxDb21wYWN0aW9uLFxuICBhbGlnbkNvb3JkaW5hdGVzOiBhbGlnbkNvb3JkaW5hdGVzLFxuICBmaW5kU21hbGxlc3RXaWR0aEFsaWdubWVudDogZmluZFNtYWxsZXN0V2lkdGhBbGlnbm1lbnQsXG4gIGJhbGFuY2U6IGJhbGFuY2Vcbn07XG5cbi8qXG4gKiBNYXJrcyBhbGwgZWRnZXMgaW4gdGhlIGdyYXBoIHdpdGggYSB0eXBlLTEgY29uZmxpY3Qgd2l0aCB0aGUgXCJ0eXBlMUNvbmZsaWN0XCJcbiAqIHByb3BlcnR5LiBBIHR5cGUtMSBjb25mbGljdCBpcyBvbmUgd2hlcmUgYSBub24taW5uZXIgc2VnbWVudCBjcm9zc2VzIGFuXG4gKiBpbm5lciBzZWdtZW50LiBBbiBpbm5lciBzZWdtZW50IGlzIGFuIGVkZ2Ugd2l0aCBib3RoIGluY2lkZW50IG5vZGVzIG1hcmtlZFxuICogd2l0aCB0aGUgXCJkdW1teVwiIHByb3BlcnR5LlxuICpcbiAqIFRoaXMgYWxnb3JpdGhtIHNjYW5zIGxheWVyIGJ5IGxheWVyLCBzdGFydGluZyB3aXRoIHRoZSBzZWNvbmQsIGZvciB0eXBlLTFcbiAqIGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBjdXJyZW50IGxheWVyIGFuZCB0aGUgcHJldmlvdXMgbGF5ZXIuIEZvciBlYWNoIGxheWVyXG4gKiBpdCBzY2FucyB0aGUgbm9kZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0IHVudGlsIGl0IHJlYWNoZXMgb25lIHRoYXQgaXMgaW5jaWRlbnRcbiAqIG9uIGFuIGlubmVyIHNlZ21lbnQuIEl0IHRoZW4gc2NhbnMgcHJlZGVjZXNzb3JzIHRvIGRldGVybWluZSBpZiB0aGV5IGhhdmVcbiAqIGVkZ2VzIHRoYXQgY3Jvc3MgdGhhdCBpbm5lciBzZWdtZW50LiBBdCB0aGUgZW5kIGEgZmluYWwgc2NhbiBpcyBkb25lIGZvciBhbGxcbiAqIG5vZGVzIG9uIHRoZSBjdXJyZW50IHJhbmsgdG8gc2VlIGlmIHRoZXkgY3Jvc3MgdGhlIGxhc3QgdmlzaXRlZCBpbm5lclxuICogc2VnbWVudC5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSAoc2FmZWx5KSBhc3N1bWVzIHRoYXQgYSBkdW1teSBub2RlIHdpbGwgb25seSBiZSBpbmNpZGVudCBvbiBhXG4gKiBzaW5nbGUgbm9kZSBpbiB0aGUgbGF5ZXJzIGJlaW5nIHNjYW5uZWQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRUeXBlMUNvbmZsaWN0cyhnLCBsYXllcmluZykge1xuICB2YXIgY29uZmxpY3RzID0ge307XG5cbiAgZnVuY3Rpb24gdmlzaXRMYXllcihwcmV2TGF5ZXIsIGxheWVyKSB7XG4gICAgdmFyXG4gICAgICAvLyBsYXN0IHZpc2l0ZWQgbm9kZSBpbiB0aGUgcHJldmlvdXMgbGF5ZXIgdGhhdCBpcyBpbmNpZGVudCBvbiBhbiBpbm5lclxuICAgICAgLy8gc2VnbWVudC5cbiAgICAgIGswID0gMCxcbiAgICAgIC8vIFRyYWNrcyB0aGUgbGFzdCBub2RlIGluIHRoaXMgbGF5ZXIgc2Nhbm5lZCBmb3IgY3Jvc3NpbmdzIHdpdGggYSB0eXBlLTFcbiAgICAgIC8vIHNlZ21lbnQuXG4gICAgICBzY2FuUG9zID0gMCxcbiAgICAgIHByZXZMYXllckxlbmd0aCA9IHByZXZMYXllci5sZW5ndGgsXG4gICAgICBsYXN0Tm9kZSA9IF8ubGFzdChsYXllcik7XG5cbiAgICBfLmZvckVhY2gobGF5ZXIsIGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgIHZhciB3ID0gZmluZE90aGVySW5uZXJTZWdtZW50Tm9kZShnLCB2KSxcbiAgICAgICAgazEgPSB3ID8gZy5ub2RlKHcpLm9yZGVyIDogcHJldkxheWVyTGVuZ3RoO1xuXG4gICAgICBpZiAodyB8fCB2ID09PSBsYXN0Tm9kZSkge1xuICAgICAgICBfLmZvckVhY2gobGF5ZXIuc2xpY2Uoc2NhblBvcywgaSArMSksIGZ1bmN0aW9uKHNjYW5Ob2RlKSB7XG4gICAgICAgICAgXy5mb3JFYWNoKGcucHJlZGVjZXNzb3JzKHNjYW5Ob2RlKSwgZnVuY3Rpb24odSkge1xuICAgICAgICAgICAgdmFyIHVMYWJlbCA9IGcubm9kZSh1KSxcbiAgICAgICAgICAgICAgdVBvcyA9IHVMYWJlbC5vcmRlcjtcbiAgICAgICAgICAgIGlmICgodVBvcyA8IGswIHx8IGsxIDwgdVBvcykgJiZcbiAgICAgICAgICAgICAgICAhKHVMYWJlbC5kdW1teSAmJiBnLm5vZGUoc2Nhbk5vZGUpLmR1bW15KSkge1xuICAgICAgICAgICAgICBhZGRDb25mbGljdChjb25mbGljdHMsIHUsIHNjYW5Ob2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjYW5Qb3MgPSBpICsgMTtcbiAgICAgICAgazAgPSBrMTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsYXllcjtcbiAgfVxuXG4gIF8ucmVkdWNlKGxheWVyaW5nLCB2aXNpdExheWVyKTtcbiAgcmV0dXJuIGNvbmZsaWN0cztcbn1cblxuZnVuY3Rpb24gZmluZFR5cGUyQ29uZmxpY3RzKGcsIGxheWVyaW5nKSB7XG4gIHZhciBjb25mbGljdHMgPSB7fTtcblxuICBmdW5jdGlvbiBzY2FuKHNvdXRoLCBzb3V0aFBvcywgc291dGhFbmQsIHByZXZOb3J0aEJvcmRlciwgbmV4dE5vcnRoQm9yZGVyKSB7XG4gICAgdmFyIHY7XG4gICAgXy5mb3JFYWNoKF8ucmFuZ2Uoc291dGhQb3MsIHNvdXRoRW5kKSwgZnVuY3Rpb24oaSkge1xuICAgICAgdiA9IHNvdXRoW2ldO1xuICAgICAgaWYgKGcubm9kZSh2KS5kdW1teSkge1xuICAgICAgICBfLmZvckVhY2goZy5wcmVkZWNlc3NvcnModiksIGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgICB2YXIgdU5vZGUgPSBnLm5vZGUodSk7XG4gICAgICAgICAgaWYgKHVOb2RlLmR1bW15ICYmXG4gICAgICAgICAgICAgICh1Tm9kZS5vcmRlciA8IHByZXZOb3J0aEJvcmRlciB8fCB1Tm9kZS5vcmRlciA+IG5leHROb3J0aEJvcmRlcikpIHtcbiAgICAgICAgICAgIGFkZENvbmZsaWN0KGNvbmZsaWN0cywgdSwgdik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gdmlzaXRMYXllcihub3J0aCwgc291dGgpIHtcbiAgICB2YXIgcHJldk5vcnRoUG9zID0gLTEsXG4gICAgICBuZXh0Tm9ydGhQb3MsXG4gICAgICBzb3V0aFBvcyA9IDA7XG5cbiAgICBfLmZvckVhY2goc291dGgsIGZ1bmN0aW9uKHYsIHNvdXRoTG9va2FoZWFkKSB7XG4gICAgICBpZiAoZy5ub2RlKHYpLmR1bW15ID09PSBcImJvcmRlclwiKSB7XG4gICAgICAgIHZhciBwcmVkZWNlc3NvcnMgPSBnLnByZWRlY2Vzc29ycyh2KTtcbiAgICAgICAgaWYgKHByZWRlY2Vzc29ycy5sZW5ndGgpIHtcbiAgICAgICAgICBuZXh0Tm9ydGhQb3MgPSBnLm5vZGUocHJlZGVjZXNzb3JzWzBdKS5vcmRlcjtcbiAgICAgICAgICBzY2FuKHNvdXRoLCBzb3V0aFBvcywgc291dGhMb29rYWhlYWQsIHByZXZOb3J0aFBvcywgbmV4dE5vcnRoUG9zKTtcbiAgICAgICAgICBzb3V0aFBvcyA9IHNvdXRoTG9va2FoZWFkO1xuICAgICAgICAgIHByZXZOb3J0aFBvcyA9IG5leHROb3J0aFBvcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2Nhbihzb3V0aCwgc291dGhQb3MsIHNvdXRoLmxlbmd0aCwgbmV4dE5vcnRoUG9zLCBub3J0aC5sZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNvdXRoO1xuICB9XG5cbiAgXy5yZWR1Y2UobGF5ZXJpbmcsIHZpc2l0TGF5ZXIpO1xuICByZXR1cm4gY29uZmxpY3RzO1xufVxuXG5mdW5jdGlvbiBmaW5kT3RoZXJJbm5lclNlZ21lbnROb2RlKGcsIHYpIHtcbiAgaWYgKGcubm9kZSh2KS5kdW1teSkge1xuICAgIHJldHVybiBfLmZpbmQoZy5wcmVkZWNlc3NvcnModiksIGZ1bmN0aW9uKHUpIHtcbiAgICAgIHJldHVybiBnLm5vZGUodSkuZHVtbXk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQ29uZmxpY3QoY29uZmxpY3RzLCB2LCB3KSB7XG4gIGlmICh2ID4gdykge1xuICAgIHZhciB0bXAgPSB2O1xuICAgIHYgPSB3O1xuICAgIHcgPSB0bXA7XG4gIH1cblxuICB2YXIgY29uZmxpY3RzViA9IGNvbmZsaWN0c1t2XTtcbiAgaWYgKCFjb25mbGljdHNWKSB7XG4gICAgY29uZmxpY3RzW3ZdID0gY29uZmxpY3RzViA9IHt9O1xuICB9XG4gIGNvbmZsaWN0c1Zbd10gPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNDb25mbGljdChjb25mbGljdHMsIHYsIHcpIHtcbiAgaWYgKHYgPiB3KSB7XG4gICAgdmFyIHRtcCA9IHY7XG4gICAgdiA9IHc7XG4gICAgdyA9IHRtcDtcbiAgfVxuICByZXR1cm4gXy5oYXMoY29uZmxpY3RzW3ZdLCB3KTtcbn1cblxuLypcbiAqIFRyeSB0byBhbGlnbiBub2RlcyBpbnRvIHZlcnRpY2FsIFwiYmxvY2tzXCIgd2hlcmUgcG9zc2libGUuIFRoaXMgYWxnb3JpdGhtXG4gKiBhdHRlbXB0cyB0byBhbGlnbiBhIG5vZGUgd2l0aCBvbmUgb2YgaXRzIG1lZGlhbiBuZWlnaGJvcnMuIElmIHRoZSBlZGdlXG4gKiBjb25uZWN0aW5nIGEgbmVpZ2hib3IgaXMgYSB0eXBlLTEgY29uZmxpY3QgdGhlbiB3ZSBpZ25vcmUgdGhhdCBwb3NzaWJpbGl0eS5cbiAqIElmIGEgcHJldmlvdXMgbm9kZSBoYXMgYWxyZWFkeSBmb3JtZWQgYSBibG9jayB3aXRoIGEgbm9kZSBhZnRlciB0aGUgbm9kZVxuICogd2UncmUgdHJ5aW5nIHRvIGZvcm0gYSBibG9jayB3aXRoLCB3ZSBhbHNvIGlnbm9yZSB0aGF0IHBvc3NpYmlsaXR5IC0gb3VyXG4gKiBibG9ja3Mgd291bGQgYmUgc3BsaXQgaW4gdGhhdCBzY2VuYXJpby5cbiAqL1xuZnVuY3Rpb24gdmVydGljYWxBbGlnbm1lbnQoZywgbGF5ZXJpbmcsIGNvbmZsaWN0cywgbmVpZ2hib3JGbikge1xuICB2YXIgcm9vdCA9IHt9LFxuICAgIGFsaWduID0ge30sXG4gICAgcG9zID0ge307XG5cbiAgLy8gV2UgY2FjaGUgdGhlIHBvc2l0aW9uIGhlcmUgYmFzZWQgb24gdGhlIGxheWVyaW5nIGJlY2F1c2UgdGhlIGdyYXBoIGFuZFxuICAvLyBsYXllcmluZyBtYXkgYmUgb3V0IG9mIHN5bmMuIFRoZSBsYXllcmluZyBtYXRyaXggaXMgbWFuaXB1bGF0ZWQgdG9cbiAgLy8gZ2VuZXJhdGUgZGlmZmVyZW50IGV4dHJlbWUgYWxpZ25tZW50cy5cbiAgXy5mb3JFYWNoKGxheWVyaW5nLCBmdW5jdGlvbihsYXllcikge1xuICAgIF8uZm9yRWFjaChsYXllciwgZnVuY3Rpb24odiwgb3JkZXIpIHtcbiAgICAgIHJvb3Rbdl0gPSB2O1xuICAgICAgYWxpZ25bdl0gPSB2O1xuICAgICAgcG9zW3ZdID0gb3JkZXI7XG4gICAgfSk7XG4gIH0pO1xuXG4gIF8uZm9yRWFjaChsYXllcmluZywgZnVuY3Rpb24obGF5ZXIpIHtcbiAgICB2YXIgcHJldklkeCA9IC0xO1xuICAgIF8uZm9yRWFjaChsYXllciwgZnVuY3Rpb24odikge1xuICAgICAgdmFyIHdzID0gbmVpZ2hib3JGbih2KTtcbiAgICAgIGlmICh3cy5sZW5ndGgpIHtcbiAgICAgICAgd3MgPSBfLnNvcnRCeSh3cywgZnVuY3Rpb24odykgeyByZXR1cm4gcG9zW3ddOyB9KTtcbiAgICAgICAgdmFyIG1wID0gKHdzLmxlbmd0aCAtIDEpIC8gMjtcbiAgICAgICAgZm9yICh2YXIgaSA9IE1hdGguZmxvb3IobXApLCBpbCA9IE1hdGguY2VpbChtcCk7IGkgPD0gaWw7ICsraSkge1xuICAgICAgICAgIHZhciB3ID0gd3NbaV07XG4gICAgICAgICAgaWYgKGFsaWduW3ZdID09PSB2ICYmXG4gICAgICAgICAgICAgIHByZXZJZHggPCBwb3Nbd10gJiZcbiAgICAgICAgICAgICAgIWhhc0NvbmZsaWN0KGNvbmZsaWN0cywgdiwgdykpIHtcbiAgICAgICAgICAgIGFsaWduW3ddID0gdjtcbiAgICAgICAgICAgIGFsaWduW3ZdID0gcm9vdFt2XSA9IHJvb3Rbd107XG4gICAgICAgICAgICBwcmV2SWR4ID0gcG9zW3ddO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4geyByb290OiByb290LCBhbGlnbjogYWxpZ24gfTtcbn1cblxuZnVuY3Rpb24gaG9yaXpvbnRhbENvbXBhY3Rpb24oZywgbGF5ZXJpbmcsIHJvb3QsIGFsaWduLCByZXZlcnNlU2VwKSB7XG4gIC8vIFRoaXMgcG9ydGlvbiBvZiB0aGUgYWxnb3JpdGhtIGRpZmZlcnMgZnJvbSBCSyBkdWUgdG8gYSBudW1iZXIgb2YgcHJvYmxlbXMuXG4gIC8vIEluc3RlYWQgb2YgdGhlaXIgYWxnb3JpdGhtIHdlIGNvbnN0cnVjdCBhIG5ldyBibG9jayBncmFwaCBhbmQgZG8gdHdvXG4gIC8vIHN3ZWVwcy4gVGhlIGZpcnN0IHN3ZWVwIHBsYWNlcyBibG9ja3Mgd2l0aCB0aGUgc21hbGxlc3QgcG9zc2libGVcbiAgLy8gY29vcmRpbmF0ZXMuIFRoZSBzZWNvbmQgc3dlZXAgcmVtb3ZlcyB1bnVzZWQgc3BhY2UgYnkgbW92aW5nIGJsb2NrcyB0byB0aGVcbiAgLy8gZ3JlYXRlc3QgY29vcmRpbmF0ZXMgd2l0aG91dCB2aW9sYXRpbmcgc2VwYXJhdGlvbi5cbiAgdmFyIHhzID0ge30sXG4gICAgYmxvY2tHID0gYnVpbGRCbG9ja0dyYXBoKGcsIGxheWVyaW5nLCByb290LCByZXZlcnNlU2VwKSxcbiAgICBib3JkZXJUeXBlID0gcmV2ZXJzZVNlcCA/IFwiYm9yZGVyTGVmdFwiIDogXCJib3JkZXJSaWdodFwiO1xuXG4gIGZ1bmN0aW9uIGl0ZXJhdGUoc2V0WHNGdW5jLCBuZXh0Tm9kZXNGdW5jKSB7XG4gICAgdmFyIHN0YWNrID0gYmxvY2tHLm5vZGVzKCk7XG4gICAgdmFyIGVsZW0gPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgdmlzaXRlZCA9IHt9O1xuICAgIHdoaWxlIChlbGVtKSB7XG4gICAgICBpZiAodmlzaXRlZFtlbGVtXSkge1xuICAgICAgICBzZXRYc0Z1bmMoZWxlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aXNpdGVkW2VsZW1dID0gdHJ1ZTtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtKTtcbiAgICAgICAgc3RhY2sgPSBzdGFjay5jb25jYXQobmV4dE5vZGVzRnVuYyhlbGVtKSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW0gPSBzdGFjay5wb3AoKTtcbiAgICB9XG4gIH1cblxuICAvLyBGaXJzdCBwYXNzLCBhc3NpZ24gc21hbGxlc3QgY29vcmRpbmF0ZXNcbiAgZnVuY3Rpb24gcGFzczEoZWxlbSkge1xuICAgIHhzW2VsZW1dID0gYmxvY2tHLmluRWRnZXMoZWxlbSkucmVkdWNlKGZ1bmN0aW9uKGFjYywgZSkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KGFjYywgeHNbZS52XSArIGJsb2NrRy5lZGdlKGUpKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8vIFNlY29uZCBwYXNzLCBhc3NpZ24gZ3JlYXRlc3QgY29vcmRpbmF0ZXNcbiAgZnVuY3Rpb24gcGFzczIoZWxlbSkge1xuICAgIHZhciBtaW4gPSBibG9ja0cub3V0RWRnZXMoZWxlbSkucmVkdWNlKGZ1bmN0aW9uKGFjYywgZSkge1xuICAgICAgcmV0dXJuIE1hdGgubWluKGFjYywgeHNbZS53XSAtIGJsb2NrRy5lZGdlKGUpKTtcbiAgICB9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuXG4gICAgdmFyIG5vZGUgPSBnLm5vZGUoZWxlbSk7XG4gICAgaWYgKG1pbiAhPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICYmIG5vZGUuYm9yZGVyVHlwZSAhPT0gYm9yZGVyVHlwZSkge1xuICAgICAgeHNbZWxlbV0gPSBNYXRoLm1heCh4c1tlbGVtXSwgbWluKTtcbiAgICB9XG4gIH1cblxuICBpdGVyYXRlKHBhc3MxLCBibG9ja0cucHJlZGVjZXNzb3JzLmJpbmQoYmxvY2tHKSk7XG4gIGl0ZXJhdGUocGFzczIsIGJsb2NrRy5zdWNjZXNzb3JzLmJpbmQoYmxvY2tHKSk7XG5cbiAgLy8gQXNzaWduIHggY29vcmRpbmF0ZXMgdG8gYWxsIG5vZGVzXG4gIF8uZm9yRWFjaChhbGlnbiwgZnVuY3Rpb24odikge1xuICAgIHhzW3ZdID0geHNbcm9vdFt2XV07XG4gIH0pO1xuXG4gIHJldHVybiB4cztcbn1cblxuXG5mdW5jdGlvbiBidWlsZEJsb2NrR3JhcGgoZywgbGF5ZXJpbmcsIHJvb3QsIHJldmVyc2VTZXApIHtcbiAgdmFyIGJsb2NrR3JhcGggPSBuZXcgR3JhcGgoKSxcbiAgICBncmFwaExhYmVsID0gZy5ncmFwaCgpLFxuICAgIHNlcEZuID0gc2VwKGdyYXBoTGFiZWwubm9kZXNlcCwgZ3JhcGhMYWJlbC5lZGdlc2VwLCByZXZlcnNlU2VwKTtcblxuICBfLmZvckVhY2gobGF5ZXJpbmcsIGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIHU7XG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2KSB7XG4gICAgICB2YXIgdlJvb3QgPSByb290W3ZdO1xuICAgICAgYmxvY2tHcmFwaC5zZXROb2RlKHZSb290KTtcbiAgICAgIGlmICh1KSB7XG4gICAgICAgIHZhciB1Um9vdCA9IHJvb3RbdV0sXG4gICAgICAgICAgcHJldk1heCA9IGJsb2NrR3JhcGguZWRnZSh1Um9vdCwgdlJvb3QpO1xuICAgICAgICBibG9ja0dyYXBoLnNldEVkZ2UodVJvb3QsIHZSb290LCBNYXRoLm1heChzZXBGbihnLCB2LCB1KSwgcHJldk1heCB8fCAwKSk7XG4gICAgICB9XG4gICAgICB1ID0gdjtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJsb2NrR3JhcGg7XG59XG5cbi8qXG4gKiBSZXR1cm5zIHRoZSBhbGlnbm1lbnQgdGhhdCBoYXMgdGhlIHNtYWxsZXN0IHdpZHRoIG9mIHRoZSBnaXZlbiBhbGlnbm1lbnRzLlxuICovXG5mdW5jdGlvbiBmaW5kU21hbGxlc3RXaWR0aEFsaWdubWVudChnLCB4c3MpIHtcbiAgcmV0dXJuIF8ubWluQnkoXy52YWx1ZXMoeHNzKSwgZnVuY3Rpb24gKHhzKSB7XG4gICAgdmFyIG1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICB2YXIgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgXy5mb3JJbih4cywgZnVuY3Rpb24gKHgsIHYpIHtcbiAgICAgIHZhciBoYWxmV2lkdGggPSB3aWR0aChnLCB2KSAvIDI7XG5cbiAgICAgIG1heCA9IE1hdGgubWF4KHggKyBoYWxmV2lkdGgsIG1heCk7XG4gICAgICBtaW4gPSBNYXRoLm1pbih4IC0gaGFsZldpZHRoLCBtaW4pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1heCAtIG1pbjtcbiAgfSk7XG59XG5cbi8qXG4gKiBBbGlnbiB0aGUgY29vcmRpbmF0ZXMgb2YgZWFjaCBvZiB0aGUgbGF5b3V0IGFsaWdubWVudHMgc3VjaCB0aGF0XG4gKiBsZWZ0LWJpYXNlZCBhbGlnbm1lbnRzIGhhdmUgdGhlaXIgbWluaW11bSBjb29yZGluYXRlIGF0IHRoZSBzYW1lIHBvaW50IGFzXG4gKiB0aGUgbWluaW11bSBjb29yZGluYXRlIG9mIHRoZSBzbWFsbGVzdCB3aWR0aCBhbGlnbm1lbnQgYW5kIHJpZ2h0LWJpYXNlZFxuICogYWxpZ25tZW50cyBoYXZlIHRoZWlyIG1heGltdW0gY29vcmRpbmF0ZSBhdCB0aGUgc2FtZSBwb2ludCBhcyB0aGUgbWF4aW11bVxuICogY29vcmRpbmF0ZSBvZiB0aGUgc21hbGxlc3Qgd2lkdGggYWxpZ25tZW50LlxuICovXG5mdW5jdGlvbiBhbGlnbkNvb3JkaW5hdGVzKHhzcywgYWxpZ25Ubykge1xuICB2YXIgYWxpZ25Ub1ZhbHMgPSBfLnZhbHVlcyhhbGlnblRvKSxcbiAgICBhbGlnblRvTWluID0gXy5taW4oYWxpZ25Ub1ZhbHMpLFxuICAgIGFsaWduVG9NYXggPSBfLm1heChhbGlnblRvVmFscyk7XG5cbiAgXy5mb3JFYWNoKFtcInVcIiwgXCJkXCJdLCBmdW5jdGlvbih2ZXJ0KSB7XG4gICAgXy5mb3JFYWNoKFtcImxcIiwgXCJyXCJdLCBmdW5jdGlvbihob3Jpeikge1xuICAgICAgdmFyIGFsaWdubWVudCA9IHZlcnQgKyBob3JpeixcbiAgICAgICAgeHMgPSB4c3NbYWxpZ25tZW50XSxcbiAgICAgICAgZGVsdGE7XG4gICAgICBpZiAoeHMgPT09IGFsaWduVG8pIHJldHVybjtcblxuICAgICAgdmFyIHhzVmFscyA9IF8udmFsdWVzKHhzKTtcbiAgICAgIGRlbHRhID0gaG9yaXogPT09IFwibFwiID8gYWxpZ25Ub01pbiAtIF8ubWluKHhzVmFscykgOiBhbGlnblRvTWF4IC0gXy5tYXgoeHNWYWxzKTtcblxuICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgIHhzc1thbGlnbm1lbnRdID0gXy5tYXBWYWx1ZXMoeHMsIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBkZWx0YTsgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBiYWxhbmNlKHhzcywgYWxpZ24pIHtcbiAgcmV0dXJuIF8ubWFwVmFsdWVzKHhzcy51bCwgZnVuY3Rpb24oaWdub3JlLCB2KSB7XG4gICAgaWYgKGFsaWduKSB7XG4gICAgICByZXR1cm4geHNzW2FsaWduLnRvTG93ZXJDYXNlKCldW3ZdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeHMgPSBfLnNvcnRCeShfLm1hcCh4c3MsIHYpKTtcbiAgICAgIHJldHVybiAoeHNbMV0gKyB4c1syXSkgLyAyO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uWChnKSB7XG4gIHZhciBsYXllcmluZyA9IHV0aWwuYnVpbGRMYXllck1hdHJpeChnKTtcbiAgdmFyIGNvbmZsaWN0cyA9IF8ubWVyZ2UoXG4gICAgZmluZFR5cGUxQ29uZmxpY3RzKGcsIGxheWVyaW5nKSxcbiAgICBmaW5kVHlwZTJDb25mbGljdHMoZywgbGF5ZXJpbmcpKTtcblxuICB2YXIgeHNzID0ge307XG4gIHZhciBhZGp1c3RlZExheWVyaW5nO1xuICBfLmZvckVhY2goW1widVwiLCBcImRcIl0sIGZ1bmN0aW9uKHZlcnQpIHtcbiAgICBhZGp1c3RlZExheWVyaW5nID0gdmVydCA9PT0gXCJ1XCIgPyBsYXllcmluZyA6IF8udmFsdWVzKGxheWVyaW5nKS5yZXZlcnNlKCk7XG4gICAgXy5mb3JFYWNoKFtcImxcIiwgXCJyXCJdLCBmdW5jdGlvbihob3Jpeikge1xuICAgICAgaWYgKGhvcml6ID09PSBcInJcIikge1xuICAgICAgICBhZGp1c3RlZExheWVyaW5nID0gXy5tYXAoYWRqdXN0ZWRMYXllcmluZywgZnVuY3Rpb24oaW5uZXIpIHtcbiAgICAgICAgICByZXR1cm4gXy52YWx1ZXMoaW5uZXIpLnJldmVyc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZWlnaGJvckZuID0gKHZlcnQgPT09IFwidVwiID8gZy5wcmVkZWNlc3NvcnMgOiBnLnN1Y2Nlc3NvcnMpLmJpbmQoZyk7XG4gICAgICB2YXIgYWxpZ24gPSB2ZXJ0aWNhbEFsaWdubWVudChnLCBhZGp1c3RlZExheWVyaW5nLCBjb25mbGljdHMsIG5laWdoYm9yRm4pO1xuICAgICAgdmFyIHhzID0gaG9yaXpvbnRhbENvbXBhY3Rpb24oZywgYWRqdXN0ZWRMYXllcmluZyxcbiAgICAgICAgYWxpZ24ucm9vdCwgYWxpZ24uYWxpZ24sIGhvcml6ID09PSBcInJcIik7XG4gICAgICBpZiAoaG9yaXogPT09IFwiclwiKSB7XG4gICAgICAgIHhzID0gXy5tYXBWYWx1ZXMoeHMsIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIC14OyB9KTtcbiAgICAgIH1cbiAgICAgIHhzc1t2ZXJ0ICsgaG9yaXpdID0geHM7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHZhciBzbWFsbGVzdFdpZHRoID0gZmluZFNtYWxsZXN0V2lkdGhBbGlnbm1lbnQoZywgeHNzKTtcbiAgYWxpZ25Db29yZGluYXRlcyh4c3MsIHNtYWxsZXN0V2lkdGgpO1xuICByZXR1cm4gYmFsYW5jZSh4c3MsIGcuZ3JhcGgoKS5hbGlnbik7XG59XG5cbmZ1bmN0aW9uIHNlcChub2RlU2VwLCBlZGdlU2VwLCByZXZlcnNlU2VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihnLCB2LCB3KSB7XG4gICAgdmFyIHZMYWJlbCA9IGcubm9kZSh2KTtcbiAgICB2YXIgd0xhYmVsID0gZy5ub2RlKHcpO1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBkZWx0YTtcblxuICAgIHN1bSArPSB2TGFiZWwud2lkdGggLyAyO1xuICAgIGlmIChfLmhhcyh2TGFiZWwsIFwibGFiZWxwb3NcIikpIHtcbiAgICAgIHN3aXRjaCAodkxhYmVsLmxhYmVscG9zLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgXCJsXCI6IGRlbHRhID0gLXZMYWJlbC53aWR0aCAvIDI7IGJyZWFrO1xuICAgICAgY2FzZSBcInJcIjogZGVsdGEgPSB2TGFiZWwud2lkdGggLyAyOyBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBzdW0gKz0gcmV2ZXJzZVNlcCA/IGRlbHRhIDogLWRlbHRhO1xuICAgIH1cbiAgICBkZWx0YSA9IDA7XG5cbiAgICBzdW0gKz0gKHZMYWJlbC5kdW1teSA/IGVkZ2VTZXAgOiBub2RlU2VwKSAvIDI7XG4gICAgc3VtICs9ICh3TGFiZWwuZHVtbXkgPyBlZGdlU2VwIDogbm9kZVNlcCkgLyAyO1xuXG4gICAgc3VtICs9IHdMYWJlbC53aWR0aCAvIDI7XG4gICAgaWYgKF8uaGFzKHdMYWJlbCwgXCJsYWJlbHBvc1wiKSkge1xuICAgICAgc3dpdGNoICh3TGFiZWwubGFiZWxwb3MudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSBcImxcIjogZGVsdGEgPSB3TGFiZWwud2lkdGggLyAyOyBicmVhaztcbiAgICAgIGNhc2UgXCJyXCI6IGRlbHRhID0gLXdMYWJlbC53aWR0aCAvIDI7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIHN1bSArPSByZXZlcnNlU2VwID8gZGVsdGEgOiAtZGVsdGE7XG4gICAgfVxuICAgIGRlbHRhID0gMDtcblxuICAgIHJldHVybiBzdW07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdpZHRoKGcsIHYpIHtcbiAgcmV0dXJuIGcubm9kZSh2KS53aWR0aDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xudmFyIHBvc2l0aW9uWCA9IHJlcXVpcmUoXCIuL2JrXCIpLnBvc2l0aW9uWDtcblxubW9kdWxlLmV4cG9ydHMgPSBwb3NpdGlvbjtcblxuZnVuY3Rpb24gcG9zaXRpb24oZykge1xuICBnID0gdXRpbC5hc05vbkNvbXBvdW5kR3JhcGgoZyk7XG5cbiAgcG9zaXRpb25ZKGcpO1xuICBfLmZvckVhY2gocG9zaXRpb25YKGcpLCBmdW5jdGlvbih4LCB2KSB7XG4gICAgZy5ub2RlKHYpLnggPSB4O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25ZKGcpIHtcbiAgdmFyIGxheWVyaW5nID0gdXRpbC5idWlsZExheWVyTWF0cml4KGcpO1xuICB2YXIgcmFua1NlcCA9IGcuZ3JhcGgoKS5yYW5rc2VwO1xuICB2YXIgcHJldlkgPSAwO1xuICBfLmZvckVhY2gobGF5ZXJpbmcsIGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgdmFyIG1heEhlaWdodCA9IF8ubWF4KF8ubWFwKGxheWVyLCBmdW5jdGlvbih2KSB7IHJldHVybiBnLm5vZGUodikuaGVpZ2h0OyB9KSk7XG4gICAgXy5mb3JFYWNoKGxheWVyLCBmdW5jdGlvbih2KSB7XG4gICAgICBnLm5vZGUodikueSA9IHByZXZZICsgbWF4SGVpZ2h0IC8gMjtcbiAgICB9KTtcbiAgICBwcmV2WSArPSBtYXhIZWlnaHQgKyByYW5rU2VwO1xuICB9KTtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuLi9ncmFwaGxpYlwiKS5HcmFwaDtcbnZhciBzbGFjayA9IHJlcXVpcmUoXCIuL3V0aWxcIikuc2xhY2s7XG5cbm1vZHVsZS5leHBvcnRzID0gZmVhc2libGVUcmVlO1xuXG4vKlxuICogQ29uc3RydWN0cyBhIHNwYW5uaW5nIHRyZWUgd2l0aCB0aWdodCBlZGdlcyBhbmQgYWRqdXN0ZWQgdGhlIGlucHV0IG5vZGUnc1xuICogcmFua3MgdG8gYWNoaWV2ZSB0aGlzLiBBIHRpZ2h0IGVkZ2UgaXMgb25lIHRoYXQgaXMgaGFzIGEgbGVuZ3RoIHRoYXQgbWF0Y2hlc1xuICogaXRzIFwibWlubGVuXCIgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBiYXNpYyBzdHJ1Y3R1cmUgZm9yIHRoaXMgZnVuY3Rpb24gaXMgZGVyaXZlZCBmcm9tIEdhbnNuZXIsIGV0IGFsLiwgXCJBXG4gKiBUZWNobmlxdWUgZm9yIERyYXdpbmcgRGlyZWN0ZWQgR3JhcGhzLlwiXG4gKlxuICogUHJlLWNvbmRpdGlvbnM6XG4gKlxuICogICAgMS4gR3JhcGggbXVzdCBiZSBhIERBRy5cbiAqICAgIDIuIEdyYXBoIG11c3QgYmUgY29ubmVjdGVkLlxuICogICAgMy4gR3JhcGggbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBub2RlLlxuICogICAgNS4gR3JhcGggbm9kZXMgbXVzdCBoYXZlIGJlZW4gcHJldmlvdXNseSBhc3NpZ25lZCBhIFwicmFua1wiIHByb3BlcnR5IHRoYXRcbiAqICAgICAgIHJlc3BlY3RzIHRoZSBcIm1pbmxlblwiIHByb3BlcnR5IG9mIGluY2lkZW50IGVkZ2VzLlxuICogICAgNi4gR3JhcGggZWRnZXMgbXVzdCBoYXZlIGEgXCJtaW5sZW5cIiBwcm9wZXJ0eS5cbiAqXG4gKiBQb3N0LWNvbmRpdGlvbnM6XG4gKlxuICogICAgLSBHcmFwaCBub2RlcyB3aWxsIGhhdmUgdGhlaXIgcmFuayBhZGp1c3RlZCB0byBlbnN1cmUgdGhhdCBhbGwgZWRnZXMgYXJlXG4gKiAgICAgIHRpZ2h0LlxuICpcbiAqIFJldHVybnMgYSB0cmVlICh1bmRpcmVjdGVkIGdyYXBoKSB0aGF0IGlzIGNvbnN0cnVjdGVkIHVzaW5nIG9ubHkgXCJ0aWdodFwiXG4gKiBlZGdlcy5cbiAqL1xuZnVuY3Rpb24gZmVhc2libGVUcmVlKGcpIHtcbiAgdmFyIHQgPSBuZXcgR3JhcGgoeyBkaXJlY3RlZDogZmFsc2UgfSk7XG5cbiAgLy8gQ2hvb3NlIGFyYml0cmFyeSBub2RlIGZyb20gd2hpY2ggdG8gc3RhcnQgb3VyIHRyZWVcbiAgdmFyIHN0YXJ0ID0gZy5ub2RlcygpWzBdO1xuICB2YXIgc2l6ZSA9IGcubm9kZUNvdW50KCk7XG4gIHQuc2V0Tm9kZShzdGFydCwge30pO1xuXG4gIHZhciBlZGdlLCBkZWx0YTtcbiAgd2hpbGUgKHRpZ2h0VHJlZSh0LCBnKSA8IHNpemUpIHtcbiAgICBlZGdlID0gZmluZE1pblNsYWNrRWRnZSh0LCBnKTtcbiAgICBkZWx0YSA9IHQuaGFzTm9kZShlZGdlLnYpID8gc2xhY2soZywgZWRnZSkgOiAtc2xhY2soZywgZWRnZSk7XG4gICAgc2hpZnRSYW5rcyh0LCBnLCBkZWx0YSk7XG4gIH1cblxuICByZXR1cm4gdDtcbn1cblxuLypcbiAqIEZpbmRzIGEgbWF4aW1hbCB0cmVlIG9mIHRpZ2h0IGVkZ2VzIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlXG4gKiB0cmVlLlxuICovXG5mdW5jdGlvbiB0aWdodFRyZWUodCwgZykge1xuICBmdW5jdGlvbiBkZnModikge1xuICAgIF8uZm9yRWFjaChnLm5vZGVFZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGVkZ2VWID0gZS52LFxuICAgICAgICB3ID0gKHYgPT09IGVkZ2VWKSA/IGUudyA6IGVkZ2VWO1xuICAgICAgaWYgKCF0Lmhhc05vZGUodykgJiYgIXNsYWNrKGcsIGUpKSB7XG4gICAgICAgIHQuc2V0Tm9kZSh3LCB7fSk7XG4gICAgICAgIHQuc2V0RWRnZSh2LCB3LCB7fSk7XG4gICAgICAgIGRmcyh3KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF8uZm9yRWFjaCh0Lm5vZGVzKCksIGRmcyk7XG4gIHJldHVybiB0Lm5vZGVDb3VudCgpO1xufVxuXG4vKlxuICogRmluZHMgdGhlIGVkZ2Ugd2l0aCB0aGUgc21hbGxlc3Qgc2xhY2sgdGhhdCBpcyBpbmNpZGVudCBvbiB0cmVlIGFuZCByZXR1cm5zXG4gKiBpdC5cbiAqL1xuZnVuY3Rpb24gZmluZE1pblNsYWNrRWRnZSh0LCBnKSB7XG4gIHJldHVybiBfLm1pbkJ5KGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIGlmICh0Lmhhc05vZGUoZS52KSAhPT0gdC5oYXNOb2RlKGUudykpIHtcbiAgICAgIHJldHVybiBzbGFjayhnLCBlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzaGlmdFJhbmtzKHQsIGcsIGRlbHRhKSB7XG4gIF8uZm9yRWFjaCh0Lm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICBnLm5vZGUodikucmFuayArPSBkZWx0YTtcbiAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHJhbmtVdGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBsb25nZXN0UGF0aCA9IHJhbmtVdGlsLmxvbmdlc3RQYXRoO1xudmFyIGZlYXNpYmxlVHJlZSA9IHJlcXVpcmUoXCIuL2ZlYXNpYmxlLXRyZWVcIik7XG52YXIgbmV0d29ya1NpbXBsZXggPSByZXF1aXJlKFwiLi9uZXR3b3JrLXNpbXBsZXhcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuaztcblxuLypcbiAqIEFzc2lnbnMgYSByYW5rIHRvIGVhY2ggbm9kZSBpbiB0aGUgaW5wdXQgZ3JhcGggdGhhdCByZXNwZWN0cyB0aGUgXCJtaW5sZW5cIlxuICogY29uc3RyYWludCBzcGVjaWZpZWQgb24gZWRnZXMgYmV0d2VlbiBub2Rlcy5cbiAqXG4gKiBUaGlzIGJhc2ljIHN0cnVjdHVyZSBpcyBkZXJpdmVkIGZyb20gR2Fuc25lciwgZXQgYWwuLCBcIkEgVGVjaG5pcXVlIGZvclxuICogRHJhd2luZyBEaXJlY3RlZCBHcmFwaHMuXCJcbiAqXG4gKiBQcmUtY29uZGl0aW9uczpcbiAqXG4gKiAgICAxLiBHcmFwaCBtdXN0IGJlIGEgY29ubmVjdGVkIERBR1xuICogICAgMi4gR3JhcGggbm9kZXMgbXVzdCBiZSBvYmplY3RzXG4gKiAgICAzLiBHcmFwaCBlZGdlcyBtdXN0IGhhdmUgXCJ3ZWlnaHRcIiBhbmQgXCJtaW5sZW5cIiBhdHRyaWJ1dGVzXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEdyYXBoIG5vZGVzIHdpbGwgaGF2ZSBhIFwicmFua1wiIGF0dHJpYnV0ZSBiYXNlZCBvbiB0aGUgcmVzdWx0cyBvZiB0aGVcbiAqICAgICAgIGFsZ29yaXRobS4gUmFua3MgY2FuIHN0YXJ0IGF0IGFueSBpbmRleCAoaW5jbHVkaW5nIG5lZ2F0aXZlKSwgd2UnbGxcbiAqICAgICAgIGZpeCB0aGVtIHVwIGxhdGVyLlxuICovXG5mdW5jdGlvbiByYW5rKGcpIHtcbiAgc3dpdGNoKGcuZ3JhcGgoKS5yYW5rZXIpIHtcbiAgY2FzZSBcIm5ldHdvcmstc2ltcGxleFwiOiBuZXR3b3JrU2ltcGxleFJhbmtlcihnKTsgYnJlYWs7XG4gIGNhc2UgXCJ0aWdodC10cmVlXCI6IHRpZ2h0VHJlZVJhbmtlcihnKTsgYnJlYWs7XG4gIGNhc2UgXCJsb25nZXN0LXBhdGhcIjogbG9uZ2VzdFBhdGhSYW5rZXIoZyk7IGJyZWFrO1xuICBkZWZhdWx0OiBuZXR3b3JrU2ltcGxleFJhbmtlcihnKTtcbiAgfVxufVxuXG4vLyBBIGZhc3QgYW5kIHNpbXBsZSByYW5rZXIsIGJ1dCByZXN1bHRzIGFyZSBmYXIgZnJvbSBvcHRpbWFsLlxudmFyIGxvbmdlc3RQYXRoUmFua2VyID0gbG9uZ2VzdFBhdGg7XG5cbmZ1bmN0aW9uIHRpZ2h0VHJlZVJhbmtlcihnKSB7XG4gIGxvbmdlc3RQYXRoKGcpO1xuICBmZWFzaWJsZVRyZWUoZyk7XG59XG5cbmZ1bmN0aW9uIG5ldHdvcmtTaW1wbGV4UmFua2VyKGcpIHtcbiAgbmV0d29ya1NpbXBsZXgoZyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xudmFyIGZlYXNpYmxlVHJlZSA9IHJlcXVpcmUoXCIuL2ZlYXNpYmxlLXRyZWVcIik7XG52YXIgc2xhY2sgPSByZXF1aXJlKFwiLi91dGlsXCIpLnNsYWNrO1xudmFyIGluaXRSYW5rID0gcmVxdWlyZShcIi4vdXRpbFwiKS5sb25nZXN0UGF0aDtcbnZhciBwcmVvcmRlciA9IHJlcXVpcmUoXCIuLi9ncmFwaGxpYlwiKS5hbGcucHJlb3JkZXI7XG52YXIgcG9zdG9yZGVyID0gcmVxdWlyZShcIi4uL2dyYXBobGliXCIpLmFsZy5wb3N0b3JkZXI7XG52YXIgc2ltcGxpZnkgPSByZXF1aXJlKFwiLi4vdXRpbFwiKS5zaW1wbGlmeTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXR3b3JrU2ltcGxleDtcblxuLy8gRXhwb3NlIHNvbWUgaW50ZXJuYWxzIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5uZXR3b3JrU2ltcGxleC5pbml0TG93TGltVmFsdWVzID0gaW5pdExvd0xpbVZhbHVlcztcbm5ldHdvcmtTaW1wbGV4LmluaXRDdXRWYWx1ZXMgPSBpbml0Q3V0VmFsdWVzO1xubmV0d29ya1NpbXBsZXguY2FsY0N1dFZhbHVlID0gY2FsY0N1dFZhbHVlO1xubmV0d29ya1NpbXBsZXgubGVhdmVFZGdlID0gbGVhdmVFZGdlO1xubmV0d29ya1NpbXBsZXguZW50ZXJFZGdlID0gZW50ZXJFZGdlO1xubmV0d29ya1NpbXBsZXguZXhjaGFuZ2VFZGdlcyA9IGV4Y2hhbmdlRWRnZXM7XG5cbi8qXG4gKiBUaGUgbmV0d29yayBzaW1wbGV4IGFsZ29yaXRobSBhc3NpZ25zIHJhbmtzIHRvIGVhY2ggbm9kZSBpbiB0aGUgaW5wdXQgZ3JhcGhcbiAqIGFuZCBpdGVyYXRpdmVseSBpbXByb3ZlcyB0aGUgcmFua2luZyB0byByZWR1Y2UgdGhlIGxlbmd0aCBvZiBlZGdlcy5cbiAqXG4gKiBQcmVjb25kaXRpb25zOlxuICpcbiAqICAgIDEuIFRoZSBpbnB1dCBncmFwaCBtdXN0IGJlIGEgREFHLlxuICogICAgMi4gQWxsIG5vZGVzIGluIHRoZSBncmFwaCBtdXN0IGhhdmUgYW4gb2JqZWN0IHZhbHVlLlxuICogICAgMy4gQWxsIGVkZ2VzIGluIHRoZSBncmFwaCBtdXN0IGhhdmUgXCJtaW5sZW5cIiBhbmQgXCJ3ZWlnaHRcIiBhdHRyaWJ1dGVzLlxuICpcbiAqIFBvc3Rjb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEFsbCBub2RlcyBpbiB0aGUgZ3JhcGggd2lsbCBoYXZlIGFuIGFzc2lnbmVkIFwicmFua1wiIGF0dHJpYnV0ZSB0aGF0IGhhc1xuICogICAgICAgYmVlbiBvcHRpbWl6ZWQgYnkgdGhlIG5ldHdvcmsgc2ltcGxleCBhbGdvcml0aG0uIFJhbmtzIHN0YXJ0IGF0IDAuXG4gKlxuICpcbiAqIEEgcm91Z2ggc2tldGNoIG9mIHRoZSBhbGdvcml0aG0gaXMgYXMgZm9sbG93czpcbiAqXG4gKiAgICAxLiBBc3NpZ24gaW5pdGlhbCByYW5rcyB0byBlYWNoIG5vZGUuIFdlIHVzZSB0aGUgbG9uZ2VzdCBwYXRoIGFsZ29yaXRobSxcbiAqICAgICAgIHdoaWNoIGFzc2lnbnMgcmFua3MgdG8gdGhlIGxvd2VzdCBwb3NpdGlvbiBwb3NzaWJsZS4gSW4gZ2VuZXJhbCB0aGlzXG4gKiAgICAgICBsZWFkcyB0byB2ZXJ5IHdpZGUgYm90dG9tIHJhbmtzIGFuZCB1bm5lY2Vzc2FyaWx5IGxvbmcgZWRnZXMuXG4gKiAgICAyLiBDb25zdHJ1Y3QgYSBmZWFzaWJsZSB0aWdodCB0cmVlLiBBIHRpZ2h0IHRyZWUgaXMgb25lIHN1Y2ggdGhhdCBhbGxcbiAqICAgICAgIGVkZ2VzIGluIHRoZSB0cmVlIGhhdmUgbm8gc2xhY2sgKGRpZmZlcmVuY2UgYmV0d2VlbiBsZW5ndGggb2YgZWRnZVxuICogICAgICAgYW5kIG1pbmxlbiBmb3IgdGhlIGVkZ2UpLiBUaGlzIGJ5IGl0c2VsZiBncmVhdGx5IGltcHJvdmVzIHRoZSBhc3NpZ25lZFxuICogICAgICAgcmFua2luZ3MgYnkgc2hvcnRpbmcgZWRnZXMuXG4gKiAgICAzLiBJdGVyYXRpdmVseSBmaW5kIGVkZ2VzIHRoYXQgaGF2ZSBuZWdhdGl2ZSBjdXQgdmFsdWVzLiBHZW5lcmFsbHkgYVxuICogICAgICAgbmVnYXRpdmUgY3V0IHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSBlZGdlIGNvdWxkIGJlIHJlbW92ZWQgYW5kIGEgbmV3XG4gKiAgICAgICB0cmVlIGVkZ2UgY291bGQgYmUgYWRkZWQgdG8gcHJvZHVjZSBhIG1vcmUgY29tcGFjdCBncmFwaC5cbiAqXG4gKiBNdWNoIG9mIHRoZSBhbGdvcml0aG1zIGhlcmUgYXJlIGRlcml2ZWQgZnJvbSBHYW5zbmVyLCBldCBhbC4sIFwiQSBUZWNobmlxdWVcbiAqIGZvciBEcmF3aW5nIERpcmVjdGVkIEdyYXBocy5cIiBUaGUgc3RydWN0dXJlIG9mIHRoZSBmaWxlIHJvdWdobHkgZm9sbG93cyB0aGVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgb3ZlcmFsbCBhbGdvcml0aG0uXG4gKi9cbmZ1bmN0aW9uIG5ldHdvcmtTaW1wbGV4KGcpIHtcbiAgZyA9IHNpbXBsaWZ5KGcpO1xuICBpbml0UmFuayhnKTtcbiAgdmFyIHQgPSBmZWFzaWJsZVRyZWUoZyk7XG4gIGluaXRMb3dMaW1WYWx1ZXModCk7XG4gIGluaXRDdXRWYWx1ZXModCwgZyk7XG5cbiAgdmFyIGUsIGY7XG4gIHdoaWxlICgoZSA9IGxlYXZlRWRnZSh0KSkpIHtcbiAgICBmID0gZW50ZXJFZGdlKHQsIGcsIGUpO1xuICAgIGV4Y2hhbmdlRWRnZXModCwgZywgZSwgZik7XG4gIH1cbn1cblxuLypcbiAqIEluaXRpYWxpemVzIGN1dCB2YWx1ZXMgZm9yIGFsbCBlZGdlcyBpbiB0aGUgdHJlZS5cbiAqL1xuZnVuY3Rpb24gaW5pdEN1dFZhbHVlcyh0LCBnKSB7XG4gIHZhciB2cyA9IHBvc3RvcmRlcih0LCB0Lm5vZGVzKCkpO1xuICB2cyA9IHZzLnNsaWNlKDAsIHZzLmxlbmd0aCAtIDEpO1xuICBfLmZvckVhY2godnMsIGZ1bmN0aW9uKHYpIHtcbiAgICBhc3NpZ25DdXRWYWx1ZSh0LCBnLCB2KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkN1dFZhbHVlKHQsIGcsIGNoaWxkKSB7XG4gIHZhciBjaGlsZExhYiA9IHQubm9kZShjaGlsZCk7XG4gIHZhciBwYXJlbnQgPSBjaGlsZExhYi5wYXJlbnQ7XG4gIHQuZWRnZShjaGlsZCwgcGFyZW50KS5jdXR2YWx1ZSA9IGNhbGNDdXRWYWx1ZSh0LCBnLCBjaGlsZCk7XG59XG5cbi8qXG4gKiBHaXZlbiB0aGUgdGlnaHQgdHJlZSwgaXRzIGdyYXBoLCBhbmQgYSBjaGlsZCBpbiB0aGUgZ3JhcGggY2FsY3VsYXRlIGFuZFxuICogcmV0dXJuIHRoZSBjdXQgdmFsdWUgZm9yIHRoZSBlZGdlIGJldHdlZW4gdGhlIGNoaWxkIGFuZCBpdHMgcGFyZW50LlxuICovXG5mdW5jdGlvbiBjYWxjQ3V0VmFsdWUodCwgZywgY2hpbGQpIHtcbiAgdmFyIGNoaWxkTGFiID0gdC5ub2RlKGNoaWxkKTtcbiAgdmFyIHBhcmVudCA9IGNoaWxkTGFiLnBhcmVudDtcbiAgLy8gVHJ1ZSBpZiB0aGUgY2hpbGQgaXMgb24gdGhlIHRhaWwgZW5kIG9mIHRoZSBlZGdlIGluIHRoZSBkaXJlY3RlZCBncmFwaFxuICB2YXIgY2hpbGRJc1RhaWwgPSB0cnVlO1xuICAvLyBUaGUgZ3JhcGgncyB2aWV3IG9mIHRoZSB0cmVlIGVkZ2Ugd2UncmUgaW5zcGVjdGluZ1xuICB2YXIgZ3JhcGhFZGdlID0gZy5lZGdlKGNoaWxkLCBwYXJlbnQpO1xuICAvLyBUaGUgYWNjdW11bGF0ZWQgY3V0IHZhbHVlIGZvciB0aGUgZWRnZSBiZXR3ZWVuIHRoaXMgbm9kZSBhbmQgaXRzIHBhcmVudFxuICB2YXIgY3V0VmFsdWUgPSAwO1xuXG4gIGlmICghZ3JhcGhFZGdlKSB7XG4gICAgY2hpbGRJc1RhaWwgPSBmYWxzZTtcbiAgICBncmFwaEVkZ2UgPSBnLmVkZ2UocGFyZW50LCBjaGlsZCk7XG4gIH1cblxuICBjdXRWYWx1ZSA9IGdyYXBoRWRnZS53ZWlnaHQ7XG5cbiAgXy5mb3JFYWNoKGcubm9kZUVkZ2VzKGNoaWxkKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBpc091dEVkZ2UgPSBlLnYgPT09IGNoaWxkLFxuICAgICAgb3RoZXIgPSBpc091dEVkZ2UgPyBlLncgOiBlLnY7XG5cbiAgICBpZiAob3RoZXIgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHBvaW50c1RvSGVhZCA9IGlzT3V0RWRnZSA9PT0gY2hpbGRJc1RhaWwsXG4gICAgICAgIG90aGVyV2VpZ2h0ID0gZy5lZGdlKGUpLndlaWdodDtcblxuICAgICAgY3V0VmFsdWUgKz0gcG9pbnRzVG9IZWFkID8gb3RoZXJXZWlnaHQgOiAtb3RoZXJXZWlnaHQ7XG4gICAgICBpZiAoaXNUcmVlRWRnZSh0LCBjaGlsZCwgb3RoZXIpKSB7XG4gICAgICAgIHZhciBvdGhlckN1dFZhbHVlID0gdC5lZGdlKGNoaWxkLCBvdGhlcikuY3V0dmFsdWU7XG4gICAgICAgIGN1dFZhbHVlICs9IHBvaW50c1RvSGVhZCA/IC1vdGhlckN1dFZhbHVlIDogb3RoZXJDdXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gaW5pdExvd0xpbVZhbHVlcyh0cmVlLCByb290KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHJvb3QgPSB0cmVlLm5vZGVzKClbMF07XG4gIH1cbiAgZGZzQXNzaWduTG93TGltKHRyZWUsIHt9LCAxLCByb290KTtcbn1cblxuZnVuY3Rpb24gZGZzQXNzaWduTG93TGltKHRyZWUsIHZpc2l0ZWQsIG5leHRMaW0sIHYsIHBhcmVudCkge1xuICB2YXIgbG93ID0gbmV4dExpbTtcbiAgdmFyIGxhYmVsID0gdHJlZS5ub2RlKHYpO1xuXG4gIHZpc2l0ZWRbdl0gPSB0cnVlO1xuICBfLmZvckVhY2godHJlZS5uZWlnaGJvcnModiksIGZ1bmN0aW9uKHcpIHtcbiAgICBpZiAoIV8uaGFzKHZpc2l0ZWQsIHcpKSB7XG4gICAgICBuZXh0TGltID0gZGZzQXNzaWduTG93TGltKHRyZWUsIHZpc2l0ZWQsIG5leHRMaW0sIHcsIHYpO1xuICAgIH1cbiAgfSk7XG5cbiAgbGFiZWwubG93ID0gbG93O1xuICBsYWJlbC5saW0gPSBuZXh0TGltKys7XG4gIGlmIChwYXJlbnQpIHtcbiAgICBsYWJlbC5wYXJlbnQgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETyBzaG91bGQgYmUgYWJsZSB0byByZW1vdmUgdGhpcyB3aGVuIHdlIGluY3JlbWVudGFsbHkgdXBkYXRlIGxvdyBsaW1cbiAgICBkZWxldGUgbGFiZWwucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIG5leHRMaW07XG59XG5cbmZ1bmN0aW9uIGxlYXZlRWRnZSh0cmVlKSB7XG4gIHJldHVybiBfLmZpbmQodHJlZS5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIHRyZWUuZWRnZShlKS5jdXR2YWx1ZSA8IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlbnRlckVkZ2UodCwgZywgZWRnZSkge1xuICB2YXIgdiA9IGVkZ2UudjtcbiAgdmFyIHcgPSBlZGdlLnc7XG5cbiAgLy8gRm9yIHRoZSByZXN0IG9mIHRoaXMgZnVuY3Rpb24gd2UgYXNzdW1lIHRoYXQgdiBpcyB0aGUgdGFpbCBhbmQgdyBpcyB0aGVcbiAgLy8gaGVhZCwgc28gaWYgd2UgZG9uJ3QgaGF2ZSB0aGlzIGVkZ2UgaW4gdGhlIGdyYXBoIHdlIHNob3VsZCBmbGlwIGl0IHRvXG4gIC8vIG1hdGNoIHRoZSBjb3JyZWN0IG9yaWVudGF0aW9uLlxuICBpZiAoIWcuaGFzRWRnZSh2LCB3KSkge1xuICAgIHYgPSBlZGdlLnc7XG4gICAgdyA9IGVkZ2UudjtcbiAgfVxuXG4gIHZhciB2TGFiZWwgPSB0Lm5vZGUodik7XG4gIHZhciB3TGFiZWwgPSB0Lm5vZGUodyk7XG4gIHZhciB0YWlsTGFiZWwgPSB2TGFiZWw7XG4gIHZhciBmbGlwID0gZmFsc2U7XG5cbiAgLy8gSWYgdGhlIHJvb3QgaXMgaW4gdGhlIHRhaWwgb2YgdGhlIGVkZ2UgdGhlbiB3ZSBuZWVkIHRvIGZsaXAgdGhlIGxvZ2ljIHRoYXRcbiAgLy8gY2hlY2tzIGZvciB0aGUgaGVhZCBhbmQgdGFpbCBub2RlcyBpbiB0aGUgY2FuZGlkYXRlcyBmdW5jdGlvbiBiZWxvdy5cbiAgaWYgKHZMYWJlbC5saW0gPiB3TGFiZWwubGltKSB7XG4gICAgdGFpbExhYmVsID0gd0xhYmVsO1xuICAgIGZsaXAgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGNhbmRpZGF0ZXMgPSBfLmZpbHRlcihnLmVkZ2VzKCksIGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICByZXR1cm4gZmxpcCA9PT0gaXNEZXNjZW5kYW50KHQsIHQubm9kZShlZGdlLnYpLCB0YWlsTGFiZWwpICYmXG4gICAgICAgICAgIGZsaXAgIT09IGlzRGVzY2VuZGFudCh0LCB0Lm5vZGUoZWRnZS53KSwgdGFpbExhYmVsKTtcbiAgfSk7XG5cbiAgcmV0dXJuIF8ubWluQnkoY2FuZGlkYXRlcywgZnVuY3Rpb24oZWRnZSkgeyByZXR1cm4gc2xhY2soZywgZWRnZSk7IH0pO1xufVxuXG5mdW5jdGlvbiBleGNoYW5nZUVkZ2VzKHQsIGcsIGUsIGYpIHtcbiAgdmFyIHYgPSBlLnY7XG4gIHZhciB3ID0gZS53O1xuICB0LnJlbW92ZUVkZ2Uodiwgdyk7XG4gIHQuc2V0RWRnZShmLnYsIGYudywge30pO1xuICBpbml0TG93TGltVmFsdWVzKHQpO1xuICBpbml0Q3V0VmFsdWVzKHQsIGcpO1xuICB1cGRhdGVSYW5rcyh0LCBnKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUmFua3ModCwgZykge1xuICB2YXIgcm9vdCA9IF8uZmluZCh0Lm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgcmV0dXJuICFnLm5vZGUodikucGFyZW50OyB9KTtcbiAgdmFyIHZzID0gcHJlb3JkZXIodCwgcm9vdCk7XG4gIHZzID0gdnMuc2xpY2UoMSk7XG4gIF8uZm9yRWFjaCh2cywgZnVuY3Rpb24odikge1xuICAgIHZhciBwYXJlbnQgPSB0Lm5vZGUodikucGFyZW50LFxuICAgICAgZWRnZSA9IGcuZWRnZSh2LCBwYXJlbnQpLFxuICAgICAgZmxpcHBlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICBlZGdlID0gZy5lZGdlKHBhcmVudCwgdik7XG4gICAgICBmbGlwcGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnLm5vZGUodikucmFuayA9IGcubm9kZShwYXJlbnQpLnJhbmsgKyAoZmxpcHBlZCA/IGVkZ2UubWlubGVuIDogLWVkZ2UubWlubGVuKTtcbiAgfSk7XG59XG5cbi8qXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVkZ2UgaXMgaW4gdGhlIHRyZWUuXG4gKi9cbmZ1bmN0aW9uIGlzVHJlZUVkZ2UodHJlZSwgdSwgdikge1xuICByZXR1cm4gdHJlZS5oYXNFZGdlKHUsIHYpO1xufVxuXG4vKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgbm9kZSBpcyBkZXNjZW5kYW50IG9mIHRoZSByb290IG5vZGUgcGVyIHRoZVxuICogYXNzaWduZWQgbG93IGFuZCBsaW0gYXR0cmlidXRlcyBpbiB0aGUgdHJlZS5cbiAqL1xuZnVuY3Rpb24gaXNEZXNjZW5kYW50KHRyZWUsIHZMYWJlbCwgcm9vdExhYmVsKSB7XG4gIHJldHVybiByb290TGFiZWwubG93IDw9IHZMYWJlbC5saW0gJiYgdkxhYmVsLmxpbSA8PSByb290TGFiZWwubGltO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvbmdlc3RQYXRoOiBsb25nZXN0UGF0aCxcbiAgc2xhY2s6IHNsYWNrXG59O1xuXG4vKlxuICogSW5pdGlhbGl6ZXMgcmFua3MgZm9yIHRoZSBpbnB1dCBncmFwaCB1c2luZyB0aGUgbG9uZ2VzdCBwYXRoIGFsZ29yaXRobS4gVGhpc1xuICogYWxnb3JpdGhtIHNjYWxlcyB3ZWxsIGFuZCBpcyBmYXN0IGluIHByYWN0aWNlLCBpdCB5aWVsZHMgcmF0aGVyIHBvb3JcbiAqIHNvbHV0aW9ucy4gTm9kZXMgYXJlIHB1c2hlZCB0byB0aGUgbG93ZXN0IGxheWVyIHBvc3NpYmxlLCBsZWF2aW5nIHRoZSBib3R0b21cbiAqIHJhbmtzIHdpZGUgYW5kIGxlYXZpbmcgZWRnZXMgbG9uZ2VyIHRoYW4gbmVjZXNzYXJ5LiBIb3dldmVyLCBkdWUgdG8gaXRzXG4gKiBzcGVlZCwgdGhpcyBhbGdvcml0aG0gaXMgZ29vZCBmb3IgZ2V0dGluZyBhbiBpbml0aWFsIHJhbmtpbmcgdGhhdCBjYW4gYmUgZmVkXG4gKiBpbnRvIG90aGVyIGFsZ29yaXRobXMuXG4gKlxuICogVGhpcyBhbGdvcml0aG0gZG9lcyBub3Qgbm9ybWFsaXplIGxheWVycyBiZWNhdXNlIGl0IHdpbGwgYmUgdXNlZCBieSBvdGhlclxuICogYWxnb3JpdGhtcyBpbiBtb3N0IGNhc2VzLiBJZiB1c2luZyB0aGlzIGFsZ29yaXRobSBkaXJlY3RseSwgYmUgc3VyZSB0b1xuICogcnVuIG5vcm1hbGl6ZSBhdCB0aGUgZW5kLlxuICpcbiAqIFByZS1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIElucHV0IGdyYXBoIGlzIGEgREFHLlxuICogICAgMi4gSW5wdXQgZ3JhcGggbm9kZSBsYWJlbHMgY2FuIGJlIGFzc2lnbmVkIHByb3BlcnRpZXMuXG4gKlxuICogUG9zdC1jb25kaXRpb25zOlxuICpcbiAqICAgIDEuIEVhY2ggbm9kZSB3aWxsIGJlIGFzc2lnbiBhbiAodW5ub3JtYWxpemVkKSBcInJhbmtcIiBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gbG9uZ2VzdFBhdGgoZykge1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuXG4gIGZ1bmN0aW9uIGRmcyh2KSB7XG4gICAgdmFyIGxhYmVsID0gZy5ub2RlKHYpO1xuICAgIGlmIChfLmhhcyh2aXNpdGVkLCB2KSkge1xuICAgICAgcmV0dXJuIGxhYmVsLnJhbms7XG4gICAgfVxuICAgIHZpc2l0ZWRbdl0gPSB0cnVlO1xuXG4gICAgdmFyIHJhbmsgPSBfLm1pbihfLm1hcChnLm91dEVkZ2VzKHYpLCBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gZGZzKGUudykgLSBnLmVkZ2UoZSkubWlubGVuO1xuICAgIH0pKTtcblxuICAgIGlmIChyYW5rID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgfHwgLy8gcmV0dXJuIHZhbHVlIG9mIF8ubWFwKFtdKSBmb3IgTG9kYXNoIDNcbiAgICAgICAgcmFuayA9PT0gdW5kZWZpbmVkIHx8IC8vIHJldHVybiB2YWx1ZSBvZiBfLm1hcChbXSkgZm9yIExvZGFzaCA0XG4gICAgICAgIHJhbmsgPT09IG51bGwpIHsgLy8gcmV0dXJuIHZhbHVlIG9mIF8ubWFwKFtudWxsXSlcbiAgICAgIHJhbmsgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiAobGFiZWwucmFuayA9IHJhbmspO1xuICB9XG5cbiAgXy5mb3JFYWNoKGcuc291cmNlcygpLCBkZnMpO1xufVxuXG4vKlxuICogUmV0dXJucyB0aGUgYW1vdW50IG9mIHNsYWNrIGZvciB0aGUgZ2l2ZW4gZWRnZS4gVGhlIHNsYWNrIGlzIGRlZmluZWQgYXMgdGhlXG4gKiBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxlbmd0aCBvZiB0aGUgZWRnZSBhbmQgaXRzIG1pbmltdW0gbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBzbGFjayhnLCBlKSB7XG4gIHJldHVybiBnLm5vZGUoZS53KS5yYW5rIC0gZy5ub2RlKGUudikucmFuayAtIGcuZWRnZShlKS5taW5sZW47XG59XG4iLCIvKiBlc2xpbnQgXCJuby1jb25zb2xlXCI6IG9mZiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG52YXIgR3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaGxpYlwiKS5HcmFwaDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZER1bW15Tm9kZTogYWRkRHVtbXlOb2RlLFxuICBzaW1wbGlmeTogc2ltcGxpZnksXG4gIGFzTm9uQ29tcG91bmRHcmFwaDogYXNOb25Db21wb3VuZEdyYXBoLFxuICBzdWNjZXNzb3JXZWlnaHRzOiBzdWNjZXNzb3JXZWlnaHRzLFxuICBwcmVkZWNlc3NvcldlaWdodHM6IHByZWRlY2Vzc29yV2VpZ2h0cyxcbiAgaW50ZXJzZWN0UmVjdDogaW50ZXJzZWN0UmVjdCxcbiAgYnVpbGRMYXllck1hdHJpeDogYnVpbGRMYXllck1hdHJpeCxcbiAgbm9ybWFsaXplUmFua3M6IG5vcm1hbGl6ZVJhbmtzLFxuICByZW1vdmVFbXB0eVJhbmtzOiByZW1vdmVFbXB0eVJhbmtzLFxuICBhZGRCb3JkZXJOb2RlOiBhZGRCb3JkZXJOb2RlLFxuICBtYXhSYW5rOiBtYXhSYW5rLFxuICBwYXJ0aXRpb246IHBhcnRpdGlvbixcbiAgdGltZTogdGltZSxcbiAgbm90aW1lOiBub3RpbWVcbn07XG5cbi8qXG4gKiBBZGRzIGEgZHVtbXkgbm9kZSB0byB0aGUgZ3JhcGggYW5kIHJldHVybiB2LlxuICovXG5mdW5jdGlvbiBhZGREdW1teU5vZGUoZywgdHlwZSwgYXR0cnMsIG5hbWUpIHtcbiAgdmFyIHY7XG4gIGRvIHtcbiAgICB2ID0gXy51bmlxdWVJZChuYW1lKTtcbiAgfSB3aGlsZSAoZy5oYXNOb2RlKHYpKTtcblxuICBhdHRycy5kdW1teSA9IHR5cGU7XG4gIGcuc2V0Tm9kZSh2LCBhdHRycyk7XG4gIHJldHVybiB2O1xufVxuXG4vKlxuICogUmV0dXJucyBhIG5ldyBncmFwaCB3aXRoIG9ubHkgc2ltcGxlIGVkZ2VzLiBIYW5kbGVzIGFnZ3JlZ2F0aW9uIG9mIGRhdGFcbiAqIGFzc29jaWF0ZWQgd2l0aCBtdWx0aS1lZGdlcy5cbiAqL1xuZnVuY3Rpb24gc2ltcGxpZnkoZykge1xuICB2YXIgc2ltcGxpZmllZCA9IG5ldyBHcmFwaCgpLnNldEdyYXBoKGcuZ3JhcGgoKSk7XG4gIF8uZm9yRWFjaChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHsgc2ltcGxpZmllZC5zZXROb2RlKHYsIGcubm9kZSh2KSk7IH0pO1xuICBfLmZvckVhY2goZy5lZGdlcygpLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHNpbXBsZUxhYmVsID0gc2ltcGxpZmllZC5lZGdlKGUudiwgZS53KSB8fCB7IHdlaWdodDogMCwgbWlubGVuOiAxIH07XG4gICAgdmFyIGxhYmVsID0gZy5lZGdlKGUpO1xuICAgIHNpbXBsaWZpZWQuc2V0RWRnZShlLnYsIGUudywge1xuICAgICAgd2VpZ2h0OiBzaW1wbGVMYWJlbC53ZWlnaHQgKyBsYWJlbC53ZWlnaHQsXG4gICAgICBtaW5sZW46IE1hdGgubWF4KHNpbXBsZUxhYmVsLm1pbmxlbiwgbGFiZWwubWlubGVuKVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHNpbXBsaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIGFzTm9uQ29tcG91bmRHcmFwaChnKSB7XG4gIHZhciBzaW1wbGlmaWVkID0gbmV3IEdyYXBoKHsgbXVsdGlncmFwaDogZy5pc011bHRpZ3JhcGgoKSB9KS5zZXRHcmFwaChnLmdyYXBoKCkpO1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFnLmNoaWxkcmVuKHYpLmxlbmd0aCkge1xuICAgICAgc2ltcGxpZmllZC5zZXROb2RlKHYsIGcubm9kZSh2KSk7XG4gICAgfVxuICB9KTtcbiAgXy5mb3JFYWNoKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHNpbXBsaWZpZWQuc2V0RWRnZShlLCBnLmVkZ2UoZSkpO1xuICB9KTtcbiAgcmV0dXJuIHNpbXBsaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHN1Y2Nlc3NvcldlaWdodHMoZykge1xuICB2YXIgd2VpZ2h0TWFwID0gXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHN1Y3MgPSB7fTtcbiAgICBfLmZvckVhY2goZy5vdXRFZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgc3Vjc1tlLnddID0gKHN1Y3NbZS53XSB8fCAwKSArIGcuZWRnZShlKS53ZWlnaHQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1Y3M7XG4gIH0pO1xuICByZXR1cm4gXy56aXBPYmplY3QoZy5ub2RlcygpLCB3ZWlnaHRNYXApO1xufVxuXG5mdW5jdGlvbiBwcmVkZWNlc3NvcldlaWdodHMoZykge1xuICB2YXIgd2VpZ2h0TWFwID0gXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHByZWRzID0ge307XG4gICAgXy5mb3JFYWNoKGcuaW5FZGdlcyh2KSwgZnVuY3Rpb24oZSkge1xuICAgICAgcHJlZHNbZS52XSA9IChwcmVkc1tlLnZdIHx8IDApICsgZy5lZGdlKGUpLndlaWdodDtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJlZHM7XG4gIH0pO1xuICByZXR1cm4gXy56aXBPYmplY3QoZy5ub2RlcygpLCB3ZWlnaHRNYXApO1xufVxuXG4vKlxuICogRmluZHMgd2hlcmUgYSBsaW5lIHN0YXJ0aW5nIGF0IHBvaW50ICh7eCwgeX0pIHdvdWxkIGludGVyc2VjdCBhIHJlY3RhbmdsZVxuICogKHt4LCB5LCB3aWR0aCwgaGVpZ2h0fSkgaWYgaXQgd2VyZSBwb2ludGluZyBhdCB0aGUgcmVjdGFuZ2xlJ3MgY2VudGVyLlxuICovXG5mdW5jdGlvbiBpbnRlcnNlY3RSZWN0KHJlY3QsIHBvaW50KSB7XG4gIHZhciB4ID0gcmVjdC54O1xuICB2YXIgeSA9IHJlY3QueTtcblxuICAvLyBSZWN0YW5nbGUgaW50ZXJzZWN0aW9uIGFsZ29yaXRobSBmcm9tOlxuICAvLyBodHRwOi8vbWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTA4MTEzL2ZpbmQtZWRnZS1iZXR3ZWVuLXR3by1ib3hlc1xuICB2YXIgZHggPSBwb2ludC54IC0geDtcbiAgdmFyIGR5ID0gcG9pbnQueSAtIHk7XG4gIHZhciB3ID0gcmVjdC53aWR0aCAvIDI7XG4gIHZhciBoID0gcmVjdC5oZWlnaHQgLyAyO1xuXG4gIGlmICghZHggJiYgIWR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IHBvc3NpYmxlIHRvIGZpbmQgaW50ZXJzZWN0aW9uIGluc2lkZSBvZiB0aGUgcmVjdGFuZ2xlXCIpO1xuICB9XG5cbiAgdmFyIHN4LCBzeTtcbiAgaWYgKE1hdGguYWJzKGR5KSAqIHcgPiBNYXRoLmFicyhkeCkgKiBoKSB7XG4gICAgLy8gSW50ZXJzZWN0aW9uIGlzIHRvcCBvciBib3R0b20gb2YgcmVjdC5cbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBoID0gLWg7XG4gICAgfVxuICAgIHN4ID0gaCAqIGR4IC8gZHk7XG4gICAgc3kgPSBoO1xuICB9IGVsc2Uge1xuICAgIC8vIEludGVyc2VjdGlvbiBpcyBsZWZ0IG9yIHJpZ2h0IG9mIHJlY3QuXG4gICAgaWYgKGR4IDwgMCkge1xuICAgICAgdyA9IC13O1xuICAgIH1cbiAgICBzeCA9IHc7XG4gICAgc3kgPSB3ICogZHkgLyBkeDtcbiAgfVxuXG4gIHJldHVybiB7IHg6IHggKyBzeCwgeTogeSArIHN5IH07XG59XG5cbi8qXG4gKiBHaXZlbiBhIERBRyB3aXRoIGVhY2ggbm9kZSBhc3NpZ25lZCBcInJhbmtcIiBhbmQgXCJvcmRlclwiIHByb3BlcnRpZXMsIHRoaXNcbiAqIGZ1bmN0aW9uIHdpbGwgcHJvZHVjZSBhIG1hdHJpeCB3aXRoIHRoZSBpZHMgb2YgZWFjaCBub2RlLlxuICovXG5mdW5jdGlvbiBidWlsZExheWVyTWF0cml4KGcpIHtcbiAgdmFyIGxheWVyaW5nID0gXy5tYXAoXy5yYW5nZShtYXhSYW5rKGcpICsgMSksIGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0pO1xuICBfLmZvckVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIG5vZGUgPSBnLm5vZGUodik7XG4gICAgdmFyIHJhbmsgPSBub2RlLnJhbms7XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHJhbmspKSB7XG4gICAgICBsYXllcmluZ1tyYW5rXVtub2RlLm9yZGVyXSA9IHY7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxheWVyaW5nO1xufVxuXG4vKlxuICogQWRqdXN0cyB0aGUgcmFua3MgZm9yIGFsbCBub2RlcyBpbiB0aGUgZ3JhcGggc3VjaCB0aGF0IGFsbCBub2RlcyB2IGhhdmVcbiAqIHJhbmsodikgPj0gMCBhbmQgYXQgbGVhc3Qgb25lIG5vZGUgdyBoYXMgcmFuayh3KSA9IDAuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJhbmtzKGcpIHtcbiAgdmFyIG1pbiA9IF8ubWluKF8ubWFwKGcubm9kZXMoKSwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5ub2RlKHYpLnJhbms7IH0pKTtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlID0gZy5ub2RlKHYpO1xuICAgIGlmIChfLmhhcyhub2RlLCBcInJhbmtcIikpIHtcbiAgICAgIG5vZGUucmFuayAtPSBtaW47XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRW1wdHlSYW5rcyhnKSB7XG4gIC8vIFJhbmtzIG1heSBub3Qgc3RhcnQgYXQgMCwgc28gd2UgbmVlZCB0byBvZmZzZXQgdGhlbVxuICB2YXIgb2Zmc2V0ID0gXy5taW4oXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7IHJldHVybiBnLm5vZGUodikucmFuazsgfSkpO1xuXG4gIHZhciBsYXllcnMgPSBbXTtcbiAgXy5mb3JFYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciByYW5rID0gZy5ub2RlKHYpLnJhbmsgLSBvZmZzZXQ7XG4gICAgaWYgKCFsYXllcnNbcmFua10pIHtcbiAgICAgIGxheWVyc1tyYW5rXSA9IFtdO1xuICAgIH1cbiAgICBsYXllcnNbcmFua10ucHVzaCh2KTtcbiAgfSk7XG5cbiAgdmFyIGRlbHRhID0gMDtcbiAgdmFyIG5vZGVSYW5rRmFjdG9yID0gZy5ncmFwaCgpLm5vZGVSYW5rRmFjdG9yO1xuICBfLmZvckVhY2gobGF5ZXJzLCBmdW5jdGlvbih2cywgaSkge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKHZzKSAmJiBpICUgbm9kZVJhbmtGYWN0b3IgIT09IDApIHtcbiAgICAgIC0tZGVsdGE7XG4gICAgfSBlbHNlIGlmIChkZWx0YSkge1xuICAgICAgXy5mb3JFYWNoKHZzLCBmdW5jdGlvbih2KSB7IGcubm9kZSh2KS5yYW5rICs9IGRlbHRhOyB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRCb3JkZXJOb2RlKGcsIHByZWZpeCwgcmFuaywgb3JkZXIpIHtcbiAgdmFyIG5vZGUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIHtcbiAgICBub2RlLnJhbmsgPSByYW5rO1xuICAgIG5vZGUub3JkZXIgPSBvcmRlcjtcbiAgfVxuICByZXR1cm4gYWRkRHVtbXlOb2RlKGcsIFwiYm9yZGVyXCIsIG5vZGUsIHByZWZpeCk7XG59XG5cbmZ1bmN0aW9uIG1heFJhbmsoZykge1xuICByZXR1cm4gXy5tYXgoXy5tYXAoZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHJhbmsgPSBnLm5vZGUodikucmFuaztcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocmFuaykpIHtcbiAgICAgIHJldHVybiByYW5rO1xuICAgIH1cbiAgfSkpO1xufVxuXG4vKlxuICogUGFydGl0aW9uIGEgY29sbGVjdGlvbiBpbnRvIHR3byBncm91cHM6IGBsaHNgIGFuZCBgcmhzYC4gSWYgdGhlIHN1cHBsaWVkXG4gKiBmdW5jdGlvbiByZXR1cm5zIHRydWUgZm9yIGFuIGVudHJ5IGl0IGdvZXMgaW50byBgbGhzYC4gT3RoZXJ3aXNlIGl0IGdvZXNcbiAqIGludG8gYHJocy5cbiAqL1xuZnVuY3Rpb24gcGFydGl0aW9uKGNvbGxlY3Rpb24sIGZuKSB7XG4gIHZhciByZXN1bHQgPSB7IGxoczogW10sIHJoczogW10gfTtcbiAgXy5mb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGZuKHZhbHVlKSkge1xuICAgICAgcmVzdWx0Lmxocy5wdXNoKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnJocy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKlxuICogUmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmbmAgd2l0aCBhIHRpbWVyLiBUaGUgd3JhcHBlciBsb2dzIHRoZVxuICogdGltZSBpdCB0YWtlcyB0byBleGVjdXRlIHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdGltZShuYW1lLCBmbikge1xuICB2YXIgc3RhcnQgPSBfLm5vdygpO1xuICB0cnkge1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIGNvbnNvbGUubG9nKG5hbWUgKyBcIiB0aW1lOiBcIiArIChfLm5vdygpIC0gc3RhcnQpICsgXCJtc1wiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3RpbWUobmFtZSwgZm4pIHtcbiAgcmV0dXJuIGZuKCk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiMC44LjVcIjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBDaHJpcyBQZXR0aXR0XG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuICogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXRcbiAqIHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG4gKiBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuICogREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcbiAqIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG4gKiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuICogT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxudmFyIGxpYiA9IHJlcXVpcmUoXCIuL2xpYlwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdyYXBoOiBsaWIuR3JhcGgsXG4gIGpzb246IHJlcXVpcmUoXCIuL2xpYi9qc29uXCIpLFxuICBhbGc6IHJlcXVpcmUoXCIuL2xpYi9hbGdcIiksXG4gIHZlcnNpb246IGxpYi52ZXJzaW9uXG59O1xuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBvbmVudHM7XG5cbmZ1bmN0aW9uIGNvbXBvbmVudHMoZykge1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuICB2YXIgY21wdHMgPSBbXTtcbiAgdmFyIGNtcHQ7XG5cbiAgZnVuY3Rpb24gZGZzKHYpIHtcbiAgICBpZiAoXy5oYXModmlzaXRlZCwgdikpIHJldHVybjtcbiAgICB2aXNpdGVkW3ZdID0gdHJ1ZTtcbiAgICBjbXB0LnB1c2godik7XG4gICAgXy5lYWNoKGcuc3VjY2Vzc29ycyh2KSwgZGZzKTtcbiAgICBfLmVhY2goZy5wcmVkZWNlc3NvcnModiksIGRmcyk7XG4gIH1cblxuICBfLmVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgY21wdCA9IFtdO1xuICAgIGRmcyh2KTtcbiAgICBpZiAoY21wdC5sZW5ndGgpIHtcbiAgICAgIGNtcHRzLnB1c2goY21wdCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY21wdHM7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZGZzO1xuXG4vKlxuICogQSBoZWxwZXIgdGhhdCBwcmVmb3JtcyBhIHByZS0gb3IgcG9zdC1vcmRlciB0cmF2ZXJzYWwgb24gdGhlIGlucHV0IGdyYXBoXG4gKiBhbmQgcmV0dXJucyB0aGUgbm9kZXMgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSB2aXNpdGVkLiBJZiB0aGUgZ3JhcGggaXNcbiAqIHVuZGlyZWN0ZWQgdGhlbiB0aGlzIGFsZ29yaXRobSB3aWxsIG5hdmlnYXRlIHVzaW5nIG5laWdoYm9ycy4gSWYgdGhlIGdyYXBoXG4gKiBpcyBkaXJlY3RlZCB0aGVuIHRoaXMgYWxnb3JpdGhtIHdpbGwgbmF2aWdhdGUgdXNpbmcgc3VjY2Vzc29ycy5cbiAqXG4gKiBPcmRlciBtdXN0IGJlIG9uZSBvZiBcInByZVwiIG9yIFwicG9zdFwiLlxuICovXG5mdW5jdGlvbiBkZnMoZywgdnMsIG9yZGVyKSB7XG4gIGlmICghXy5pc0FycmF5KHZzKSkge1xuICAgIHZzID0gW3ZzXTtcbiAgfVxuXG4gIHZhciBuYXZpZ2F0aW9uID0gKGcuaXNEaXJlY3RlZCgpID8gZy5zdWNjZXNzb3JzIDogZy5uZWlnaGJvcnMpLmJpbmQoZyk7XG5cbiAgdmFyIGFjYyA9IFtdO1xuICB2YXIgdmlzaXRlZCA9IHt9O1xuICBfLmVhY2godnMsIGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoIWcuaGFzTm9kZSh2KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR3JhcGggZG9lcyBub3QgaGF2ZSBub2RlOiBcIiArIHYpO1xuICAgIH1cblxuICAgIGRvRGZzKGcsIHYsIG9yZGVyID09PSBcInBvc3RcIiwgdmlzaXRlZCwgbmF2aWdhdGlvbiwgYWNjKTtcbiAgfSk7XG4gIHJldHVybiBhY2M7XG59XG5cbmZ1bmN0aW9uIGRvRGZzKGcsIHYsIHBvc3RvcmRlciwgdmlzaXRlZCwgbmF2aWdhdGlvbiwgYWNjKSB7XG4gIGlmICghXy5oYXModmlzaXRlZCwgdikpIHtcbiAgICB2aXNpdGVkW3ZdID0gdHJ1ZTtcblxuICAgIGlmICghcG9zdG9yZGVyKSB7IGFjYy5wdXNoKHYpOyB9XG4gICAgXy5lYWNoKG5hdmlnYXRpb24odiksIGZ1bmN0aW9uKHcpIHtcbiAgICAgIGRvRGZzKGcsIHcsIHBvc3RvcmRlciwgdmlzaXRlZCwgbmF2aWdhdGlvbiwgYWNjKTtcbiAgICB9KTtcbiAgICBpZiAocG9zdG9yZGVyKSB7IGFjYy5wdXNoKHYpOyB9XG4gIH1cbn1cbiIsInZhciBkaWprc3RyYSA9IHJlcXVpcmUoXCIuL2RpamtzdHJhXCIpO1xudmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpamtzdHJhQWxsO1xuXG5mdW5jdGlvbiBkaWprc3RyYUFsbChnLCB3ZWlnaHRGdW5jLCBlZGdlRnVuYykge1xuICByZXR1cm4gXy50cmFuc2Zvcm0oZy5ub2RlcygpLCBmdW5jdGlvbihhY2MsIHYpIHtcbiAgICBhY2Nbdl0gPSBkaWprc3RyYShnLCB2LCB3ZWlnaHRGdW5jLCBlZGdlRnVuYyk7XG4gIH0sIHt9KTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcbnZhciBQcmlvcml0eVF1ZXVlID0gcmVxdWlyZShcIi4uL2RhdGEvcHJpb3JpdHktcXVldWVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZGlqa3N0cmE7XG5cbnZhciBERUZBVUxUX1dFSUdIVF9GVU5DID0gXy5jb25zdGFudCgxKTtcblxuZnVuY3Rpb24gZGlqa3N0cmEoZywgc291cmNlLCB3ZWlnaHRGbiwgZWRnZUZuKSB7XG4gIHJldHVybiBydW5EaWprc3RyYShnLCBTdHJpbmcoc291cmNlKSxcbiAgICB3ZWlnaHRGbiB8fCBERUZBVUxUX1dFSUdIVF9GVU5DLFxuICAgIGVkZ2VGbiB8fCBmdW5jdGlvbih2KSB7IHJldHVybiBnLm91dEVkZ2VzKHYpOyB9KTtcbn1cblxuZnVuY3Rpb24gcnVuRGlqa3N0cmEoZywgc291cmNlLCB3ZWlnaHRGbiwgZWRnZUZuKSB7XG4gIHZhciByZXN1bHRzID0ge307XG4gIHZhciBwcSA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG4gIHZhciB2LCB2RW50cnk7XG5cbiAgdmFyIHVwZGF0ZU5laWdoYm9ycyA9IGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICB2YXIgdyA9IGVkZ2UudiAhPT0gdiA/IGVkZ2UudiA6IGVkZ2UudztcbiAgICB2YXIgd0VudHJ5ID0gcmVzdWx0c1t3XTtcbiAgICB2YXIgd2VpZ2h0ID0gd2VpZ2h0Rm4oZWRnZSk7XG4gICAgdmFyIGRpc3RhbmNlID0gdkVudHJ5LmRpc3RhbmNlICsgd2VpZ2h0O1xuXG4gICAgaWYgKHdlaWdodCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRpamtzdHJhIGRvZXMgbm90IGFsbG93IG5lZ2F0aXZlIGVkZ2Ugd2VpZ2h0cy4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiQmFkIGVkZ2U6IFwiICsgZWRnZSArIFwiIFdlaWdodDogXCIgKyB3ZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChkaXN0YW5jZSA8IHdFbnRyeS5kaXN0YW5jZSkge1xuICAgICAgd0VudHJ5LmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICB3RW50cnkucHJlZGVjZXNzb3IgPSB2O1xuICAgICAgcHEuZGVjcmVhc2UodywgZGlzdGFuY2UpO1xuICAgIH1cbiAgfTtcblxuICBnLm5vZGVzKCkuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgdmFyIGRpc3RhbmNlID0gdiA9PT0gc291cmNlID8gMCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICByZXN1bHRzW3ZdID0geyBkaXN0YW5jZTogZGlzdGFuY2UgfTtcbiAgICBwcS5hZGQodiwgZGlzdGFuY2UpO1xuICB9KTtcblxuICB3aGlsZSAocHEuc2l6ZSgpID4gMCkge1xuICAgIHYgPSBwcS5yZW1vdmVNaW4oKTtcbiAgICB2RW50cnkgPSByZXN1bHRzW3ZdO1xuICAgIGlmICh2RW50cnkuZGlzdGFuY2UgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZWRnZUZuKHYpLmZvckVhY2godXBkYXRlTmVpZ2hib3JzKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xudmFyIHRhcmphbiA9IHJlcXVpcmUoXCIuL3RhcmphblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kQ3ljbGVzO1xuXG5mdW5jdGlvbiBmaW5kQ3ljbGVzKGcpIHtcbiAgcmV0dXJuIF8uZmlsdGVyKHRhcmphbihnKSwgZnVuY3Rpb24oY21wdCkge1xuICAgIHJldHVybiBjbXB0Lmxlbmd0aCA+IDEgfHwgKGNtcHQubGVuZ3RoID09PSAxICYmIGcuaGFzRWRnZShjbXB0WzBdLCBjbXB0WzBdKSk7XG4gIH0pO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsb3lkV2Fyc2hhbGw7XG5cbnZhciBERUZBVUxUX1dFSUdIVF9GVU5DID0gXy5jb25zdGFudCgxKTtcblxuZnVuY3Rpb24gZmxveWRXYXJzaGFsbChnLCB3ZWlnaHRGbiwgZWRnZUZuKSB7XG4gIHJldHVybiBydW5GbG95ZFdhcnNoYWxsKGcsXG4gICAgd2VpZ2h0Rm4gfHwgREVGQVVMVF9XRUlHSFRfRlVOQyxcbiAgICBlZGdlRm4gfHwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5vdXRFZGdlcyh2KTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkZsb3lkV2Fyc2hhbGwoZywgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICB2YXIgcmVzdWx0cyA9IHt9O1xuICB2YXIgbm9kZXMgPSBnLm5vZGVzKCk7XG5cbiAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgcmVzdWx0c1t2XSA9IHt9O1xuICAgIHJlc3VsdHNbdl1bdl0gPSB7IGRpc3RhbmNlOiAwIH07XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbih3KSB7XG4gICAgICBpZiAodiAhPT0gdykge1xuICAgICAgICByZXN1bHRzW3ZdW3ddID0geyBkaXN0YW5jZTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIH07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZWRnZUZuKHYpLmZvckVhY2goZnVuY3Rpb24oZWRnZSkge1xuICAgICAgdmFyIHcgPSBlZGdlLnYgPT09IHYgPyBlZGdlLncgOiBlZGdlLnY7XG4gICAgICB2YXIgZCA9IHdlaWdodEZuKGVkZ2UpO1xuICAgICAgcmVzdWx0c1t2XVt3XSA9IHsgZGlzdGFuY2U6IGQsIHByZWRlY2Vzc29yOiB2IH07XG4gICAgfSk7XG4gIH0pO1xuXG4gIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgIHZhciByb3dLID0gcmVzdWx0c1trXTtcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHZhciByb3dJID0gcmVzdWx0c1tpXTtcbiAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oaikge1xuICAgICAgICB2YXIgaWsgPSByb3dJW2tdO1xuICAgICAgICB2YXIga2ogPSByb3dLW2pdO1xuICAgICAgICB2YXIgaWogPSByb3dJW2pdO1xuICAgICAgICB2YXIgYWx0RGlzdGFuY2UgPSBpay5kaXN0YW5jZSArIGtqLmRpc3RhbmNlO1xuICAgICAgICBpZiAoYWx0RGlzdGFuY2UgPCBpai5kaXN0YW5jZSkge1xuICAgICAgICAgIGlqLmRpc3RhbmNlID0gYWx0RGlzdGFuY2U7XG4gICAgICAgICAgaWoucHJlZGVjZXNzb3IgPSBrai5wcmVkZWNlc3NvcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBvbmVudHM6IHJlcXVpcmUoXCIuL2NvbXBvbmVudHNcIiksXG4gIGRpamtzdHJhOiByZXF1aXJlKFwiLi9kaWprc3RyYVwiKSxcbiAgZGlqa3N0cmFBbGw6IHJlcXVpcmUoXCIuL2RpamtzdHJhLWFsbFwiKSxcbiAgZmluZEN5Y2xlczogcmVxdWlyZShcIi4vZmluZC1jeWNsZXNcIiksXG4gIGZsb3lkV2Fyc2hhbGw6IHJlcXVpcmUoXCIuL2Zsb3lkLXdhcnNoYWxsXCIpLFxuICBpc0FjeWNsaWM6IHJlcXVpcmUoXCIuL2lzLWFjeWNsaWNcIiksXG4gIHBvc3RvcmRlcjogcmVxdWlyZShcIi4vcG9zdG9yZGVyXCIpLFxuICBwcmVvcmRlcjogcmVxdWlyZShcIi4vcHJlb3JkZXJcIiksXG4gIHByaW06IHJlcXVpcmUoXCIuL3ByaW1cIiksXG4gIHRhcmphbjogcmVxdWlyZShcIi4vdGFyamFuXCIpLFxuICB0b3Bzb3J0OiByZXF1aXJlKFwiLi90b3Bzb3J0XCIpXG59O1xuIiwidmFyIHRvcHNvcnQgPSByZXF1aXJlKFwiLi90b3Bzb3J0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQWN5Y2xpYztcblxuZnVuY3Rpb24gaXNBY3ljbGljKGcpIHtcbiAgdHJ5IHtcbiAgICB0b3Bzb3J0KGcpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiB0b3Bzb3J0LkN5Y2xlRXhjZXB0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJ2YXIgZGZzID0gcmVxdWlyZShcIi4vZGZzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvc3RvcmRlcjtcblxuZnVuY3Rpb24gcG9zdG9yZGVyKGcsIHZzKSB7XG4gIHJldHVybiBkZnMoZywgdnMsIFwicG9zdFwiKTtcbn1cbiIsInZhciBkZnMgPSByZXF1aXJlKFwiLi9kZnNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlb3JkZXI7XG5cbmZ1bmN0aW9uIHByZW9yZGVyKGcsIHZzKSB7XG4gIHJldHVybiBkZnMoZywgdnMsIFwicHJlXCIpO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xudmFyIEdyYXBoID0gcmVxdWlyZShcIi4uL2dyYXBoXCIpO1xudmFyIFByaW9yaXR5UXVldWUgPSByZXF1aXJlKFwiLi4vZGF0YS9wcmlvcml0eS1xdWV1ZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcmltO1xuXG5mdW5jdGlvbiBwcmltKGcsIHdlaWdodEZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBHcmFwaCgpO1xuICB2YXIgcGFyZW50cyA9IHt9O1xuICB2YXIgcHEgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICB2YXIgdjtcblxuICBmdW5jdGlvbiB1cGRhdGVOZWlnaGJvcnMoZWRnZSkge1xuICAgIHZhciB3ID0gZWRnZS52ID09PSB2ID8gZWRnZS53IDogZWRnZS52O1xuICAgIHZhciBwcmkgPSBwcS5wcmlvcml0eSh3KTtcbiAgICBpZiAocHJpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBlZGdlV2VpZ2h0ID0gd2VpZ2h0RnVuYyhlZGdlKTtcbiAgICAgIGlmIChlZGdlV2VpZ2h0IDwgcHJpKSB7XG4gICAgICAgIHBhcmVudHNbd10gPSB2O1xuICAgICAgICBwcS5kZWNyZWFzZSh3LCBlZGdlV2VpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZy5ub2RlQ291bnQoKSA9PT0gMCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBfLmVhY2goZy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgcHEuYWRkKHYsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgcmVzdWx0LnNldE5vZGUodik7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IGZyb20gYW4gYXJiaXRyYXJ5IG5vZGVcbiAgcHEuZGVjcmVhc2UoZy5ub2RlcygpWzBdLCAwKTtcblxuICB2YXIgaW5pdCA9IGZhbHNlO1xuICB3aGlsZSAocHEuc2l6ZSgpID4gMCkge1xuICAgIHYgPSBwcS5yZW1vdmVNaW4oKTtcbiAgICBpZiAoXy5oYXMocGFyZW50cywgdikpIHtcbiAgICAgIHJlc3VsdC5zZXRFZGdlKHYsIHBhcmVudHNbdl0pO1xuICAgIH0gZWxzZSBpZiAoaW5pdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgZ3JhcGggaXMgbm90IGNvbm5lY3RlZDogXCIgKyBnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgZy5ub2RlRWRnZXModikuZm9yRWFjaCh1cGRhdGVOZWlnaGJvcnMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0YXJqYW47XG5cbmZ1bmN0aW9uIHRhcmphbihnKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgdmlzaXRlZCA9IHt9OyAvLyBub2RlIGlkIC0+IHsgb25TdGFjaywgbG93bGluaywgaW5kZXggfVxuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGRmcyh2KSB7XG4gICAgdmFyIGVudHJ5ID0gdmlzaXRlZFt2XSA9IHtcbiAgICAgIG9uU3RhY2s6IHRydWUsXG4gICAgICBsb3dsaW5rOiBpbmRleCxcbiAgICAgIGluZGV4OiBpbmRleCsrXG4gICAgfTtcbiAgICBzdGFjay5wdXNoKHYpO1xuXG4gICAgZy5zdWNjZXNzb3JzKHYpLmZvckVhY2goZnVuY3Rpb24odykge1xuICAgICAgaWYgKCFfLmhhcyh2aXNpdGVkLCB3KSkge1xuICAgICAgICBkZnModyk7XG4gICAgICAgIGVudHJ5Lmxvd2xpbmsgPSBNYXRoLm1pbihlbnRyeS5sb3dsaW5rLCB2aXNpdGVkW3ddLmxvd2xpbmspO1xuICAgICAgfSBlbHNlIGlmICh2aXNpdGVkW3ddLm9uU3RhY2spIHtcbiAgICAgICAgZW50cnkubG93bGluayA9IE1hdGgubWluKGVudHJ5Lmxvd2xpbmssIHZpc2l0ZWRbd10uaW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGVudHJ5Lmxvd2xpbmsgPT09IGVudHJ5LmluZGV4KSB7XG4gICAgICB2YXIgY21wdCA9IFtdO1xuICAgICAgdmFyIHc7XG4gICAgICBkbyB7XG4gICAgICAgIHcgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgdmlzaXRlZFt3XS5vblN0YWNrID0gZmFsc2U7XG4gICAgICAgIGNtcHQucHVzaCh3KTtcbiAgICAgIH0gd2hpbGUgKHYgIT09IHcpO1xuICAgICAgcmVzdWx0cy5wdXNoKGNtcHQpO1xuICAgIH1cbiAgfVxuXG4gIGcubm9kZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoIV8uaGFzKHZpc2l0ZWQsIHYpKSB7XG4gICAgICBkZnModik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0b3Bzb3J0O1xudG9wc29ydC5DeWNsZUV4Y2VwdGlvbiA9IEN5Y2xlRXhjZXB0aW9uO1xuXG5mdW5jdGlvbiB0b3Bzb3J0KGcpIHtcbiAgdmFyIHZpc2l0ZWQgPSB7fTtcbiAgdmFyIHN0YWNrID0ge307XG4gIHZhciByZXN1bHRzID0gW107XG5cbiAgZnVuY3Rpb24gdmlzaXQobm9kZSkge1xuICAgIGlmIChfLmhhcyhzdGFjaywgbm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBDeWNsZUV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIGlmICghXy5oYXModmlzaXRlZCwgbm9kZSkpIHtcbiAgICAgIHN0YWNrW25vZGVdID0gdHJ1ZTtcbiAgICAgIHZpc2l0ZWRbbm9kZV0gPSB0cnVlO1xuICAgICAgXy5lYWNoKGcucHJlZGVjZXNzb3JzKG5vZGUpLCB2aXNpdCk7XG4gICAgICBkZWxldGUgc3RhY2tbbm9kZV07XG4gICAgICByZXN1bHRzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgXy5lYWNoKGcuc2lua3MoKSwgdmlzaXQpO1xuXG4gIGlmIChfLnNpemUodmlzaXRlZCkgIT09IGcubm9kZUNvdW50KCkpIHtcbiAgICB0aHJvdyBuZXcgQ3ljbGVFeGNlcHRpb24oKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBDeWNsZUV4Y2VwdGlvbigpIHt9XG5DeWNsZUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTsgLy8gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBFcnJvciB0byBwYXNzIHRlc3RpbmciLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpb3JpdHlRdWV1ZTtcblxuLyoqXG4gKiBBIG1pbi1wcmlvcml0eSBxdWV1ZSBkYXRhIHN0cnVjdHVyZS4gVGhpcyBhbGdvcml0aG0gaXMgZGVyaXZlZCBmcm9tIENvcm1lbixcbiAqIGV0IGFsLiwgXCJJbnRyb2R1Y3Rpb24gdG8gQWxnb3JpdGhtc1wiLiBUaGUgYmFzaWMgaWRlYSBvZiBhIG1pbi1wcmlvcml0eVxuICogcXVldWUgaXMgdGhhdCB5b3UgY2FuIGVmZmljaWVudGx5IChpbiBPKDEpIHRpbWUpIGdldCB0aGUgc21hbGxlc3Qga2V5IGluXG4gKiB0aGUgcXVldWUuIEFkZGluZyBhbmQgcmVtb3ZpbmcgZWxlbWVudHMgdGFrZXMgTyhsb2cgbikgdGltZS4gQSBrZXkgY2FuXG4gKiBoYXZlIGl0cyBwcmlvcml0eSBkZWNyZWFzZWQgaW4gTyhsb2cgbikgdGltZS5cbiAqL1xuZnVuY3Rpb24gUHJpb3JpdHlRdWV1ZSgpIHtcbiAgdGhpcy5fYXJyID0gW107XG4gIHRoaXMuX2tleUluZGljZXMgPSB7fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHF1ZXVlLiBUYWtlcyBgTygxKWAgdGltZS5cbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fYXJyLmxlbmd0aDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUga2V5cyB0aGF0IGFyZSBpbiB0aGUgcXVldWUuIFRha2VzIGBPKG4pYCB0aW1lLlxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9hcnIubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgua2V5OyB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgKiprZXkqKiBpcyBpbiB0aGUgcXVldWUgYW5kIGBmYWxzZWAgaWYgbm90LlxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrZXkpIHtcbiAgcmV0dXJuIF8uaGFzKHRoaXMuX2tleUluZGljZXMsIGtleSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHByaW9yaXR5IGZvciAqKmtleSoqLiBJZiAqKmtleSoqIGlzIG5vdCBwcmVzZW50IGluIHRoZSBxdWV1ZVxuICogdGhlbiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYHVuZGVmaW5lZGAuIFRha2VzIGBPKDEpYCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBrZXlcbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUucHJpb3JpdHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5fa2V5SW5kaWNlc1trZXldO1xuICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJbaW5kZXhdLnByaW9yaXR5O1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGtleSBmb3IgdGhlIG1pbmltdW0gZWxlbWVudCBpbiB0aGlzIHF1ZXVlLiBJZiB0aGUgcXVldWUgaXNcbiAqIGVtcHR5IHRoaXMgZnVuY3Rpb24gdGhyb3dzIGFuIEVycm9yLiBUYWtlcyBgTygxKWAgdGltZS5cbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnNpemUoKSA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlF1ZXVlIHVuZGVyZmxvd1wiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYXJyWzBdLmtleTtcbn07XG5cbi8qKlxuICogSW5zZXJ0cyBhIG5ldyBrZXkgaW50byB0aGUgcHJpb3JpdHkgcXVldWUuIElmIHRoZSBrZXkgYWxyZWFkeSBleGlzdHMgaW5cbiAqIHRoZSBxdWV1ZSB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYGZhbHNlYDsgb3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuIGB0cnVlYC5cbiAqIFRha2VzIGBPKG4pYCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBrZXkgdGhlIGtleSB0byBhZGRcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmlvcml0eSB0aGUgaW5pdGlhbCBwcmlvcml0eSBmb3IgdGhlIGtleVxuICovXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihrZXksIHByaW9yaXR5KSB7XG4gIHZhciBrZXlJbmRpY2VzID0gdGhpcy5fa2V5SW5kaWNlcztcbiAga2V5ID0gU3RyaW5nKGtleSk7XG4gIGlmICghXy5oYXMoa2V5SW5kaWNlcywga2V5KSkge1xuICAgIHZhciBhcnIgPSB0aGlzLl9hcnI7XG4gICAgdmFyIGluZGV4ID0gYXJyLmxlbmd0aDtcbiAgICBrZXlJbmRpY2VzW2tleV0gPSBpbmRleDtcbiAgICBhcnIucHVzaCh7a2V5OiBrZXksIHByaW9yaXR5OiBwcmlvcml0eX0pO1xuICAgIHRoaXMuX2RlY3JlYXNlKGluZGV4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYW5kIHJldHVybnMgdGhlIHNtYWxsZXN0IGtleSBpbiB0aGUgcXVldWUuIFRha2VzIGBPKGxvZyBuKWAgdGltZS5cbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUucmVtb3ZlTWluID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3N3YXAoMCwgdGhpcy5fYXJyLmxlbmd0aCAtIDEpO1xuICB2YXIgbWluID0gdGhpcy5fYXJyLnBvcCgpO1xuICBkZWxldGUgdGhpcy5fa2V5SW5kaWNlc1ttaW4ua2V5XTtcbiAgdGhpcy5faGVhcGlmeSgwKTtcbiAgcmV0dXJuIG1pbi5rZXk7XG59O1xuXG4vKipcbiAqIERlY3JlYXNlcyB0aGUgcHJpb3JpdHkgZm9yICoqa2V5KiogdG8gKipwcmlvcml0eSoqLiBJZiB0aGUgbmV3IHByaW9yaXR5IGlzXG4gKiBncmVhdGVyIHRoYW4gdGhlIHByZXZpb3VzIHByaW9yaXR5LCB0aGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gRXJyb3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGtleSB0aGUga2V5IGZvciB3aGljaCB0byByYWlzZSBwcmlvcml0eVxuICogQHBhcmFtIHtOdW1iZXJ9IHByaW9yaXR5IHRoZSBuZXcgcHJpb3JpdHkgZm9yIHRoZSBrZXlcbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuZGVjcmVhc2UgPSBmdW5jdGlvbihrZXksIHByaW9yaXR5KSB7XG4gIHZhciBpbmRleCA9IHRoaXMuX2tleUluZGljZXNba2V5XTtcbiAgaWYgKHByaW9yaXR5ID4gdGhpcy5fYXJyW2luZGV4XS5wcmlvcml0eSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5ldyBwcmlvcml0eSBpcyBncmVhdGVyIHRoYW4gY3VycmVudCBwcmlvcml0eS4gXCIgK1xuICAgICAgICBcIktleTogXCIgKyBrZXkgKyBcIiBPbGQ6IFwiICsgdGhpcy5fYXJyW2luZGV4XS5wcmlvcml0eSArIFwiIE5ldzogXCIgKyBwcmlvcml0eSk7XG4gIH1cbiAgdGhpcy5fYXJyW2luZGV4XS5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB0aGlzLl9kZWNyZWFzZShpbmRleCk7XG59O1xuXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5faGVhcGlmeSA9IGZ1bmN0aW9uKGkpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2FycjtcbiAgdmFyIGwgPSAyICogaTtcbiAgdmFyIHIgPSBsICsgMTtcbiAgdmFyIGxhcmdlc3QgPSBpO1xuICBpZiAobCA8IGFyci5sZW5ndGgpIHtcbiAgICBsYXJnZXN0ID0gYXJyW2xdLnByaW9yaXR5IDwgYXJyW2xhcmdlc3RdLnByaW9yaXR5ID8gbCA6IGxhcmdlc3Q7XG4gICAgaWYgKHIgPCBhcnIubGVuZ3RoKSB7XG4gICAgICBsYXJnZXN0ID0gYXJyW3JdLnByaW9yaXR5IDwgYXJyW2xhcmdlc3RdLnByaW9yaXR5ID8gciA6IGxhcmdlc3Q7XG4gICAgfVxuICAgIGlmIChsYXJnZXN0ICE9PSBpKSB7XG4gICAgICB0aGlzLl9zd2FwKGksIGxhcmdlc3QpO1xuICAgICAgdGhpcy5faGVhcGlmeShsYXJnZXN0KTtcbiAgICB9XG4gIH1cbn07XG5cblByaW9yaXR5UXVldWUucHJvdG90eXBlLl9kZWNyZWFzZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIHZhciBhcnIgPSB0aGlzLl9hcnI7XG4gIHZhciBwcmlvcml0eSA9IGFycltpbmRleF0ucHJpb3JpdHk7XG4gIHZhciBwYXJlbnQ7XG4gIHdoaWxlIChpbmRleCAhPT0gMCkge1xuICAgIHBhcmVudCA9IGluZGV4ID4+IDE7XG4gICAgaWYgKGFycltwYXJlbnRdLnByaW9yaXR5IDwgcHJpb3JpdHkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl9zd2FwKGluZGV4LCBwYXJlbnQpO1xuICAgIGluZGV4ID0gcGFyZW50O1xuICB9XG59O1xuXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5fc3dhcCA9IGZ1bmN0aW9uKGksIGopIHtcbiAgdmFyIGFyciA9IHRoaXMuX2FycjtcbiAgdmFyIGtleUluZGljZXMgPSB0aGlzLl9rZXlJbmRpY2VzO1xuICB2YXIgb3JpZ0FyckkgPSBhcnJbaV07XG4gIHZhciBvcmlnQXJySiA9IGFycltqXTtcbiAgYXJyW2ldID0gb3JpZ0Fycko7XG4gIGFycltqXSA9IG9yaWdBcnJJO1xuICBrZXlJbmRpY2VzW29yaWdBcnJKLmtleV0gPSBpO1xuICBrZXlJbmRpY2VzW29yaWdBcnJJLmtleV0gPSBqO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBHcmFwaDtcblxudmFyIERFRkFVTFRfRURHRV9OQU1FID0gXCJcXHgwMFwiO1xudmFyIEdSQVBIX05PREUgPSBcIlxceDAwXCI7XG52YXIgRURHRV9LRVlfREVMSU0gPSBcIlxceDAxXCI7XG5cbi8vIEltcGxlbWVudGF0aW9uIG5vdGVzOlxuLy9cbi8vICAqIE5vZGUgaWQgcXVlcnkgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gc3RyaW5nIGlkcyBmb3IgdGhlIG5vZGVzXG4vLyAgKiBFZGdlIGlkIHF1ZXJ5IGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIFwiZWRnZU9ialwiLCBlZGdlIG9iamVjdCwgdGhhdCBpc1xuLy8gICAgY29tcG9zZWQgb2YgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IGFuIGVkZ2U6IHt2LCB3LCBuYW1lfS5cbi8vICAqIEludGVybmFsbHkgd2UgdXNlIGFuIFwiZWRnZUlkXCIsIGEgc3RyaW5naWZpZWQgZm9ybSBvZiB0aGUgZWRnZU9iaiwgdG9cbi8vICAgIHJlZmVyZW5jZSBlZGdlcy4gVGhpcyBpcyBiZWNhdXNlIHdlIG5lZWQgYSBwZXJmb3JtYW50IHdheSB0byBsb29rIHRoZXNlXG4vLyAgICBlZGdlcyB1cCBhbmQsIG9iamVjdCBwcm9wZXJ0aWVzLCB3aGljaCBoYXZlIHN0cmluZyBrZXlzLCBhcmUgdGhlIGNsb3Nlc3Rcbi8vICAgIHdlJ3JlIGdvaW5nIHRvIGdldCB0byBhIHBlcmZvcm1hbnQgaGFzaHRhYmxlIGluIEphdmFTY3JpcHQuXG5cbmZ1bmN0aW9uIEdyYXBoKG9wdHMpIHtcbiAgdGhpcy5faXNEaXJlY3RlZCA9IF8uaGFzKG9wdHMsIFwiZGlyZWN0ZWRcIikgPyBvcHRzLmRpcmVjdGVkIDogdHJ1ZTtcbiAgdGhpcy5faXNNdWx0aWdyYXBoID0gXy5oYXMob3B0cywgXCJtdWx0aWdyYXBoXCIpID8gb3B0cy5tdWx0aWdyYXBoIDogZmFsc2U7XG4gIHRoaXMuX2lzQ29tcG91bmQgPSBfLmhhcyhvcHRzLCBcImNvbXBvdW5kXCIpID8gb3B0cy5jb21wb3VuZCA6IGZhbHNlO1xuXG4gIC8vIExhYmVsIGZvciB0aGUgZ3JhcGggaXRzZWxmXG4gIHRoaXMuX2xhYmVsID0gdW5kZWZpbmVkO1xuXG4gIC8vIERlZmF1bHRzIHRvIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IG5vZGVcbiAgdGhpcy5fZGVmYXVsdE5vZGVMYWJlbEZuID0gXy5jb25zdGFudCh1bmRlZmluZWQpO1xuXG4gIC8vIERlZmF1bHRzIHRvIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IGVkZ2VcbiAgdGhpcy5fZGVmYXVsdEVkZ2VMYWJlbEZuID0gXy5jb25zdGFudCh1bmRlZmluZWQpO1xuXG4gIC8vIHYgLT4gbGFiZWxcbiAgdGhpcy5fbm9kZXMgPSB7fTtcblxuICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgIC8vIHYgLT4gcGFyZW50XG4gICAgdGhpcy5fcGFyZW50ID0ge307XG5cbiAgICAvLyB2IC0+IGNoaWxkcmVuXG4gICAgdGhpcy5fY2hpbGRyZW4gPSB7fTtcbiAgICB0aGlzLl9jaGlsZHJlbltHUkFQSF9OT0RFXSA9IHt9O1xuICB9XG5cbiAgLy8gdiAtPiBlZGdlT2JqXG4gIHRoaXMuX2luID0ge307XG5cbiAgLy8gdSAtPiB2IC0+IE51bWJlclxuICB0aGlzLl9wcmVkcyA9IHt9O1xuXG4gIC8vIHYgLT4gZWRnZU9ialxuICB0aGlzLl9vdXQgPSB7fTtcblxuICAvLyB2IC0+IHcgLT4gTnVtYmVyXG4gIHRoaXMuX3N1Y3MgPSB7fTtcblxuICAvLyBlIC0+IGVkZ2VPYmpcbiAgdGhpcy5fZWRnZU9ianMgPSB7fTtcblxuICAvLyBlIC0+IGxhYmVsXG4gIHRoaXMuX2VkZ2VMYWJlbHMgPSB7fTtcbn1cblxuLyogTnVtYmVyIG9mIG5vZGVzIGluIHRoZSBncmFwaC4gU2hvdWxkIG9ubHkgYmUgY2hhbmdlZCBieSB0aGUgaW1wbGVtZW50YXRpb24uICovXG5HcmFwaC5wcm90b3R5cGUuX25vZGVDb3VudCA9IDA7XG5cbi8qIE51bWJlciBvZiBlZGdlcyBpbiB0aGUgZ3JhcGguIFNob3VsZCBvbmx5IGJlIGNoYW5nZWQgYnkgdGhlIGltcGxlbWVudGF0aW9uLiAqL1xuR3JhcGgucHJvdG90eXBlLl9lZGdlQ291bnQgPSAwO1xuXG5cbi8qID09PSBHcmFwaCBmdW5jdGlvbnMgPT09PT09PT09ICovXG5cbkdyYXBoLnByb3RvdHlwZS5pc0RpcmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9pc0RpcmVjdGVkO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmlzTXVsdGlncmFwaCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5faXNNdWx0aWdyYXBoO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmlzQ29tcG91bmQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2lzQ29tcG91bmQ7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0R3JhcGggPSBmdW5jdGlvbihsYWJlbCkge1xuICB0aGlzLl9sYWJlbCA9IGxhYmVsO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5ncmFwaCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGFiZWw7XG59O1xuXG5cbi8qID09PSBOb2RlIGZ1bmN0aW9ucyA9PT09PT09PT09ICovXG5cbkdyYXBoLnByb3RvdHlwZS5zZXREZWZhdWx0Tm9kZUxhYmVsID0gZnVuY3Rpb24obmV3RGVmYXVsdCkge1xuICBpZiAoIV8uaXNGdW5jdGlvbihuZXdEZWZhdWx0KSkge1xuICAgIG5ld0RlZmF1bHQgPSBfLmNvbnN0YW50KG5ld0RlZmF1bHQpO1xuICB9XG4gIHRoaXMuX2RlZmF1bHROb2RlTGFiZWxGbiA9IG5ld0RlZmF1bHQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLm5vZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbm9kZUNvdW50O1xufTtcblxuR3JhcGgucHJvdG90eXBlLm5vZGVzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLmtleXModGhpcy5fbm9kZXMpO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNvdXJjZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gXy5maWx0ZXIodGhpcy5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIF8uaXNFbXB0eShzZWxmLl9pblt2XSk7XG4gIH0pO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNpbmtzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIF8uZmlsdGVyKHRoaXMubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHJldHVybiBfLmlzRW1wdHkoc2VsZi5fb3V0W3ZdKTtcbiAgfSk7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0Tm9kZXMgPSBmdW5jdGlvbih2cywgdmFsdWUpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgXy5lYWNoKHZzLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgc2VsZi5zZXROb2RlKHYsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5zZXROb2RlKHYpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNldE5vZGUgPSBmdW5jdGlvbih2LCB2YWx1ZSkge1xuICBpZiAoXy5oYXModGhpcy5fbm9kZXMsIHYpKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLl9ub2Rlc1t2XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRoaXMuX25vZGVzW3ZdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB2YWx1ZSA6IHRoaXMuX2RlZmF1bHROb2RlTGFiZWxGbih2KTtcbiAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICB0aGlzLl9wYXJlbnRbdl0gPSBHUkFQSF9OT0RFO1xuICAgIHRoaXMuX2NoaWxkcmVuW3ZdID0ge307XG4gICAgdGhpcy5fY2hpbGRyZW5bR1JBUEhfTk9ERV1bdl0gPSB0cnVlO1xuICB9XG4gIHRoaXMuX2luW3ZdID0ge307XG4gIHRoaXMuX3ByZWRzW3ZdID0ge307XG4gIHRoaXMuX291dFt2XSA9IHt9O1xuICB0aGlzLl9zdWNzW3ZdID0ge307XG4gICsrdGhpcy5fbm9kZUNvdW50O1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gdGhpcy5fbm9kZXNbdl07XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaGFzTm9kZSA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIF8uaGFzKHRoaXMuX25vZGVzLCB2KTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5yZW1vdmVOb2RlID0gIGZ1bmN0aW9uKHYpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoXy5oYXModGhpcy5fbm9kZXMsIHYpKSB7XG4gICAgdmFyIHJlbW92ZUVkZ2UgPSBmdW5jdGlvbihlKSB7IHNlbGYucmVtb3ZlRWRnZShzZWxmLl9lZGdlT2Jqc1tlXSk7IH07XG4gICAgZGVsZXRlIHRoaXMuX25vZGVzW3ZdO1xuICAgIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgICB0aGlzLl9yZW1vdmVGcm9tUGFyZW50c0NoaWxkTGlzdCh2KTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9wYXJlbnRbdl07XG4gICAgICBfLmVhY2godGhpcy5jaGlsZHJlbih2KSwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgc2VsZi5zZXRQYXJlbnQoY2hpbGQpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgdGhpcy5fY2hpbGRyZW5bdl07XG4gICAgfVxuICAgIF8uZWFjaChfLmtleXModGhpcy5faW5bdl0pLCByZW1vdmVFZGdlKTtcbiAgICBkZWxldGUgdGhpcy5faW5bdl07XG4gICAgZGVsZXRlIHRoaXMuX3ByZWRzW3ZdO1xuICAgIF8uZWFjaChfLmtleXModGhpcy5fb3V0W3ZdKSwgcmVtb3ZlRWRnZSk7XG4gICAgZGVsZXRlIHRoaXMuX291dFt2XTtcbiAgICBkZWxldGUgdGhpcy5fc3Vjc1t2XTtcbiAgICAtLXRoaXMuX25vZGVDb3VudDtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zZXRQYXJlbnQgPSBmdW5jdGlvbih2LCBwYXJlbnQpIHtcbiAgaWYgKCF0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBwYXJlbnQgaW4gYSBub24tY29tcG91bmQgZ3JhcGhcIik7XG4gIH1cblxuICBpZiAoXy5pc1VuZGVmaW5lZChwYXJlbnQpKSB7XG4gICAgcGFyZW50ID0gR1JBUEhfTk9ERTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb2VyY2UgcGFyZW50IHRvIHN0cmluZ1xuICAgIHBhcmVudCArPSBcIlwiO1xuICAgIGZvciAodmFyIGFuY2VzdG9yID0gcGFyZW50O1xuICAgICAgIV8uaXNVbmRlZmluZWQoYW5jZXN0b3IpO1xuICAgICAgYW5jZXN0b3IgPSB0aGlzLnBhcmVudChhbmNlc3RvcikpIHtcbiAgICAgIGlmIChhbmNlc3RvciA9PT0gdikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZXR0aW5nIFwiICsgcGFyZW50KyBcIiBhcyBwYXJlbnQgb2YgXCIgKyB2ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIHdvdWxkIGNyZWF0ZSBhIGN5Y2xlXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0Tm9kZShwYXJlbnQpO1xuICB9XG5cbiAgdGhpcy5zZXROb2RlKHYpO1xuICB0aGlzLl9yZW1vdmVGcm9tUGFyZW50c0NoaWxkTGlzdCh2KTtcbiAgdGhpcy5fcGFyZW50W3ZdID0gcGFyZW50O1xuICB0aGlzLl9jaGlsZHJlbltwYXJlbnRdW3ZdID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuX3JlbW92ZUZyb21QYXJlbnRzQ2hpbGRMaXN0ID0gZnVuY3Rpb24odikge1xuICBkZWxldGUgdGhpcy5fY2hpbGRyZW5bdGhpcy5fcGFyZW50W3ZdXVt2XTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5wYXJlbnQgPSBmdW5jdGlvbih2KSB7XG4gIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX3BhcmVudFt2XTtcbiAgICBpZiAocGFyZW50ICE9PSBHUkFQSF9OT0RFKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLmNoaWxkcmVuID0gZnVuY3Rpb24odikge1xuICBpZiAoXy5pc1VuZGVmaW5lZCh2KSkge1xuICAgIHYgPSBHUkFQSF9OT0RFO1xuICB9XG5cbiAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlblt2XTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBfLmtleXMoY2hpbGRyZW4pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2ID09PSBHUkFQSF9OT0RFKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmhhc05vZGUodikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5wcmVkZWNlc3NvcnMgPSBmdW5jdGlvbih2KSB7XG4gIHZhciBwcmVkc1YgPSB0aGlzLl9wcmVkc1t2XTtcbiAgaWYgKHByZWRzVikge1xuICAgIHJldHVybiBfLmtleXMocHJlZHNWKTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLnN1Y2Nlc3NvcnMgPSBmdW5jdGlvbih2KSB7XG4gIHZhciBzdWNzViA9IHRoaXMuX3N1Y3Nbdl07XG4gIGlmIChzdWNzVikge1xuICAgIHJldHVybiBfLmtleXMoc3Vjc1YpO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUubmVpZ2hib3JzID0gZnVuY3Rpb24odikge1xuICB2YXIgcHJlZHMgPSB0aGlzLnByZWRlY2Vzc29ycyh2KTtcbiAgaWYgKHByZWRzKSB7XG4gICAgcmV0dXJuIF8udW5pb24ocHJlZHMsIHRoaXMuc3VjY2Vzc29ycyh2KSk7XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5pc0xlYWYgPSBmdW5jdGlvbiAodikge1xuICB2YXIgbmVpZ2hib3JzO1xuICBpZiAodGhpcy5pc0RpcmVjdGVkKCkpIHtcbiAgICBuZWlnaGJvcnMgPSB0aGlzLnN1Y2Nlc3NvcnModik7XG4gIH0gZWxzZSB7XG4gICAgbmVpZ2hib3JzID0gdGhpcy5uZWlnaGJvcnModik7XG4gIH1cbiAgcmV0dXJuIG5laWdoYm9ycy5sZW5ndGggPT09IDA7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuZmlsdGVyTm9kZXMgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgdmFyIGNvcHkgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih7XG4gICAgZGlyZWN0ZWQ6IHRoaXMuX2lzRGlyZWN0ZWQsXG4gICAgbXVsdGlncmFwaDogdGhpcy5faXNNdWx0aWdyYXBoLFxuICAgIGNvbXBvdW5kOiB0aGlzLl9pc0NvbXBvdW5kXG4gIH0pO1xuXG4gIGNvcHkuc2V0R3JhcGgodGhpcy5ncmFwaCgpKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIF8uZWFjaCh0aGlzLl9ub2RlcywgZnVuY3Rpb24odmFsdWUsIHYpIHtcbiAgICBpZiAoZmlsdGVyKHYpKSB7XG4gICAgICBjb3B5LnNldE5vZGUodiwgdmFsdWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgXy5lYWNoKHRoaXMuX2VkZ2VPYmpzLCBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGNvcHkuaGFzTm9kZShlLnYpICYmIGNvcHkuaGFzTm9kZShlLncpKSB7XG4gICAgICBjb3B5LnNldEVkZ2UoZSwgc2VsZi5lZGdlKGUpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBwYXJlbnRzID0ge307XG4gIGZ1bmN0aW9uIGZpbmRQYXJlbnQodikge1xuICAgIHZhciBwYXJlbnQgPSBzZWxmLnBhcmVudCh2KTtcbiAgICBpZiAocGFyZW50ID09PSB1bmRlZmluZWQgfHwgY29weS5oYXNOb2RlKHBhcmVudCkpIHtcbiAgICAgIHBhcmVudHNbdl0gPSBwYXJlbnQ7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH0gZWxzZSBpZiAocGFyZW50IGluIHBhcmVudHMpIHtcbiAgICAgIHJldHVybiBwYXJlbnRzW3BhcmVudF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaW5kUGFyZW50KHBhcmVudCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICBfLmVhY2goY29weS5ub2RlcygpLCBmdW5jdGlvbih2KSB7XG4gICAgICBjb3B5LnNldFBhcmVudCh2LCBmaW5kUGFyZW50KHYpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufTtcblxuLyogPT09IEVkZ2UgZnVuY3Rpb25zID09PT09PT09PT0gKi9cblxuR3JhcGgucHJvdG90eXBlLnNldERlZmF1bHRFZGdlTGFiZWwgPSBmdW5jdGlvbihuZXdEZWZhdWx0KSB7XG4gIGlmICghXy5pc0Z1bmN0aW9uKG5ld0RlZmF1bHQpKSB7XG4gICAgbmV3RGVmYXVsdCA9IF8uY29uc3RhbnQobmV3RGVmYXVsdCk7XG4gIH1cbiAgdGhpcy5fZGVmYXVsdEVkZ2VMYWJlbEZuID0gbmV3RGVmYXVsdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuZWRnZUNvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9lZGdlQ291bnQ7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuZWRnZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIF8udmFsdWVzKHRoaXMuX2VkZ2VPYmpzKTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zZXRQYXRoID0gZnVuY3Rpb24odnMsIHZhbHVlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIF8ucmVkdWNlKHZzLCBmdW5jdGlvbih2LCB3KSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgc2VsZi5zZXRFZGdlKHYsIHcsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5zZXRFZGdlKHYsIHcpO1xuICAgIH1cbiAgICByZXR1cm4gdztcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLypcbiAqIHNldEVkZ2UodiwgdywgW3ZhbHVlLCBbbmFtZV1dKVxuICogc2V0RWRnZSh7IHYsIHcsIFtuYW1lXSB9LCBbdmFsdWVdKVxuICovXG5HcmFwaC5wcm90b3R5cGUuc2V0RWRnZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdiwgdywgbmFtZSwgdmFsdWU7XG4gIHZhciB2YWx1ZVNwZWNpZmllZCA9IGZhbHNlO1xuICB2YXIgYXJnMCA9IGFyZ3VtZW50c1swXTtcblxuICBpZiAodHlwZW9mIGFyZzAgPT09IFwib2JqZWN0XCIgJiYgYXJnMCAhPT0gbnVsbCAmJiBcInZcIiBpbiBhcmcwKSB7XG4gICAgdiA9IGFyZzAudjtcbiAgICB3ID0gYXJnMC53O1xuICAgIG5hbWUgPSBhcmcwLm5hbWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhbHVlID0gYXJndW1lbnRzWzFdO1xuICAgICAgdmFsdWVTcGVjaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2ID0gYXJnMDtcbiAgICB3ID0gYXJndW1lbnRzWzFdO1xuICAgIG5hbWUgPSBhcmd1bWVudHNbM107XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICB2YWx1ZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgIHZhbHVlU3BlY2lmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2ID0gXCJcIiArIHY7XG4gIHcgPSBcIlwiICsgdztcbiAgaWYgKCFfLmlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgbmFtZSA9IFwiXCIgKyBuYW1lO1xuICB9XG5cbiAgdmFyIGUgPSBlZGdlQXJnc1RvSWQodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSk7XG4gIGlmIChfLmhhcyh0aGlzLl9lZGdlTGFiZWxzLCBlKSkge1xuICAgIGlmICh2YWx1ZVNwZWNpZmllZCkge1xuICAgICAgdGhpcy5fZWRnZUxhYmVsc1tlXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGlmICghXy5pc1VuZGVmaW5lZChuYW1lKSAmJiAhdGhpcy5faXNNdWx0aWdyYXBoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBhIG5hbWVkIGVkZ2Ugd2hlbiBpc011bHRpZ3JhcGggPSBmYWxzZVwiKTtcbiAgfVxuXG4gIC8vIEl0IGRpZG4ndCBleGlzdCwgc28gd2UgbmVlZCB0byBjcmVhdGUgaXQuXG4gIC8vIEZpcnN0IGVuc3VyZSB0aGUgbm9kZXMgZXhpc3QuXG4gIHRoaXMuc2V0Tm9kZSh2KTtcbiAgdGhpcy5zZXROb2RlKHcpO1xuXG4gIHRoaXMuX2VkZ2VMYWJlbHNbZV0gPSB2YWx1ZVNwZWNpZmllZCA/IHZhbHVlIDogdGhpcy5fZGVmYXVsdEVkZ2VMYWJlbEZuKHYsIHcsIG5hbWUpO1xuXG4gIHZhciBlZGdlT2JqID0gZWRnZUFyZ3NUb09iaih0aGlzLl9pc0RpcmVjdGVkLCB2LCB3LCBuYW1lKTtcbiAgLy8gRW5zdXJlIHdlIGFkZCB1bmRpcmVjdGVkIGVkZ2VzIGluIGEgY29uc2lzdGVudCB3YXkuXG4gIHYgPSBlZGdlT2JqLnY7XG4gIHcgPSBlZGdlT2JqLnc7XG5cbiAgT2JqZWN0LmZyZWV6ZShlZGdlT2JqKTtcbiAgdGhpcy5fZWRnZU9ianNbZV0gPSBlZGdlT2JqO1xuICBpbmNyZW1lbnRPckluaXRFbnRyeSh0aGlzLl9wcmVkc1t3XSwgdik7XG4gIGluY3JlbWVudE9ySW5pdEVudHJ5KHRoaXMuX3N1Y3Nbdl0sIHcpO1xuICB0aGlzLl9pblt3XVtlXSA9IGVkZ2VPYmo7XG4gIHRoaXMuX291dFt2XVtlXSA9IGVkZ2VPYmo7XG4gIHRoaXMuX2VkZ2VDb3VudCsrO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5lZGdlID0gZnVuY3Rpb24odiwgdywgbmFtZSkge1xuICB2YXIgZSA9IChhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgPyBlZGdlT2JqVG9JZCh0aGlzLl9pc0RpcmVjdGVkLCBhcmd1bWVudHNbMF0pXG4gICAgOiBlZGdlQXJnc1RvSWQodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSkpO1xuICByZXR1cm4gdGhpcy5fZWRnZUxhYmVsc1tlXTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5oYXNFZGdlID0gZnVuY3Rpb24odiwgdywgbmFtZSkge1xuICB2YXIgZSA9IChhcmd1bWVudHMubGVuZ3RoID09PSAxXG4gICAgPyBlZGdlT2JqVG9JZCh0aGlzLl9pc0RpcmVjdGVkLCBhcmd1bWVudHNbMF0pXG4gICAgOiBlZGdlQXJnc1RvSWQodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSkpO1xuICByZXR1cm4gXy5oYXModGhpcy5fZWRnZUxhYmVscywgZSk7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUucmVtb3ZlRWRnZSA9IGZ1bmN0aW9uKHYsIHcsIG5hbWUpIHtcbiAgdmFyIGUgPSAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgID8gZWRnZU9ialRvSWQodGhpcy5faXNEaXJlY3RlZCwgYXJndW1lbnRzWzBdKVxuICAgIDogZWRnZUFyZ3NUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpKTtcbiAgdmFyIGVkZ2UgPSB0aGlzLl9lZGdlT2Jqc1tlXTtcbiAgaWYgKGVkZ2UpIHtcbiAgICB2ID0gZWRnZS52O1xuICAgIHcgPSBlZGdlLnc7XG4gICAgZGVsZXRlIHRoaXMuX2VkZ2VMYWJlbHNbZV07XG4gICAgZGVsZXRlIHRoaXMuX2VkZ2VPYmpzW2VdO1xuICAgIGRlY3JlbWVudE9yUmVtb3ZlRW50cnkodGhpcy5fcHJlZHNbd10sIHYpO1xuICAgIGRlY3JlbWVudE9yUmVtb3ZlRW50cnkodGhpcy5fc3Vjc1t2XSwgdyk7XG4gICAgZGVsZXRlIHRoaXMuX2luW3ddW2VdO1xuICAgIGRlbGV0ZSB0aGlzLl9vdXRbdl1bZV07XG4gICAgdGhpcy5fZWRnZUNvdW50LS07XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaW5FZGdlcyA9IGZ1bmN0aW9uKHYsIHUpIHtcbiAgdmFyIGluViA9IHRoaXMuX2luW3ZdO1xuICBpZiAoaW5WKSB7XG4gICAgdmFyIGVkZ2VzID0gXy52YWx1ZXMoaW5WKTtcbiAgICBpZiAoIXUpIHtcbiAgICAgIHJldHVybiBlZGdlcztcbiAgICB9XG4gICAgcmV0dXJuIF8uZmlsdGVyKGVkZ2VzLCBmdW5jdGlvbihlZGdlKSB7IHJldHVybiBlZGdlLnYgPT09IHU7IH0pO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUub3V0RWRnZXMgPSBmdW5jdGlvbih2LCB3KSB7XG4gIHZhciBvdXRWID0gdGhpcy5fb3V0W3ZdO1xuICBpZiAob3V0Vikge1xuICAgIHZhciBlZGdlcyA9IF8udmFsdWVzKG91dFYpO1xuICAgIGlmICghdykge1xuICAgICAgcmV0dXJuIGVkZ2VzO1xuICAgIH1cbiAgICByZXR1cm4gXy5maWx0ZXIoZWRnZXMsIGZ1bmN0aW9uKGVkZ2UpIHsgcmV0dXJuIGVkZ2UudyA9PT0gdzsgfSk7XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5ub2RlRWRnZXMgPSBmdW5jdGlvbih2LCB3KSB7XG4gIHZhciBpbkVkZ2VzID0gdGhpcy5pbkVkZ2VzKHYsIHcpO1xuICBpZiAoaW5FZGdlcykge1xuICAgIHJldHVybiBpbkVkZ2VzLmNvbmNhdCh0aGlzLm91dEVkZ2VzKHYsIHcpKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaW5jcmVtZW50T3JJbml0RW50cnkobWFwLCBrKSB7XG4gIGlmIChtYXBba10pIHtcbiAgICBtYXBba10rKztcbiAgfSBlbHNlIHtcbiAgICBtYXBba10gPSAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlY3JlbWVudE9yUmVtb3ZlRW50cnkobWFwLCBrKSB7XG4gIGlmICghLS1tYXBba10pIHsgZGVsZXRlIG1hcFtrXTsgfVxufVxuXG5mdW5jdGlvbiBlZGdlQXJnc1RvSWQoaXNEaXJlY3RlZCwgdl8sIHdfLCBuYW1lKSB7XG4gIHZhciB2ID0gXCJcIiArIHZfO1xuICB2YXIgdyA9IFwiXCIgKyB3XztcbiAgaWYgKCFpc0RpcmVjdGVkICYmIHYgPiB3KSB7XG4gICAgdmFyIHRtcCA9IHY7XG4gICAgdiA9IHc7XG4gICAgdyA9IHRtcDtcbiAgfVxuICByZXR1cm4gdiArIEVER0VfS0VZX0RFTElNICsgdyArIEVER0VfS0VZX0RFTElNICtcbiAgICAgICAgICAgICAoXy5pc1VuZGVmaW5lZChuYW1lKSA/IERFRkFVTFRfRURHRV9OQU1FIDogbmFtZSk7XG59XG5cbmZ1bmN0aW9uIGVkZ2VBcmdzVG9PYmooaXNEaXJlY3RlZCwgdl8sIHdfLCBuYW1lKSB7XG4gIHZhciB2ID0gXCJcIiArIHZfO1xuICB2YXIgdyA9IFwiXCIgKyB3XztcbiAgaWYgKCFpc0RpcmVjdGVkICYmIHYgPiB3KSB7XG4gICAgdmFyIHRtcCA9IHY7XG4gICAgdiA9IHc7XG4gICAgdyA9IHRtcDtcbiAgfVxuICB2YXIgZWRnZU9iaiA9ICB7IHY6IHYsIHc6IHcgfTtcbiAgaWYgKG5hbWUpIHtcbiAgICBlZGdlT2JqLm5hbWUgPSBuYW1lO1xuICB9XG4gIHJldHVybiBlZGdlT2JqO1xufVxuXG5mdW5jdGlvbiBlZGdlT2JqVG9JZChpc0RpcmVjdGVkLCBlZGdlT2JqKSB7XG4gIHJldHVybiBlZGdlQXJnc1RvSWQoaXNEaXJlY3RlZCwgZWRnZU9iai52LCBlZGdlT2JqLncsIGVkZ2VPYmoubmFtZSk7XG59XG4iLCIvLyBJbmNsdWRlcyBvbmx5IHRoZSBcImNvcmVcIiBvZiBncmFwaGxpYlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdyYXBoOiByZXF1aXJlKFwiLi9ncmFwaFwiKSxcbiAgdmVyc2lvbjogcmVxdWlyZShcIi4vdmVyc2lvblwiKVxufTtcbiIsInZhciBfID0gcmVxdWlyZShcIi4vbG9kYXNoXCIpO1xudmFyIEdyYXBoID0gcmVxdWlyZShcIi4vZ3JhcGhcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB3cml0ZTogd3JpdGUsXG4gIHJlYWQ6IHJlYWRcbn07XG5cbmZ1bmN0aW9uIHdyaXRlKGcpIHtcbiAgdmFyIGpzb24gPSB7XG4gICAgb3B0aW9uczoge1xuICAgICAgZGlyZWN0ZWQ6IGcuaXNEaXJlY3RlZCgpLFxuICAgICAgbXVsdGlncmFwaDogZy5pc011bHRpZ3JhcGgoKSxcbiAgICAgIGNvbXBvdW5kOiBnLmlzQ29tcG91bmQoKVxuICAgIH0sXG4gICAgbm9kZXM6IHdyaXRlTm9kZXMoZyksXG4gICAgZWRnZXM6IHdyaXRlRWRnZXMoZylcbiAgfTtcbiAgaWYgKCFfLmlzVW5kZWZpbmVkKGcuZ3JhcGgoKSkpIHtcbiAgICBqc29uLnZhbHVlID0gXy5jbG9uZShnLmdyYXBoKCkpO1xuICB9XG4gIHJldHVybiBqc29uO1xufVxuXG5mdW5jdGlvbiB3cml0ZU5vZGVzKGcpIHtcbiAgcmV0dXJuIF8ubWFwKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHZhciBub2RlVmFsdWUgPSBnLm5vZGUodik7XG4gICAgdmFyIHBhcmVudCA9IGcucGFyZW50KHYpO1xuICAgIHZhciBub2RlID0geyB2OiB2IH07XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKG5vZGVWYWx1ZSkpIHtcbiAgICAgIG5vZGUudmFsdWUgPSBub2RlVmFsdWU7XG4gICAgfVxuICAgIGlmICghXy5pc1VuZGVmaW5lZChwYXJlbnQpKSB7XG4gICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3cml0ZUVkZ2VzKGcpIHtcbiAgcmV0dXJuIF8ubWFwKGcuZWRnZXMoKSwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlZGdlVmFsdWUgPSBnLmVkZ2UoZSk7XG4gICAgdmFyIGVkZ2UgPSB7IHY6IGUudiwgdzogZS53IH07XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKGUubmFtZSkpIHtcbiAgICAgIGVkZ2UubmFtZSA9IGUubmFtZTtcbiAgICB9XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKGVkZ2VWYWx1ZSkpIHtcbiAgICAgIGVkZ2UudmFsdWUgPSBlZGdlVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlZGdlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVhZChqc29uKSB7XG4gIHZhciBnID0gbmV3IEdyYXBoKGpzb24ub3B0aW9ucykuc2V0R3JhcGgoanNvbi52YWx1ZSk7XG4gIF8uZWFjaChqc29uLm5vZGVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgIGcuc2V0Tm9kZShlbnRyeS52LCBlbnRyeS52YWx1ZSk7XG4gICAgaWYgKGVudHJ5LnBhcmVudCkge1xuICAgICAgZy5zZXRQYXJlbnQoZW50cnkudiwgZW50cnkucGFyZW50KTtcbiAgICB9XG4gIH0pO1xuICBfLmVhY2goanNvbi5lZGdlcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICBnLnNldEVkZ2UoeyB2OiBlbnRyeS52LCB3OiBlbnRyeS53LCBuYW1lOiBlbnRyeS5uYW1lIH0sIGVudHJ5LnZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBnO1xufVxuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG52YXIgbG9kYXNoO1xuXG5pZiAodHlwZW9mIHJlcXVpcmUgPT09IFwiZnVuY3Rpb25cIikge1xuICB0cnkge1xuICAgIGxvZGFzaCA9IHtcbiAgICAgIGNsb25lOiByZXF1aXJlKFwibG9kYXNoL2Nsb25lXCIpLFxuICAgICAgY29uc3RhbnQ6IHJlcXVpcmUoXCJsb2Rhc2gvY29uc3RhbnRcIiksXG4gICAgICBlYWNoOiByZXF1aXJlKFwibG9kYXNoL2VhY2hcIiksXG4gICAgICBmaWx0ZXI6IHJlcXVpcmUoXCJsb2Rhc2gvZmlsdGVyXCIpLFxuICAgICAgaGFzOiAgcmVxdWlyZShcImxvZGFzaC9oYXNcIiksXG4gICAgICBpc0FycmF5OiByZXF1aXJlKFwibG9kYXNoL2lzQXJyYXlcIiksXG4gICAgICBpc0VtcHR5OiByZXF1aXJlKFwibG9kYXNoL2lzRW1wdHlcIiksXG4gICAgICBpc0Z1bmN0aW9uOiByZXF1aXJlKFwibG9kYXNoL2lzRnVuY3Rpb25cIiksXG4gICAgICBpc1VuZGVmaW5lZDogcmVxdWlyZShcImxvZGFzaC9pc1VuZGVmaW5lZFwiKSxcbiAgICAgIGtleXM6IHJlcXVpcmUoXCJsb2Rhc2gva2V5c1wiKSxcbiAgICAgIG1hcDogcmVxdWlyZShcImxvZGFzaC9tYXBcIiksXG4gICAgICByZWR1Y2U6IHJlcXVpcmUoXCJsb2Rhc2gvcmVkdWNlXCIpLFxuICAgICAgc2l6ZTogcmVxdWlyZShcImxvZGFzaC9zaXplXCIpLFxuICAgICAgdHJhbnNmb3JtOiByZXF1aXJlKFwibG9kYXNoL3RyYW5zZm9ybVwiKSxcbiAgICAgIHVuaW9uOiByZXF1aXJlKFwibG9kYXNoL3VuaW9uXCIpLFxuICAgICAgdmFsdWVzOiByZXF1aXJlKFwibG9kYXNoL3ZhbHVlc1wiKVxuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gIH1cbn1cblxuaWYgKCFsb2Rhc2gpIHtcbiAgbG9kYXNoID0gd2luZG93Ll87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9kYXNoO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnMi4xLjgnO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlcztcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVJlZHVjZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbnZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzY2lpU2l6ZTtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25NZXJnZVZhbHVlO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsb25lO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCJ2YXIgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBjcmVhdGVCYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VFYWNoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgKSkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRXh0cmVtdW07XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbHRlcjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaW5kSW5kZXg7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA+IG90aGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHdDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hcDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmFOO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA8IG90aGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VMdDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiIsInZhciBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHNhZmVHZXQgPSByZXF1aXJlKCcuL19zYWZlR2V0JyksXG4gICAgdG9QbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdG9QbGFpbk9iamVjdCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZURlZXA7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgYmFzZVNvcnRCeSA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0QnknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBjb21wYXJlTXVsdGlwbGUgPSByZXF1aXJlKCcuL19jb21wYXJlTXVsdGlwbGUnKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoYmFzZUl0ZXJhdGVlKSk7XG5cbiAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gIH0pO1xuXG4gIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU9yZGVyQnk7XG4iLCJ2YXIgYmFzZVBpY2tCeSA9IHJlcXVpcmUoJy4vX2Jhc2VQaWNrQnknKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQaWNrO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0JyksXG4gICAgYmFzZVNldCA9IHJlcXVpcmUoJy4vX2Jhc2VTZXQnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQaWNrQnk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gKiBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICovXG5mdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgIHN0YXJ0ICs9IHN0ZXA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmFuZ2U7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlZHVjZTtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVzdDtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU29ydEJ5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VWYWx1ZXM7XG4iLCIvKipcbiAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICByZXN1bHQgPSB7fTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVppcE9iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RGdW5jdGlvbjtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURhdGFWaWV3O1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVJlZ0V4cDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lU3ltYm9sO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVUeXBlZEFycmF5O1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKipcbiAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUFzY2VuZGluZztcbiIsInZhciBjb21wYXJlQXNjZW5kaW5nID0gcmVxdWlyZSgnLi9fY29tcGFyZUFzY2VuZGluZycpO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gKlxuICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxuICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAvL1xuICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVNdWx0aXBsZTtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlBcnJheTtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyk7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlPYmplY3Q7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzSW47XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUVhY2g7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZpbmQ7XG4iLCJ2YXIgYmFzZVJhbmdlID0gcmVxdWlyZSgnLi9fYmFzZVJhbmdlJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZ2U7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgbm9vcCA9IHJlcXVpcmUoJy4vbm9vcCcpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAqL1xudmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsInZhciBmbGF0dGVuID0gcmVxdWlyZSgnLi9mbGF0dGVuJyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXRSZXN0O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRjaERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAob2JqZWN0KSB7XG4gICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzSW47XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVW5pY29kZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyksXG4gICAgY2xvbmVEYXRhVmlldyA9IHJlcXVpcmUoJy4vX2Nsb25lRGF0YVZpZXcnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTeW1ib2wgPSByZXF1aXJlKCcuL19jbG9uZVN5bWJvbCcpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVCeVRhZztcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxhdHRlbmFibGU7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FmZUdldDtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG9ydE91dDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmljdEluZGV4T2Y7XG4iLCJ2YXIgYXNjaWlTaXplID0gcmVxdWlyZSgnLi9fYXNjaWlTaXplJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICB1bmljb2RlU2l6ZSA9IHJlcXVpcmUoJy4vX3VuaWNvZGVTaXplJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1NpemU7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xudmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG5mdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICsrcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVNpemU7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURlZXA7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqL1xudmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICBsZW5ndGggPSAxO1xuICB9XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JFYWNoJyk7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgYmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vX2Jhc2VGaWx0ZXInKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKiBAc2VlIF8ucmVqZWN0XG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICovXG5mdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbHRlcjtcbiIsInZhciBjcmVhdGVGaW5kID0gcmVxdWlyZSgnLi9fY3JlYXRlRmluZCcpLFxuICAgIGZpbmRJbmRleCA9IHJlcXVpcmUoJy4vZmluZEluZGV4Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gKiBdO1xuICpcbiAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICovXG52YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAqIF07XG4gKlxuICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gKiAvLyA9PiAwXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gKiAvLyA9PiAxXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IDBcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgfVxuICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kSW5kZXg7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpO1xuXG4vKipcbiAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICA/IG9iamVjdFxuICAgIDogYmFzZUZvcihvYmplY3QsIGNhc3RGdW5jdGlvbihpdGVyYXRlZSksIGtleXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9ySW47XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzID0gcmVxdWlyZSgnLi9fYmFzZUhhcycpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG90aGVyLCAnYScpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhcztcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAqXG4gKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAqIHByb3BlcnRpZXMuXG4gKlxuICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRW1wdHkobnVsbCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KHRydWUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSgxKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgfVxuICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHk7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwidmFyIGJhc2VJc01hcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc01hcDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUlzU2V0ID0gcmVxdWlyZSgnLi9fYmFzZUlzU2V0JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2V0O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNVbmRlZmluZWQ7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iLCIvKipcbiAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsYXN0O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xOSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCAxKSwgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIG1hdGNoZXNGdW5jID0gXy5vdmVyU29tZShbeyAnYSc6IDEgfSwgeyAnYSc6IDIgfV0pXG4gICAgICogdmFyIG1hdGNoZXNQcm9wZXJ0eUZ1bmMgPSBfLm92ZXJTb21lKFtbJ2EnLCAxXSwgWydhJywgMl1dKVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAqICAgcmV0dXJuIG4gKiBuO1xuICogfVxuICpcbiAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdXG4gKlxuICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICovXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXA7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgYmFzZUZvck93biA9IHJlcXVpcmUoJy4vX2Jhc2VGb3JPd24nKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAqIEBzZWUgXy5tYXBLZXlzXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IHtcbiAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gKiB9O1xuICpcbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGl0ZXJhdGVlID0gYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVmFsdWVzO1xuIiwidmFyIGJhc2VFeHRyZW11bSA9IHJlcXVpcmUoJy4vX2Jhc2VFeHRyZW11bScpLFxuICAgIGJhc2VHdCA9IHJlcXVpcmUoJy4vX2Jhc2VHdCcpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE1hdGhcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAqIC8vID0+IDhcbiAqXG4gKiBfLm1heChbXSk7XG4gKiAvLyA9PiB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1heDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VNZXJnZSA9IHJlcXVpcmUoJy4vX2Jhc2VNZXJnZScpLFxuICAgIGNyZWF0ZUFzc2lnbmVyID0gcmVxdWlyZSgnLi9fY3JlYXRlQXNzaWduZXInKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iLCJ2YXIgYmFzZUV4dHJlbXVtID0gcmVxdWlyZSgnLi9fYmFzZUV4dHJlbXVtJyksXG4gICAgYmFzZUx0ID0gcmVxdWlyZSgnLi9fYmFzZUx0JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTWF0aFxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICogLy8gPT4gMlxuICpcbiAqIF8ubWluKFtdKTtcbiAqIC8vID0+IHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWluO1xuIiwidmFyIGJhc2VFeHRyZW11bSA9IHJlcXVpcmUoJy4vX2Jhc2VFeHRyZW11bScpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VMdCA9IHJlcXVpcmUoJy4vX2Jhc2VMdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBNYXRoXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICpcbiAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAqIC8vID0+IHsgJ24nOiAxIH1cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAqIC8vID0+IHsgJ24nOiAxIH1cbiAqL1xuZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWluQnk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLm5vb3ApO1xuICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICovXG5mdW5jdGlvbiBub29wKCkge1xuICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vb3A7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgYmFzZVBpY2sgPSByZXF1aXJlKCcuL19iYXNlUGljaycpLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZSgnLi9fZmxhdFJlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAqXG4gKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICovXG52YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBpY2s7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCJ2YXIgY3JlYXRlUmFuZ2UgPSByZXF1aXJlKCcuL19jcmVhdGVSYW5nZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gKlxuICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yYW5nZSg0KTtcbiAqIC8vID0+IFswLCAxLCAyLCAzXVxuICpcbiAqIF8ucmFuZ2UoLTQpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA1KTtcbiAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICpcbiAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAqXG4gKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAqXG4gKiBfLnJhbmdlKDEsIDQsIDApO1xuICogLy8gPT4gWzEsIDEsIDFdXG4gKlxuICogXy5yYW5nZSgwKTtcbiAqIC8vID0+IFtdXG4gKi9cbnZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmFuZ2U7XG4iLCJ2YXIgYXJyYXlSZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheVJlZHVjZScpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlUmVkdWNlID0gcmVxdWlyZSgnLi9fYmFzZVJlZHVjZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICogYW5kIGBzb3J0QnlgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gKiAgIHJldHVybiBzdW0gKyBuO1xuICogfSwgMCk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICogICByZXR1cm4gcmVzdWx0O1xuICogfSwge30pO1xuICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWR1Y2U7XG4iLCJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzU3RyaW5nID0gcmVxdWlyZSgnLi9pc1N0cmluZycpLFxuICAgIHN0cmluZ1NpemUgPSByZXF1aXJlKCcuL19zdHJpbmdTaXplJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAqIC8vID0+IDJcbiAqXG4gKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAqIC8vID0+IDdcbiAqL1xuZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gIH1cbiAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaXplO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlT3JkZXJCeSA9IHJlcXVpcmUoJy4vX2Jhc2VPcmRlckJ5JyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gcmVxdWlyZSgnLi9faXNJdGVyYXRlZUNhbGwnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gKiBdO1xuICpcbiAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAqXG4gKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICovXG52YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgIGl0ZXJhdGVlcyA9IFtdO1xuICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgfVxuICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc29ydEJ5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zpbml0ZTtcbiIsInZhciB0b0Zpbml0ZSA9IHJlcXVpcmUoJy4vdG9GaW5pdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0ludGVnZXIoMy4yKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0ludGVnZXI7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4zLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAqIH0sIFtdKTtcbiAqIC8vID0+IFs0LCA5XVxuICpcbiAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAqIH0sIHt9KTtcbiAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgIH1cbiAgfVxuICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICB9KTtcbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYW5zZm9ybTtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGJhc2VVbmlxID0gcmVxdWlyZSgnLi9fYmFzZVVuaXEnKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICogLy8gPT4gWzIsIDFdXG4gKi9cbnZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pb247XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG52YXIgaWRDb3VudGVyID0gMDtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICpcbiAqIF8udW5pcXVlSWQoKTtcbiAqIC8vID0+ICcxMDUnXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxdWVJZDtcbiIsInZhciBiYXNlVmFsdWVzID0gcmVxdWlyZSgnLi9fYmFzZVZhbHVlcycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsdWVzO1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlWmlwT2JqZWN0ID0gcmVxdWlyZSgnLi9fYmFzZVppcE9iamVjdCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqL1xuZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHppcE9iamVjdDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImV4cG9ydCBjb25zdCBBdXRvRmxvd0NvbnN0YW50cyA9IHtcclxuICAgIGRlYnVnRW5hYmxlZDogdHJ1ZSxcclxuICAgIGFib3V0OiB7XHJcbiAgICAgICAgdmVyc2lvbjogJzAuMS4wJyxcclxuICAgIH0sXHJcbiAgICB2aXN1YWw6IHtcclxuICAgICAgICBtaW5QeDogNzVcclxuICAgIH0sXHJcbiAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIGRhdGFNYXBwaW5nOid0YWJsZScsXHJcbiAgICAgICAgc2VsZWN0aW9uOiB7XHJcbiAgICAgICAgICAgIHNvbGlkT3BhY2l0eTogMSxcclxuICAgICAgICAgICAgdHJhbnNwYXJlbnRPcGFjaXR5OiAwLjRcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZlYXR1cmVzOiB7XHJcbiAgICAgICAgICAgIGNvbnRleHRNZW51OiBmYWxzZSxcclxuICAgICAgICAgICAgZmlsdGVyT3RoZXJWaXN1YWxzOiB0cnVlLFxyXG4gICAgICAgICAgICBwcm9GZWF0dXJlczoge1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0VG9Tdmc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0VG9HbGlmZnk6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0JhcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG5vZGVVcmw6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ3JhcGg6IHtcclxuICAgICAgICAgICAgbm9kZXNlcDogMjAsXHJcbiAgICAgICAgICAgIGVkZ2VzZXA6IDEwLFxyXG4gICAgICAgICAgICByYW5rc2VwOiA1MCxcclxuICAgICAgICAgICAgcmFua2RpcjogJ0xSJyxcclxuICAgICAgICAgICAgYWxpZ246IG51bGwsXHJcbiAgICAgICAgICAgIG1hcmdpbng6IDAsXHJcbiAgICAgICAgICAgIG1hcmdpbnk6IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBub2RlOiB7XHJcbiAgICAgICAgICAgIHNob3dOb2RlUHJvZ3Jlc3NiYXI6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dOb2RlVXJsOiB0cnVlLFxyXG4gICAgICAgICAgICBzaG93Tm9kZURlc2NyaXB0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcclxuICAgICAgICAgICAgYmFja2dyb3VuZFRyYW5zcGFyZW5jeTogMSxcclxuICAgICAgICAgICAgYm9yZGVyOiB0cnVlLFxyXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogJyMwMDAnLFxyXG4gICAgICAgICAgICBib3JkZXJTdHJva2VXaWR0aDogMixcclxuICAgICAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgIHRleHRBbGlnbm1lbnQ6ICdsZWZ0JyxcclxuICAgICAgICAgICAgZm9udDoge1xyXG4gICAgICAgICAgICAgICAgc2l6ZTogMTEsXHJcbiAgICAgICAgICAgICAgICBmYW1pbHk6ICdcIlNlZ29lIFVJXCIsIHdmX3NlZ29lLXVpX25vcm1hbCwgaGVsdmV0aWNhLCBhcmlhbCwgc2Fucy1zZXJpZicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6ICcjNzc3Nzc3J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB3aWR0aDogMzAsXHJcbiAgICAgICAgICAgIGhlaWdodDogMjAsXHJcbiAgICAgICAgICAgIHJ4OiAzLFxyXG4gICAgICAgICAgICByeTogMyxcclxuICAgICAgICAgICAgcGFkZGluZzogMCxcclxuICAgICAgICAgICAgdXJsSWNvblpvb206IDAuM1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWRnZToge1xyXG4gICAgICAgICAgICBlZGdlQ29sb3I6ICcjMGQwMDBkJyxcclxuICAgICAgICAgICAgZWRnZVN0eWxlOiAnc29saWQnLFxyXG4gICAgICAgICAgICBlZGdlV2lkdGg6IDIsXHJcbiAgICAgICAgICAgIGVkZ2VDYWxjTWV0aG9kOiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICB2aWV3cG9ydDoge1xyXG4gICAgICAgICAgICB3aWR0aDogMTA4MCxcclxuICAgICAgICAgICAgaGVpZ2h0OiA3NjgsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdGRkYnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgbm9kZVNpemU6ICdhdmcnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbG9yczogWycjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJywgJyMwMDk5RkYnXHJcbiAgICAgICAgLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnXHJcbiAgICAgICAgLCAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJywgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLCAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JywgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLCAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJywgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ11cclxufSAiLCJleHBvcnQgY2xhc3MgRGVidWdnZXIge1xuICAgIHB1YmxpYyBlbmFibGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBzdGFydFRpbWU6IG51bWJlcjtcbiAgICBwdWJsaWMgbGFzdENoZWNrVGltZTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xuICAgIH1cblxuICAgIC8qKiBDbGVhcnMgdGhlIGNvbnNvbGUgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWQgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgY29uc29sZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgaGVhZGluZyB3aXRoaW4gdGhlIGJyb3dzZXIgY29uc29sZSwgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWRcbiAgICAgKiBAcGFyYW0gaGVhZGluZyBUZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGhlYWRpbmdcbiAgICAgKi9cbiAgICBoZWFkaW5nKGhlYWRpbmc6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXFxuPT09PT09PT09PT09PT09PT09PT1cXG4ke2hlYWRpbmd9XFxuPT09PT09PT09PT09PT09PT09PT1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBDcmVhdGUgYSBmb290ZXIgaWYgZGVidWdnaW5nIGlzIGVuYWJsZWQsIGFsbG93aW5nIHlvdSB0byBkZW1hcmsgc2VjdGlvbnMgd2l0aGluIHRoZSBjb25zb2xlICovXG4gICAgZm9vdGVyKCkge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgPT09PT09PT09PT09PT09PT09PT1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIG91dCB0aGUgc3VwcGxpZWQgYXJncyB0byB0aGUgY29uc29sZSwgd2l0aCB0YWJiaW5nXG4gICAgICogQHBhcmFtIGFyZ3MgQW55IGl0ZW1zIHRvIG91dHB1dCwgc2VwYXJhdGVkIGJ5IGEgY29tbWEsIGxpa2UgZm9yIGBjb25zb2xlLmxvZygpYFxuICAgICAqL1xuICAgIGxvZyguLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd8XFx0JywgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9maWxlU3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9nKCdQcm9maWxpbmcgc3RhcnRlZC4nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXBvcnRFeGVjdXRpb25UaW1lKCkge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0Q2hlY2tUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nKGAkeyhwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMubGFzdENoZWNrVGltZSkudG9Mb2NhbGVTdHJpbmcoKX0gbXMgZWxhcHNlZCBzaW5jZSBsYXN0IHJlcG9ydGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxvZyhgJHsocGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnN0YXJ0VGltZSkudG9Mb2NhbGVTdHJpbmcoKX0gbXMgdG90YWwgZXhlY3V0aW9uIHRpbWUgc2luY2UgcHJvZmlsZSBzdGFydGApO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdENoZWNrVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZygnVW5hYmxlIHRvIGdldCBleGVjdXRpb24gdGltZS4gRGlkIHlvdSBzdGFydCBwcm9maWxpbmcgaGlnaGVyIHVwIGluIHlvdXIgY29kZT8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFN1bW1hcnkobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlcG9ydEV4ZWN1dGlvblRpbWUoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5sYXN0Q2hlY2tUaW1lIC0gdGhpcy5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lOiB0aGlzLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBlbmRUaW1lOiB0aGlzLmxhc3RDaGVja1RpbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxufSIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcbmltcG9ydCAqIGFzIGRhZ3JlRDMgZnJvbSAnZGFncmUtZDMnO1xuaW1wb3J0IHsgQXV0b0Zsb3dDb25zdGFudHMgfSBmcm9tICcuL2F1dG9mbG93LmNvbnN0YW50cyc7XG5pbXBvcnQgeyBEZWJ1Z2dlciB9IGZyb20gJy4vYXV0b2Zsb3cuZGVidWdnZXInO1xuaW1wb3J0IHsgQXV0b0Zsb3dFeHBvcnQgfSBmcm9tICcuL2V4cG9ydC9hdXRvZmxvdy5leHBvcnQnO1xuaW1wb3J0IHsgSUVkZ2VWaWV3TW9kZWwsIElOb2RlVmlld01vZGVsLCBJQXV0b0Zsb3dEYXRhVmlld01vZGVsIH0gZnJvbSAnLi92aWV3TW9kZWwvSVZpZXdNb2RlbCc7XG5pbXBvcnQgeyBEYXRhTWFwcGVyIH0gZnJvbSBcIi4vdmlld01vZGVsL2RhdGFNYXBwZXJcIjtcblxuZXhwb3J0IGNsYXNzIEF1dG9GbG93IHtcbiAgICBwdWJsaWMgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBwdWJsaWMgaG9zdE9wdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7XG4gICAgcHVibGljIG1hcmdpbjogYW55O1xuICAgIHB1YmxpYyBncmFwaE9wdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgbWFwcGVyOiBEYXRhTWFwcGVyO1xuICAgIHB1YmxpYyBsb2dnZXI6IERlYnVnZ2VyO1xuICAgIHB1YmxpYyB0b29sVGlwU2VydmljZTogYW55O1xuICAgIHB1YmxpYyBncmFwaDogZGFncmVEMy5ncmFwaGxpYi5HcmFwaDtcbiAgICBwdWJsaWMgZXhwb3J0VXRpbDogQXV0b0Zsb3dFeHBvcnQ7XG4gICAgcHVibGljIHJlbmRlcjogZGFncmVEMy5SZW5kZXI7XG4gICAgcHVibGljIHZpZXdNb2RlbDogSUF1dG9GbG93RGF0YVZpZXdNb2RlbDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IGFueSkge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRpYWxpemF0aW5nIEF1dG9GbG93Li4uJyk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmhvc3RPcHRpb25zID0gKCFvcHRpb25zIHx8ICFvcHRpb25zLnZpZXdwb3J0KSA/IHtcbiAgICAgICAgICAgIHZpZXdwb3J0OiB7IC4uLkF1dG9GbG93Q29uc3RhbnRzLmRlZmF1bHRzLnZpZXdwb3J0IH1cbiAgICAgICAgICAgICwgbm9kZTogeyAuLi5BdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5ub2RlIH1cbiAgICAgICAgICAgICwgZWRnZTogeyAuLi5BdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5lZGdlIH1cbiAgICAgICAgfSA6IG9wdGlvbnM7XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhvc3RPcHRpb25zLnZpZXdwb3J0LndpZHRoIHx8IDE5MjA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ob3N0T3B0aW9ucy52aWV3cG9ydC5oZWlnaHQgfHwgMTA4MDtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9O1xuICAgICAgICB0aGlzLmdyYXBoT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGdyYXBoOiB7XG4gICAgICAgICAgICAgICAgbm9kZXNlcDogMjAsXG4gICAgICAgICAgICAgICAgZWRnZXNlcDogMjAsXG4gICAgICAgICAgICAgICAgcmFua3NlcDogNTAsXG4gICAgICAgICAgICAgICAgcmFua2RpcjogJ0xSJyxcbiAgICAgICAgICAgICAgICBtYXJnaW54OiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpbnk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9kZTogeyB3aWR0aDogMzAsIGhlaWdodDogMjAgfSxcbiAgICAgICAgICAgIGVkZ2U6IHsgc3Ryb2tlV2lkdGg6IDIgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JhcGhPcHRpb25zID0geyAuLi50aGlzLmdyYXBoT3B0aW9ucywgLi4uQXV0b0Zsb3dDb25zdGFudHMuZGVmYXVsdHMgfTtcblxuICAgICAgICB0aGlzLm1hcHBlciA9IG5ldyBEYXRhTWFwcGVyKHRoaXMuaG9zdE9wdGlvbnMsIHRoaXMuZ3JhcGhPcHRpb25zKTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgRGVidWdnZXIoQXV0b0Zsb3dDb25zdGFudHMuZGVidWdFbmFibGVkKTtcblxuICAgICAgICB0aGlzLnRvb2xUaXBTZXJ2aWNlID0gb3B0aW9ucy50b29sdGlwU2VydmljZVdyYXBwZXI7XG5cbiAgICAgICAgdGhpcy5ncmFwaCA9IG51bGw7XG4gICAgICAgIHRoaXMuZXhwb3J0VXRpbCA9IG51bGw7XG4gICAgfVxuICAgIHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiBBdXRvRmxvd0NvbnN0YW50cy5hYm91dC52ZXJzaW9uO1xuICAgIH1cbiAgICByZW5kZXJGbG93KGRhdGEpIHtcbiAgICAgICAgbGV0IF9fdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZUVsZW1lbnQoZ25vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBnbm9kZS5kYXRhLm5vZGVIVE1MO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ncmFwaCA9IG5ldyBkYWdyZUQzLmdyYXBobGliLkdyYXBoKHsgZGlyZWN0ZWQ6IHRydWUsIGNvbXBvdW5kOiB0cnVlIH0pO1xuICAgICAgICBBdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5mZWF0dXJlcy5wcm9GZWF0dXJlcy5leHBvcnQuZXhwb3J0VG9HbGlmZnlcbiAgICAgICAgICAgID8gbmV3IEF1dG9GbG93RXhwb3J0KHRoaXMuY29udGFpbmVyLCB0aGlzLmdyYXBoLCB0aGlzLm1hcHBlci5nZXRTY2hlbWEobnVsbCwgdGhpcy5ob3N0T3B0aW9ucykpXG4gICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgbGV0IGcgPSB0aGlzLmdyYXBoLnNldEdyYXBoKF9fdGhhdC5ncmFwaE9wdGlvbnMuZ3JhcGgpO1xuXG4gICAgICAgIGcuc2V0RGVmYXVsdEVkZ2VMYWJlbCgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGcuZ3JhcGgoKS50cmFuc2l0aW9uID0gKHNlbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ21hcHBpbmcgbm9kZXMuLi4nKTtcbiAgICAgICAgZGF0YS5ub2Rlcy5mb3JFYWNoKChub2RlOiBJTm9kZVZpZXdNb2RlbCkgPT4ge1xuICAgICAgICAgICAgZy5zZXROb2RlKG5vZGUudXVpZCwge1xuICAgICAgICAgICAgICAgIHJ4OiB0aGlzLmdyYXBoT3B0aW9ucy5ub2RlLnJ4LCByeTogdGhpcy5ncmFwaE9wdGlvbnMubm9kZS5yeSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB0aGlzLmdyYXBoT3B0aW9ucy5ub2RlLnBhZGRpbmcsXG4gICAgICAgICAgICAgICAgLy8gd2lkdGg6IHRoaXMuZ3JhcGhPcHRpb25zLm5vZGUud2lkdGgsXG4gICAgICAgICAgICAgICAgLy8gaGVpZ2h0OiB0aGlzLmdyYXBoT3B0aW9ucy5ub2RlLmhlaWdodCxcbiAgICAgICAgICAgICAgICBkYXRhOiBub2RlXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoJ3BhcmVudCcgaW4gbm9kZSkge1xuICAgICAgICAgICAgICAgIGcuc2V0UGFyZW50KG5vZGVbJ3V1aWQnXSwgbm9kZVsncGFyZW50J10pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGcubm9kZXMoKS5mb3JFYWNoKHYgPT4ge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBnLm5vZGUodik7XG4gICAgICAgICAgICBsZXQgY2hpbGRyZW5zID0gZy5jaGlsZHJlbih2KTtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy9pZiBpcyBhIGxlYWYgbm9kZVxuICAgICAgICAgICAgICAgIG5vZGUubGFiZWxUeXBlID0gJ2h0bWwnO1xuICAgICAgICAgICAgICAgIG5vZGUubGFiZWwgPSBnZXROb2RlRWxlbWVudChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vaWYgaXQgaXMgYSBwYXJlbnQgbm9kZVxuICAgICAgICAgICAgICAgIG5vZGUuY2x1c3RlckxhYmVsUG9zID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgbm9kZS5sYWJlbFR5cGUgPSAnaHRtbCc7XG4gICAgICAgICAgICAgICAgbm9kZS5sYWJlbCA9ICc8ZGl2IHN0eWxlPVxcXCJmb250LXNpemU6MWVtO1xcXCI+JyArIG5vZGUuZGF0YS5Tb3VyY2VOYW1lICsgJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZSA9ICdmaWxsOiAjZTNlN2U4OyBzdHJva2U6ICM3Mzc3Nzg7IHN0cm9rZS13aWR0aDogMnB4Oyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ21hcHBpbmcgZWRnZXMuLi4nKTtcbiAgICAgICAgZGF0YS5lZGdlcy5mb3JFYWNoKChlZGc6IElFZGdlVmlld01vZGVsKSA9PiB7XG4gICAgICAgICAgICBsZXQgZWRnZSA9IGcuc2V0RWRnZShlZGcudi51dWlkLCBlZGcudy51dWlkLCB7XG4gICAgICAgICAgICAgICAgY3VydmU6IGQzLmN1cnZlQmFzaXMsXG4gICAgICAgICAgICAgICAgc3R5bGU6IF9fdGhhdC5tYXBwZXIuZ2V0RWRnZVN0eWxlKGVkZyksXG4gICAgICAgICAgICAgICAgYXJyb3doZWFkU3R5bGU6ICdmaWxsOicgKyB0aGlzLmdyYXBoT3B0aW9ucy5lZGdlLmVkZ2VDb2xvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlZGdlLmxpbmVJbnRlcnBvbGF0ZSA9ICdiYXNpcyc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ1xuICAgIH1cbiAgICB1cGRhdGUocmF3RGF0YSwgc2NoZW1hKSB7XG4gICAgICAgIGxldCBfX3RoYXQgPSB0aGlzO1xuICAgICAgICBfX3RoYXQubG9nZ2VyLmxvZygnYXV0b2Zsb3cgdXBkYXRlKCkgY2FsbGluZy4uLicpO1xuICAgICAgICBzY2hlbWEgPSBfX3RoYXQubWFwcGVyLmdldFNjaGVtYShzY2hlbWEsIF9fdGhhdC5ob3N0T3B0aW9ucyk7XG4gICAgICAgIGxldCBkYXRhID0gX190aGF0Lm1hcHBlci5tYXBEYXRhKHJhd0RhdGEsIHNjaGVtYSk7XG4gICAgICAgIF9fdGhhdC5sb2dnZXIubG9nKHJhd0RhdGEpO1xuICAgICAgICBfX3RoYXQubG9nZ2VyLmxvZyhkYXRhKTtcbiAgICAgICAgZDMuc2VsZWN0KCdzdmcnKS5yZW1vdmUoKTtcbiAgICAgICAgbGV0IHN2ZyA9IGQzLnNlbGVjdChfX3RoYXQuY29udGFpbmVyKS5zdHlsZSgnYmFja2dyb3VuZCcsIF9fdGhhdC5ncmFwaE9wdGlvbnMudmlld3BvcnQuYmFja2dyb3VuZClcbiAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBfX3RoYXQud2lkdGggKyBfX3RoYXQubWFyZ2luLmxlZnQgKyBfX3RoYXQubWFyZ2luLnJpZ2h0KVxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIF9fdGhhdC5oZWlnaHQgKyBfX3RoYXQubWFyZ2luLnRvcCArIF9fdGhhdC5tYXJnaW4uYm90dG9tKTtcblxuICAgICAgICAvL3JlbW92ZSBhbGwgcHJldmlvdXMgcmVuZGVyZWQgb2JqZWN0c1xuICAgICAgICAvLyBzdmcuc2VsZWN0QWxsKCcqJykucmVtb3ZlKCk7XG5cbiAgICAgICAgbGV0IGlubmVyID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgX190aGF0Lm1hcmdpbi5sZWZ0ICsgJywnICsgX190aGF0Lm1hcmdpbi50b3AgKyAnKScpO1xuXG4gICAgICAgIGxldCB6b29tID0gZDMuem9vbSgpLm9uKCd6b29tJywgKCkgPT4ge1xuICAgICAgICAgICAgaW5uZXIuYXR0cigndHJhbnNmb3JtJywgZDMuZXZlbnQudHJhbnNmb3JtKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3ZnLmNhbGwoem9vbSk7XG5cbiAgICAgICAgbGV0IGcgPSBfX3RoYXQucmVuZGVyRmxvdyhkYXRhKTtcblxuICAgICAgICBfX3RoYXQucmVuZGVyID0gbmV3IGRhZ3JlRDMucmVuZGVyKCk7XG5cbiAgICAgICAgX190aGF0LnJlbmRlcihpbm5lciwgZyk7XG5cbiAgICAgICAgbGV0IG5vZGVSZWN0ID0gc3ZnLnNlbGVjdEFsbCgnZy5ub2RlIHJlY3QnKVxuICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBfX3RoYXQuZ3JhcGhPcHRpb25zLm5vZGUuYm9yZGVyQ29sb3IpXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIF9fdGhhdC5ncmFwaE9wdGlvbnMubm9kZS5ib3JkZXJTdHJva2VXaWR0aCk7XG5cblxuICAgICAgICBub2RlUmVjdC5hdHRyKCdpZCcsIChkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJ25vZGVfJyArIGQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cuZWRnZVBhdGggcGF0aCcpXG4gICAgICAgICAgICAuYXR0cignaWQnLCAoZTogSUVkZ2VWaWV3TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2UtJyArIGUudiArICdfJyArIGUudztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cuZWRnZVBhdGgnKVxuICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc291cmNlJywgKGU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnY7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ2RhdGEtdGFyZ2V0JywgKGU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLnc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBzdmcuc2VsZWN0QWxsKCdnLmVkZ2VMYWJlbCBnJylcbiAgICAgICAgICAgIC5hdHRyKCdpZCcsIChlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2xhYmVsX2UtJyArIGUudiArICdfJyArIGUudztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGcubm9kZXMoKS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGcubm9kZSh2KTtcbiAgICAgICAgICAgIG5vZGUuY3VzdG9tSWQgPSAnbm9kZV8nICsgdjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZy5lZGdlcygpLmZvckVhY2goKGU6IGFueSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVkZ2UgPSBnLmVkZ2UoZS52LCBlLncpO1xuICAgICAgICAgICAgZWRnZS5jdXN0b21JZCA9ICdlLScgKyBlLnYgKyAnXycgKyBlLnc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydGVkKGQpIHtcbiAgICAgICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ2FjdGl2ZScsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ0VuZGVkKGQpIHtcbiAgICAgICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdNb3ZlKGQpIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gZDMuc2VsZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTm9kZSA9IGcubm9kZShkKTtcblxuICAgICAgICAgICAgbGV0IHByZXZYID0gc2VsZWN0ZWROb2RlLngsXG4gICAgICAgICAgICAgICAgcHJldlkgPSBzZWxlY3RlZE5vZGUueTtcblxuICAgICAgICAgICAgc2VsZWN0ZWROb2RlLnggKz0gZDMuZXZlbnQuZHg7XG4gICAgICAgICAgICBzZWxlY3RlZE5vZGUueSArPSBkMy5ldmVudC5keTtcbiAgICAgICAgICAgIG5vZGUuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgc2VsZWN0ZWROb2RlLnggKyAnLCcgKyBzZWxlY3RlZE5vZGUueSArICcpJyk7XG5cbiAgICAgICAgICAgIGxldCBkeCA9IHNlbGVjdGVkTm9kZS54IC0gcHJldlgsXG4gICAgICAgICAgICAgICAgZHkgPSBzZWxlY3RlZE5vZGUueSAtIHByZXZZO1xuXG4gICAgICAgICAgICBnLmVkZ2VzKCkuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLnYgPT0gZCB8fCBlLncgPT0gZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGVFZGdlUG9pbnRzKGcsIHBvaW50cywgZSlcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZWRnZSA9IGcuZWRnZShlLnYsIGUudyk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZUVkZ2UoZy5lZGdlKGUudiwgZS53KSwgZHgsIGR5KTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjJyArIGVkZ2UuY3VzdG9tSWQpLmF0dHIoJ2QnLCBjYWxjUG9pbnRzKGcsIGUpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xhYmVsXycgKyBlZGdlLmN1c3RvbUlkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHhmb3JtcyA9IGxhYmVsLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4Zm9ybXMgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0cyA9IC90cmFuc2xhdGVcXChcXHMqKFteXFxzLCldKylbICxdPyhbXlxccywpXSspPy8uZXhlYyh4Zm9ybXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSBwYXJzZUludChwYXJ0c1sxXSkgKyBkeCwgeSA9IChwYXJzZUludChwYXJ0c1syXSkgKyBkeSkgfHwgZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaXNOYU4oeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB5ID0gZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHggKyAnLCcgKyB5ICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhhbmRsZU1vdXNlT3ZlciA9IGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGUgPSBnLm5vZGUoZCk7XG4gICAgICAgICAgICBub2RlLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZy5wcmVkZWNlc3NvcnMoZCkpIHtcbiAgICAgICAgICAgICAgICBnLnByZWRlY2Vzc29ycyhkKS5mb3JFYWNoKG4gPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuKVxuICAgICAgICAgICAgICAgICAgICAvLyBuLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ3NlbGVjdGVkJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGUgPSBnLm5vZGUoZCk7XG4gICAgICAgICAgICBub2RlLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ3NlbGVjdGVkJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyBnLnByZWRlY2Vzc29ycyhkKS5mb3JFYWNoKG4gLT4ge1xuICAgICAgICAgICAgLy8gICBuLnNlbGVjdCgncmVjdCcpLmNsYXNzZWQoJ3NlbGVjdGVkJywgZmFsc2UpICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJhbnNsYXRlRWRnZShlLCBkeCwgZHkpIHtcbiAgICAgICAgICAgIGUucG9pbnRzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgICAgICBwLnggPSBwLnggKyBkeDtcbiAgICAgICAgICAgICAgICBwLnkgPSBwLnkgKyBkeTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldENhbGNQb2ludHMoZywgZSkge1xuICAgICAgICAgICAgbGV0IGZ1bmMgPSB7XG4gICAgICAgICAgICAgICAgMTogKGcsIGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50cyA9IFtdLCBlZGdlID0gZy5lZGdlKGUudiwgZS53KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhaWwgPSBnLm5vZGUoZS52KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQgPSBnLm5vZGUoZS53KTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gZWRnZS5wb2ludHMuc2xpY2UoMSwgZWRnZS5wb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy51bnNoaWZ0KGludGVyc2VjdFJlY3QodGFpbCwgcG9pbnRzWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGludGVyc2VjdFJlY3QoaGVhZCwgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMjogKGcsIGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50cyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRnZSA9IGcuZWRnZShlLnYsIGUudyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWlsID0gZy5ub2RlKGUudiksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0gZy5ub2RlKGUudyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGVhZC53aWR0aCA9IGQzLnNlbGVjdCgnIycgKyBoZWFkLmN1c3RvbUlkKS5hdHRyKCd3aWR0aCcpO1xuICAgICAgICAgICAgICAgICAgICB0YWlsLndpZHRoID0gZDMuc2VsZWN0KCcjJyArIHRhaWwuY3VzdG9tSWQpLmF0dHIoJ3dpZHRoJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWFkT2JqID0geyB4OiBoZWFkLngsIHk6IGhlYWQueSB9LCB0YWlsT2JqID0geyB4OiB0YWlsLngsIHk6IHRhaWwueSB9O1xuICAgICAgICAgICAgICAgICAgICBoZWFkT2JqLnggLT0gKGhlYWQud2lkdGggLyAyKSArIDI7XG4gICAgICAgICAgICAgICAgICAgIHRhaWxPYmoueCArPSAodGFpbC53aWR0aCAvIDIpICsgMjtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2godGFpbE9iaik7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHsgeDogdGFpbE9iai54ICsgdGFpbC53aWR0aCAvIDgsIHk6IHRhaWxPYmoueSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goeyB4OiBoZWFkT2JqLnggKyBoZWFkLndpZHRoIC8gOCwgeTogaGVhZE9iai55IH0pO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChoZWFkT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY1tBdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5lZGdlLmVkZ2VDYWxjTWV0aG9kXShnLCBlKTtcbiAgICAgICAgfVxuICAgICAgICAvL3Rha2VuIGZyb20gZGFncmUtZDMgc291cmNlIGNvZGUgKG5vdCB0aGUgZXhhY3Qgc2FtZSlcbiAgICAgICAgZnVuY3Rpb24gY2FsY1BvaW50cyhnLCBlKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnRzID0gZ2V0Q2FsY1BvaW50cyhnLCBlKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBvaW50cyk7XG4gICAgICAgICAgICByZXR1cm4gZDMubGluZSgpXG4gICAgICAgICAgICAgICAgLngoKGQ6IGFueSkgPT4geyByZXR1cm4gZC54OyB9KVxuICAgICAgICAgICAgICAgIC55KChkOiBhbnkpID0+IHsgcmV0dXJuIGQueTsgfSlcbiAgICAgICAgICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykocG9pbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdGFrZW4gZnJvbSBkYWdyZS1kMyBzb3VyY2UgY29kZSAobm90IHRoZSBleGFjdCBzYW1lKVxuICAgICAgICBmdW5jdGlvbiBpbnRlcnNlY3RSZWN0KG5vZGUsIHBvaW50KSB7XG4gICAgICAgICAgICBsZXQgeCA9IG5vZGUueCxcbiAgICAgICAgICAgICAgICB5ID0gbm9kZS55LFxuICAgICAgICAgICAgICAgIGR4ID0gcG9pbnQueCAtIHgsXG4gICAgICAgICAgICAgICAgZHkgPSBwb2ludC55IC0geSxcbiAgICAgICAgICAgICAgICB3ID0gK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbm9kZS5jdXN0b21JZCkuZ2V0QXR0cmlidXRlKCd3aWR0aCcpIC8gMixcbiAgICAgICAgICAgICAgICBoID0gK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbm9kZS5jdXN0b21JZCkuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSAvIDIsXG4gICAgICAgICAgICAgICAgc3ggPSAwLFxuICAgICAgICAgICAgICAgIHN5ID0gMDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeSkgKiB3ID4gTWF0aC5hYnMoZHgpICogaCkge1xuICAgICAgICAgICAgICAgIC8vIEludGVyc2VjdGlvbiBpcyB0b3Agb3IgYm90dG9tIG9mIHJlY3QuXG4gICAgICAgICAgICAgICAgaWYgKGR5IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBoID0gLWg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN4ID0gZHkgPT09IDAgPyAwIDogaCAqIGR4IC8gZHk7XG4gICAgICAgICAgICAgICAgc3kgPSBoO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJbnRlcnNlY3Rpb24gaXMgbGVmdCBvciByaWdodCBvZiByZWN0LlxuICAgICAgICAgICAgICAgIGlmIChkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdyA9IC13O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzeCA9IHc7XG4gICAgICAgICAgICAgICAgc3kgPSBkeCA9PT0gMCA/IDAgOiB3ICogZHkgLyBkeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogeCArIHN4LFxuICAgICAgICAgICAgICAgIHk6IHkgKyBzeVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cubm9kZScpLmNhbGwoZDMuZHJhZygpXG4gICAgICAgICAgICAub24oJ3N0YXJ0JywgaGFuZGxlRHJhZ1N0YXJ0ZWQpXG4gICAgICAgICAgICAub24oJ2VuZCcsIGhhbmRsZURyYWdFbmRlZClcbiAgICAgICAgICAgIC5vbignZHJhZycsIGhhbmRsZURyYWdNb3ZlKSlcbiAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgaGFuZGxlTW91c2VPdmVyKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGhhbmRsZU1vdXNlT3V0KTtcblxuICAgICAgICBsZXQgZ2V0U2NhbGUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEgPiBiID8gMSA6IGIgLyBhO1xuICAgICAgICB9XG4gICAgICAgIC8vIENlbnRlciB0aGUgZ3JhcGhcbiAgICAgICAgbGV0IGluaXRpYWxTY2FsZSA9IDAuOTtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdzdmcudy9oOicgKyBzdmcuYXR0cignd2lkdGgnKSArICc6JyArIHN2Zy5hdHRyKCdoZWlnaHQnKSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnZy53L2cuaDonICsgZy5ncmFwaCgpLndpZHRoICsgJzonICsgZy5ncmFwaCgpLmhlaWdodCk7XG4gICAgICAgIGxldCB3c2NhbGUgPSBnZXRTY2FsZShnLmdyYXBoKCkud2lkdGgsIHN2Zy5hdHRyKCd3aWR0aCcpKTtcbiAgICAgICAgbGV0IGhzY2FsZSA9IGdldFNjYWxlKGcuZ3JhcGgoKS5oZWlnaHQsIHN2Zy5hdHRyKCdoZWlnaHQnKSk7XG4gICAgICAgIGxldCBmaW5hbHNjYWxlID0gaW5pdGlhbFNjYWxlICogKHdzY2FsZSA8IGhzY2FsZSA/IHdzY2FsZSA6IGhzY2FsZSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnZmluYWwgU2NhbGU6JyArIGZpbmFsc2NhbGUpO1xuICAgICAgICBmaW5hbHNjYWxlID0gZmluYWxzY2FsZSA+IDIuMiA/IDIuMiA6IGZpbmFsc2NhbGU7XG4gICAgICAgIHN2Zy5jYWxsKHpvb20udHJhbnNmb3JtLCBkMy56b29tSWRlbnRpdHkudHJhbnNsYXRlKCgrc3ZnLmF0dHIoJ3dpZHRoJykgLSBnLmdyYXBoKCkud2lkdGggKiBmaW5hbHNjYWxlKSAvIDIsXG4gICAgICAgICAgICAoK3N2Zy5hdHRyKCdoZWlnaHQnKSAtIGcuZ3JhcGgoKS5oZWlnaHQgKiBmaW5hbHNjYWxlKSAvIDIpLnNjYWxlKGZpbmFsc2NhbGUpKTtcbiAgICAgICAgc3ZnLmF0dHIoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgKiBhcyBkYWdyZUQzIGZyb20gJ2RhZ3JlLWQzJztcclxuaW1wb3J0IHsgQXV0b0Zsb3dDb25zdGFudHMgfSBmcm9tICcuLi9hdXRvZmxvdy5jb25zdGFudHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1dG9GbG93RXhwb3J0IHtcclxuICAgIHB1YmxpYyBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHVibGljIGdyYXBoOiBkYWdyZUQzLmdyYXBobGliLkdyYXBoO1xyXG4gICAgcHVibGljIHNjaGVtYTogYW55O1xyXG4gICAgcHVibGljIG5vZGVfaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbm9kZV93aWR0aDogbnVtYmVyO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBnLCBzY2hlbWE6IGFueSkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBnO1xyXG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xyXG4gICAgICAgIHRoaXMubm9kZV9oZWlnaHQgPSBBdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5ub2RlLmhlaWdodDtcclxuICAgICAgICB0aGlzLm5vZGVfd2lkdGggPSBBdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5ub2RlLndpZHRoO1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhhdC5hZGRFeHBvcnRNZW51KHRoYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkRXhwb3J0TWVudShzZWxmKSB7XHJcbiAgICAgICAgbGV0IG1lbnVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHJvcHVwJyk7XHJcbiAgICAgICAgd2hpbGUgKG1lbnVUYWdzLmxlbmd0aCA+IDApIG1lbnVUYWdzWzBdLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB2YXIgZGl2X2Ryb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRpdl9kcm9wdXAuY2xhc3NMaXN0LmFkZCgnZHJvcHVwJyk7XHJcbiAgICAgICAgZGl2X2Ryb3B1cC5pbm5lckhUTUwgPSBgPGJ1dHRvbiBjbGFzcz1cImRyb3BidG5cIj5FeHBvcnQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcHVwLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJleHBvcnRfdG9fZ2xpZmZ5XCIgaHJlZj1cIiNcIj5HbGlmZnk8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiZXhwb3J0X3RvX3N2Z1wiIGhyZWY9XCIjXCI+U1ZHPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgc2VsZi5jb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2X2Ryb3B1cCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgJiZcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImV4cG9ydF90b19nbGlmZnlcIikpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZ2V0RXhwb3J0R2xpZmZ5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHbGlmZnlTdHJpbmcoKSB7XHJcbiAgICAgICAgbGV0IF9fdGhhdCA9IHRoaXMsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMDtcclxuICAgICAgICBpZiAoQXV0b0Zsb3dDb25zdGFudHMuZGVmYXVsdHMuZXhwb3J0Lm5vZGVTaXplICE9ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICBsZXQgd2hzID0gX190aGF0LmdyYXBoLm5vZGVzKCkubWFwKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5kZSA9IF9fdGhhdC5ncmFwaC5ub2RlKG4pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbmRlLmN1c3RvbUlkKS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgKiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbmRlLmN1c3RvbUlkKS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpICogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgd2lkdGggPSBfLm1lYW5CeSh3aHMsICh3OiBhbnkpID0+IHcud2lkdGgpO1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBfLm1lYW5CeSh3aHMsICh3OiBhbnkpID0+IHcuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5vZGVDb250ZW50ID0gX190aGF0LmdyYXBoLm5vZGVzKCkubWFwKChub2RlLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgbGV0IG5kZSA9IF9fdGhhdC5ncmFwaC5ub2RlKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAoQXV0b0Zsb3dDb25zdGFudHMuZGVmYXVsdHMuZXhwb3J0Lm5vZGVTaXplID09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSArZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBuZGUuY3VzdG9tSWQpLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9ICtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIG5kZS5jdXN0b21JZCkuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZGUuaWQgPSBpZHggKyAxO1xyXG4gICAgICAgICAgICBuZGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgbmRlLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgcmV0dXJuIF9fdGhhdC5nZXRHbGlmZnlOb2RlSnNvblN0cmluZyhfX3RoYXQuZ3JhcGgubm9kZShub2RlKSk7XHJcbiAgICAgICAgfSkuam9pbihcIixcIik7XHJcbiAgICAgICAgbGV0IGVkZ2VDb250ZW50ID0gX190aGF0LmdyYXBoLmVkZ2VzKCkubWFwKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX3RoYXQuZ2V0RWRnZUpzb25TdHJpbmcoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGB7XHJcbiAgICAgICAgICAgIFwiY29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi9nbGlmZnkranNvblwiLFxyXG4gICAgICAgICAgICBcInZlcnNpb25cIjogXCIxLjNcIixcclxuICAgICAgICAgICAgXCJzdGFnZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBcImJhY2tncm91bmRcIjogXCIjRkZGRkZGXCIsXHJcbiAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDU3MCxcclxuICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDE1MSxcclxuICAgICAgICAgICAgICAgIFwibm9kZUluZGV4XCI6IDEwLFxyXG4gICAgICAgICAgICAgICAgXCJhdXRvRml0XCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBcImV4cG9ydEJvcmRlclwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIFwiZ3JpZE9uXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBcInNuYXBUb0dyaWRcIjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIFwiZHJhd2luZ0d1aWRlc09uXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBcInBhZ2VCcmVha3NPblwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIFwicHJpbnRHcmlkT25cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBcInByaW50UGFwZXJcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgIFwicHJpbnRTaHJpbmtUb0ZpdFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIFwicHJpbnRQb3J0cmFpdFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIFwibWF4V2lkdGhcIjogNTAwMCxcclxuICAgICAgICAgICAgICAgIFwibWF4SGVpZ2h0XCI6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICBcInRoZW1lRGF0YVwiOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgXCJpbWFnZUNhY2hlXCI6IHt9LFxyXG4gICAgICAgICAgICAgICAgXCJ2aWV3cG9ydFR5cGVcIjogXCJkZWZhdWx0XCIsXHJcbiAgICAgICAgICAgICAgICBcImZpdEJCXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBcIm1pblwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieFwiOiA4MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ5XCI6IDkwLjVcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIFwibWF4XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4XCI6IDU3MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ5XCI6IDE1MC41XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFwicHJpbnRNb2RlbFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJwYWdlU2l6ZVwiOiBcIkxldHRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicG9ydHJhaXRcIjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBcImZpdFRvT25lUGFnZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlQYWdlQnJlYWtzXCI6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJvYmplY3RzXCI6IFske25vZGVDb250ZW50ICsgKGVkZ2VDb250ZW50ID8gXCIsXCIgKyBlZGdlQ29udGVudCA6IFwiXCIpfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJsYXllcnNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImd1aWRcIjogXCJPTlUxdDl2ZEh3QkhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JkZXJcIjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIkxheWVyIDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWN0aXZlXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxvY2tlZFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmlzaWJsZVwiOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlSW5kZXhcIjogMjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzaGFwZVN0eWxlc1wiOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICBcImxpbmVTdHlsZXNcIjoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0U3R5bGVzXCI6IHt9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJtZXRhZGF0YVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcInVudGl0bGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyZXZpc2lvblwiOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZXhwb3J0Qm9yZGVyXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibG9hZFBvc2l0aW9uXCI6IFwiZGVmYXVsdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGlicmFyaWVzXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb20uZ2xpZmZ5LmxpYnJhcmllcy5iYXNpYy5iYXNpY192MS5kZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYXV0b3NhdmVEaXNhYmxlZFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBcImxhc3RTZXJpYWxpemVkXCI6IDE1OTc4MDg1ODk2MDFcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcImVtYmVkZGVkUmVzb3VyY2VzXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBcImluZGV4XCI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyZXNvdXJjZXNcIjogW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWA7XHJcbiAgICB9XHJcbiAgICBnZXROb2RlVGV4dChub2RlKSB7XHJcbiAgICAgICAgLy9cImh0bWxcIjogXCIke25vZGUubGFiZWwub3V0ZXJIVE1MLnJlcGxhY2UoL1wiL2csIFwiXFxcXFwiXCIpfVwiLFxyXG4gICAgICAgIGxldCBsaW5lMSwgbGluZTI7XHJcbiAgICAgICAgbGluZTEgPSBgPHNwYW4gc3R5bGU9XCJmb250LWZhbWlseTpBcmlhbDtmb250LXNpemU6MTJweDt0ZXh0LWRlY29yYXRpb246bm9uZTtcIj4ke25vZGUuZGF0YS5kZXNjcmlwdGlvblswXX08L3NwYW4+YDtcclxuICAgICAgICBsaW5lMiA9IG5vZGUuZGF0YS5kZXNjcmlwdGlvblsxXSAmJiBBdXRvRmxvd0NvbnN0YW50cy5kZWZhdWx0cy5ub2RlLnNob3dOb2RlRGVzY3JpcHRpb24gP1xyXG4gICAgICAgICAgICBgPGJyLz48c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5OkFyaWFsO2ZvbnQtc2l6ZToxMHB4O3RleHQtZGVjb3JhdGlvbjpub25lO1wiPiR7bm9kZS5kYXRhLmRlc2NyaXB0aW9uWzFdfTwvc3Bhbj5gXHJcbiAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgcmV0dXJuIGA8cCBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO1wiPiR7bGluZTF9ICR7bGluZTJ9PC9wPmA7XHJcbiAgICB9XHJcbiAgICBnZXROb2RlVXJsKG5vZGUpIHtcclxuICAgICAgICBsZXQgcmV0ID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5zY2hlbWEuTm9kZVVybCAmJiB0aGlzLnNjaGVtYS5Ob2RlVXJsLmNvbHVtblxyXG4gICAgICAgICAgICAmJiBub2RlLmRhdGEuZGF0YVt0aGlzLnNjaGVtYS5Ob2RlVXJsLmNvbHVtbl0pIHtcclxuICAgICAgICAgICAgcmV0ID0gYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIFwieFwiOiAwLFxyXG4gICAgICAgICAgICAgIFwieVwiOiAwLFxyXG4gICAgICAgICAgICAgIFwicm90YXRpb25cIjogMCxcclxuICAgICAgICAgICAgICBcImlkXCI6ICR7MjAwMDAgKyBub2RlLmRhdGEuaWR4fSxcclxuICAgICAgICAgICAgICBcInVpZFwiOiBudWxsLFxyXG4gICAgICAgICAgICAgIFwib3JkZXJcIjogMjAsXHJcbiAgICAgICAgICAgICAgXCJsb2NrQXNwZWN0UmF0aW9cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgXCJsb2NrU2hhcGVcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgXCJncmFwaGljXCI6IHtcclxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIkxpbmtcIixcclxuICAgICAgICAgICAgICAgIFwiTGlua1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgIFwiaHJlZlwiOiBcIiR7bm9kZS5kYXRhLmRhdGFbdGhpcy5zY2hlbWEuTm9kZVVybC5jb2x1bW5dfVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInJlbmRlckljb25cIjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXCJoaWRkZW5cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgXCJsYXllcklkXCI6IFwiT05VMXQ5dmRId0JIXCIsXHJcbiAgICAgICAgICAgICAgXCJmbGlwSG9yaXpvbnRhbFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICBcImZsaXBWZXJ0aWNhbFwiOiBmYWxzZVxyXG4gICAgICAgICAgICB9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFZGdlSnNvblN0cmluZyhlZGdlKSB7XHJcbiAgICAgICAgaWYgKCFlZGdlKSByZXR1cm4gXCJcIjtcclxuICAgICAgICBsZXQgdiA9IHRoaXMuZ3JhcGgubm9kZShlZGdlLnYpLCB3ID0gdGhpcy5ncmFwaC5ub2RlKGVkZ2Uudyk7XHJcbiAgICAgICAgcmV0dXJuIGB7XHJcbiAgICAgICAgICAgIFwieFwiOiAzMDYsXHJcbiAgICAgICAgICAgIFwieVwiOiA4MixcclxuICAgICAgICAgICAgXCJyb3RhdGlvblwiOiAwLFxyXG4gICAgICAgICAgICBcImlkXCI6ICR7di5kYXRhLmlkeH0sXHJcbiAgICAgICAgICAgIFwid2lkdGhcIjogNTUsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDI5LFxyXG4gICAgICAgICAgICBcInVpZFwiOiBcImNvbS5nbGlmZnkuc2hhcGUuYmFzaWMuYmFzaWNfdjEuZGVmYXVsdC5saW5lXCIsXHJcbiAgICAgICAgICAgIFwib3JkZXJcIjogMjcsXHJcbiAgICAgICAgICAgIFwibG9ja0FzcGVjdFJhdGlvXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImxvY2tTaGFwZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJjb25zdHJhaW50c1wiOiB7XHJcbiAgICAgICAgICAgICAgXCJjb25zdHJhaW50c1wiOiBbXSxcclxuICAgICAgICAgICAgICBcInN0YXJ0Q29uc3RyYWludFwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJTdGFydFBvc2l0aW9uQ29uc3RyYWludFwiLFxyXG4gICAgICAgICAgICAgICAgXCJTdGFydFBvc2l0aW9uQ29uc3RyYWludFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgIFwibm9kZUlkXCI6ICR7di5kYXRhLmlkeH0sXHJcbiAgICAgICAgICAgICAgICAgIFwicHlcIjogMC41LFxyXG4gICAgICAgICAgICAgICAgICBcInB4XCI6IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIFwiZW5kQ29uc3RyYWludFwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJFbmRQb3NpdGlvbkNvbnN0cmFpbnRcIixcclxuICAgICAgICAgICAgICAgIFwiRW5kUG9zaXRpb25Db25zdHJhaW50XCI6IHtcclxuICAgICAgICAgICAgICAgICAgXCJub2RlSWRcIjogJHt3LmRhdGEuaWR4fSxcclxuICAgICAgICAgICAgICAgICAgXCJweVwiOiAwLjcwNzEwNjc4MTE4NjU0NzUsXHJcbiAgICAgICAgICAgICAgICAgIFwicHhcIjogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJncmFwaGljXCI6IHtcclxuICAgICAgICAgICAgICBcInR5cGVcIjogXCJMaW5lXCIsXHJcbiAgICAgICAgICAgICAgXCJMaW5lXCI6IHtcclxuICAgICAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogMixcclxuICAgICAgICAgICAgICAgIFwic3Ryb2tlQ29sb3JcIjogXCIjMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICBcImZpbGxDb2xvclwiOiBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIFwiZGFzaFN0eWxlXCI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBcImhvcFR5cGVcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgIFwic3RhcnRBcnJvd1wiOiAwLFxyXG4gICAgICAgICAgICAgICAgXCJlbmRBcnJvd1wiOiAyLFxyXG4gICAgICAgICAgICAgICAgXCJzdGFydEFycm93Um90YXRpb25cIjogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgICAgICBcImVuZEFycm93Um90YXRpb25cIjogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgICAgICBcImludGVycG9sYXRpb25UeXBlXCI6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICBcImNvcm5lclJhZGl1c1wiOiAxMCxcclxuICAgICAgICAgICAgICAgIFwiY29udHJvbFBhdGhcIjogW10sXHJcbiAgICAgICAgICAgICAgICBcImxvY2tTZWdtZW50c1wiOiB7fSxcclxuICAgICAgICAgICAgICAgIFwib3J0aG9cIjogdHJ1ZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXCJsaW5rTWFwXCI6IFtdLFxyXG4gICAgICAgICAgICBcImhpZGRlblwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJsYXllcklkXCI6IFwiT05VMXQ5dmRId0JIXCIsXHJcbiAgICAgICAgICAgIFwiZmxpcEhvcml6b250YWxcIjogZmFsc2UsXHJcbiAgICAgICAgICAgIFwiZmxpcFZlcnRpY2FsXCI6IGZhbHNlXHJcbiAgICAgICAgICB9YDtcclxuICAgIH1cclxuICAgIGdldEdsaWZmeU5vZGVKc29uU3RyaW5nKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gYHtcclxuICAgICAgICAgICAgXCJ4XCI6ICR7bm9kZS54fSxcclxuICAgICAgICAgICAgXCJ5XCI6ICR7bm9kZS55fSxcclxuICAgICAgICAgICAgXCJyb3RhdGlvblwiOiAwLjAsXHJcbiAgICAgICAgICAgIFwiaWRcIjogJHtub2RlLmRhdGEuaWR4fSxcclxuICAgICAgICAgICAgXCJ3aWR0aFwiOiAke25vZGUud2lkdGggPCB0aGlzLm5vZGVfd2lkdGggPyB0aGlzLm5vZGVfd2lkdGggOiBub2RlLndpZHRofSxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogJHtub2RlLmhlaWdodCA8IHRoaXMubm9kZV9oZWlnaHQgPyB0aGlzLm5vZGVfaGVpZ2h0IDogbm9kZS5oZWlnaHR9LFxyXG4gICAgICAgICAgICBcInVpZFwiOlwiY29tLmdsaWZmeS5zaGFwZS5iYXNpYy5iYXNpY192MS5kZWZhdWx0LnJlY3RhbmdsZVwiLFxyXG4gICAgICAgICAgICBcIm9yZGVyXCI6IDIsXHJcbiAgICAgICAgICAgIFwibG9ja0FzcGVjdFJhdGlvXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImxvY2tTaGFwZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJncmFwaGljXCI6e1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6XCJTaGFwZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJTaGFwZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aWRcIjogXCJjb20uZ2xpZmZ5LnN0ZW5jaWwucmVjdGFuZ2xlLmJhc2ljX3YxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlV2lkdGhcIjogMi4wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzMzMzMzM1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZpbGxDb2xvclwiOiBcIiNGRkZGRkZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJncmFkaWVudFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXNoU3R5bGVcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkcm9wU2hhZG93XCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0YXRlXCI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib3BhY2l0eVwiOiAxLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2hhZG93WFwiOiAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2hhZG93WVwiOiAwLjBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJsaW5rTWFwXCI6W10sXHJcbiAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6W1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4XCI6IDIuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ5XCI6IDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyb3RhdGlvblwiOiAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjokezEwMDAwICsgbm9kZS5kYXRhLmlkeH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogJHtub2RlLndpZHRoIC0gNH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6ICR7bm9kZS5oZWlnaHQgLSA0fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ1aWRcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmRlclwiOiA3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxvY2tBc3BlY3RSYXRpb1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsb2NrU2hhcGVcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ3JhcGhpY1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJUZXh0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRleHRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3ZlcmZsb3dcIjogXCJub25lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nVG9wXCI6IDgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYWRkaW5nUmlnaHRcIjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZGRpbmdCb3R0b21cIjogOCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZGRpbmdMZWZ0XCI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRlclBhZGRpbmdUb3BcIjogNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm91dGVyUGFkZGluZ1JpZ2h0XCI6IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRlclBhZGRpbmdCb3R0b21cIjogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm91dGVyUGFkZGluZ0xlZnRcIjogNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaXhlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGluZVRWYWx1ZVwiOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGluZVBlcnBWYWx1ZVwiOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FyZGluYWxpdHlUeXBlXCI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJodG1sXCI6IFwiJHt0aGlzLmdldE5vZGVUZXh0KG5vZGUpLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKX1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJhd0h0bWxcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aWRcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbGlnblwiOiBcIm1pZGRsZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidnBvc2l0aW9uXCI6IFwibm9uZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaHBvc2l0aW9uXCI6IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJoaWRkZW5cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGF5ZXJJZFwiOiBcIk9OVTF0OXZkSHdCSFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZsaXBIb3Jpem9udGFsXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZsaXBWZXJ0aWNhbFwiOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0ke3RoaXMuZ2V0Tm9kZVVybChub2RlKX1cclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFwiaGlkZGVuXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICBcImxheWVySWRcIjogXCJPTlUxdDl2ZEh3QkhcIixcclxuICAgICAgICAgICAgXCJmbGlwSG9yaXpvbnRhbFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgXCJmbGlwVmVydGljYWxcIjogZmFsc2VcclxuICAgICAgICAgICAgfWA7XHJcbiAgICB9XHJcblxyXG4gICAgZG93bmxvYWRKc29uKGNvbnRlbnQsIGZpbGVOYW1lLCBjb250ZW50VHlwZSkge1xyXG4gICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgIHZhciBmaWxlID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7IHR5cGU6IGNvbnRlbnRUeXBlIHx8ICd0ZXh0L3BsYWluJyB9KTtcclxuICAgICAgICBhLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gICAgICAgIGEuZG93bmxvYWQgPSBmaWxlTmFtZTtcclxuICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICB9XHJcbiAgICBnZXRFeHBvcnRHbGlmZnkoKSB7XHJcbiAgICAgICAgdGhpcy5kb3dubG9hZEpzb24odGhpcy5nZXRHbGlmZnlTdHJpbmcoKSwgXCJnbGlmZnkuZXhwb3J0Lmpzb24uZ2xpZmZ5XCIsIG51bGwpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXV0b0Zsb3cgfSBmcm9tICcuL2F1dG9mbG93JztcblxubGV0IGFmID0gbmV3IEF1dG9GbG93KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXRvZmxvdy1jaGFydC1kaXYnKSwgbnVsbCk7XG5sZXQgZGF0YTEgPSBbXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiAxLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJBMSNBQVwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIlRoaXMgaXMgYSBsb25nIGRlc2NyaXB0aW9uXCIsXG4gICAgICAgIFwieFByb2Nlc3NJZFwiOiBcInByb2NfYVwiLFxuICAgICAgICBcInhQcm9jZXNzXCI6IFwicHJvY19hXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IDEwMCxcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiQTEwMCNBQVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkFcIixcbiAgICAgICAgXCJ4Tm9kZU1lYXN1cmVcIjogOTAsXG4gICAgICAgIFwieEVkZ2VNZWFzdXJlXCI6IDQsXG4gICAgICAgIFwieE5vZGVMaW5rXCI6IFwiaHR0cDovL3d3dy5nb29nbGUuY29tXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogMixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiQTIjQUFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBXCIsXG4gICAgICAgIFwieFByb2Nlc3NJZFwiOiBcInByb2NfYVwiLFxuICAgICAgICBcInhQcm9jZXNzXCI6IFwicHJvY19hXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IDEwMSxcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiQTEwMSNBQVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkFcIixcbiAgICAgICAgXCJ4Tm9kZU1lYXN1cmVcIjogODAsXG4gICAgICAgIFwieEVkZ2VNZWFzdXJlXCI6IDIsXG4gICAgICAgIFwieE5vZGVMaW5rXCI6IFwiaHR0cDovL3d3dy5nb29nbGUuY29tXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogMTAwLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJBMTAwI0FBXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQVwiLFxuICAgICAgICBcInhQcm9jZXNzSWRcIjogXCJwcm9jX2JcIixcbiAgICAgICAgXCJ4UHJvY2Vzc1wiOiBcInByb2NfYlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiAxMDEsXG4gICAgICAgIFwieFRhcmdldFwiOiBcIkExMDEjQUFcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJBXCIsXG4gICAgICAgIFwieE5vZGVNZWFzdXJlXCI6IDcwLFxuICAgICAgICBcInhFZGdlTWVhc3VyZVwiOiAzLFxuICAgICAgICBcInhOb2RlTGlua1wiOiBcImh0dHA6Ly93d3cudHdpdHRlci5jb21cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiAxMDEsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcIkExMDEjQUFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBXCIsXG4gICAgICAgIFwieFByb2Nlc3NJZFwiOiBcInByb2NfY1wiLFxuICAgICAgICBcInhQcm9jZXNzXCI6IFwicHJvY19jXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IDEwMixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiQjEwMiNBQVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkJcIixcbiAgICAgICAgXCJ4Tm9kZU1lYXN1cmVcIjogNDAsXG4gICAgICAgIFwieEVkZ2VNZWFzdXJlXCI6IDFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogMTAyLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJCMTAyI0FBXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQlwiLFxuICAgICAgICBcInhQcm9jZXNzSWRcIjogXCJwcm9jX2RcIixcbiAgICAgICAgXCJ4UHJvY2Vzc1wiOiBcInByb2NfZFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiAxMDMsXG4gICAgICAgIFwieFRhcmdldFwiOiBcIkIxMDMjQUFcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJCXCIsXG4gICAgICAgIFwieE5vZGVNZWFzdXJlXCI6IDMsXG4gICAgICAgIFwieEVkZ2VNZWFzdXJlXCI6IDJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogMTA0LFxuICAgICAgICBcInhTb3VyY2VcIjogXCJCMTA0I0FBXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQlwiLFxuICAgICAgICBcInhQcm9jZXNzSWRcIjogXCJwcm9jX2RcIixcbiAgICAgICAgXCJ4UHJvY2Vzc1wiOiBcInByb2NfZFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiAxMDMsXG4gICAgICAgIFwieFRhcmdldFwiOiBcIkIxMDMjQUFcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJCXCIsXG4gICAgICAgIFwieE5vZGVNZWFzdXJlXCI6IDgsXG4gICAgICAgIFwieEVkZ2VNZWFzdXJlXCI6IDEsXG4gICAgICAgIFwieE5vZGVMaW5rXCI6IFwiaHR0cDovL3d3dy5mYWNlYm9vay5jb21cIlxuICAgIH1cbl07XG5sZXQgZGF0YTIgPSBbXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjFcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMYXZhc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMTZcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIyNlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkx5Y29zXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiODlcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjNcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJCb3JsYW5kXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5MFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjIwXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJGaW5hbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjRcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNaWNyb3NvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjM2XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiOTNcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJDaGFtaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMjFcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIxNFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIllhaG9vXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIyOVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjMxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJBbHRhdmlzdGFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjdcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGllc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIlNpYmVsaXVzXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5MlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjQyXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJGaW5hbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjhcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1pY3Jvc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMjFcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIxOFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiU2liZWxpdXNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjlcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1pY3Jvc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTVcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI0N1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQWx0YXZpc3RhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIxMFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQXBwbGUgU3lzdGVtc1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNzZcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNvdXBzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTHljb3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjExXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI4MlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjU2XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJDaGFtaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMTJcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwibm9vZGxlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNTZcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI2NlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzYW5kd2ljaGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiR29vZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIxM1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMTRcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzM1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzYWxhZHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNaWNyb3NvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjE0XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNaWNyb3NvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQwXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMzZcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMeWNvc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMTVcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJHb29nbGVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQzXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNDRcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQm9ybGFuZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMTZcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDaGFtaVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNDNcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIxMlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMTdcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIlNpYmVsaXVzXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI1OVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjUyXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMThcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFkb2JlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIyNlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjQxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImRlc3NlcnRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWljcm9zb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIxOVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwaWVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiRmluYWxlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI0MVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjY2XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbmR3aWNoZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjIwXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIlNpYmVsaXVzXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI2NFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjI0XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjIxXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDYWtld2Fsa1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMjVcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzOFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkNoYW1pXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIyMlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFkb2JlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIzNlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjYzXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjIzXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJHb29nbGVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjI3XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNTdcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiR29vZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIyNFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzYW5kd2ljaGVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTGF2YXNvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQyXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNzhcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiWWFob29cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjI1XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5NVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjc0XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMYXZhc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMjZcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiODBcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI2M1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiR29vZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIyN1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1hY3JvbWVkaWFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQwXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNzZcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNaWNyb3NvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjI4XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWljcm9zb2Z0XCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIxN1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjMxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJBbHRhdmlzdGFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjI5XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMYXZhc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNTdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIyNVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzYW5kd2ljaGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTGF2YXNvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjMwXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBbHRhdmlzdGFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjM5XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMzFcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkx5Y29zXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI4MFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjk2XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJBbHRhdmlzdGFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjMyXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1pY3Jvc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNThcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4MlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkFwcGxlIFN5c3RlbXNcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjMzXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBZG9iZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNzdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5MlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIlNpYmVsaXVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIzNFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNDhcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4NlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQXBwbGUgU3lzdGVtc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMzVcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMeWNvc1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTVcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNaWNyb3NvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjM2XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDYWtld2Fsa1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMjlcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI0MVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMzdcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDaGFtaVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMzdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI3XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiWWFob29cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjM4XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjM5XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiMzlcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFkb2JlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI4NVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjc0XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMYXZhc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNDBcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNaWNyb3NvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQ1XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMjhcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNYWNyb21lZGlhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI0MVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiRmluYWxlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIzOVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjY1XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNaWNyb3NvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjQyXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJGaW5hbGVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjIyXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMjNcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJBZG9iZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNDNcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQm9ybGFuZFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiM1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjIxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIlNpYmVsaXVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI0NFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzYWxhZHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDaGFtaVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTBcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5M1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkNoYW1pXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI0NVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQ2FrZXdhbGtcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjgzXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNTdcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiR29vZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI0NlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQWx0YXZpc3RhXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIzNFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjgwXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJGaW5hbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjQ3XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNvdXBzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQWRvYmVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjkwXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNjlcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMYXZhc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNDhcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMeWNvc1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNjhcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI1M1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTHljb3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjQ5XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFsdGF2aXN0YVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNDdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4N1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNTBcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJTaWJlbGl1c1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNDdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI0MVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNTFcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWljcm9zb2Z0XCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI3M1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjI3XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbmR3aWNoZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjUyXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMeWNvc1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMjBcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5MFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkxhdmFzb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI1M1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1pY3Jvc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiODJcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI3XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiWWFob29cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjU0XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbmR3aWNoZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJZYWhvb1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNjVcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5OFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkJvcmxhbmRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjU1XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDaGFtaVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMTJcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzM1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzYWxhZHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNaWNyb3NvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjU2XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMzdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzNVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNTdcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJCb3JsYW5kXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI0NVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjRcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJCb3JsYW5kXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI1OFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQWRvYmVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjQ5XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkJvcmxhbmRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjU5XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTRcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIzNlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzb3Vwc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkx5Y29zXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI2MFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwaWVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTGF2YXNvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjYxXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMzVcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiY2VyZWFsc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1hY3JvbWVkaWFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjYxXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNYWNyb21lZGlhXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI1NFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjIxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIlNpYmVsaXVzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI2MlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI1OFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjIyXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJDYWtld2Fsa1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNjNcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBbHRhdmlzdGFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjE2XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNjlcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMYXZhc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNjRcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiY2VyZWFsc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1pY3Jvc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMzdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI2OVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkxhdmFzb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI2NVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzYW5kd2ljaGVzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCIyOVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjY4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNYWNyb21lZGlhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI2NlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzYWxhZHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNaWNyb3NvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjk0XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiOVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWljcm9zb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI2N1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMTNcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI2NFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkFsdGF2aXN0YVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNjhcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMYXZhc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiN1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjMzXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNjlcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGllc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIllhaG9vXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI2MlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjcwXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJZYWhvb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzBcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBcHBsZSBTeXN0ZW1zXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI1N1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjQxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImRlc3NlcnRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWljcm9zb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI3MVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1hY3JvbWVkaWFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjkxXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiODlcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjcyXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcIm5vb2RsZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNYWNyb21lZGlhXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI0MlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjMzXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNhbGFkc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzNcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiY2VyZWFsc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkxhdmFzb2Z0XCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI2M1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjE0XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiR29vZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI3NFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIk1hY3JvbWVkaWFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjM3XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMjdcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzVcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJNaWNyb3NvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjYzXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMTAwXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcImRlc3NlcnRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQm9ybGFuZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzZcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkZpbmFsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTlcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI2OFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzZWFmb29kXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTWFjcm9tZWRpYVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzdcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiWWFob29cIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjU2XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMjVcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkxhdmFzb2Z0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI3OFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkZpbmFsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOVwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjMyXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMeWNvc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiNzlcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkZpbmFsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOTdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI0OVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkx5Y29zXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI4MFwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIllhaG9vXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI3OFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjU4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQm9ybGFuZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiODFcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBcHBsZSBTeXN0ZW1zXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5NlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjZcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1hY3JvbWVkaWFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjgyXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI0OFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjg4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQWRvYmVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjgzXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJMYXZhc29mdFwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiOThcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4M1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiODRcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwicGllc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFsdGF2aXN0YVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNTNcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJTaWJlbGl1c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiODVcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwibm9vZGxlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFwcGxlIFN5c3RlbXNcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIyNVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJzYW5kd2ljaGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiTGF2YXNvZnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjg2XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiR29vZ2xlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI5MFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjY4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNYWNyb21lZGlhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI4N1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkFkb2JlXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI2NFwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjE4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNlYWZvb2RcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJTaWJlbGl1c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiODhcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJHb29nbGVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjM1XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMTZcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwicGFzdGFcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJHb29nbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjg5XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInN0ZXdzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTGF2YXNvZnRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjg1XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNDVcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2FsYWRzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQ2hhbWlcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjkwXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInNvdXBzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiQ2FrZXdhbGtcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjI0XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiNVwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1pY3Jvc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiOTFcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJTaWJlbGl1c1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNTlcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI4N1wiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkdvb2dsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiOTJcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwiZGVzc2VydHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJDaGFtaVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiODdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCIyOFwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1hY3JvbWVkaWFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjkzXCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcImRlc3NlcnRzXCIsXG4gICAgICAgIFwieFNvdXJjZUdyb3VwXCI6IFwiTWljcm9zb2Z0XCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI4NlwiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjQ4XCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInNvdXBzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQWRvYmVcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjk0XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcInBpZXNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJZYWhvb1wiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiMTFcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI3MlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJwYXN0YVwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIk1hY3JvbWVkaWFcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBcInhTb3VyY2VJZFwiOiBcIjk1XCIsXG4gICAgICAgIFwieFNvdXJjZVwiOiBcImNlcmVhbHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBbHRhdmlzdGFcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjgyXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMzlcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJNYWNyb21lZGlhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI5NlwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzYWxhZHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJGaW5hbGVcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjJcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI0MlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJub29kbGVzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiRmluYWxlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI5N1wiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJzdGV3c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkJvcmxhbmRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjM4XCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiOTBcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic3Rld3NcIixcbiAgICAgICAgXCJ4VGFyZ2V0R3JvdXBcIjogXCJMYXZhc29mdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwieFNvdXJjZUlkXCI6IFwiOThcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic2FuZHdpY2hlc1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkdvb2dsZVwiLFxuICAgICAgICBcIk5vZGVNZWFzdXJlXCI6IFwiNjdcIixcbiAgICAgICAgXCJ4VGFyZ2V0SWRcIjogXCI5NlwiLFxuICAgICAgICBcInhUYXJnZXRcIjogXCJjZXJlYWxzXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiQWx0YXZpc3RhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCI5OVwiLFxuICAgICAgICBcInhTb3VyY2VcIjogXCJkZXNzZXJ0c1wiLFxuICAgICAgICBcInhTb3VyY2VHcm91cFwiOiBcIkJvcmxhbmRcIixcbiAgICAgICAgXCJOb2RlTWVhc3VyZVwiOiBcIjIxXCIsXG4gICAgICAgIFwieFRhcmdldElkXCI6IFwiMjJcIixcbiAgICAgICAgXCJ4VGFyZ2V0XCI6IFwic2VhZm9vZFwiLFxuICAgICAgICBcInhUYXJnZXRHcm91cFwiOiBcIkNha2V3YWxrXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ4U291cmNlSWRcIjogXCIxMDBcIixcbiAgICAgICAgXCJ4U291cmNlXCI6IFwic291cHNcIixcbiAgICAgICAgXCJ4U291cmNlR3JvdXBcIjogXCJBcHBsZSBTeXN0ZW1zXCIsXG4gICAgICAgIFwiTm9kZU1lYXN1cmVcIjogXCI4N1wiLFxuICAgICAgICBcInhUYXJnZXRJZFwiOiBcIjUxXCIsXG4gICAgICAgIFwieFRhcmdldFwiOiBcInBhc3RhXCIsXG4gICAgICAgIFwieFRhcmdldEdyb3VwXCI6IFwiU2liZWxpdXNcIlxuICAgIH1cbl07XG5sZXQgZGF0YSA9IGRhdGExO1xuXG5hZi51cGRhdGUoZGF0YSxcbiAgICB7XG4gICAgICAgIFNvdXJjZUlkOiB7IGNvbHVtbjogJ3hTb3VyY2UnLCByZWY6ICd4U291cmNlJyB9XG4gICAgICAgICwgU291cmNlTmFtZTogeyBjb2x1bW46ICd4U291cmNlJywgcmVmOiAneFNvdXJjZScgfVxuICAgICAgICAsIFNvdXJjZU5hbWUyOiB7IGNvbHVtbjogJ3hTb3VyY2VHcm91cCcsIHJlZjogJ3hTb3VyY2VHcm91cCcgfVxuICAgICAgICAsIFRhcmdldElkOiB7IGNvbHVtbjogJ3hUYXJnZXQnLCByZWY6ICd4VGFyZ2V0JyB9XG4gICAgICAgICwgVGFyZ2V0TmFtZTogeyBjb2x1bW46ICd4VGFyZ2V0JywgcmVmOiAneFRhcmdldCcgfVxuICAgICAgICAsIFRhcmdldE5hbWUyOiB7IGNvbHVtbjogJ3hUYXJnZXRHcm91cCcsIHJlZjogJ3hUYXJnZXRHcm91cCcgfVxuICAgICAgICAsIFByb2Nlc3M6IHsgY29sdW1uOiBudWxsLCByZWY6IG51bGwgfVxuICAgICAgICAsIE5vZGVUeXBlOiB7IGNvbHVtbjogbnVsbCwgcmVmOiBudWxsIH1cbiAgICAgICAgLy8gLCBOb2RlTWVhc3VyZTogeyBjb2x1bW46IG51bGwsIHJlZjogbnVsbCB9XG4gICAgICAgICwgU291cmNlTWVhc3VyZTogeyBjb2x1bW46ICd4Tm9kZU1lYXN1cmUnLCByZWY6ICd4Tm9kZU1lYXN1cmUnIH1cbiAgICAgICAgLCBUYXJnZXRNZWFzdXJlOiB7IGNvbHVtbjogbnVsbCwgcmVmOiBudWxsIH1cbiAgICAgICAgLCBFZGdlTWVhc3VyZTogeyBjb2x1bW46ICd4RWRnZU1lYXN1cmUnLCByZWY6ICd4RWRnZU1lYXN1cmUnIH1cbiAgICAgICAgLCBOb2RlVXJsOiB7IGNvbHVtbjogJ3hOb2RlTGluaycsIHJlZjogJ3hOb2RlTGluaycgfVxuICAgIH0pOyIsImltcG9ydCB7IEF1dG9GbG93Q29uc3RhbnRzIH0gZnJvbSAnLi4vYXV0b2Zsb3cuY29uc3RhbnRzJztcbmltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSAnLi4vYXV0b2Zsb3cuZGVidWdnZXInO1xuaW1wb3J0IHsgSUVkZ2VWaWV3TW9kZWwsIElOb2RlVmlld01vZGVsLCBJQXV0b0Zsb3dEYXRhVmlld01vZGVsIH0gZnJvbSBcIi4vSVZpZXdNb2RlbFwiO1xuXG5leHBvcnQgY2xhc3MgRGF0YU1hcHBlciB7XG4gICAgcHVibGljIHBiaU9wdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgZ3JhcGhPcHRpb25zOiBhbnk7XG4gICAgcHVibGljIHRvdGFsTm9kZUNvdW50OiBudW1iZXI7XG4gICAgcHVibGljIHRvdGFsRWRnZUNvdW50OiBudW1iZXI7XG4gICAgcHVibGljIGVkZ2VzOiBJRWRnZVZpZXdNb2RlbFtdO1xuICAgIHB1YmxpYyBub2RlczogSU5vZGVWaWV3TW9kZWxbXTtcbiAgICBwdWJsaWMgbG9nZ2VyOiBEZWJ1Z2dlcjtcbiAgICBwdWJsaWMgc2NoZW1hOiBhbnk7XG4gICAgcHVibGljIENPTE9SX1NDSEVNQSA9IHsgMTogJyNmZmQ0N2YnLCAyOiAnI2EwYmM3YScsIDM6ICcjNjRkZmRmJywgNDogJyNiOGYyZTYnLCA1OiAnI2UwZmJmYycsIDA6ICcjZGRkJyB9XG5cbiAgICBjb25zdHJ1Y3RvcihwYmlPcHRpb25zLCBncmFwaE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYmlPcHRpb25zID0gcGJpT3B0aW9ucztcbiAgICAgICAgdGhpcy5ncmFwaE9wdGlvbnMgPSBncmFwaE9wdGlvbnM7XG4gICAgICAgIHRoaXMudG90YWxOb2RlQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsRWRnZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBuZXcgRGVidWdnZXIoQXV0b0Zsb3dDb25zdGFudHMuZGVidWdFbmFibGVkKTtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBudWxsO1xuICAgIH1cblxuXG4gICAgZ2V0VG90YWxOb2RlQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsTm9kZUNvdW50O1xuICAgIH1cbiAgICBnZXRUb3RhbEVkZ2VDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWxFZGdlQ291bnQ7XG4gICAgfVxuXG4gICAgcmVwbGFjZVNwZWNpYWxDaGFyKHMsIHQpIHsgcmV0dXJuIHMucmVwbGFjZSgvW2AgfiFAIyQlXiYqKClffCtcXC09Pzs6J1wiLC48Plxce1xcfVxcW1xcXVxcXFxcXC9dL2dpLCB0IHx8ICctJykudG9Mb3dlckNhc2UoKSB9O1xuICAgIGlkaWZ5KHMpIHsgcmV0dXJuIHRoaXMucmVwbGFjZVNwZWNpYWxDaGFyKCcnICsgcywgJ18tXycpOyB9XG5cbiAgICBnZXRDb2xvcih0eXBlKSB7IHJldHVybiB0aGlzLkNPTE9SX1NDSEVNQVt0eXBlIHx8IDBdOyB9XG5cbiAgICBmaW5kTm9kZShub2RlcywgdXVpZCkgeyByZXR1cm4gbm9kZXNbdXVpZF07IH1cbiAgICBnZXROb2RlTGFiZWwodXVpZCwgcm93LCBzY2hlbWEpIHsgcmV0dXJuIHV1aWQ7IH1cbiAgICBnZXROb2RlTWVhc3VyZShyb3csIGNvbHVtbikgeyByZXR1cm4gcm93W2NvbHVtbl07IH1cbiAgICBnZXROb2RlRWxlbWVudCh1dWlkLCByb3csIGNvbHVtbnMpIHtcbiAgICAgICAgbGV0IG5hbWVDb2wgPSBjb2x1bW5zWydOYW1lJ10sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbkNvbCA9IGNvbHVtbnNbJ0Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICBtZWFzdXJlQ29sID0gY29sdW1uc1snTWVhc3VyZSddLFxuICAgICAgICAgICAgdXJsQ29sID0gY29sdW1uc1snVXJsJ10sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IFtdO1xuICAgICAgICBsZXQgbm9kZUJvZHlFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG5vZGVCb2R5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9kZS1ib2R5XCIpO1xuICAgICAgICBub2RlQm9keUVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLmdyYXBoT3B0aW9ucy5ub2RlLndpZHRoICsgXCJweFwiXG4gICAgICAgIG5vZGVCb2R5RWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSB0aGlzLmdyYXBoT3B0aW9ucy5ub2RlLmhlaWdodCArIFwicHhcIlxuXG4gICAgICAgIGxldCBub2RlQ29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBub2RlQ29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vZGUtY29udGVudFwiKTtcblxuICAgICAgICBpZiAoQXV0b0Zsb3dDb25zdGFudHMuZGVmYXVsdHMuZmVhdHVyZXMucHJvRmVhdHVyZXMubm9kZVVybFxuICAgICAgICAgICAgJiYgdGhpcy5ncmFwaE9wdGlvbnMubm9kZS5zaG93Tm9kZVVybFxuICAgICAgICAgICAgJiYgdXJsQ29sXG4gICAgICAgICAgICAmJiB1cmxDb2wuY29sdW1uXG4gICAgICAgICAgICAmJiByb3dbdXJsQ29sLmNvbHVtbl0pIHtcbiAgICAgICAgICAgIGxldCBub2RlVXJsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgbm9kZVVybEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbm9kZS1yZWYtbGluaycpO1xuICAgICAgICAgICAgbm9kZVVybEVsZW1lbnQudGFyZ2V0ID0gXCJfYmxhbmtcIjtcbiAgICAgICAgICAgIG5vZGVVcmxFbGVtZW50LmhyZWYgPSByb3dbdXJsQ29sLmNvbHVtbl07XG4gICAgICAgICAgICBub2RlQ29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZVVybEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgbGFiZWxFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJvd1tuYW1lQ29sLmNvbHVtbl0gfHwgdXVpZCkpO1xuICAgICAgICBsYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vZGUtY29udGVudC1sYWJlbFwiKTtcbiAgICAgICAgbm9kZUNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGxhYmVsRWxlbWVudCk7XG4gICAgICAgIGRlc2NyaXB0aW9uLnB1c2gocm93W25hbWVDb2wuY29sdW1uXSB8fCB1dWlkKTtcblxuICAgICAgICBpZiAodGhpcy5ncmFwaE9wdGlvbnMubm9kZS5zaG93Tm9kZURlc2NyaXB0aW9uXG4gICAgICAgICAgICAmJiBkZXNjcmlwdGlvbkNvbFxuICAgICAgICAgICAgJiYgZGVzY3JpcHRpb25Db2wuY29sdW1uXG4gICAgICAgICAgICAmJiByb3dbZGVzY3JpcHRpb25Db2wuY29sdW1uXSkge1xuICAgICAgICAgICAgbGV0IGRlc2NyaXB0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocm93W2Rlc2NyaXB0aW9uQ29sLmNvbHVtbl0pKTtcbiAgICAgICAgICAgIC8vIGRlc2NyaXB0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh1dWlkKSk7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5vZGUtY29udGVudC1kZXNjcmlwdGlvblwiKTtcbiAgICAgICAgICAgIG5vZGVDb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgZGVzY3JpcHRpb24ucHVzaChyb3dbZGVzY3JpcHRpb25Db2wuY29sdW1uXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXV0b0Zsb3dDb25zdGFudHMuZGVmYXVsdHMuZmVhdHVyZXMucHJvRmVhdHVyZXMucHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgICYmIHRoaXMuZ3JhcGhPcHRpb25zLm5vZGUuc2hvd05vZGVQcm9ncmVzc2JhclxuICAgICAgICAgICAgJiYgbWVhc3VyZUNvbFxuICAgICAgICAgICAgJiYgbWVhc3VyZUNvbC5jb2x1bW5cbiAgICAgICAgICAgICYmIHJvd1ttZWFzdXJlQ29sLmNvbHVtbl0pIHtcblxuICAgICAgICAgICAgbGV0IHByb2dyZXNzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcm9ncmVzc1wiKTtcbiAgICAgICAgICAgIHByb2dyZXNzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibm9kZS1jb250ZW50LXByb2dyZXNzXCIpO1xuICAgICAgICAgICAgcHJvZ3Jlc3NFbGVtZW50LnN0eWxlLm1heEhlaWdodCA9IHRoaXMuZ3JhcGhPcHRpb25zLm5vZGUuaGVpZ2h0ICogLjMgKyBcInB4XCJcbiAgICAgICAgICAgIHByb2dyZXNzRWxlbWVudC5tYXggPSAxMDA7XG4gICAgICAgICAgICBwcm9ncmVzc0VsZW1lbnQudmFsdWUgPSB0aGlzLmdldE5vZGVNZWFzdXJlKHJvdywgbWVhc3VyZUNvbC5jb2x1bW4pO1xuXG4gICAgICAgICAgICBub2RlQ29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVCb2R5RWxlbWVudC5hcHBlbmRDaGlsZChub2RlQ29udGVudEVsZW1lbnQpO1xuICAgICAgICByZXR1cm4geyBsYWJlbDogbm9kZUJvZHlFbGVtZW50LCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfTtcbiAgICB9XG5cbiAgICBnZXRFZGdlU3R5bGUoZ2VkZ2UpIHtcbiAgICAgICAgcmV0dXJuIGBzdHJva2U6JHt0aGlzLmdyYXBoT3B0aW9ucy5lZGdlLmVkZ2VDb2xvcn07IHN0cm9rZS13aWR0aDoke3RoaXMuZ3JhcGhPcHRpb25zLmVkZ2Uuc2hvd0N1c3RvbVN0cm9rZSAmJiB0aGlzLnNjaGVtYS5FZGdlTWVhc3VyZSA/IGdlZGdlWyd3J10uZGF0YVt0aGlzLnNjaGVtYS5FZGdlTWVhc3VyZS5jb2x1bW5dIDogdGhpcy5ncmFwaE9wdGlvbnMuZWRnZS5zdHJva2VXaWR0aCB8fCAxfXB4O2A7XG4gICAgfVxuXG4gICAgbWFwRGF0YShkYXRhLCBzY2hlbWEpIHtcbiAgICAgICAgbGV0IF9fbm9kZXMgPSB7fSwgX19lZGdlcyA9IHt9O1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ21hcHBlci5tYXBwaW5nIGRhdGEuLi4nKTtcbiAgICAgICAgZGF0YS5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICBsZXQgdXVpZF9zcmMgPSB0aGlzLmlkaWZ5KHJvd1tzY2hlbWEuU291cmNlSWQuY29sdW1uXSlcbiAgICAgICAgICAgICAgICAsIHV1aWRfdGd0ID0gdGhpcy5pZGlmeShyb3dbc2NoZW1hLlRhcmdldElkLmNvbHVtbl0pO1xuICAgICAgICAgICAgLy9zb3VyY2Ugbm9kZVxuICAgICAgICAgICAgbGV0IG5vZGVfc3JjOiBJTm9kZVZpZXdNb2RlbCA9IHRoaXMuZmluZE5vZGUoX19ub2RlcywgdXVpZF9zcmMpXG4gICAgICAgICAgICAgICAgfHwge1xuICAgICAgICAgICAgICAgIHV1aWQ6IHV1aWRfc3JjXG4gICAgICAgICAgICAgICAgLCBpZDogdXVpZF9zcmNcbiAgICAgICAgICAgICAgICAsIHR5cGU6IHJvd1snTm9kZVR5cGUnXSB8fCAnTk9ERSdcbiAgICAgICAgICAgICAgICAsIHRhcmdldFR5cGU6ICdzb3VyY2UnXG4gICAgICAgICAgICAgICAgLCBkYXRhOiByb3dcbiAgICAgICAgICAgICAgICAsIGlkeDogMFxuICAgICAgICAgICAgICAgICwgdXVpZE1ldGFDb2x1bW46IHNjaGVtYS5Tb3VyY2VJZC5jb2x1bW5cbiAgICAgICAgICAgICAgICAsIGhlYWRlcjogbnVsbFxuICAgICAgICAgICAgICAgICwgdXJsOiBudWxsXG4gICAgICAgICAgICAgICAgLCBzZWxlY3Rpb25JZDogdXVpZF9zcmNcbiAgICAgICAgICAgICAgICAsIGhpZ2hsaWdodDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgeyBsYWJlbCwgZGVzY3JpcHRpb24gfSA9IHRoaXMuZ2V0Tm9kZUVsZW1lbnQodXVpZF9zcmMsIHJvdywgeyAnTmFtZSc6IHNjaGVtYS5Tb3VyY2VOYW1lLCAnRGVzY3JpcHRpb24nOiBzY2hlbWEuU291cmNlTmFtZTIsICdNZWFzdXJlJzogc2NoZW1hLlNvdXJjZU1lYXN1cmUsICdVcmwnOiBzY2hlbWEuTm9kZVVybCB9KTtcbiAgICAgICAgICAgIG5vZGVfc3JjLm5vZGVIVE1MID0gbGFiZWw7XG4gICAgICAgICAgICBub2RlX3NyYy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuXG4gICAgICAgICAgICBub2RlX3NyYy5jb2xvciA9IHRoaXMuZ2V0Q29sb3Iocm93LmNvbG9yKTtcbiAgICAgICAgICAgIF9fbm9kZXNbdXVpZF9zcmNdID0gbm9kZV9zcmM7XG4gICAgICAgICAgICAvL3RhcmdldCBub2RlXG4gICAgICAgICAgICBsZXQgbm9kZV90Z3Q6IElOb2RlVmlld01vZGVsID0gdGhpcy5maW5kTm9kZShfX25vZGVzLCB1dWlkX3RndClcbiAgICAgICAgICAgIGlmICghbm9kZV90Z3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBsYWJlbCwgZGVzY3JpcHRpb24gfSA9IHRoaXMuZ2V0Tm9kZUVsZW1lbnQodXVpZF90Z3QsIHJvdywgeyAnTmFtZSc6IHNjaGVtYS5UYXJnZXROYW1lLCAnRGVzY3JpcHRpb24nOiBzY2hlbWEuVGFyZ2V0TmFtZTIsICdNZWFzdXJlJzogc2NoZW1hLlRhcmdldE1lYXN1cmUgfSk7XG4gICAgICAgICAgICAgICAgbm9kZV90Z3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6IHV1aWRfdGd0XG4gICAgICAgICAgICAgICAgICAgICwgaWQ6IHV1aWRfdGd0XG4gICAgICAgICAgICAgICAgICAgICwgdHlwZTogcm93W3NjaGVtYS5Ob2RlVHlwZV0gfHwgJ05PREUnXG4gICAgICAgICAgICAgICAgICAgICwgdGFyZ2V0VHlwZTogJ3RhcmdldCdcbiAgICAgICAgICAgICAgICAgICAgLCBub2RlSFRNTDogbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgLCBjb2xvcjogdGhpcy5nZXRDb2xvcihyb3cuY29sb3IpXG4gICAgICAgICAgICAgICAgICAgICwgZGF0YTogcm93XG4gICAgICAgICAgICAgICAgICAgICwgaWR4OiAwXG4gICAgICAgICAgICAgICAgICAgICwgdXVpZE1ldGFDb2x1bW46IHNjaGVtYS5UYXJnZXRJZC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgLCBoZWFkZXI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgLCB1cmw6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgLCBzZWxlY3Rpb25JZDogdXVpZF90Z3RcbiAgICAgICAgICAgICAgICAgICAgLCBoaWdobGlnaHQ6IGZhbHNlXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX19ub2Rlc1t1dWlkX3RndF0gPSBub2RlX3RndDtcblxuICAgICAgICAgICAgLy9saW5rc1xuICAgICAgICAgICAgX19lZGdlc1t1dWlkX3NyYyArICctJyArIHV1aWRfdGd0XSA9IHsgdjogbm9kZV9zcmMsIHc6IG5vZGVfdGd0LCBsYWJlbDogcm93W3NjaGVtYS5Qcm9jZXNzLmNvbHVtbl0sIGRhdGE6IHJvdyB9O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm5vZGVzID0gT2JqZWN0LnZhbHVlcyhfX25vZGVzKS5tYXAoKG5vZGU6IElOb2RlVmlld01vZGVsLCBpZHgpID0+IHsgbm9kZS5pZHggPSBpZHggKyAxOyByZXR1cm4gbm9kZTsgfSk7XG4gICAgICAgIHRoaXMuZWRnZXMgPSBPYmplY3QudmFsdWVzKF9fZWRnZXMpO1xuXG4gICAgICAgIHJldHVybiB7IG5vZGVzOiB0aGlzLm5vZGVzLCBlZGdlczogdGhpcy5lZGdlcyB9O1xuICAgIH1cbiAgICBnZXRTY2hlbWEoc2NoZW1hLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVtYSA9IHRoaXMuc2NoZW1hIHx8ICh0aGlzLnNjaGVtYSA9IHNjaGVtYSB8fCB0aGlzLmdldEhvc3RTY2hlbWEob3B0aW9ucykpO1xuICAgIH1cbiAgICBnZXRIb3N0U2NoZW1hKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHNjaGVtYSA9IHt9XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZGF0YVZpZXdzWzBdICYmIG9wdGlvbnMuZGF0YVZpZXdzWzBdLnRhYmxlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRhdGFWaWV3c1swXS50YWJsZS5jb2x1bW5zLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoYy5yb2xlcykuZm9yRWFjaChyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtYVtyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hW3IgKyAnMiddID0geyBjb2x1bW46IHIsIHJlZjogYy5kaXNwbGF5TmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hW3JdID0geyBjb2x1bW46IHIsIHJlZjogYy5kaXNwbGF5TmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzY2hlbWFbJ1NvdXJjZU5hbWUnXSA9IHNjaGVtYVsnU291cmNlTmFtZSddIHx8IHNjaGVtYVsnU291cmNlSWQnXTtcbiAgICAgICAgc2NoZW1hWydUYXJnZXROYW1lJ10gPSBzY2hlbWFbJ1RhcmdldE5hbWUnXSB8fCBzY2hlbWFbJ1RhcmdldElkJ107XG4gICAgICAgIHNjaGVtYVsnUHJvY2VzcyddID0gc2NoZW1hWydQcm9jZXNzJ10gfHwgeyBjb2x1bW46IG51bGwsIHJlZjogbnVsbCB9O1xuICAgICAgICBzY2hlbWFbJ1NvdXJjZU1lYXN1cmUnXSA9IHNjaGVtYVsnU291cmNlTWVhc3VyZSddIHx8IHsgY29sdW1uOiBudWxsLCByZWY6IG51bGwgfTtcbiAgICAgICAgc2NoZW1hWydUYXJnZXRNZWFzdXJlJ10gPSBzY2hlbWFbJ1RhcmdldE1lYXN1cmUnXSB8fCB7IGNvbHVtbjogbnVsbCwgcmVmOiBudWxsIH07XG4gICAgICAgIHNjaGVtYVsnTm9kZVVybCddID0gc2NoZW1hWydOb2RlVXJsJ10gfHwgeyBjb2x1bW46IG51bGwsIHJlZjogbnVsbCB9O1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==